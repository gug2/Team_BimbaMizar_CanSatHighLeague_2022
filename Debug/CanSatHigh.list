
CanSatHigh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000774  08010128  08010128  00020128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801089c  0801089c  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801089c  0801089c  0002089c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108a4  080108a4  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108a4  080108a4  000208a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080108a8  080108a8  000208a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080108ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f54  200001fc  08010aa8  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001150  08010aa8  00031150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035f1c  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006813  00000000  00000000  00066148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001fd06  00000000  00000000  0006c95b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bc0  00000000  00000000  0008c668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e60  00000000  00000000  0008e228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027554  00000000  00000000  00090088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000300f6  00000000  00000000  000b75dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc1e4  00000000  00000000  000e76d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001c38b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a10  00000000  00000000  001c390c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801010c 	.word	0x0801010c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	0801010c 	.word	0x0801010c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9ef 	b.w	80010a8 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f883 	bl	8000de4 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f876 	bl	8000de4 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f865 	bl	8000de4 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f857 	bl	8000de4 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b9a4 	b.w	80010a8 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f83c 	bl	8000de4 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_d2lz>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	460d      	mov	r5, r1
 8000d82:	f7ff febb 	bl	8000afc <__aeabi_dcmplt>
 8000d86:	b928      	cbnz	r0, 8000d94 <__aeabi_d2lz+0x1c>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d90:	f000 b80a 	b.w	8000da8 <__aeabi_d2ulz>
 8000d94:	4620      	mov	r0, r4
 8000d96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d9a:	f000 f805 	bl	8000da8 <__aeabi_d2ulz>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop

08000da8 <__aeabi_d2ulz>:
 8000da8:	b5d0      	push	{r4, r6, r7, lr}
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__aeabi_d2ulz+0x34>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	4606      	mov	r6, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	f7ff fc31 	bl	8000618 <__aeabi_dmul>
 8000db6:	f7ff ff07 	bl	8000bc8 <__aeabi_d2uiz>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	f7ff fbb2 	bl	8000524 <__aeabi_ui2d>
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <__aeabi_d2ulz+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f7ff fc28 	bl	8000618 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4639      	mov	r1, r7
 8000dd0:	f7ff fa6a 	bl	80002a8 <__aeabi_dsub>
 8000dd4:	f7ff fef8 	bl	8000bc8 <__aeabi_d2uiz>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	bdd0      	pop	{r4, r6, r7, pc}
 8000ddc:	3df00000 	.word	0x3df00000
 8000de0:	41f00000 	.word	0x41f00000

08000de4 <__udivmoddi4>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	9d08      	ldr	r5, [sp, #32]
 8000dea:	4604      	mov	r4, r0
 8000dec:	468c      	mov	ip, r1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f040 8083 	bne.w	8000efa <__udivmoddi4+0x116>
 8000df4:	428a      	cmp	r2, r1
 8000df6:	4617      	mov	r7, r2
 8000df8:	d947      	bls.n	8000e8a <__udivmoddi4+0xa6>
 8000dfa:	fab2 f282 	clz	r2, r2
 8000dfe:	b142      	cbz	r2, 8000e12 <__udivmoddi4+0x2e>
 8000e00:	f1c2 0020 	rsb	r0, r2, #32
 8000e04:	fa24 f000 	lsr.w	r0, r4, r0
 8000e08:	4091      	lsls	r1, r2
 8000e0a:	4097      	lsls	r7, r2
 8000e0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e10:	4094      	lsls	r4, r2
 8000e12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e16:	0c23      	lsrs	r3, r4, #16
 8000e18:	fbbc f6f8 	udiv	r6, ip, r8
 8000e1c:	fa1f fe87 	uxth.w	lr, r7
 8000e20:	fb08 c116 	mls	r1, r8, r6, ip
 8000e24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e28:	fb06 f10e 	mul.w	r1, r6, lr
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x60>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e36:	f080 8119 	bcs.w	800106c <__udivmoddi4+0x288>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 8116 	bls.w	800106c <__udivmoddi4+0x288>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e58:	45a6      	cmp	lr, r4
 8000e5a:	d909      	bls.n	8000e70 <__udivmoddi4+0x8c>
 8000e5c:	193c      	adds	r4, r7, r4
 8000e5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e62:	f080 8105 	bcs.w	8001070 <__udivmoddi4+0x28c>
 8000e66:	45a6      	cmp	lr, r4
 8000e68:	f240 8102 	bls.w	8001070 <__udivmoddi4+0x28c>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	443c      	add	r4, r7
 8000e70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e74:	eba4 040e 	sub.w	r4, r4, lr
 8000e78:	2600      	movs	r6, #0
 8000e7a:	b11d      	cbz	r5, 8000e84 <__udivmoddi4+0xa0>
 8000e7c:	40d4      	lsrs	r4, r2
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e9c5 4300 	strd	r4, r3, [r5]
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	b902      	cbnz	r2, 8000e8e <__udivmoddi4+0xaa>
 8000e8c:	deff      	udf	#255	; 0xff
 8000e8e:	fab2 f282 	clz	r2, r2
 8000e92:	2a00      	cmp	r2, #0
 8000e94:	d150      	bne.n	8000f38 <__udivmoddi4+0x154>
 8000e96:	1bcb      	subs	r3, r1, r7
 8000e98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9c:	fa1f f887 	uxth.w	r8, r7
 8000ea0:	2601      	movs	r6, #1
 8000ea2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ea6:	0c21      	lsrs	r1, r4, #16
 8000ea8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb08 f30c 	mul.w	r3, r8, ip
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0xe4>
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0xe2>
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	f200 80e9 	bhi.w	8001098 <__udivmoddi4+0x2b4>
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	1ac9      	subs	r1, r1, r3
 8000eca:	b2a3      	uxth	r3, r4
 8000ecc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed8:	fb08 f800 	mul.w	r8, r8, r0
 8000edc:	45a0      	cmp	r8, r4
 8000ede:	d907      	bls.n	8000ef0 <__udivmoddi4+0x10c>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x10a>
 8000ee8:	45a0      	cmp	r8, r4
 8000eea:	f200 80d9 	bhi.w	80010a0 <__udivmoddi4+0x2bc>
 8000eee:	4618      	mov	r0, r3
 8000ef0:	eba4 0408 	sub.w	r4, r4, r8
 8000ef4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef8:	e7bf      	b.n	8000e7a <__udivmoddi4+0x96>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d909      	bls.n	8000f12 <__udivmoddi4+0x12e>
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	f000 80b1 	beq.w	8001066 <__udivmoddi4+0x282>
 8000f04:	2600      	movs	r6, #0
 8000f06:	e9c5 0100 	strd	r0, r1, [r5]
 8000f0a:	4630      	mov	r0, r6
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	fab3 f683 	clz	r6, r3
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	d14a      	bne.n	8000fb0 <__udivmoddi4+0x1cc>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d302      	bcc.n	8000f24 <__udivmoddi4+0x140>
 8000f1e:	4282      	cmp	r2, r0
 8000f20:	f200 80b8 	bhi.w	8001094 <__udivmoddi4+0x2b0>
 8000f24:	1a84      	subs	r4, r0, r2
 8000f26:	eb61 0103 	sbc.w	r1, r1, r3
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	468c      	mov	ip, r1
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	d0a8      	beq.n	8000e84 <__udivmoddi4+0xa0>
 8000f32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f36:	e7a5      	b.n	8000e84 <__udivmoddi4+0xa0>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f40:	4097      	lsls	r7, r2
 8000f42:	fa01 f002 	lsl.w	r0, r1, r2
 8000f46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f4a:	40d9      	lsrs	r1, r3
 8000f4c:	4330      	orrs	r0, r6
 8000f4e:	0c03      	lsrs	r3, r0, #16
 8000f50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f54:	fa1f f887 	uxth.w	r8, r7
 8000f58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f60:	fb06 f108 	mul.w	r1, r6, r8
 8000f64:	4299      	cmp	r1, r3
 8000f66:	fa04 f402 	lsl.w	r4, r4, r2
 8000f6a:	d909      	bls.n	8000f80 <__udivmoddi4+0x19c>
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f72:	f080 808d 	bcs.w	8001090 <__udivmoddi4+0x2ac>
 8000f76:	4299      	cmp	r1, r3
 8000f78:	f240 808a 	bls.w	8001090 <__udivmoddi4+0x2ac>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	443b      	add	r3, r7
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b281      	uxth	r1, r0
 8000f84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f90:	fb00 f308 	mul.w	r3, r0, r8
 8000f94:	428b      	cmp	r3, r1
 8000f96:	d907      	bls.n	8000fa8 <__udivmoddi4+0x1c4>
 8000f98:	1879      	adds	r1, r7, r1
 8000f9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f9e:	d273      	bcs.n	8001088 <__udivmoddi4+0x2a4>
 8000fa0:	428b      	cmp	r3, r1
 8000fa2:	d971      	bls.n	8001088 <__udivmoddi4+0x2a4>
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	4439      	add	r1, r7
 8000fa8:	1acb      	subs	r3, r1, r3
 8000faa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fae:	e778      	b.n	8000ea2 <__udivmoddi4+0xbe>
 8000fb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fbc:	431c      	orrs	r4, r3
 8000fbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fce:	431f      	orrs	r7, r3
 8000fd0:	0c3b      	lsrs	r3, r7, #16
 8000fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd6:	fa1f f884 	uxth.w	r8, r4
 8000fda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fe2:	fb09 fa08 	mul.w	sl, r9, r8
 8000fe6:	458a      	cmp	sl, r1
 8000fe8:	fa02 f206 	lsl.w	r2, r2, r6
 8000fec:	fa00 f306 	lsl.w	r3, r0, r6
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x220>
 8000ff2:	1861      	adds	r1, r4, r1
 8000ff4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff8:	d248      	bcs.n	800108c <__udivmoddi4+0x2a8>
 8000ffa:	458a      	cmp	sl, r1
 8000ffc:	d946      	bls.n	800108c <__udivmoddi4+0x2a8>
 8000ffe:	f1a9 0902 	sub.w	r9, r9, #2
 8001002:	4421      	add	r1, r4
 8001004:	eba1 010a 	sub.w	r1, r1, sl
 8001008:	b2bf      	uxth	r7, r7
 800100a:	fbb1 f0fe 	udiv	r0, r1, lr
 800100e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001012:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001016:	fb00 f808 	mul.w	r8, r0, r8
 800101a:	45b8      	cmp	r8, r7
 800101c:	d907      	bls.n	800102e <__udivmoddi4+0x24a>
 800101e:	19e7      	adds	r7, r4, r7
 8001020:	f100 31ff 	add.w	r1, r0, #4294967295
 8001024:	d22e      	bcs.n	8001084 <__udivmoddi4+0x2a0>
 8001026:	45b8      	cmp	r8, r7
 8001028:	d92c      	bls.n	8001084 <__udivmoddi4+0x2a0>
 800102a:	3802      	subs	r0, #2
 800102c:	4427      	add	r7, r4
 800102e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001032:	eba7 0708 	sub.w	r7, r7, r8
 8001036:	fba0 8902 	umull	r8, r9, r0, r2
 800103a:	454f      	cmp	r7, r9
 800103c:	46c6      	mov	lr, r8
 800103e:	4649      	mov	r1, r9
 8001040:	d31a      	bcc.n	8001078 <__udivmoddi4+0x294>
 8001042:	d017      	beq.n	8001074 <__udivmoddi4+0x290>
 8001044:	b15d      	cbz	r5, 800105e <__udivmoddi4+0x27a>
 8001046:	ebb3 020e 	subs.w	r2, r3, lr
 800104a:	eb67 0701 	sbc.w	r7, r7, r1
 800104e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001052:	40f2      	lsrs	r2, r6
 8001054:	ea4c 0202 	orr.w	r2, ip, r2
 8001058:	40f7      	lsrs	r7, r6
 800105a:	e9c5 2700 	strd	r2, r7, [r5]
 800105e:	2600      	movs	r6, #0
 8001060:	4631      	mov	r1, r6
 8001062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001066:	462e      	mov	r6, r5
 8001068:	4628      	mov	r0, r5
 800106a:	e70b      	b.n	8000e84 <__udivmoddi4+0xa0>
 800106c:	4606      	mov	r6, r0
 800106e:	e6e9      	b.n	8000e44 <__udivmoddi4+0x60>
 8001070:	4618      	mov	r0, r3
 8001072:	e6fd      	b.n	8000e70 <__udivmoddi4+0x8c>
 8001074:	4543      	cmp	r3, r8
 8001076:	d2e5      	bcs.n	8001044 <__udivmoddi4+0x260>
 8001078:	ebb8 0e02 	subs.w	lr, r8, r2
 800107c:	eb69 0104 	sbc.w	r1, r9, r4
 8001080:	3801      	subs	r0, #1
 8001082:	e7df      	b.n	8001044 <__udivmoddi4+0x260>
 8001084:	4608      	mov	r0, r1
 8001086:	e7d2      	b.n	800102e <__udivmoddi4+0x24a>
 8001088:	4660      	mov	r0, ip
 800108a:	e78d      	b.n	8000fa8 <__udivmoddi4+0x1c4>
 800108c:	4681      	mov	r9, r0
 800108e:	e7b9      	b.n	8001004 <__udivmoddi4+0x220>
 8001090:	4666      	mov	r6, ip
 8001092:	e775      	b.n	8000f80 <__udivmoddi4+0x19c>
 8001094:	4630      	mov	r0, r6
 8001096:	e74a      	b.n	8000f2e <__udivmoddi4+0x14a>
 8001098:	f1ac 0c02 	sub.w	ip, ip, #2
 800109c:	4439      	add	r1, r7
 800109e:	e713      	b.n	8000ec8 <__udivmoddi4+0xe4>
 80010a0:	3802      	subs	r0, #2
 80010a2:	443c      	add	r4, r7
 80010a4:	e724      	b.n	8000ef0 <__udivmoddi4+0x10c>
 80010a6:	bf00      	nop

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <Buf_getDatabuf>:
 80010ac:	4800      	ldr	r0, [pc, #0]	; (80010b0 <Buf_getDatabuf+0x4>)
 80010ae:	4770      	bx	lr
 80010b0:	20000218 	.word	0x20000218

080010b4 <Buf_getDatasize>:
 80010b4:	4b01      	ldr	r3, [pc, #4]	; (80010bc <Buf_getDatasize+0x8>)
 80010b6:	8818      	ldrh	r0, [r3, #0]
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000298 	.word	0x20000298

080010c0 <Buf_clear>:
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <Buf_clear+0x24>)
 80010c2:	881a      	ldrh	r2, [r3, #0]
 80010c4:	b14a      	cbz	r2, 80010da <Buf_clear+0x1a>
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <Buf_clear+0x28>)
 80010c8:	3a01      	subs	r2, #1
 80010ca:	1c59      	adds	r1, r3, #1
 80010cc:	fa11 f282 	uxtah	r2, r1, r2
 80010d0:	2100      	movs	r1, #0
 80010d2:	f803 1b01 	strb.w	r1, [r3], #1
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d1fb      	bne.n	80010d2 <Buf_clear+0x12>
 80010da:	4b02      	ldr	r3, [pc, #8]	; (80010e4 <Buf_clear+0x24>)
 80010dc:	2200      	movs	r2, #0
 80010de:	801a      	strh	r2, [r3, #0]
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000298 	.word	0x20000298
 80010e8:	20000218 	.word	0x20000218

080010ec <Buf_push8>:
 80010ec:	4a03      	ldr	r2, [pc, #12]	; (80010fc <Buf_push8+0x10>)
 80010ee:	8813      	ldrh	r3, [r2, #0]
 80010f0:	4903      	ldr	r1, [pc, #12]	; (8001100 <Buf_push8+0x14>)
 80010f2:	54c8      	strb	r0, [r1, r3]
 80010f4:	3301      	adds	r3, #1
 80010f6:	8013      	strh	r3, [r2, #0]
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000298 	.word	0x20000298
 8001100:	20000218 	.word	0x20000218

08001104 <Buf_push16>:
 8001104:	b410      	push	{r4}
 8001106:	4906      	ldr	r1, [pc, #24]	; (8001120 <Buf_push16+0x1c>)
 8001108:	880b      	ldrh	r3, [r1, #0]
 800110a:	4c06      	ldr	r4, [pc, #24]	; (8001124 <Buf_push16+0x20>)
 800110c:	54e0      	strb	r0, [r4, r3]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	b292      	uxth	r2, r2
 8001112:	1200      	asrs	r0, r0, #8
 8001114:	54a0      	strb	r0, [r4, r2]
 8001116:	3302      	adds	r3, #2
 8001118:	800b      	strh	r3, [r1, #0]
 800111a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	20000298 	.word	0x20000298
 8001124:	20000218 	.word	0x20000218

08001128 <Buf_push32>:
 8001128:	b430      	push	{r4, r5}
 800112a:	4c0a      	ldr	r4, [pc, #40]	; (8001154 <Buf_push32+0x2c>)
 800112c:	8823      	ldrh	r3, [r4, #0]
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <Buf_push32+0x30>)
 8001130:	54d0      	strb	r0, [r2, r3]
 8001132:	1c59      	adds	r1, r3, #1
 8001134:	b289      	uxth	r1, r1
 8001136:	0a05      	lsrs	r5, r0, #8
 8001138:	5455      	strb	r5, [r2, r1]
 800113a:	1c99      	adds	r1, r3, #2
 800113c:	b289      	uxth	r1, r1
 800113e:	0c05      	lsrs	r5, r0, #16
 8001140:	5455      	strb	r5, [r2, r1]
 8001142:	1cd9      	adds	r1, r3, #3
 8001144:	b289      	uxth	r1, r1
 8001146:	0e00      	lsrs	r0, r0, #24
 8001148:	5450      	strb	r0, [r2, r1]
 800114a:	3304      	adds	r3, #4
 800114c:	8023      	strh	r3, [r4, #0]
 800114e:	bc30      	pop	{r4, r5}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000298 	.word	0x20000298
 8001158:	20000218 	.word	0x20000218

0800115c <int16_tToFloat>:
 800115c:	ee00 0a10 	vmov	s0, r0
 8001160:	ee07 1a90 	vmov	s15, r1
 8001164:	eeba 0ae8 	vcvt.f32.s32	s0, s0, #15
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001170:	4770      	bx	lr
	...

08001174 <LSM303DTR_EnableCSB>:
	LSM303DTR_EnableCSB();
	HAL_SPI_Transmit(hspi, address_data, 2, LSM303DTR_SPI_TIMEOUT_MS);
	LSM303DTR_DisableCSB();
}

void LSM303DTR_EnableCSB() {
 8001174:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(CS_GPIO_PORT, CS_GPIO_PIN, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <LSM303DTR_EnableCSB+0x14>)
 800117a:	8819      	ldrh	r1, [r3, #0]
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <LSM303DTR_EnableCSB+0x18>)
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	f003 f9ca 	bl	8004518 <HAL_GPIO_WritePin>
}
 8001184:	bd08      	pop	{r3, pc}
 8001186:	bf00      	nop
 8001188:	2000029a 	.word	0x2000029a
 800118c:	2000029c 	.word	0x2000029c

08001190 <LSM303DTR_DisableCSB>:

void LSM303DTR_DisableCSB() {
 8001190:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(CS_GPIO_PORT, CS_GPIO_PIN, GPIO_PIN_SET);
 8001192:	2201      	movs	r2, #1
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <LSM303DTR_DisableCSB+0x14>)
 8001196:	8819      	ldrh	r1, [r3, #0]
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <LSM303DTR_DisableCSB+0x18>)
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f003 f9bc 	bl	8004518 <HAL_GPIO_WritePin>
}
 80011a0:	bd08      	pop	{r3, pc}
 80011a2:	bf00      	nop
 80011a4:	2000029a 	.word	0x2000029a
 80011a8:	2000029c 	.word	0x2000029c

080011ac <LSM303DTR_ReadData>:
void LSM303DTR_ReadData(LSM303DTR_Data_Typedef* data) {
 80011ac:	b570      	push	{r4, r5, r6, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	4605      	mov	r5, r0
	dataReg |= (1 << 6);
 80011b2:	23e8      	movs	r3, #232	; 0xe8
 80011b4:	f88d 3007 	strb.w	r3, [sp, #7]
	LSM303DTR_EnableCSB();
 80011b8:	f7ff ffdc 	bl	8001174 <LSM303DTR_EnableCSB>
	HAL_SPI_Transmit(hspi, &dataReg, 1, LSM303DTR_SPI_TIMEOUT_MS);
 80011bc:	4e33      	ldr	r6, [pc, #204]	; (800128c <LSM303DTR_ReadData+0xe0>)
 80011be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c2:	2201      	movs	r2, #1
 80011c4:	f10d 0107 	add.w	r1, sp, #7
 80011c8:	6830      	ldr	r0, [r6, #0]
 80011ca:	f005 fda8 	bl	8006d1e <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, buf, 6, LSM303DTR_SPI_TIMEOUT_MS);
 80011ce:	4c30      	ldr	r4, [pc, #192]	; (8001290 <LSM303DTR_ReadData+0xe4>)
 80011d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d4:	2206      	movs	r2, #6
 80011d6:	4621      	mov	r1, r4
 80011d8:	6830      	ldr	r0, [r6, #0]
 80011da:	f005 ff82 	bl	80070e2 <HAL_SPI_Receive>
	LSM303DTR_DisableCSB();
 80011de:	f7ff ffd7 	bl	8001190 <LSM303DTR_DisableCSB>
	data->accelerometer.x = (buf[1] << 8) | buf[0];
 80011e2:	7862      	ldrb	r2, [r4, #1]
 80011e4:	7823      	ldrb	r3, [r4, #0]
 80011e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011ea:	802b      	strh	r3, [r5, #0]
	data->accelerometer.y = (buf[3] << 8) | buf[2];
 80011ec:	78e2      	ldrb	r2, [r4, #3]
 80011ee:	78a3      	ldrb	r3, [r4, #2]
 80011f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011f4:	806b      	strh	r3, [r5, #2]
	data->accelerometer.z = (buf[5] << 8) | buf[4];
 80011f6:	7962      	ldrb	r2, [r4, #5]
 80011f8:	7923      	ldrb	r3, [r4, #4]
 80011fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011fe:	80ab      	strh	r3, [r5, #4]
	dataReg |= (1 << 6);
 8001200:	23c8      	movs	r3, #200	; 0xc8
 8001202:	f88d 3007 	strb.w	r3, [sp, #7]
	LSM303DTR_EnableCSB();
 8001206:	f7ff ffb5 	bl	8001174 <LSM303DTR_EnableCSB>
	HAL_SPI_Transmit(hspi, &dataReg, 1, LSM303DTR_SPI_TIMEOUT_MS);
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	2201      	movs	r2, #1
 8001210:	f10d 0107 	add.w	r1, sp, #7
 8001214:	6830      	ldr	r0, [r6, #0]
 8001216:	f005 fd82 	bl	8006d1e <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, buf, 6, LSM303DTR_SPI_TIMEOUT_MS);
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	2206      	movs	r2, #6
 8001220:	4621      	mov	r1, r4
 8001222:	6830      	ldr	r0, [r6, #0]
 8001224:	f005 ff5d 	bl	80070e2 <HAL_SPI_Receive>
	LSM303DTR_DisableCSB();
 8001228:	f7ff ffb2 	bl	8001190 <LSM303DTR_DisableCSB>
	data->compass.x = (buf[1] << 8) | buf[0];
 800122c:	7862      	ldrb	r2, [r4, #1]
 800122e:	7823      	ldrb	r3, [r4, #0]
 8001230:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001234:	80eb      	strh	r3, [r5, #6]
	data->compass.y = (buf[3] << 8) | buf[2];
 8001236:	78e2      	ldrb	r2, [r4, #3]
 8001238:	78a3      	ldrb	r3, [r4, #2]
 800123a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800123e:	812b      	strh	r3, [r5, #8]
	data->compass.z = (buf[5] << 8) | buf[4];
 8001240:	7962      	ldrb	r2, [r4, #5]
 8001242:	7923      	ldrb	r3, [r4, #4]
 8001244:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001248:	816b      	strh	r3, [r5, #10]
	if(thermometerOnBit > 0) {
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <LSM303DTR_ReadData+0xe8>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b90b      	cbnz	r3, 8001254 <LSM303DTR_ReadData+0xa8>
}
 8001250:	b002      	add	sp, #8
 8001252:	bd70      	pop	{r4, r5, r6, pc}
		dataReg |= (1 << 6);
 8001254:	23c5      	movs	r3, #197	; 0xc5
 8001256:	f88d 3007 	strb.w	r3, [sp, #7]
		LSM303DTR_EnableCSB();
 800125a:	f7ff ff8b 	bl	8001174 <LSM303DTR_EnableCSB>
		HAL_SPI_Transmit(hspi, &dataReg, 1, LSM303DTR_SPI_TIMEOUT_MS);
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	2201      	movs	r2, #1
 8001264:	f10d 0107 	add.w	r1, sp, #7
 8001268:	6830      	ldr	r0, [r6, #0]
 800126a:	f005 fd58 	bl	8006d1e <HAL_SPI_Transmit>
		HAL_SPI_Receive(hspi, buf, 2, LSM303DTR_SPI_TIMEOUT_MS);
 800126e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001272:	2202      	movs	r2, #2
 8001274:	4621      	mov	r1, r4
 8001276:	6830      	ldr	r0, [r6, #0]
 8001278:	f005 ff33 	bl	80070e2 <HAL_SPI_Receive>
		LSM303DTR_DisableCSB();
 800127c:	f7ff ff88 	bl	8001190 <LSM303DTR_DisableCSB>
		data->temperature = (buf[1] << 8) | buf[0];
 8001280:	7862      	ldrb	r2, [r4, #1]
 8001282:	7823      	ldrb	r3, [r4, #0]
 8001284:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001288:	81ab      	strh	r3, [r5, #12]
}
 800128a:	e7e1      	b.n	8001250 <LSM303DTR_ReadData+0xa4>
 800128c:	200002ac 	.word	0x200002ac
 8001290:	200002a4 	.word	0x200002a4
 8001294:	200002b0 	.word	0x200002b0

08001298 <LSM303DTR_ReadRegister>:
uint8_t LSM303DTR_ReadRegister(uint8_t address) {
 8001298:	b510      	push	{r4, lr}
 800129a:	b084      	sub	sp, #16
	uint8_t registerData = 0x00;
 800129c:	2300      	movs	r3, #0
 800129e:	f88d 300f 	strb.w	r3, [sp, #15]
	address |= 0x80;
 80012a2:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80012a6:	f88d 0007 	strb.w	r0, [sp, #7]
	LSM303DTR_EnableCSB();
 80012aa:	f7ff ff63 	bl	8001174 <LSM303DTR_EnableCSB>
	HAL_SPI_Transmit(hspi, &address, 1, LSM303DTR_SPI_TIMEOUT_MS);
 80012ae:	4c0b      	ldr	r4, [pc, #44]	; (80012dc <LSM303DTR_ReadRegister+0x44>)
 80012b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b4:	2201      	movs	r2, #1
 80012b6:	f10d 0107 	add.w	r1, sp, #7
 80012ba:	6820      	ldr	r0, [r4, #0]
 80012bc:	f005 fd2f 	bl	8006d1e <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &registerData, 1, LSM303DTR_SPI_TIMEOUT_MS);
 80012c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c4:	2201      	movs	r2, #1
 80012c6:	f10d 010f 	add.w	r1, sp, #15
 80012ca:	6820      	ldr	r0, [r4, #0]
 80012cc:	f005 ff09 	bl	80070e2 <HAL_SPI_Receive>
	LSM303DTR_DisableCSB();
 80012d0:	f7ff ff5e 	bl	8001190 <LSM303DTR_DisableCSB>
}
 80012d4:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80012d8:	b004      	add	sp, #16
 80012da:	bd10      	pop	{r4, pc}
 80012dc:	200002ac 	.word	0x200002ac

080012e0 <LSM303DTR_ReadID>:
uint8_t LSM303DTR_ReadID() {
 80012e0:	b508      	push	{r3, lr}
	uint8_t deviceID = LSM303DTR_ReadRegister(0x0F);
 80012e2:	200f      	movs	r0, #15
 80012e4:	f7ff ffd8 	bl	8001298 <LSM303DTR_ReadRegister>
}
 80012e8:	bd08      	pop	{r3, pc}
	...

080012ec <LSM303DTR_Init>:
LSM303DTR_Status LSM303DTR_Init(SPI_HandleTypeDef* hspix, GPIO_TypeDef* gpioPort, uint16_t gpioPin) {
 80012ec:	b508      	push	{r3, lr}
	hspi = hspix;
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <LSM303DTR_Init+0x28>)
 80012f0:	6018      	str	r0, [r3, #0]
	CS_GPIO_PORT = gpioPort;
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <LSM303DTR_Init+0x2c>)
 80012f4:	6019      	str	r1, [r3, #0]
	CS_GPIO_PIN = gpioPin;
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <LSM303DTR_Init+0x30>)
 80012f8:	801a      	strh	r2, [r3, #0]
	HAL_Delay(50);
 80012fa:	2032      	movs	r0, #50	; 0x32
 80012fc:	f002 fc42 	bl	8003b84 <HAL_Delay>
	ID_303 = LSM303DTR_ReadID();
 8001300:	f7ff ffee 	bl	80012e0 <LSM303DTR_ReadID>
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <LSM303DTR_Init+0x34>)
 8001306:	7018      	strb	r0, [r3, #0]
}
 8001308:	2849      	cmp	r0, #73	; 0x49
 800130a:	bf14      	ite	ne
 800130c:	2000      	movne	r0, #0
 800130e:	2001      	moveq	r0, #1
 8001310:	bd08      	pop	{r3, pc}
 8001312:	bf00      	nop
 8001314:	200002ac 	.word	0x200002ac
 8001318:	2000029c 	.word	0x2000029c
 800131c:	2000029a 	.word	0x2000029a
 8001320:	20000968 	.word	0x20000968

08001324 <LSM303DTR_WriteTo>:
void LSM303DTR_WriteTo(uint8_t address, uint8_t data) {
 8001324:	b510      	push	{r4, lr}
	address_data[0] = address;
 8001326:	4c08      	ldr	r4, [pc, #32]	; (8001348 <LSM303DTR_WriteTo+0x24>)
 8001328:	7020      	strb	r0, [r4, #0]
	address_data[1] = data;
 800132a:	7061      	strb	r1, [r4, #1]
	LSM303DTR_EnableCSB();
 800132c:	f7ff ff22 	bl	8001174 <LSM303DTR_EnableCSB>
	HAL_SPI_Transmit(hspi, address_data, 2, LSM303DTR_SPI_TIMEOUT_MS);
 8001330:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001334:	2202      	movs	r2, #2
 8001336:	4621      	mov	r1, r4
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <LSM303DTR_WriteTo+0x28>)
 800133a:	6800      	ldr	r0, [r0, #0]
 800133c:	f005 fcef 	bl	8006d1e <HAL_SPI_Transmit>
	LSM303DTR_DisableCSB();
 8001340:	f7ff ff26 	bl	8001190 <LSM303DTR_DisableCSB>
}
 8001344:	bd10      	pop	{r4, pc}
 8001346:	bf00      	nop
 8001348:	200002a0 	.word	0x200002a0
 800134c:	200002ac 	.word	0x200002ac

08001350 <LSM303DTR_SetAccelerometerODR>:
void LSM303DTR_SetAccelerometerODR(LSM303DTR_Odr odr) {
 8001350:	b508      	push	{r3, lr}
	LSM303DTR_WriteTo(0x20, 0b00000111 | (odr << 4));
 8001352:	0101      	lsls	r1, r0, #4
 8001354:	f041 0107 	orr.w	r1, r1, #7
 8001358:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 800135c:	2020      	movs	r0, #32
 800135e:	f7ff ffe1 	bl	8001324 <LSM303DTR_WriteTo>
}
 8001362:	bd08      	pop	{r3, pc}

08001364 <LSM303DTR_SetCompassODR>:
void LSM303DTR_SetCompassODR(LSM303DTR_Odr odr) {
 8001364:	b508      	push	{r3, lr}
	if(odr == LSM303DTR_ODR_POWER_DOWN || odr > LSM303DTR_ODR_100HZ) return;
 8001366:	1e43      	subs	r3, r0, #1
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b05      	cmp	r3, #5
 800136c:	d900      	bls.n	8001370 <LSM303DTR_SetCompassODR+0xc>
}
 800136e:	bd08      	pop	{r3, pc}
	LSM303DTR_WriteTo(0x24, 0x00 | (thermometerOnBit << 7) | ((odr-1) << 2));
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <LSM303DTR_SetCompassODR+0x24>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	1e41      	subs	r1, r0, #1
 8001376:	0089      	lsls	r1, r1, #2
 8001378:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
 800137c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8001380:	2024      	movs	r0, #36	; 0x24
 8001382:	f7ff ffcf 	bl	8001324 <LSM303DTR_WriteTo>
 8001386:	e7f2      	b.n	800136e <LSM303DTR_SetCompassODR+0xa>
 8001388:	200002b0 	.word	0x200002b0

0800138c <LSM303DTR_SetAccelerometerFS>:
void LSM303DTR_SetAccelerometerFS(LSM303DTR_Fullscale fs) {
 800138c:	b508      	push	{r3, lr}
	LSM303DTR_WriteTo(0x21, 0x00 | (fs << 3));
 800138e:	00c1      	lsls	r1, r0, #3
 8001390:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8001394:	2021      	movs	r0, #33	; 0x21
 8001396:	f7ff ffc5 	bl	8001324 <LSM303DTR_WriteTo>
}
 800139a:	bd08      	pop	{r3, pc}

0800139c <LSM303DTR_SetCompassFS>:
void LSM303DTR_SetCompassFS(LSM303DTR_Compass_Fullscale fs) {
 800139c:	b508      	push	{r3, lr}
	LSM303DTR_WriteTo(0x25, 0x00 | (fs << 5));
 800139e:	0141      	lsls	r1, r0, #5
 80013a0:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
 80013a4:	2025      	movs	r0, #37	; 0x25
 80013a6:	f7ff ffbd 	bl	8001324 <LSM303DTR_WriteTo>
}
 80013aa:	bd08      	pop	{r3, pc}

080013ac <LSM303DTR_SetCompassMode>:
void LSM303DTR_SetCompassMode(LSM303DTR_Compass_Mode mode) {
 80013ac:	b508      	push	{r3, lr}
 80013ae:	4601      	mov	r1, r0
	LSM303DTR_WriteTo(0x26, 0x00 | mode);
 80013b0:	2026      	movs	r0, #38	; 0x26
 80013b2:	f7ff ffb7 	bl	8001324 <LSM303DTR_WriteTo>
}
 80013b6:	bd08      	pop	{r3, pc}

080013b8 <LSM6DSLTR_EnableCSB>:
	LSM6DSLTR_EnableCSB();
	HAL_SPI_Transmit(hspi, address_data, 2, LSM6DSLTR_SPI_TIMEOUT_MS);
	LSM6DSLTR_DisableCSB();
}

void LSM6DSLTR_EnableCSB() {
 80013b8:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(CS_GPIO_PORT, CS_GPIO_PIN, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <LSM6DSLTR_EnableCSB+0x14>)
 80013be:	8819      	ldrh	r1, [r3, #0]
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <LSM6DSLTR_EnableCSB+0x18>)
 80013c2:	6818      	ldr	r0, [r3, #0]
 80013c4:	f003 f8a8 	bl	8004518 <HAL_GPIO_WritePin>
}
 80013c8:	bd08      	pop	{r3, pc}
 80013ca:	bf00      	nop
 80013cc:	200002b2 	.word	0x200002b2
 80013d0:	200002b4 	.word	0x200002b4

080013d4 <LSM6DSLTR_DisableCSB>:

void LSM6DSLTR_DisableCSB() {
 80013d4:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(CS_GPIO_PORT, CS_GPIO_PIN, GPIO_PIN_SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <LSM6DSLTR_DisableCSB+0x14>)
 80013da:	8819      	ldrh	r1, [r3, #0]
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <LSM6DSLTR_DisableCSB+0x18>)
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	f003 f89a 	bl	8004518 <HAL_GPIO_WritePin>
}
 80013e4:	bd08      	pop	{r3, pc}
 80013e6:	bf00      	nop
 80013e8:	200002b2 	.word	0x200002b2
 80013ec:	200002b4 	.word	0x200002b4

080013f0 <LSM6DSLTR_ReadData>:
void LSM6DSLTR_ReadData(LSM6DSLTR_Data_Typedef* data) {
 80013f0:	b570      	push	{r4, r5, r6, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	4605      	mov	r5, r0
	uint8_t dataReg = 0x20 | 0x80;
 80013f6:	23a0      	movs	r3, #160	; 0xa0
 80013f8:	f88d 3007 	strb.w	r3, [sp, #7]
	LSM6DSLTR_EnableCSB();
 80013fc:	f7ff ffdc 	bl	80013b8 <LSM6DSLTR_EnableCSB>
	HAL_SPI_Transmit(hspi, &dataReg, 1, LSM6DSLTR_SPI_TIMEOUT_MS);
 8001400:	4e1b      	ldr	r6, [pc, #108]	; (8001470 <LSM6DSLTR_ReadData+0x80>)
 8001402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001406:	2201      	movs	r2, #1
 8001408:	f10d 0107 	add.w	r1, sp, #7
 800140c:	6830      	ldr	r0, [r6, #0]
 800140e:	f005 fc86 	bl	8006d1e <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, buf, 14, LSM6DSLTR_SPI_TIMEOUT_MS);
 8001412:	4c18      	ldr	r4, [pc, #96]	; (8001474 <LSM6DSLTR_ReadData+0x84>)
 8001414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001418:	220e      	movs	r2, #14
 800141a:	4621      	mov	r1, r4
 800141c:	6830      	ldr	r0, [r6, #0]
 800141e:	f005 fe60 	bl	80070e2 <HAL_SPI_Receive>
	LSM6DSLTR_DisableCSB();
 8001422:	f7ff ffd7 	bl	80013d4 <LSM6DSLTR_DisableCSB>
	data->temperature = (buf[1] << 8) | buf[0];
 8001426:	7862      	ldrb	r2, [r4, #1]
 8001428:	7823      	ldrb	r3, [r4, #0]
 800142a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800142e:	81ab      	strh	r3, [r5, #12]
	data->gyroscope.x = (buf[3] << 8) | buf[2];
 8001430:	78e2      	ldrb	r2, [r4, #3]
 8001432:	78a3      	ldrb	r3, [r4, #2]
 8001434:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001438:	80eb      	strh	r3, [r5, #6]
	data->gyroscope.y = (buf[5] << 8) | buf[4];
 800143a:	7962      	ldrb	r2, [r4, #5]
 800143c:	7923      	ldrb	r3, [r4, #4]
 800143e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001442:	812b      	strh	r3, [r5, #8]
	data->gyroscope.z = (buf[7] << 8) | buf[6];
 8001444:	79e2      	ldrb	r2, [r4, #7]
 8001446:	79a3      	ldrb	r3, [r4, #6]
 8001448:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800144c:	816b      	strh	r3, [r5, #10]
	data->accelerometer.x = (buf[9] << 8) | buf[8];
 800144e:	7a62      	ldrb	r2, [r4, #9]
 8001450:	7a23      	ldrb	r3, [r4, #8]
 8001452:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001456:	802b      	strh	r3, [r5, #0]
	data->accelerometer.y = (buf[11] << 8) | buf[10];
 8001458:	7ae2      	ldrb	r2, [r4, #11]
 800145a:	7aa3      	ldrb	r3, [r4, #10]
 800145c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001460:	806b      	strh	r3, [r5, #2]
	data->accelerometer.z = (buf[13] << 8) | buf[12];
 8001462:	7b62      	ldrb	r2, [r4, #13]
 8001464:	7b23      	ldrb	r3, [r4, #12]
 8001466:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800146a:	80ab      	strh	r3, [r5, #4]
}
 800146c:	b002      	add	sp, #8
 800146e:	bd70      	pop	{r4, r5, r6, pc}
 8001470:	200002cc 	.word	0x200002cc
 8001474:	200002bc 	.word	0x200002bc

08001478 <LSM6DSLTR_ReadRegister>:
uint8_t LSM6DSLTR_ReadRegister(uint8_t address) {
 8001478:	b510      	push	{r4, lr}
 800147a:	b084      	sub	sp, #16
	uint8_t registerData = 0x00;
 800147c:	2300      	movs	r3, #0
 800147e:	f88d 300f 	strb.w	r3, [sp, #15]
	address |= 0x80;
 8001482:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8001486:	f88d 0007 	strb.w	r0, [sp, #7]
	LSM6DSLTR_EnableCSB();
 800148a:	f7ff ff95 	bl	80013b8 <LSM6DSLTR_EnableCSB>
	HAL_SPI_Transmit(hspi, &address, 1, LSM6DSLTR_SPI_TIMEOUT_MS);
 800148e:	4c0b      	ldr	r4, [pc, #44]	; (80014bc <LSM6DSLTR_ReadRegister+0x44>)
 8001490:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001494:	2201      	movs	r2, #1
 8001496:	f10d 0107 	add.w	r1, sp, #7
 800149a:	6820      	ldr	r0, [r4, #0]
 800149c:	f005 fc3f 	bl	8006d1e <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &registerData, 1, LSM6DSLTR_SPI_TIMEOUT_MS);
 80014a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a4:	2201      	movs	r2, #1
 80014a6:	f10d 010f 	add.w	r1, sp, #15
 80014aa:	6820      	ldr	r0, [r4, #0]
 80014ac:	f005 fe19 	bl	80070e2 <HAL_SPI_Receive>
	LSM6DSLTR_DisableCSB();
 80014b0:	f7ff ff90 	bl	80013d4 <LSM6DSLTR_DisableCSB>
}
 80014b4:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80014b8:	b004      	add	sp, #16
 80014ba:	bd10      	pop	{r4, pc}
 80014bc:	200002cc 	.word	0x200002cc

080014c0 <LSM6DSLTR_ReadID>:
uint8_t LSM6DSLTR_ReadID() {
 80014c0:	b508      	push	{r3, lr}
	uint8_t deviceID = LSM6DSLTR_ReadRegister(0x0F);
 80014c2:	200f      	movs	r0, #15
 80014c4:	f7ff ffd8 	bl	8001478 <LSM6DSLTR_ReadRegister>
}
 80014c8:	bd08      	pop	{r3, pc}
	...

080014cc <LSM6DSLTR_Init>:
LSM6DSLTR_Status LSM6DSLTR_Init(SPI_HandleTypeDef* hspix, GPIO_TypeDef* gpioPort, uint16_t gpioPin) {
 80014cc:	b508      	push	{r3, lr}
	hspi = hspix;
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <LSM6DSLTR_Init+0x24>)
 80014d0:	6018      	str	r0, [r3, #0]
	CS_GPIO_PORT = gpioPort;
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <LSM6DSLTR_Init+0x28>)
 80014d4:	6019      	str	r1, [r3, #0]
	CS_GPIO_PIN = gpioPin;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <LSM6DSLTR_Init+0x2c>)
 80014d8:	801a      	strh	r2, [r3, #0]
	HAL_Delay(50);
 80014da:	2032      	movs	r0, #50	; 0x32
 80014dc:	f002 fb52 	bl	8003b84 <HAL_Delay>
	if(LSM6DSLTR_ReadID() != 0x6A) return LSM6DSLTR_DEVICE_ERROR;
 80014e0:	f7ff ffee 	bl	80014c0 <LSM6DSLTR_ReadID>
}
 80014e4:	286a      	cmp	r0, #106	; 0x6a
 80014e6:	bf14      	ite	ne
 80014e8:	2000      	movne	r0, #0
 80014ea:	2001      	moveq	r0, #1
 80014ec:	bd08      	pop	{r3, pc}
 80014ee:	bf00      	nop
 80014f0:	200002cc 	.word	0x200002cc
 80014f4:	200002b4 	.word	0x200002b4
 80014f8:	200002b2 	.word	0x200002b2

080014fc <LSM6DSLTR_WriteTo>:
void LSM6DSLTR_WriteTo(uint8_t address, uint8_t data) {
 80014fc:	b510      	push	{r4, lr}
	address_data[0] = address;
 80014fe:	4c08      	ldr	r4, [pc, #32]	; (8001520 <LSM6DSLTR_WriteTo+0x24>)
 8001500:	7020      	strb	r0, [r4, #0]
	address_data[1] = data;
 8001502:	7061      	strb	r1, [r4, #1]
	LSM6DSLTR_EnableCSB();
 8001504:	f7ff ff58 	bl	80013b8 <LSM6DSLTR_EnableCSB>
	HAL_SPI_Transmit(hspi, address_data, 2, LSM6DSLTR_SPI_TIMEOUT_MS);
 8001508:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150c:	2202      	movs	r2, #2
 800150e:	4621      	mov	r1, r4
 8001510:	4804      	ldr	r0, [pc, #16]	; (8001524 <LSM6DSLTR_WriteTo+0x28>)
 8001512:	6800      	ldr	r0, [r0, #0]
 8001514:	f005 fc03 	bl	8006d1e <HAL_SPI_Transmit>
	LSM6DSLTR_DisableCSB();
 8001518:	f7ff ff5c 	bl	80013d4 <LSM6DSLTR_DisableCSB>
}
 800151c:	bd10      	pop	{r4, pc}
 800151e:	bf00      	nop
 8001520:	200002b8 	.word	0x200002b8
 8001524:	200002cc 	.word	0x200002cc

08001528 <LSM6DSLTR_SetAccelerometerODR_FS>:
void LSM6DSLTR_SetAccelerometerODR_FS(LSM6DSLTR_ODR odr, LSM6DSLTR_Accelerometer_Fullscale fs) {
 8001528:	b508      	push	{r3, lr}
	LSM6DSLTR_WriteTo(0x10, 0x00 | (odr << 4) | (fs << 2));
 800152a:	0089      	lsls	r1, r1, #2
 800152c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8001530:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8001534:	2010      	movs	r0, #16
 8001536:	f7ff ffe1 	bl	80014fc <LSM6DSLTR_WriteTo>
}
 800153a:	bd08      	pop	{r3, pc}

0800153c <LSM6DSLTR_SetGyroscopeODR_FS>:
	if(odr > LSM6DSLTR_ODR_6660HZ) return;
 800153c:	280a      	cmp	r0, #10
 800153e:	d900      	bls.n	8001542 <LSM6DSLTR_SetGyroscopeODR_FS+0x6>
 8001540:	4770      	bx	lr
void LSM6DSLTR_SetGyroscopeODR_FS(LSM6DSLTR_ODR odr, LSM6DSLTR_Gyroscope_Fullscale fs, LSM6DSLTR_Settings_FS_125DPS flag) {
 8001542:	b508      	push	{r3, lr}
	LSM6DSLTR_WriteTo(0x11, 0x00 | (odr << 4) | (fs << 2) | (flag << 1));
 8001544:	0052      	lsls	r2, r2, #1
 8001546:	ea42 0181 	orr.w	r1, r2, r1, lsl #2
 800154a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800154e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8001552:	2011      	movs	r0, #17
 8001554:	f7ff ffd2 	bl	80014fc <LSM6DSLTR_WriteTo>
}
 8001558:	bd08      	pop	{r3, pc}

0800155a <write_register>:
  return value;
}

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 800155a:	b510      	push	{r4, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	4604      	mov	r4, r0
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8001560:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001564:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8001568:	f8ad 1006 	strh.w	r1, [sp, #6]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	8901      	ldrh	r1, [r0, #8]
 8001570:	6840      	ldr	r0, [r0, #4]
 8001572:	f002 ffd1 	bl	8004518 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8001576:	68e3      	ldr	r3, [r4, #12]
 8001578:	2202      	movs	r2, #2
 800157a:	f10d 0106 	add.w	r1, sp, #6
 800157e:	6820      	ldr	r0, [r4, #0]
 8001580:	f005 fbcd 	bl	8006d1e <HAL_SPI_Transmit>
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001584:	2201      	movs	r2, #1
 8001586:	8921      	ldrh	r1, [r4, #8]
 8001588:	6860      	ldr	r0, [r4, #4]
 800158a:	f002 ffc5 	bl	8004518 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 800158e:	b002      	add	sp, #8
 8001590:	bd10      	pop	{r4, pc}

08001592 <read_register>:
{
 8001592:	b510      	push	{r4, lr}
 8001594:	b084      	sub	sp, #16
 8001596:	4604      	mov	r4, r0
  uint8_t value = 0;
 8001598:	2200      	movs	r2, #0
 800159a:	f88d 200f 	strb.w	r2, [sp, #15]
  CLEAR_BIT(address, BIT_7);
 800159e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80015a2:	f88d 1007 	strb.w	r1, [sp, #7]
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80015a6:	8901      	ldrh	r1, [r0, #8]
 80015a8:	6840      	ldr	r0, [r0, #4]
 80015aa:	f002 ffb5 	bl	8004518 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80015ae:	68e3      	ldr	r3, [r4, #12]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f10d 0107 	add.w	r1, sp, #7
 80015b6:	6820      	ldr	r0, [r4, #0]
 80015b8:	f005 fbb1 	bl	8006d1e <HAL_SPI_Transmit>
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 80015bc:	68e3      	ldr	r3, [r4, #12]
 80015be:	2201      	movs	r2, #1
 80015c0:	f10d 010f 	add.w	r1, sp, #15
 80015c4:	6820      	ldr	r0, [r4, #0]
 80015c6:	f005 fd8c 	bl	80070e2 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80015ca:	2201      	movs	r2, #1
 80015cc:	8921      	ldrh	r1, [r4, #8]
 80015ce:	6860      	ldr	r0, [r4, #4]
 80015d0:	f002 ffa2 	bl	8004518 <HAL_GPIO_WritePin>
}
 80015d4:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80015d8:	b004      	add	sp, #16
 80015da:	bd10      	pop	{r4, pc}

080015dc <set_low_data_rate_optimization>:

  write_register(lora, REG_OCP, OCP_ON | value);
}

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 80015dc:	b538      	push	{r3, r4, r5, lr}
 80015de:	4604      	mov	r4, r0
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 80015e0:	211d      	movs	r1, #29
 80015e2:	f7ff ffd6 	bl	8001592 <read_register>
 80015e6:	4605      	mov	r5, r0
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 80015e8:	211e      	movs	r1, #30
 80015ea:	4620      	mov	r0, r4
 80015ec:	f7ff ffd1 	bl	8001592 <read_register>

  uint8_t  mc3 = MC3_AGCAUTO;

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 80015f0:	f3c0 1007 	ubfx	r0, r0, #4, #8
 80015f4:	280a      	cmp	r0, #10
 80015f6:	d90a      	bls.n	800160e <set_low_data_rate_optimization+0x32>
 80015f8:	f3c5 1007 	ubfx	r0, r5, #4, #8
    mc3 |= MC3_MOBILE_NODE;
 80015fc:	2807      	cmp	r0, #7
 80015fe:	bf14      	ite	ne
 8001600:	2204      	movne	r2, #4
 8001602:	220c      	moveq	r2, #12
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8001604:	2126      	movs	r1, #38	; 0x26
 8001606:	4620      	mov	r0, r4
 8001608:	f7ff ffa7 	bl	800155a <write_register>
}
 800160c:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t  mc3 = MC3_AGCAUTO;
 800160e:	2204      	movs	r2, #4
 8001610:	e7f8      	b.n	8001604 <set_low_data_rate_optimization+0x28>

08001612 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8001612:	b508      	push	{r3, lr}
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8001614:	2280      	movs	r2, #128	; 0x80
 8001616:	2101      	movs	r1, #1
 8001618:	f7ff ff9f 	bl	800155a <write_register>
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
}
 800161c:	bd08      	pop	{r3, pc}

0800161e <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 800161e:	b508      	push	{r3, lr}
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8001620:	2281      	movs	r2, #129	; 0x81
 8001622:	2101      	movs	r1, #1
 8001624:	f7ff ff99 	bl	800155a <write_register>
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
}
 8001628:	bd08      	pop	{r3, pc}

0800162a <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 800162a:	b510      	push	{r4, lr}
 800162c:	4604      	mov	r4, r0
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 800162e:	211d      	movs	r1, #29
 8001630:	f7ff ffaf 	bl	8001592 <read_register>
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8001634:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 8001638:	211d      	movs	r1, #29
 800163a:	4620      	mov	r0, r4
 800163c:	f7ff ff8d 	bl	800155a <write_register>
}
 8001640:	bd10      	pop	{r4, pc}

08001642 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8001642:	b538      	push	{r3, r4, r5, lr}
 8001644:	4605      	mov	r5, r0
 8001646:	460c      	mov	r4, r1
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8001648:	6943      	ldr	r3, [r0, #20]
 800164a:	b1c3      	cbz	r3, 800167e <lora_set_tx_power+0x3c>
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
  } else {
    // PA BOOST pin, from datasheet (Power Amplifier):
    //   Pout=17-(15-OutputPower)
    assert_param(level <= 20 && level >= 2);
    if (level > 20) {
 800164c:	2914      	cmp	r1, #20
 800164e:	d81f      	bhi.n	8001690 <lora_set_tx_power+0x4e>
      level = 20;
    }
    if (level < 2) {
 8001650:	2901      	cmp	r1, #1
 8001652:	d92b      	bls.n	80016ac <lora_set_tx_power+0x6a>
      level = 2;
    }
    // Module power consumption from datasheet:
    // RFOP = +20 dBm, on PA_BOOST -> 120mA
    // RFOP = +17 dBm, on PA_BOOST -> 87mA
    if (level > 17) {
 8001654:	2911      	cmp	r1, #17
 8001656:	d81c      	bhi.n	8001692 <lora_set_tx_power+0x50>
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
      // Limit maximum current to 140mA (+20mA to datasheet value to be sure)
      set_OCP(lora, 140);
    } else {
      // Enable half power mode (default)
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 8001658:	2284      	movs	r2, #132	; 0x84
 800165a:	214d      	movs	r1, #77	; 0x4d
 800165c:	4628      	mov	r0, r5
 800165e:	f7ff ff7c 	bl	800155a <write_register>
  write_register(lora, REG_OCP, OCP_ON | value);
 8001662:	222a      	movs	r2, #42	; 0x2a
 8001664:	210b      	movs	r1, #11
 8001666:	4628      	mov	r0, r5
 8001668:	f7ff ff77 	bl	800155a <write_register>
      // Limit maximum current to 97mA (+10mA to datasheet value to be sure)
      set_OCP(lora, 97);
    }
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
 800166c:	1ea2      	subs	r2, r4, #2
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 800166e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	2109      	movs	r1, #9
 8001676:	4628      	mov	r0, r5
 8001678:	f7ff ff6f 	bl	800155a <write_register>
  }
}
 800167c:	bd38      	pop	{r3, r4, r5, pc}
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 800167e:	290f      	cmp	r1, #15
 8001680:	bf28      	it	cs
 8001682:	240f      	movcs	r4, #15
 8001684:	f044 0270 	orr.w	r2, r4, #112	; 0x70
 8001688:	2109      	movs	r1, #9
 800168a:	f7ff ff66 	bl	800155a <write_register>
 800168e:	e7f5      	b.n	800167c <lora_set_tx_power+0x3a>
      level = 20;
 8001690:	2414      	movs	r4, #20
      level -= 3;
 8001692:	3c03      	subs	r4, #3
 8001694:	b2e4      	uxtb	r4, r4
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8001696:	2287      	movs	r2, #135	; 0x87
 8001698:	214d      	movs	r1, #77	; 0x4d
 800169a:	4628      	mov	r0, r5
 800169c:	f7ff ff5d 	bl	800155a <write_register>
  write_register(lora, REG_OCP, OCP_ON | value);
 80016a0:	2231      	movs	r2, #49	; 0x31
 80016a2:	210b      	movs	r1, #11
 80016a4:	4628      	mov	r0, r5
 80016a6:	f7ff ff58 	bl	800155a <write_register>
}
 80016aa:	e7df      	b.n	800166c <lora_set_tx_power+0x2a>
      level = 2;
 80016ac:	2402      	movs	r4, #2
 80016ae:	e7d3      	b.n	8001658 <lora_set_tx_power+0x16>

080016b0 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 80016b0:	b538      	push	{r3, r4, r5, lr}
 80016b2:	4604      	mov	r4, r0
 80016b4:	4615      	mov	r5, r2
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 80016b6:	04d9      	lsls	r1, r3, #19
 80016b8:	4a0c      	ldr	r2, [pc, #48]	; (80016ec <lora_set_frequency+0x3c>)
 80016ba:	2300      	movs	r3, #0
 80016bc:	04e8      	lsls	r0, r5, #19
 80016be:	ea41 3155 	orr.w	r1, r1, r5, lsr #13
 80016c2:	f7ff fb41 	bl	8000d48 <__aeabi_uldivmod>
 80016c6:	4605      	mov	r5, r0

  write_register(lora, REG_FRF_MSB, frf >> 16);
 80016c8:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80016cc:	2106      	movs	r1, #6
 80016ce:	4620      	mov	r0, r4
 80016d0:	f7ff ff43 	bl	800155a <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 80016d4:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80016d8:	2107      	movs	r1, #7
 80016da:	4620      	mov	r0, r4
 80016dc:	f7ff ff3d 	bl	800155a <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80016e0:	b2ea      	uxtb	r2, r5
 80016e2:	2108      	movs	r1, #8
 80016e4:	4620      	mov	r0, r4
 80016e6:	f7ff ff38 	bl	800155a <write_register>
}
 80016ea:	bd38      	pop	{r3, r4, r5, pc}
 80016ec:	01e84800 	.word	0x01e84800

080016f0 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 80016f0:	b538      	push	{r3, r4, r5, lr}
 80016f2:	4604      	mov	r4, r0
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 80016f4:	2905      	cmp	r1, #5
 80016f6:	d91d      	bls.n	8001734 <lora_set_spreading_factor+0x44>
 80016f8:	460d      	mov	r5, r1
    sf = 6;
  } else if (sf > 12) {
 80016fa:	290c      	cmp	r1, #12
 80016fc:	d826      	bhi.n	800174c <lora_set_spreading_factor+0x5c>
    sf = 12;
  }

  if (sf == 6) {
 80016fe:	2906      	cmp	r1, #6
 8001700:	d018      	beq.n	8001734 <lora_set_spreading_factor+0x44>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8001702:	22c3      	movs	r2, #195	; 0xc3
 8001704:	2131      	movs	r1, #49	; 0x31
 8001706:	4620      	mov	r0, r4
 8001708:	f7ff ff27 	bl	800155a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 800170c:	220a      	movs	r2, #10
 800170e:	2137      	movs	r1, #55	; 0x37
 8001710:	4620      	mov	r0, r4
 8001712:	f7ff ff22 	bl	800155a <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8001716:	211e      	movs	r1, #30
 8001718:	4620      	mov	r0, r4
 800171a:	f7ff ff3a 	bl	8001592 <read_register>
  mc2 |= sf << 4;
 800171e:	ea40 1205 	orr.w	r2, r0, r5, lsl #4
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	211e      	movs	r1, #30
 8001726:	4620      	mov	r0, r4
 8001728:	f7ff ff17 	bl	800155a <write_register>

  set_low_data_rate_optimization(lora);
 800172c:	4620      	mov	r0, r4
 800172e:	f7ff ff55 	bl	80015dc <set_low_data_rate_optimization>
}
 8001732:	bd38      	pop	{r3, r4, r5, pc}
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8001734:	22c5      	movs	r2, #197	; 0xc5
 8001736:	2131      	movs	r1, #49	; 0x31
 8001738:	4620      	mov	r0, r4
 800173a:	f7ff ff0e 	bl	800155a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 800173e:	220c      	movs	r2, #12
 8001740:	2137      	movs	r1, #55	; 0x37
 8001742:	4620      	mov	r0, r4
 8001744:	f7ff ff09 	bl	800155a <write_register>
 8001748:	2506      	movs	r5, #6
 800174a:	e7e4      	b.n	8001716 <lora_set_spreading_factor+0x26>
    sf = 12;
 800174c:	250c      	movs	r5, #12
 800174e:	e7d8      	b.n	8001702 <lora_set_spreading_factor+0x12>

08001750 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8001750:	b538      	push	{r3, r4, r5, lr}
 8001752:	4605      	mov	r5, r0
 8001754:	460c      	mov	r4, r1
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8001756:	0a0a      	lsrs	r2, r1, #8
 8001758:	2120      	movs	r1, #32
 800175a:	f7ff fefe 	bl	800155a <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 800175e:	f004 020f 	and.w	r2, r4, #15
 8001762:	2121      	movs	r1, #33	; 0x21
 8001764:	4628      	mov	r0, r5
 8001766:	f7ff fef8 	bl	800155a <write_register>
}
 800176a:	bd38      	pop	{r3, r4, r5, pc}

0800176c <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 800176c:	b508      	push	{r3, lr}
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 800176e:	2142      	movs	r1, #66	; 0x42
 8001770:	f7ff ff0f 	bl	8001592 <read_register>
}
 8001774:	bd08      	pop	{r3, pc}

08001776 <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 8001776:	b508      	push	{r3, lr}
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 8001778:	2101      	movs	r1, #1
 800177a:	f7ff ff0a 	bl	8001592 <read_register>

  return opmode & (1 << OPMODE_TX) ? LORA_BUSY : LORA_OK;
 800177e:	f010 0008 	ands.w	r0, r0, #8
}
 8001782:	bf18      	it	ne
 8001784:	2005      	movne	r0, #5
 8001786:	bd08      	pop	{r3, pc}

08001788 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 8001788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	4604      	mov	r4, r0
 8001790:	4688      	mov	r8, r1
 8001792:	4615      	mov	r5, r2
 8001794:	461e      	mov	r6, r3
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 8001796:	f7ff ffee 	bl	8001776 <lora_is_transmitting>
 800179a:	2800      	cmp	r0, #0
 800179c:	d144      	bne.n	8001828 <lora_send_packet_base+0xa0>
 800179e:	4607      	mov	r7, r0
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 80017a0:	2281      	movs	r2, #129	; 0x81
 80017a2:	2101      	movs	r1, #1
 80017a4:	4620      	mov	r0, r4
 80017a6:	f7ff fed8 	bl	800155a <write_register>

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);

  // Clear TX IRQ flag, to be sure
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 80017aa:	2208      	movs	r2, #8
 80017ac:	2112      	movs	r1, #18
 80017ae:	4620      	mov	r0, r4
 80017b0:	f7ff fed3 	bl	800155a <write_register>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 80017b4:	7e22      	ldrb	r2, [r4, #24]
 80017b6:	210d      	movs	r1, #13
 80017b8:	4620      	mov	r0, r4
 80017ba:	f7ff fece 	bl	800155a <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 80017be:	7e22      	ldrb	r2, [r4, #24]
 80017c0:	210e      	movs	r1, #14
 80017c2:	4620      	mov	r0, r4
 80017c4:	f7ff fec9 	bl	800155a <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 80017c8:	462a      	mov	r2, r5
 80017ca:	2122      	movs	r1, #34	; 0x22
 80017cc:	4620      	mov	r0, r4
 80017ce:	f7ff fec4 	bl	800155a <write_register>
  uint8_t address = REG_FIFO | BIT_7;
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	f88d 3007 	strb.w	r3, [sp, #7]
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	8921      	ldrh	r1, [r4, #8]
 80017dc:	6860      	ldr	r0, [r4, #4]
 80017de:	f002 fe9b 	bl	8004518 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80017e2:	68e3      	ldr	r3, [r4, #12]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f10d 0107 	add.w	r1, sp, #7
 80017ea:	6820      	ldr	r0, [r4, #0]
 80017ec:	f005 fa97 	bl	8006d1e <HAL_SPI_Transmit>
  if (mode == TRANSFER_MODE_DMA) {
 80017f0:	2e01      	cmp	r6, #1
 80017f2:	d013      	beq.n	800181c <lora_send_packet_base+0x94>
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 80017f4:	68e3      	ldr	r3, [r4, #12]
 80017f6:	462a      	mov	r2, r5
 80017f8:	4641      	mov	r1, r8
 80017fa:	6820      	ldr	r0, [r4, #0]
 80017fc:	f005 fa8f 	bl	8006d1e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001800:	2201      	movs	r2, #1
 8001802:	8921      	ldrh	r1, [r4, #8]
 8001804:	6860      	ldr	r0, [r4, #4]
 8001806:	f002 fe87 	bl	8004518 <HAL_GPIO_WritePin>
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 800180a:	2283      	movs	r2, #131	; 0x83
 800180c:	2101      	movs	r1, #1
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff fea3 	bl	800155a <write_register>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
  return LORA_OK;
}
 8001814:	4638      	mov	r0, r7
 8001816:	b002      	add	sp, #8
 8001818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 800181c:	462a      	mov	r2, r5
 800181e:	4641      	mov	r1, r8
 8001820:	6820      	ldr	r0, [r4, #0]
 8001822:	f005 fd13 	bl	800724c <HAL_SPI_Transmit_DMA>
  if (mode == TRANSFER_MODE_DMA) {
 8001826:	e7f5      	b.n	8001814 <lora_send_packet_base+0x8c>
    return LORA_BUSY;
 8001828:	2705      	movs	r7, #5
 800182a:	e7f3      	b.n	8001814 <lora_send_packet_base+0x8c>

0800182c <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 800182c:	b508      	push	{r3, lr}
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 800182e:	2302      	movs	r3, #2
 8001830:	f7ff ffaa 	bl	8001788 <lora_send_packet_base>
}
 8001834:	bd08      	pop	{r3, pc}

08001836 <lora_wait_send>:
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
  // Send packet
  set_mode(lora, OPMODE_TX);
}

uint8_t lora_wait_send(lora_sx1276 *lora) {
 8001836:	b510      	push	{r4, lr}
 8001838:	4604      	mov	r4, r0
	uint8_t state = 0;
	state = read_register(lora, REG_IRQ_FLAGS);
 800183a:	2112      	movs	r1, #18
 800183c:	f7ff fea9 	bl	8001592 <read_register>
	if(state & IRQ_FLAGS_TX_DONE) {
 8001840:	f010 0f08 	tst.w	r0, #8
 8001844:	d101      	bne.n	800184a <lora_wait_send+0x14>
		// Packet sent
		write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
		return LORA_OK;
	}

	return LORA_BUSY;
 8001846:	2005      	movs	r0, #5
}
 8001848:	bd10      	pop	{r4, pc}
		write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 800184a:	2208      	movs	r2, #8
 800184c:	2112      	movs	r1, #18
 800184e:	4620      	mov	r0, r4
 8001850:	f7ff fe83 	bl	800155a <write_register>
		return LORA_OK;
 8001854:	2000      	movs	r0, #0
 8001856:	e7f7      	b.n	8001848 <lora_wait_send+0x12>

08001858 <lora_init>:
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8001858:	b570      	push	{r4, r5, r6, lr}
 800185a:	4604      	mov	r4, r0
 800185c:	9d04      	ldr	r5, [sp, #16]
 800185e:	9e05      	ldr	r6, [sp, #20]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8001860:	6001      	str	r1, [r0, #0]
  lora->nss_port = nss_port;
 8001862:	6042      	str	r2, [r0, #4]
  lora->nss_pin = nss_pin;
 8001864:	8103      	strh	r3, [r0, #8]
  lora->frequency = freq;
 8001866:	6105      	str	r5, [r0, #16]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8001868:	2301      	movs	r3, #1
 800186a:	6143      	str	r3, [r0, #20]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 800186c:	2300      	movs	r3, #0
 800186e:	7603      	strb	r3, [r0, #24]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8001870:	7643      	strb	r3, [r0, #25]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	60c3      	str	r3, [r0, #12]

  // Check version
  uint8_t ver = lora_version(lora);
 8001878:	f7ff ff78 	bl	800176c <lora_version>
  if (ver != LORA_COMPATIBLE_VERSION) {
 800187c:	2812      	cmp	r0, #18
 800187e:	d001      	beq.n	8001884 <lora_init+0x2c>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8001880:	2004      	movs	r0, #4
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
  // Set default mode
  lora_mode_standby(lora);

  return LORA_OK;
}
 8001882:	bd70      	pop	{r4, r5, r6, pc}
  lora_mode_sleep(lora);
 8001884:	4620      	mov	r0, r4
 8001886:	f7ff fec4 	bl	8001612 <lora_mode_sleep>
  lora_mode_sleep(lora);
 800188a:	4620      	mov	r0, r4
 800188c:	f7ff fec1 	bl	8001612 <lora_mode_sleep>
  lora_set_frequency(lora, freq);
 8001890:	462a      	mov	r2, r5
 8001892:	4633      	mov	r3, r6
 8001894:	4620      	mov	r0, r4
 8001896:	f7ff ff0b 	bl	80016b0 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 800189a:	2107      	movs	r1, #7
 800189c:	4620      	mov	r0, r4
 800189e:	f7ff ff27 	bl	80016f0 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 80018a2:	210a      	movs	r1, #10
 80018a4:	4620      	mov	r0, r4
 80018a6:	f7ff ff53 	bl	8001750 <lora_set_preamble_length>
  lora_set_explicit_header_mode(lora);
 80018aa:	4620      	mov	r0, r4
 80018ac:	f7ff febd 	bl	800162a <lora_set_explicit_header_mode>
  uint8_t current_lna = read_register(lora, REG_LNA);
 80018b0:	210c      	movs	r1, #12
 80018b2:	4620      	mov	r0, r4
 80018b4:	f7ff fe6d 	bl	8001592 <read_register>
  write_register(lora, REG_LNA,  current_lna | 0x03);
 80018b8:	f040 0203 	orr.w	r2, r0, #3
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	210c      	movs	r1, #12
 80018c0:	4620      	mov	r0, r4
 80018c2:	f7ff fe4a 	bl	800155a <write_register>
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 80018c6:	2204      	movs	r2, #4
 80018c8:	2126      	movs	r1, #38	; 0x26
 80018ca:	4620      	mov	r0, r4
 80018cc:	f7ff fe45 	bl	800155a <write_register>
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 80018d0:	2114      	movs	r1, #20
 80018d2:	4620      	mov	r0, r4
 80018d4:	f7ff feb5 	bl	8001642 <lora_set_tx_power>
  lora_mode_standby(lora);
 80018d8:	4620      	mov	r0, r4
 80018da:	f7ff fea0 	bl	800161e <lora_mode_standby>
  return LORA_OK;
 80018de:	2000      	movs	r0, #0
 80018e0:	e7cf      	b.n	8001882 <lora_init+0x2a>
	...

080018e4 <MS5607_Convert>:
  /* Assemble the conversion command based on previously set OSR */
  uncompValues->temperature = ((uint32_t) reply[0] << 16) | ((uint32_t) reply[1] << 8) | (uint32_t) reply[2];
}

/* Performs the data conversion according to the MS5607 datasheet */
void MS5607_Convert(struct MS5607UncompensatedValues *sample, struct MS5607Readings *value){
 80018e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018e8:	b085      	sub	sp, #20
 80018ea:	4684      	mov	ip, r0
 80018ec:	468b      	mov	fp, r1
  int32_t dT;
  int32_t TEMP;
  int64_t OFF;
  int64_t SENS;

  dT = sample->temperature - ((int32_t) (promData.tref << 8));
 80018ee:	4956      	ldr	r1, [pc, #344]	; (8001a48 <MS5607_Convert+0x164>)
 80018f0:	894b      	ldrh	r3, [r1, #10]
 80018f2:	6842      	ldr	r2, [r0, #4]
 80018f4:	eba2 2203 	sub.w	r2, r2, r3, lsl #8

  TEMP = 2000 + (((int64_t) dT * promData.tempsens) >> 23);
 80018f8:	17d7      	asrs	r7, r2, #31
 80018fa:	f8b1 800c 	ldrh.w	r8, [r1, #12]
 80018fe:	fba8 4502 	umull	r4, r5, r8, r2
 8001902:	fb08 5507 	mla	r5, r8, r7, r5
 8001906:	0de3      	lsrs	r3, r4, #23
 8001908:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	f503 60fa 	add.w	r0, r3, #2000	; 0x7d0

  OFF = ((int64_t) promData.off << 17) + (((int64_t) promData.tco * dT) >> 6);
 8001912:	f8b1 8008 	ldrh.w	r8, [r1, #8]
 8001916:	fba8 4502 	umull	r4, r5, r8, r2
 800191a:	fb08 5507 	mla	r5, r8, r7, r5
 800191e:	ea4f 1e94 	mov.w	lr, r4, lsr #6
 8001922:	ea4e 6e85 	orr.w	lr, lr, r5, lsl #26
 8001926:	ea4f 1aa5 	mov.w	sl, r5, asr #6
 800192a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800192e:	2500      	movs	r5, #0
 8001930:	ea45 35d8 	orr.w	r5, r5, r8, lsr #15
 8001934:	ea4f 4848 	mov.w	r8, r8, lsl #17
 8001938:	eb1e 0e08 	adds.w	lr, lr, r8
 800193c:	eb4a 0a05 	adc.w	sl, sl, r5
  SENS = ((int64_t) promData.sens << 16) + (((int64_t) promData.tcs * dT) >> 7);
 8001940:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8001944:	fba8 4502 	umull	r4, r5, r8, r2
 8001948:	fb08 5507 	mla	r5, r8, r7, r5
 800194c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001950:	ea49 6945 	orr.w	r9, r9, r5, lsl #25
 8001954:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8001958:	884c      	ldrh	r4, [r1, #2]
 800195a:	0421      	lsls	r1, r4, #16
 800195c:	eb19 0101 	adds.w	r1, r9, r1
 8001960:	f04f 0400 	mov.w	r4, #0
 8001964:	eb48 0804 	adc.w	r8, r8, r4

  /**/
  if (TEMP < 2000) {
 8001968:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 800196c:	da54      	bge.n	8001a18 <MS5607_Convert+0x134>
    int32_t T2 = ((int64_t) dT * (int64_t) dT) >> 31;
 800196e:	fb02 f607 	mul.w	r6, r2, r7
 8001972:	fba2 4502 	umull	r4, r5, r2, r2
 8001976:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 800197a:	ea4f 79d4 	mov.w	r9, r4, lsr #31
 800197e:	ea49 0945 	orr.w	r9, r9, r5, lsl #1
    int32_t TEMPM = TEMP - 2000;
    int64_t OFF2 = (61 * (int64_t) TEMPM * (int64_t) TEMPM) >> 4;
 8001982:	17dd      	asrs	r5, r3, #31
 8001984:	fb03 f405 	mul.w	r4, r3, r5
 8001988:	fba3 2303 	umull	r2, r3, r3, r3
 800198c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8001990:	011e      	lsls	r6, r3, #4
 8001992:	0114      	lsls	r4, r2, #4
 8001994:	ea46 7512 	orr.w	r5, r6, r2, lsr #28
 8001998:	1aa4      	subs	r4, r4, r2
 800199a:	eb65 0503 	sbc.w	r5, r5, r3
 800199e:	00ae      	lsls	r6, r5, #2
 80019a0:	ea46 7694 	orr.w	r6, r6, r4, lsr #30
 80019a4:	00a7      	lsls	r7, r4, #2
 80019a6:	4635      	mov	r5, r6
 80019a8:	18bc      	adds	r4, r7, r2
 80019aa:	eb43 0505 	adc.w	r5, r3, r5
 80019ae:	0926      	lsrs	r6, r4, #4
 80019b0:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 80019b4:	112f      	asrs	r7, r5, #4
    int64_t SENS2 = 2 * (int64_t) TEMPM * (int64_t) TEMPM;
 80019b6:	1894      	adds	r4, r2, r2
 80019b8:	eb43 0203 	adc.w	r2, r3, r3
 80019bc:	9402      	str	r4, [sp, #8]
 80019be:	4623      	mov	r3, r4
 80019c0:	9203      	str	r2, [sp, #12]
    if (TEMP < -1500) {
 80019c2:	4c22      	ldr	r4, [pc, #136]	; (8001a4c <MS5607_Convert+0x168>)
 80019c4:	42a0      	cmp	r0, r4
 80019c6:	da1e      	bge.n	8001a06 <MS5607_Convert+0x122>
      int32_t TEMPP = TEMP + 1500;
 80019c8:	9a00      	ldr	r2, [sp, #0]
 80019ca:	f602 53ac 	addw	r3, r2, #3500	; 0xdac
      int32_t TEMPP2 = TEMPP * TEMPP;
 80019ce:	fb03 f303 	mul.w	r3, r3, r3
      OFF2 = OFF2 + (int64_t) 15 * TEMPP2;
 80019d2:	461c      	mov	r4, r3
 80019d4:	17dd      	asrs	r5, r3, #31
 80019d6:	e9cd 4500 	strd	r4, r5, [sp]
 80019da:	012a      	lsls	r2, r5, #4
 80019dc:	4615      	mov	r5, r2
 80019de:	011a      	lsls	r2, r3, #4
 80019e0:	ea45 7413 	orr.w	r4, r5, r3, lsr #28
 80019e4:	9d00      	ldr	r5, [sp, #0]
 80019e6:	1b52      	subs	r2, r2, r5
 80019e8:	9d01      	ldr	r5, [sp, #4]
 80019ea:	eb64 0405 	sbc.w	r4, r4, r5
 80019ee:	18b6      	adds	r6, r6, r2
 80019f0:	eb44 0707 	adc.w	r7, r4, r7
      SENS2 = SENS2 + (int64_t) 8 * TEMPP2;
 80019f4:	00ea      	lsls	r2, r5, #3
 80019f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019fa:	00dc      	lsls	r4, r3, #3
 80019fc:	9b02      	ldr	r3, [sp, #8]
 80019fe:	191b      	adds	r3, r3, r4
 8001a00:	9c03      	ldr	r4, [sp, #12]
 8001a02:	eb44 0202 	adc.w	r2, r4, r2
    }
    TEMP -= T2;
 8001a06:	eba0 0009 	sub.w	r0, r0, r9
    OFF -= OFF2;
 8001a0a:	ebbe 0e06 	subs.w	lr, lr, r6
 8001a0e:	eb6a 0a07 	sbc.w	sl, sl, r7
    SENS -= SENS2;
 8001a12:	1ac9      	subs	r1, r1, r3
 8001a14:	eb68 0802 	sbc.w	r8, r8, r2
  }

  value->pressure = ((((int64_t) sample->pressure * SENS) >> 21) - OFF) >> 15;
 8001a18:	f8dc 4000 	ldr.w	r4, [ip]
 8001a1c:	fba4 2301 	umull	r2, r3, r4, r1
 8001a20:	fb04 3308 	mla	r3, r4, r8, r3
 8001a24:	0d51      	lsrs	r1, r2, #21
 8001a26:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8001a2a:	155c      	asrs	r4, r3, #21
 8001a2c:	ebb1 010e 	subs.w	r1, r1, lr
 8001a30:	eb64 0a0a 	sbc.w	sl, r4, sl
 8001a34:	0bc9      	lsrs	r1, r1, #15
 8001a36:	ea41 414a 	orr.w	r1, r1, sl, lsl #17
 8001a3a:	f8cb 1000 	str.w	r1, [fp]
  value->temperature = TEMP;
 8001a3e:	f8cb 0004 	str.w	r0, [fp, #4]
}
 8001a42:	b005      	add	sp, #20
 8001a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a48:	200002e0 	.word	0x200002e0
 8001a4c:	fffffa24 	.word	0xfffffa24

08001a50 <MS5607_GetTemperatureC>:
  MS5607_UncompensatedRead(&uncompValues);
  MS5607_Convert(&uncompValues, &readings);
}

/* Gets the temperature from the sensor reading */
double MS5607_GetTemperatureC(void){
 8001a50:	b508      	push	{r3, lr}
  return (double)readings.temperature/(double)100.0;
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <MS5607_GetTemperatureC+0x18>)
 8001a54:	6858      	ldr	r0, [r3, #4]
 8001a56:	f7fe fd75 	bl	8000544 <__aeabi_i2d>
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <MS5607_GetTemperatureC+0x1c>)
 8001a5e:	f7fe ff05 	bl	800086c <__aeabi_ddiv>
}
 8001a62:	ec41 0b10 	vmov	d0, r0, r1
 8001a66:	bd08      	pop	{r3, pc}
 8001a68:	200002f0 	.word	0x200002f0
 8001a6c:	40590000 	.word	0x40590000

08001a70 <MS5607_GetRawTemperature>:

/* Gets the raw temperature data from the sensor reading */
int32_t MS5607_GetRawTemperature() {
	return readings.temperature;
}
 8001a70:	4b01      	ldr	r3, [pc, #4]	; (8001a78 <MS5607_GetRawTemperature+0x8>)
 8001a72:	6858      	ldr	r0, [r3, #4]
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	200002f0 	.word	0x200002f0

08001a7c <MS5607_GetPressurePa>:

/* Gets the pressure from the sensor reading */
int32_t MS5607_GetPressurePa(void){
  return readings.pressure;
}
 8001a7c:	4b01      	ldr	r3, [pc, #4]	; (8001a84 <MS5607_GetPressurePa+0x8>)
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	200002f0 	.word	0x200002f0

08001a88 <MS5607_Altitude>:

float MS5607_Altitude(float referencePressure, float pressure) {
 8001a88:	b508      	push	{r3, lr}
 8001a8a:	eef0 7a60 	vmov.f32	s15, s1
	return 44330.0F * (1.0F - powf(pressure / referencePressure, 1.0F / 5.255F));
 8001a8e:	eddf 0a07 	vldr	s1, [pc, #28]	; 8001aac <MS5607_Altitude+0x24>
 8001a92:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8001a96:	f00d fefb 	bl	800f890 <powf>
 8001a9a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001a9e:	ee77 7ac0 	vsub.f32	s15, s15, s0
}
 8001aa2:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8001ab0 <MS5607_Altitude+0x28>
 8001aa6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001aaa:	bd08      	pop	{r3, pc}
 8001aac:	3e42dcae 	.word	0x3e42dcae
 8001ab0:	472d2a00 	.word	0x472d2a00

08001ab4 <MS5607_Altitude_I32>:

int32_t MS5607_Altitude_I32(float alt) {
	// .%2f
	int32_t res = (int32_t)(alt * 100.0F) / 100;
 8001ab4:	eddf 7a07 	vldr	s15, [pc, #28]	; 8001ad4 <MS5607_Altitude_I32+0x20>
 8001ab8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001abc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8001ac0:	ee17 0a90 	vmov	r0, s15
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <MS5607_Altitude_I32+0x24>)
 8001ac6:	fb83 2300 	smull	r2, r3, r3, r0
 8001aca:	17c0      	asrs	r0, r0, #31
	return res;
}
 8001acc:	ebc0 1063 	rsb	r0, r0, r3, asr #5
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	42c80000 	.word	0x42c80000
 8001ad8:	51eb851f 	.word	0x51eb851f

08001adc <enableCSB>:

/* Sets the CS pin */
void enableCSB(void){
 8001adc:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <enableCSB+0x14>)
 8001ae2:	8819      	ldrh	r1, [r3, #0]
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <enableCSB+0x18>)
 8001ae6:	6818      	ldr	r0, [r3, #0]
 8001ae8:	f002 fd16 	bl	8004518 <HAL_GPIO_WritePin>
}
 8001aec:	bd08      	pop	{r3, pc}
 8001aee:	bf00      	nop
 8001af0:	200002d4 	.word	0x200002d4
 8001af4:	200002d0 	.word	0x200002d0

08001af8 <disableCSB>:

/* Sets the CS pin */
void disableCSB(void){
 8001af8:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001afa:	2201      	movs	r2, #1
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <disableCSB+0x14>)
 8001afe:	8819      	ldrh	r1, [r3, #0]
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <disableCSB+0x18>)
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	f002 fd08 	bl	8004518 <HAL_GPIO_WritePin>
}
 8001b08:	bd08      	pop	{r3, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200002d4 	.word	0x200002d4
 8001b10:	200002d0 	.word	0x200002d0

08001b14 <MS5607_PromRead>:
void MS5607_PromRead(struct promData *prom){
 8001b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b18:	4604      	mov	r4, r0
 8001b1a:	2500      	movs	r5, #0
    SPITransmitData = PROM_READ(address);
 8001b1c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8001b78 <MS5607_PromRead+0x64>
    HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8001b20:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8001b7c <MS5607_PromRead+0x68>
 8001b24:	270a      	movs	r7, #10
 8001b26:	4626      	mov	r6, r4
    SPITransmitData = PROM_READ(address);
 8001b28:	f065 035f 	orn	r3, r5, #95	; 0x5f
 8001b2c:	f889 3000 	strb.w	r3, [r9]
    enableCSB();
 8001b30:	f7ff ffd4 	bl	8001adc <enableCSB>
    HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8001b34:	463b      	mov	r3, r7
 8001b36:	2201      	movs	r2, #1
 8001b38:	4649      	mov	r1, r9
 8001b3a:	f8d8 0000 	ldr.w	r0, [r8]
 8001b3e:	f005 f8ee 	bl	8006d1e <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, (uint8_t*)structPointer, 2, 10);
 8001b42:	463b      	mov	r3, r7
 8001b44:	2202      	movs	r2, #2
 8001b46:	1961      	adds	r1, r4, r5
 8001b48:	f8d8 0000 	ldr.w	r0, [r8]
 8001b4c:	f005 fac9 	bl	80070e2 <HAL_SPI_Receive>
    disableCSB();
 8001b50:	f7ff ffd2 	bl	8001af8 <disableCSB>
  for (address = 0; address < 8; address++) {
 8001b54:	3502      	adds	r5, #2
 8001b56:	2d10      	cmp	r5, #16
 8001b58:	d1e5      	bne.n	8001b26 <MS5607_PromRead+0x12>
 8001b5a:	1ca0      	adds	r0, r4, #2
 8001b5c:	3612      	adds	r6, #18
    uint8_t secondByte = toSwap[0];
 8001b5e:	f810 3c02 	ldrb.w	r3, [r0, #-2]
    toSwap[0] = toSwap[1];
 8001b62:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8001b66:	f800 2c02 	strb.w	r2, [r0, #-2]
    toSwap[1] = secondByte;
 8001b6a:	f800 3c01 	strb.w	r3, [r0, #-1]
  for (address = 0; address < 8; address++) {
 8001b6e:	3002      	adds	r0, #2
 8001b70:	42b0      	cmp	r0, r6
 8001b72:	d1f4      	bne.n	8001b5e <MS5607_PromRead+0x4a>
}
 8001b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b78:	200002d7 	.word	0x200002d7
 8001b7c:	200002dc 	.word	0x200002dc

08001b80 <MS5607_Init>:
MS5607StateTypeDef MS5607_Init(SPI_HandleTypeDef *hspix, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001b80:	b510      	push	{r4, lr}
  hspi = hspix;
 8001b82:	4c10      	ldr	r4, [pc, #64]	; (8001bc4 <MS5607_Init+0x44>)
 8001b84:	6020      	str	r0, [r4, #0]
  CS_GPIO_Port = GPIOx;
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <MS5607_Init+0x48>)
 8001b88:	6019      	str	r1, [r3, #0]
  CS_Pin = GPIO_Pin;
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <MS5607_Init+0x4c>)
 8001b8c:	801a      	strh	r2, [r3, #0]
  enableCSB();
 8001b8e:	f7ff ffa5 	bl	8001adc <enableCSB>
  SPITransmitData = RESET_COMMAND;
 8001b92:	490f      	ldr	r1, [pc, #60]	; (8001bd0 <MS5607_Init+0x50>)
 8001b94:	231e      	movs	r3, #30
 8001b96:	700b      	strb	r3, [r1, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8001b98:	230a      	movs	r3, #10
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	6820      	ldr	r0, [r4, #0]
 8001b9e:	f005 f8be 	bl	8006d1e <HAL_SPI_Transmit>
  HAL_Delay(3);
 8001ba2:	2003      	movs	r0, #3
 8001ba4:	f001 ffee 	bl	8003b84 <HAL_Delay>
  disableCSB();
 8001ba8:	f7ff ffa6 	bl	8001af8 <disableCSB>
  MS5607_PromRead(&promData);
 8001bac:	4c09      	ldr	r4, [pc, #36]	; (8001bd4 <MS5607_Init+0x54>)
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f7ff ffb0 	bl	8001b14 <MS5607_PromRead>
  if (promData.reserved == 0x00 || promData.reserved == 0xff)
 8001bb4:	8820      	ldrh	r0, [r4, #0]
 8001bb6:	b118      	cbz	r0, 8001bc0 <MS5607_Init+0x40>
    return MS5607_STATE_FAILED;
 8001bb8:	38ff      	subs	r0, #255	; 0xff
 8001bba:	bf18      	it	ne
 8001bbc:	2001      	movne	r0, #1
}
 8001bbe:	bd10      	pop	{r4, pc}
    return MS5607_STATE_FAILED;
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	e7fc      	b.n	8001bbe <MS5607_Init+0x3e>
 8001bc4:	200002dc 	.word	0x200002dc
 8001bc8:	200002d0 	.word	0x200002d0
 8001bcc:	200002d4 	.word	0x200002d4
 8001bd0:	200002d7 	.word	0x200002d7
 8001bd4:	200002e0 	.word	0x200002e0

08001bd8 <MS5607_UncompensatedRead>:
void MS5607_UncompensatedRead(struct MS5607UncompensatedValues *uncompValues){
 8001bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	4604      	mov	r4, r0
  enableCSB();
 8001bde:	f7ff ff7d 	bl	8001adc <enableCSB>
  SPITransmitData = CONVERT_D1_COMMAND | Pressure_OSR;
 8001be2:	4947      	ldr	r1, [pc, #284]	; (8001d00 <MS5607_UncompensatedRead+0x128>)
 8001be4:	4d47      	ldr	r5, [pc, #284]	; (8001d04 <MS5607_UncompensatedRead+0x12c>)
 8001be6:	782b      	ldrb	r3, [r5, #0]
 8001be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bec:	700b      	strb	r3, [r1, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8001bee:	230a      	movs	r3, #10
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4845      	ldr	r0, [pc, #276]	; (8001d08 <MS5607_UncompensatedRead+0x130>)
 8001bf4:	6800      	ldr	r0, [r0, #0]
 8001bf6:	f005 f892 	bl	8006d1e <HAL_SPI_Transmit>
  if(Pressure_OSR == 0x00)
 8001bfa:	782b      	ldrb	r3, [r5, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d066      	beq.n	8001cce <MS5607_UncompensatedRead+0xf6>
  else if(Pressure_OSR == 0x02)
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d068      	beq.n	8001cd6 <MS5607_UncompensatedRead+0xfe>
  else if(Pressure_OSR == 0x04)
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d06a      	beq.n	8001cde <MS5607_UncompensatedRead+0x106>
  else if(Pressure_OSR == 0x06)
 8001c08:	2b06      	cmp	r3, #6
    HAL_Delay(5);
 8001c0a:	bf0c      	ite	eq
 8001c0c:	2005      	moveq	r0, #5
    HAL_Delay(10);
 8001c0e:	200a      	movne	r0, #10
 8001c10:	f001 ffb8 	bl	8003b84 <HAL_Delay>
  disableCSB();
 8001c14:	f7ff ff70 	bl	8001af8 <disableCSB>
  enableCSB();
 8001c18:	f7ff ff60 	bl	8001adc <enableCSB>
  SPITransmitData = READ_ADC_COMMAND;
 8001c1c:	4d38      	ldr	r5, [pc, #224]	; (8001d00 <MS5607_UncompensatedRead+0x128>)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	702b      	strb	r3, [r5, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8001c22:	4e39      	ldr	r6, [pc, #228]	; (8001d08 <MS5607_UncompensatedRead+0x130>)
 8001c24:	230a      	movs	r3, #10
 8001c26:	2201      	movs	r2, #1
 8001c28:	4629      	mov	r1, r5
 8001c2a:	6830      	ldr	r0, [r6, #0]
 8001c2c:	f005 f877 	bl	8006d1e <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, reply, 3, 10);
 8001c30:	230a      	movs	r3, #10
 8001c32:	2203      	movs	r2, #3
 8001c34:	a901      	add	r1, sp, #4
 8001c36:	6830      	ldr	r0, [r6, #0]
 8001c38:	f005 fa53 	bl	80070e2 <HAL_SPI_Receive>
  disableCSB();
 8001c3c:	f7ff ff5c 	bl	8001af8 <disableCSB>
  uncompValues->pressure = ((uint32_t) reply[0] << 16) | ((uint32_t) reply[1] << 8) | (uint32_t) reply[2];
 8001c40:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001c44:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001c4e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	6023      	str	r3, [r4, #0]
  enableCSB();
 8001c56:	f7ff ff41 	bl	8001adc <enableCSB>
  SPITransmitData = CONVERT_D2_COMMAND | Temperature_OSR;
 8001c5a:	4f2c      	ldr	r7, [pc, #176]	; (8001d0c <MS5607_UncompensatedRead+0x134>)
 8001c5c:	783b      	ldrb	r3, [r7, #0]
 8001c5e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001c62:	702b      	strb	r3, [r5, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8001c64:	230a      	movs	r3, #10
 8001c66:	2201      	movs	r2, #1
 8001c68:	4629      	mov	r1, r5
 8001c6a:	6830      	ldr	r0, [r6, #0]
 8001c6c:	f005 f857 	bl	8006d1e <HAL_SPI_Transmit>
  if(Temperature_OSR == 0x00)
 8001c70:	783b      	ldrb	r3, [r7, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d037      	beq.n	8001ce6 <MS5607_UncompensatedRead+0x10e>
  else if(Temperature_OSR == 0x02)
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d039      	beq.n	8001cee <MS5607_UncompensatedRead+0x116>
  else if(Temperature_OSR == 0x04)
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d03b      	beq.n	8001cf6 <MS5607_UncompensatedRead+0x11e>
  else if(Temperature_OSR == 0x06)
 8001c7e:	2b06      	cmp	r3, #6
    HAL_Delay(5);
 8001c80:	bf0c      	ite	eq
 8001c82:	2005      	moveq	r0, #5
    HAL_Delay(10);
 8001c84:	200a      	movne	r0, #10
 8001c86:	f001 ff7d 	bl	8003b84 <HAL_Delay>
  disableCSB();
 8001c8a:	f7ff ff35 	bl	8001af8 <disableCSB>
  enableCSB();
 8001c8e:	f7ff ff25 	bl	8001adc <enableCSB>
  SPITransmitData = READ_ADC_COMMAND;
 8001c92:	491b      	ldr	r1, [pc, #108]	; (8001d00 <MS5607_UncompensatedRead+0x128>)
 8001c94:	2300      	movs	r3, #0
 8001c96:	700b      	strb	r3, [r1, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8001c98:	4d1b      	ldr	r5, [pc, #108]	; (8001d08 <MS5607_UncompensatedRead+0x130>)
 8001c9a:	230a      	movs	r3, #10
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	6828      	ldr	r0, [r5, #0]
 8001ca0:	f005 f83d 	bl	8006d1e <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, reply, 3, 10);
 8001ca4:	230a      	movs	r3, #10
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	a901      	add	r1, sp, #4
 8001caa:	6828      	ldr	r0, [r5, #0]
 8001cac:	f005 fa19 	bl	80070e2 <HAL_SPI_Receive>
  disableCSB();
 8001cb0:	f7ff ff22 	bl	8001af8 <disableCSB>
  uncompValues->temperature = ((uint32_t) reply[0] << 16) | ((uint32_t) reply[1] << 8) | (uint32_t) reply[2];
 8001cb4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001cb8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001cc2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	6063      	str	r3, [r4, #4]
}
 8001cca:	b003      	add	sp, #12
 8001ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_Delay(1);
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f001 ff58 	bl	8003b84 <HAL_Delay>
 8001cd4:	e79e      	b.n	8001c14 <MS5607_UncompensatedRead+0x3c>
    HAL_Delay(2);
 8001cd6:	2002      	movs	r0, #2
 8001cd8:	f001 ff54 	bl	8003b84 <HAL_Delay>
 8001cdc:	e79a      	b.n	8001c14 <MS5607_UncompensatedRead+0x3c>
    HAL_Delay(3);
 8001cde:	2003      	movs	r0, #3
 8001ce0:	f001 ff50 	bl	8003b84 <HAL_Delay>
 8001ce4:	e796      	b.n	8001c14 <MS5607_UncompensatedRead+0x3c>
    HAL_Delay(1);
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f001 ff4c 	bl	8003b84 <HAL_Delay>
 8001cec:	e7cd      	b.n	8001c8a <MS5607_UncompensatedRead+0xb2>
    HAL_Delay(2);
 8001cee:	2002      	movs	r0, #2
 8001cf0:	f001 ff48 	bl	8003b84 <HAL_Delay>
 8001cf4:	e7c9      	b.n	8001c8a <MS5607_UncompensatedRead+0xb2>
    HAL_Delay(3);
 8001cf6:	2003      	movs	r0, #3
 8001cf8:	f001 ff44 	bl	8003b84 <HAL_Delay>
 8001cfc:	e7c5      	b.n	8001c8a <MS5607_UncompensatedRead+0xb2>
 8001cfe:	bf00      	nop
 8001d00:	200002d7 	.word	0x200002d7
 8001d04:	200002d6 	.word	0x200002d6
 8001d08:	200002dc 	.word	0x200002dc
 8001d0c:	200002d8 	.word	0x200002d8

08001d10 <MS5607_Update>:
void MS5607_Update(void){
 8001d10:	b510      	push	{r4, lr}
  MS5607_UncompensatedRead(&uncompValues);
 8001d12:	4c04      	ldr	r4, [pc, #16]	; (8001d24 <MS5607_Update+0x14>)
 8001d14:	4620      	mov	r0, r4
 8001d16:	f7ff ff5f 	bl	8001bd8 <MS5607_UncompensatedRead>
  MS5607_Convert(&uncompValues, &readings);
 8001d1a:	4903      	ldr	r1, [pc, #12]	; (8001d28 <MS5607_Update+0x18>)
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	f7ff fde1 	bl	80018e4 <MS5607_Convert>
}
 8001d22:	bd10      	pop	{r4, pc}
 8001d24:	200002f8 	.word	0x200002f8
 8001d28:	200002f0 	.word	0x200002f0

08001d2c <MS5607_SetTemperatureOSR>:

/* Sets the OSR for temperature */
void MS5607_SetTemperatureOSR(MS5607OSRFactors tOSR){
  Temperature_OSR = tOSR;
 8001d2c:	4b01      	ldr	r3, [pc, #4]	; (8001d34 <MS5607_SetTemperatureOSR+0x8>)
 8001d2e:	7018      	strb	r0, [r3, #0]
}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	200002d8 	.word	0x200002d8

08001d38 <MS5607_SetPressureOSR>:

/* Sets the OSR for pressure */
void MS5607_SetPressureOSR(MS5607OSRFactors pOSR){
  Pressure_OSR = pOSR;
 8001d38:	4b01      	ldr	r3, [pc, #4]	; (8001d40 <MS5607_SetPressureOSR+0x8>)
 8001d3a:	7018      	strb	r0, [r3, #0]
}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	200002d6 	.word	0x200002d6

08001d44 <HAL_I2C_MasterTxCpltCallback>:
uint8_t canSendRequest = 1;
uint8_t stlm_buf[2];
static int16_t stlm_temp = 0;

// After i2c transmit Callback
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef* hi2cx) {
 8001d44:	b510      	push	{r4, lr}
	if(hi2cx == hi2c) {
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 8001d48:	681c      	ldr	r4, [r3, #0]
 8001d4a:	4284      	cmp	r4, r0
 8001d4c:	d000      	beq.n	8001d50 <HAL_I2C_MasterTxCpltCallback+0xc>
		HAL_I2C_Master_Receive_IT(hi2c, STLM75M2F_I2C_ADDRESS << 1, stlm_buf, 2);
	}
}
 8001d4e:	bd10      	pop	{r4, pc}
		HAL_I2C_Master_Receive_IT(hi2c, STLM75M2F_I2C_ADDRESS << 1, stlm_buf, 2);
 8001d50:	2302      	movs	r3, #2
 8001d52:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_I2C_MasterTxCpltCallback+0x20>)
 8001d54:	2190      	movs	r1, #144	; 0x90
 8001d56:	4620      	mov	r0, r4
 8001d58:	f002 fd1c 	bl	8004794 <HAL_I2C_Master_Receive_IT>
}
 8001d5c:	e7f7      	b.n	8001d4e <HAL_I2C_MasterTxCpltCallback+0xa>
 8001d5e:	bf00      	nop
 8001d60:	20000300 	.word	0x20000300
 8001d64:	2000096c 	.word	0x2000096c

08001d68 <HAL_I2C_MasterRxCpltCallback>:

// After i2c receive Callback
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef* hi2cx) {
	if(hi2cx == hi2c) {
 8001d68:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <HAL_I2C_MasterRxCpltCallback+0x20>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4283      	cmp	r3, r0
 8001d6e:	d000      	beq.n	8001d72 <HAL_I2C_MasterRxCpltCallback+0xa>
		stlm_temp = (stlm_buf[0] << 8) | stlm_buf[1];

		// clear bit 15
		stlm_temp &= 0x7FFF;
	}
}
 8001d70:	4770      	bx	lr
		stlm_temp = (stlm_buf[0] << 8) | stlm_buf[1];
 8001d72:	4a06      	ldr	r2, [pc, #24]	; (8001d8c <HAL_I2C_MasterRxCpltCallback+0x24>)
 8001d74:	7811      	ldrb	r1, [r2, #0]
 8001d76:	7853      	ldrb	r3, [r2, #1]
 8001d78:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		stlm_temp &= 0x7FFF;
 8001d7c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001d80:	4a03      	ldr	r2, [pc, #12]	; (8001d90 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8001d82:	8013      	strh	r3, [r2, #0]
}
 8001d84:	e7f4      	b.n	8001d70 <HAL_I2C_MasterRxCpltCallback+0x8>
 8001d86:	bf00      	nop
 8001d88:	20000300 	.word	0x20000300
 8001d8c:	2000096c 	.word	0x2000096c
 8001d90:	20000304 	.word	0x20000304

08001d94 <STLM75M2F_Init>:

// max conversion time - 150ms
STLM75M2F_Status STLM75M2F_Init(I2C_HandleTypeDef* hi2cx) {
	hi2c = hi2cx;
 8001d94:	4b01      	ldr	r3, [pc, #4]	; (8001d9c <STLM75M2F_Init+0x8>)
 8001d96:	6018      	str	r0, [r3, #0]

	return STLM75M2F_DEVICE_OK;
}
 8001d98:	2001      	movs	r0, #1
 8001d9a:	4770      	bx	lr
 8001d9c:	20000300 	.word	0x20000300

08001da0 <STLM75M2F_GetTemperature>:

int16_t STLM75M2F_GetTemperature() {
 8001da0:	b500      	push	{lr}
 8001da2:	b083      	sub	sp, #12

	// choose temperature register - 0x00
	// choose configuration register - 0x01
	// choose hysteresis register - 0x02
	// choose overtemperature register - 0x03
	uint8_t reg = 0x00;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f88d 3007 	strb.w	r3, [sp, #7]
	////HAL_I2C_Master_Transmit(hi2c, STLM75M2F_I2C_ADDRESS << 1, &reg, 1, STLM75M2F_I2C_TIMEOUT_MS);
	////HAL_I2C_Master_Receive(hi2c, STLM75M2F_I2C_ADDRESS << 1, stlm_buf, 2, STLM75M2F_I2C_TIMEOUT_MS);
	if(canSendRequest) {
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <STLM75M2F_GetTemperature+0x30>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	b92b      	cbnz	r3, 8001dbc <STLM75M2F_GetTemperature+0x1c>
	// clear bit 15
	//rawTemp &= 0x7FFF;

	//return rawTemp;
	return stlm_temp;
}
 8001db0:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <STLM75M2F_GetTemperature+0x34>)
 8001db2:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001db6:	b003      	add	sp, #12
 8001db8:	f85d fb04 	ldr.w	pc, [sp], #4
		HAL_I2C_Master_Transmit_IT(hi2c, STLM75M2F_I2C_ADDRESS << 1, &reg, 1);
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f10d 0207 	add.w	r2, sp, #7
 8001dc2:	2190      	movs	r1, #144	; 0x90
 8001dc4:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <STLM75M2F_GetTemperature+0x38>)
 8001dc6:	6800      	ldr	r0, [r0, #0]
 8001dc8:	f002 fc78 	bl	80046bc <HAL_I2C_Master_Transmit_IT>
 8001dcc:	e7f0      	b.n	8001db0 <STLM75M2F_GetTemperature+0x10>
 8001dce:	bf00      	nop
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	20000304 	.word	0x20000304
 8001dd8:	20000300 	.word	0x20000300

08001ddc <ADC_SetChannel>:

/* Includes ------------------------------------------------------------------*/
#include "adc.h"

/* USER CODE BEGIN 0 */
void ADC_SetChannel(uint32_t channel) {
 8001ddc:	b500      	push	{lr}
 8001dde:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef channelConfig = {0};
 8001de0:	2300      	movs	r3, #0
 8001de2:	9303      	str	r3, [sp, #12]
	channelConfig.Channel = channel;
 8001de4:	9000      	str	r0, [sp, #0]
	channelConfig.Rank = 1;
 8001de6:	2201      	movs	r2, #1
 8001de8:	9201      	str	r2, [sp, #4]
	channelConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001dea:	9302      	str	r3, [sp, #8]

	if(HAL_ADC_ConfigChannel(&hadc2, &channelConfig) != HAL_OK) {
 8001dec:	4669      	mov	r1, sp
 8001dee:	4805      	ldr	r0, [pc, #20]	; (8001e04 <ADC_SetChannel+0x28>)
 8001df0:	f002 f8c2 	bl	8003f78 <HAL_ADC_ConfigChannel>
 8001df4:	b910      	cbnz	r0, 8001dfc <ADC_SetChannel+0x20>
	    Error_Handler();
	}
}
 8001df6:	b005      	add	sp, #20
 8001df8:	f85d fb04 	ldr.w	pc, [sp], #4
	    Error_Handler();
 8001dfc:	f001 fa98 	bl	8003330 <Error_Handler>
}
 8001e00:	e7f9      	b.n	8001df6 <ADC_SetChannel+0x1a>
 8001e02:	bf00      	nop
 8001e04:	20000970 	.word	0x20000970

08001e08 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001e08:	b500      	push	{lr}
 8001e0a:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	9301      	str	r3, [sp, #4]
 8001e12:	9302      	str	r3, [sp, #8]
 8001e14:	9303      	str	r3, [sp, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001e16:	4815      	ldr	r0, [pc, #84]	; (8001e6c <MX_ADC2_Init+0x64>)
 8001e18:	4a15      	ldr	r2, [pc, #84]	; (8001e70 <MX_ADC2_Init+0x68>)
 8001e1a:	6002      	str	r2, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e20:	6042      	str	r2, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001e22:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001e24:	6103      	str	r3, [r0, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001e26:	7603      	strb	r3, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e28:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e2c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e2e:	4a11      	ldr	r2, [pc, #68]	; (8001e74 <MX_ADC2_Init+0x6c>)
 8001e30:	6282      	str	r2, [r0, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e32:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001e34:	2201      	movs	r2, #1
 8001e36:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001e38:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e3c:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e3e:	f001 feb5 	bl	8003bac <HAL_ADC_Init>
 8001e42:	b968      	cbnz	r0, 8001e60 <MX_ADC2_Init+0x58>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001e44:	2303      	movs	r3, #3
 8001e46:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001e50:	4669      	mov	r1, sp
 8001e52:	4806      	ldr	r0, [pc, #24]	; (8001e6c <MX_ADC2_Init+0x64>)
 8001e54:	f002 f890 	bl	8003f78 <HAL_ADC_ConfigChannel>
 8001e58:	b928      	cbnz	r0, 8001e66 <MX_ADC2_Init+0x5e>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001e5a:	b005      	add	sp, #20
 8001e5c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001e60:	f001 fa66 	bl	8003330 <Error_Handler>
 8001e64:	e7ee      	b.n	8001e44 <MX_ADC2_Init+0x3c>
    Error_Handler();
 8001e66:	f001 fa63 	bl	8003330 <Error_Handler>
}
 8001e6a:	e7f6      	b.n	8001e5a <MX_ADC2_Init+0x52>
 8001e6c:	20000970 	.word	0x20000970
 8001e70:	40012100 	.word	0x40012100
 8001e74:	0f000001 	.word	0x0f000001

08001e78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001e78:	b570      	push	{r4, r5, r6, lr}
 8001e7a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	9303      	str	r3, [sp, #12]
 8001e80:	9304      	str	r3, [sp, #16]
 8001e82:	9305      	str	r3, [sp, #20]
 8001e84:	9306      	str	r3, [sp, #24]
 8001e86:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC2)
 8001e88:	6802      	ldr	r2, [r0, #0]
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_ADC_MspInit+0x80>)
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001e90:	b008      	add	sp, #32
 8001e92:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e94:	2400      	movs	r4, #0
 8001e96:	9400      	str	r4, [sp, #0]
 8001e98:	4b18      	ldr	r3, [pc, #96]	; (8001efc <HAL_ADC_MspInit+0x84>)
 8001e9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ea0:	645a      	str	r2, [r3, #68]	; 0x44
 8001ea2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ea4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001ea8:	9200      	str	r2, [sp, #0]
 8001eaa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eac:	9401      	str	r4, [sp, #4]
 8001eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb0:	f042 0204 	orr.w	r2, r2, #4
 8001eb4:	631a      	str	r2, [r3, #48]	; 0x30
 8001eb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb8:	f002 0204 	and.w	r2, r2, #4
 8001ebc:	9201      	str	r2, [sp, #4]
 8001ebe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec0:	9402      	str	r4, [sp, #8]
 8001ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ec4:	f042 0201 	orr.w	r2, r2, #1
 8001ec8:	631a      	str	r2, [r3, #48]	; 0x30
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	9302      	str	r3, [sp, #8]
 8001ed2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ed4:	2608      	movs	r6, #8
 8001ed6:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed8:	2503      	movs	r5, #3
 8001eda:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ede:	a903      	add	r1, sp, #12
 8001ee0:	4807      	ldr	r0, [pc, #28]	; (8001f00 <HAL_ADC_MspInit+0x88>)
 8001ee2:	f002 fa21 	bl	8004328 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ee6:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eec:	a903      	add	r1, sp, #12
 8001eee:	4805      	ldr	r0, [pc, #20]	; (8001f04 <HAL_ADC_MspInit+0x8c>)
 8001ef0:	f002 fa1a 	bl	8004328 <HAL_GPIO_Init>
}
 8001ef4:	e7cc      	b.n	8001e90 <HAL_ADC_MspInit+0x18>
 8001ef6:	bf00      	nop
 8001ef8:	40012100 	.word	0x40012100
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40020800 	.word	0x40020800
 8001f04:	40020000 	.word	0x40020000

08001f08 <BMP280_enableCSB>:
	params->oversampling_temperature = BMP280_STANDARD;
	params->oversampling_humidity = BMP280_STANDARD;
	params->standby = BMP280_STANDBY_250;
}

static void BMP280_enableCSB(BMP280_HandleTypedef* dev) {
 8001f08:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(dev->spiPort, dev->spiPin, GPIO_PIN_RESET);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 8001f0e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001f10:	f002 fb02 	bl	8004518 <HAL_GPIO_WritePin>
}
 8001f14:	bd08      	pop	{r3, pc}

08001f16 <BMP280_disableCSB>:

static void BMP280_disableCSB(BMP280_HandleTypedef* dev) {
 8001f16:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(dev->spiPort, dev->spiPin, GPIO_PIN_SET);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 8001f1c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001f1e:	f002 fafb 	bl	8004518 <HAL_GPIO_WritePin>
}
 8001f22:	bd08      	pop	{r3, pc}

08001f24 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	b085      	sub	sp, #20
 8001f28:	4605      	mov	r5, r0
 8001f2a:	4617      	mov	r7, r2
	uint8_t rxBuffer[2];

	// clear bit 7
	addr = addr & 0x7F;
	// RW = 1
	addr = (1 << 7) | addr;
 8001f2c:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8001f30:	f88d 1007 	strb.w	r1, [sp, #7]
	BMP280_enableCSB(dev);
 8001f34:	f7ff ffe8 	bl	8001f08 <BMP280_enableCSB>
	HAL_StatusTypeDef s1 = HAL_SPI_Transmit(dev->spi, &addr, 1, 1000);
 8001f38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f10d 0107 	add.w	r1, sp, #7
 8001f42:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8001f44:	f004 feeb 	bl	8006d1e <HAL_SPI_Transmit>
 8001f48:	4604      	mov	r4, r0
	HAL_StatusTypeDef s2 = HAL_SPI_Receive(dev->spi, rxBuffer, 2, 1000);
 8001f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4e:	2202      	movs	r2, #2
 8001f50:	a903      	add	r1, sp, #12
 8001f52:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8001f54:	f005 f8c5 	bl	80070e2 <HAL_SPI_Receive>
 8001f58:	4606      	mov	r6, r0
	*value = (uint16_t) ((rxBuffer[1] << 8) | rxBuffer[0]);
 8001f5a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001f5e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001f62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001f66:	803b      	strh	r3, [r7, #0]
	BMP280_disableCSB(dev);
 8001f68:	4628      	mov	r0, r5
 8001f6a:	f7ff ffd4 	bl	8001f16 <BMP280_disableCSB>

	return s1 == HAL_OK && s2 == HAL_OK;
 8001f6e:	4334      	orrs	r4, r6
 8001f70:	f014 0fff 	tst.w	r4, #255	; 0xff
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
		return true;
	} else
		return false;*/

}
 8001f74:	bf0c      	ite	eq
 8001f76:	2001      	moveq	r0, #1
 8001f78:	2000      	movne	r0, #0
 8001f7a:	b005      	add	sp, #20
 8001f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f7e <write_register8>:
	}

	return false;
}

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001f7e:	b570      	push	{r4, r5, r6, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	4605      	mov	r5, r0
 8001f84:	f88d 2006 	strb.w	r2, [sp, #6]
		return false;
	else
		return true;*/

	// clear bit 7
	addr = addr & 0x7F;
 8001f88:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001f8c:	f88d 1007 	strb.w	r1, [sp, #7]
	// RW = 0
	addr = (0 << 7) | addr;
	BMP280_enableCSB(dev);
 8001f90:	f7ff ffba 	bl	8001f08 <BMP280_enableCSB>
	HAL_StatusTypeDef s1 = HAL_SPI_Transmit(dev->spi, &addr, 1, 1000);
 8001f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f10d 0107 	add.w	r1, sp, #7
 8001f9e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8001fa0:	f004 febd 	bl	8006d1e <HAL_SPI_Transmit>
 8001fa4:	4604      	mov	r4, r0
	HAL_StatusTypeDef s2 = HAL_SPI_Transmit(dev->spi, &value, 1, 1000);
 8001fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001faa:	2201      	movs	r2, #1
 8001fac:	f10d 0106 	add.w	r1, sp, #6
 8001fb0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8001fb2:	f004 feb4 	bl	8006d1e <HAL_SPI_Transmit>
 8001fb6:	4606      	mov	r6, r0
	BMP280_disableCSB(dev);
 8001fb8:	4628      	mov	r0, r5
 8001fba:	f7ff ffac 	bl	8001f16 <BMP280_disableCSB>

	return !(s1 == HAL_OK && s2 == HAL_OK);
 8001fbe:	4334      	orrs	r4, r6
 8001fc0:	f014 0fff 	tst.w	r4, #255	; 0xff
}
 8001fc4:	bf14      	ite	ne
 8001fc6:	2001      	movne	r0, #1
 8001fc8:	2000      	moveq	r0, #0
 8001fca:	b002      	add	sp, #8
 8001fcc:	bd70      	pop	{r4, r5, r6, pc}

08001fce <bmp280_init_default_params>:
	params->mode = BMP280_MODE_NORMAL;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	7003      	strb	r3, [r0, #0]
	params->filter = BMP280_FILTER_OFF;
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	7042      	strb	r2, [r0, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001fd6:	7083      	strb	r3, [r0, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001fd8:	70c3      	strb	r3, [r0, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001fda:	7103      	strb	r3, [r0, #4]
	params->standby = BMP280_STANDBY_250;
 8001fdc:	7143      	strb	r3, [r0, #5]
}
 8001fde:	4770      	bx	lr

08001fe0 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {

	if (dev->addr != BMP280_I2C_ADDRESS_0
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001fe0:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8001fe2:	3b76      	subs	r3, #118	; 0x76
	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d901      	bls.n	8001fee <bmp280_init+0xe>

		return false;
 8001fea:	2000      	movs	r0, #0
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
		return false;
	}

	return true;
}
 8001fec:	4770      	bx	lr
bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001fee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	4604      	mov	r4, r0
 8001ff6:	460f      	mov	r7, r1
	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001ff8:	23d0      	movs	r3, #208	; 0xd0
 8001ffa:	f88d 3006 	strb.w	r3, [sp, #6]
	BMP280_enableCSB(dev);
 8001ffe:	f7ff ff83 	bl	8001f08 <BMP280_enableCSB>
	HAL_StatusTypeDef s1 = HAL_SPI_Transmit(dev->spi, &addr, 1, 1000);
 8002002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002006:	2201      	movs	r2, #1
 8002008:	f10d 0106 	add.w	r1, sp, #6
 800200c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800200e:	f004 fe86 	bl	8006d1e <HAL_SPI_Transmit>
 8002012:	4605      	mov	r5, r0
	HAL_StatusTypeDef s2 = HAL_SPI_Receive(dev->spi, value, len, 1000);
 8002014:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002018:	2201      	movs	r2, #1
 800201a:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800201e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002020:	f005 f85f 	bl	80070e2 <HAL_SPI_Receive>
 8002024:	4606      	mov	r6, r0
	BMP280_disableCSB(dev);
 8002026:	4620      	mov	r0, r4
 8002028:	f7ff ff75 	bl	8001f16 <BMP280_disableCSB>
	return !(s1 == HAL_OK && s2 == HAL_OK);
 800202c:	2d00      	cmp	r5, #0
 800202e:	f040 8157 	bne.w	80022e0 <bmp280_init+0x300>
	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8002032:	2e00      	cmp	r6, #0
 8002034:	f040 814c 	bne.w	80022d0 <bmp280_init+0x2f0>
	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8002038:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800203c:	2b58      	cmp	r3, #88	; 0x58
 800203e:	d002      	beq.n	8002046 <bmp280_init+0x66>
 8002040:	2b60      	cmp	r3, #96	; 0x60
 8002042:	f040 8147 	bne.w	80022d4 <bmp280_init+0x2f4>
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8002046:	22b6      	movs	r2, #182	; 0xb6
 8002048:	21e0      	movs	r1, #224	; 0xe0
 800204a:	4620      	mov	r0, r4
 800204c:	f7ff ff97 	bl	8001f7e <write_register8>
 8002050:	2800      	cmp	r0, #0
 8002052:	f040 8141 	bne.w	80022d8 <bmp280_init+0x2f8>
 8002056:	f04f 0af3 	mov.w	sl, #243	; 0xf3
	HAL_StatusTypeDef s1 = HAL_SPI_Transmit(dev->spi, &addr, 1, 1000);
 800205a:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
 800205e:	f04f 0801 	mov.w	r8, #1
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8002062:	f88d a006 	strb.w	sl, [sp, #6]
	BMP280_enableCSB(dev);
 8002066:	4620      	mov	r0, r4
 8002068:	f7ff ff4e 	bl	8001f08 <BMP280_enableCSB>
	HAL_StatusTypeDef s1 = HAL_SPI_Transmit(dev->spi, &addr, 1, 1000);
 800206c:	464b      	mov	r3, r9
 800206e:	4642      	mov	r2, r8
 8002070:	f10d 0106 	add.w	r1, sp, #6
 8002074:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002076:	f004 fe52 	bl	8006d1e <HAL_SPI_Transmit>
 800207a:	4606      	mov	r6, r0
	HAL_StatusTypeDef s2 = HAL_SPI_Receive(dev->spi, value, len, 1000);
 800207c:	464b      	mov	r3, r9
 800207e:	4642      	mov	r2, r8
 8002080:	a901      	add	r1, sp, #4
 8002082:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002084:	f005 f82d 	bl	80070e2 <HAL_SPI_Receive>
 8002088:	4605      	mov	r5, r0
	BMP280_disableCSB(dev);
 800208a:	4620      	mov	r0, r4
 800208c:	f7ff ff43 	bl	8001f16 <BMP280_disableCSB>
	return !(s1 == HAL_OK && s2 == HAL_OK);
 8002090:	2e00      	cmp	r6, #0
 8002092:	d1e6      	bne.n	8002062 <bmp280_init+0x82>
				&& (status & 1) == 0)
 8002094:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002098:	f000 0001 	and.w	r0, r0, #1
 800209c:	4305      	orrs	r5, r0
 800209e:	f015 0fff 	tst.w	r5, #255	; 0xff
 80020a2:	d1de      	bne.n	8002062 <bmp280_init+0x82>
	if (read_register16(dev, 0x88, &dev->dig_T1)
 80020a4:	4622      	mov	r2, r4
 80020a6:	2188      	movs	r1, #136	; 0x88
 80020a8:	4620      	mov	r0, r4
 80020aa:	f7ff ff3b 	bl	8001f24 <read_register16>
 80020ae:	b908      	cbnz	r0, 80020b4 <bmp280_init+0xd4>
		return false;
 80020b0:	2000      	movs	r0, #0
 80020b2:	e116      	b.n	80022e2 <bmp280_init+0x302>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80020b4:	1ca2      	adds	r2, r4, #2
 80020b6:	218a      	movs	r1, #138	; 0x8a
 80020b8:	4620      	mov	r0, r4
 80020ba:	f7ff ff33 	bl	8001f24 <read_register16>
 80020be:	2800      	cmp	r0, #0
 80020c0:	d0f6      	beq.n	80020b0 <bmp280_init+0xd0>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80020c2:	1d22      	adds	r2, r4, #4
 80020c4:	218c      	movs	r1, #140	; 0x8c
 80020c6:	4620      	mov	r0, r4
 80020c8:	f7ff ff2c 	bl	8001f24 <read_register16>
 80020cc:	2800      	cmp	r0, #0
 80020ce:	d0ef      	beq.n	80020b0 <bmp280_init+0xd0>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80020d0:	1da2      	adds	r2, r4, #6
 80020d2:	218e      	movs	r1, #142	; 0x8e
 80020d4:	4620      	mov	r0, r4
 80020d6:	f7ff ff25 	bl	8001f24 <read_register16>
 80020da:	2800      	cmp	r0, #0
 80020dc:	d0e8      	beq.n	80020b0 <bmp280_init+0xd0>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80020de:	f104 0208 	add.w	r2, r4, #8
 80020e2:	2190      	movs	r1, #144	; 0x90
 80020e4:	4620      	mov	r0, r4
 80020e6:	f7ff ff1d 	bl	8001f24 <read_register16>
 80020ea:	2800      	cmp	r0, #0
 80020ec:	d0e0      	beq.n	80020b0 <bmp280_init+0xd0>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80020ee:	f104 020a 	add.w	r2, r4, #10
 80020f2:	2192      	movs	r1, #146	; 0x92
 80020f4:	4620      	mov	r0, r4
 80020f6:	f7ff ff15 	bl	8001f24 <read_register16>
 80020fa:	2800      	cmp	r0, #0
 80020fc:	d0d8      	beq.n	80020b0 <bmp280_init+0xd0>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80020fe:	f104 020c 	add.w	r2, r4, #12
 8002102:	2194      	movs	r1, #148	; 0x94
 8002104:	4620      	mov	r0, r4
 8002106:	f7ff ff0d 	bl	8001f24 <read_register16>
 800210a:	2800      	cmp	r0, #0
 800210c:	d0d0      	beq.n	80020b0 <bmp280_init+0xd0>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 800210e:	f104 020e 	add.w	r2, r4, #14
 8002112:	2196      	movs	r1, #150	; 0x96
 8002114:	4620      	mov	r0, r4
 8002116:	f7ff ff05 	bl	8001f24 <read_register16>
 800211a:	2800      	cmp	r0, #0
 800211c:	d0c8      	beq.n	80020b0 <bmp280_init+0xd0>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 800211e:	f104 0210 	add.w	r2, r4, #16
 8002122:	2198      	movs	r1, #152	; 0x98
 8002124:	4620      	mov	r0, r4
 8002126:	f7ff fefd 	bl	8001f24 <read_register16>
 800212a:	2800      	cmp	r0, #0
 800212c:	d0c0      	beq.n	80020b0 <bmp280_init+0xd0>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800212e:	f104 0212 	add.w	r2, r4, #18
 8002132:	219a      	movs	r1, #154	; 0x9a
 8002134:	4620      	mov	r0, r4
 8002136:	f7ff fef5 	bl	8001f24 <read_register16>
 800213a:	2800      	cmp	r0, #0
 800213c:	d0b8      	beq.n	80020b0 <bmp280_init+0xd0>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800213e:	f104 0214 	add.w	r2, r4, #20
 8002142:	219c      	movs	r1, #156	; 0x9c
 8002144:	4620      	mov	r0, r4
 8002146:	f7ff feed 	bl	8001f24 <read_register16>
 800214a:	2800      	cmp	r0, #0
 800214c:	d0b0      	beq.n	80020b0 <bmp280_init+0xd0>
			&& read_register16(dev, 0x9e,
 800214e:	f104 0216 	add.w	r2, r4, #22
 8002152:	219e      	movs	r1, #158	; 0x9e
 8002154:	4620      	mov	r0, r4
 8002156:	f7ff fee5 	bl	8001f24 <read_register16>
	if (!read_calibration_data(dev)) {
 800215a:	2800      	cmp	r0, #0
 800215c:	f000 80c1 	beq.w	80022e2 <bmp280_init+0x302>
	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8002160:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002164:	2b60      	cmp	r3, #96	; 0x60
 8002166:	d028      	beq.n	80021ba <bmp280_init+0x1da>
	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8002168:	797b      	ldrb	r3, [r7, #5]
 800216a:	787a      	ldrb	r2, [r7, #1]
 800216c:	0092      	lsls	r2, r2, #2
 800216e:	ea42 1243 	orr.w	r2, r2, r3, lsl #5
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8002172:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8002176:	21f5      	movs	r1, #245	; 0xf5
 8002178:	4620      	mov	r0, r4
 800217a:	f7ff ff00 	bl	8001f7e <write_register8>
 800217e:	2800      	cmp	r0, #0
 8002180:	f040 80ac 	bne.w	80022dc <bmp280_init+0x2fc>
	if (params->mode == BMP280_MODE_FORCED) {
 8002184:	783b      	ldrb	r3, [r7, #0]
 8002186:	2b01      	cmp	r3, #1
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8002188:	bf04      	itt	eq
 800218a:	2300      	moveq	r3, #0
 800218c:	703b      	strbeq	r3, [r7, #0]
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800218e:	78fa      	ldrb	r2, [r7, #3]
			| (params->oversampling_pressure << 2) | (params->mode);
 8002190:	78bb      	ldrb	r3, [r7, #2]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8002198:	783a      	ldrb	r2, [r7, #0]
 800219a:	4313      	orrs	r3, r2
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800219c:	b2dd      	uxtb	r5, r3
	if (dev->id == BME280_CHIP_ID) {
 800219e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80021a2:	2b60      	cmp	r3, #96	; 0x60
 80021a4:	f000 808a 	beq.w	80022bc <bmp280_init+0x2dc>
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80021a8:	462a      	mov	r2, r5
 80021aa:	21f4      	movs	r1, #244	; 0xf4
 80021ac:	4620      	mov	r0, r4
 80021ae:	f7ff fee6 	bl	8001f7e <write_register8>
 80021b2:	fab0 f080 	clz	r0, r0
 80021b6:	0940      	lsrs	r0, r0, #5
 80021b8:	e093      	b.n	80022e2 <bmp280_init+0x302>
	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80021ba:	23a1      	movs	r3, #161	; 0xa1
 80021bc:	f88d 3006 	strb.w	r3, [sp, #6]
	BMP280_enableCSB(dev);
 80021c0:	4620      	mov	r0, r4
 80021c2:	f7ff fea1 	bl	8001f08 <BMP280_enableCSB>
	HAL_StatusTypeDef s1 = HAL_SPI_Transmit(dev->spi, &addr, 1, 1000);
 80021c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ca:	2201      	movs	r2, #1
 80021cc:	f10d 0106 	add.w	r1, sp, #6
 80021d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80021d2:	f004 fda4 	bl	8006d1e <HAL_SPI_Transmit>
 80021d6:	4605      	mov	r5, r0
	HAL_StatusTypeDef s2 = HAL_SPI_Receive(dev->spi, value, len, 1000);
 80021d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021dc:	2201      	movs	r2, #1
 80021de:	f104 0118 	add.w	r1, r4, #24
 80021e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80021e4:	f004 ff7d 	bl	80070e2 <HAL_SPI_Receive>
 80021e8:	4606      	mov	r6, r0
	BMP280_disableCSB(dev);
 80021ea:	4620      	mov	r0, r4
 80021ec:	f7ff fe93 	bl	8001f16 <BMP280_disableCSB>
	return !(s1 == HAL_OK && s2 == HAL_OK);
 80021f0:	b93d      	cbnz	r5, 8002202 <bmp280_init+0x222>
	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80021f2:	b936      	cbnz	r6, 8002202 <bmp280_init+0x222>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80021f4:	f104 021a 	add.w	r2, r4, #26
 80021f8:	21e1      	movs	r1, #225	; 0xe1
 80021fa:	4620      	mov	r0, r4
 80021fc:	f7ff fe92 	bl	8001f24 <read_register16>
 8002200:	b908      	cbnz	r0, 8002206 <bmp280_init+0x226>
		return false;
 8002202:	2000      	movs	r0, #0
 8002204:	e06d      	b.n	80022e2 <bmp280_init+0x302>
 8002206:	23e3      	movs	r3, #227	; 0xe3
 8002208:	f88d 3006 	strb.w	r3, [sp, #6]
	BMP280_enableCSB(dev);
 800220c:	4620      	mov	r0, r4
 800220e:	f7ff fe7b 	bl	8001f08 <BMP280_enableCSB>
	HAL_StatusTypeDef s1 = HAL_SPI_Transmit(dev->spi, &addr, 1, 1000);
 8002212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002216:	2201      	movs	r2, #1
 8002218:	f10d 0106 	add.w	r1, sp, #6
 800221c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800221e:	f004 fd7e 	bl	8006d1e <HAL_SPI_Transmit>
 8002222:	4606      	mov	r6, r0
	HAL_StatusTypeDef s2 = HAL_SPI_Receive(dev->spi, value, len, 1000);
 8002224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002228:	2201      	movs	r2, #1
 800222a:	f104 011c 	add.w	r1, r4, #28
 800222e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002230:	f004 ff57 	bl	80070e2 <HAL_SPI_Receive>
 8002234:	4605      	mov	r5, r0
	BMP280_disableCSB(dev);
 8002236:	4620      	mov	r0, r4
 8002238:	f7ff fe6d 	bl	8001f16 <BMP280_disableCSB>
	return !(s1 == HAL_OK && s2 == HAL_OK);
 800223c:	2e00      	cmp	r6, #0
 800223e:	d1e0      	bne.n	8002202 <bmp280_init+0x222>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8002240:	2d00      	cmp	r5, #0
 8002242:	d1de      	bne.n	8002202 <bmp280_init+0x222>
			&& read_register16(dev, 0xe4, &h4)
 8002244:	aa01      	add	r2, sp, #4
 8002246:	21e4      	movs	r1, #228	; 0xe4
 8002248:	4620      	mov	r0, r4
 800224a:	f7ff fe6b 	bl	8001f24 <read_register16>
 800224e:	2800      	cmp	r0, #0
 8002250:	d0d7      	beq.n	8002202 <bmp280_init+0x222>
			&& read_register16(dev, 0xe5, &h5)
 8002252:	f10d 0206 	add.w	r2, sp, #6
 8002256:	21e5      	movs	r1, #229	; 0xe5
 8002258:	4620      	mov	r0, r4
 800225a:	f7ff fe63 	bl	8001f24 <read_register16>
 800225e:	2800      	cmp	r0, #0
 8002260:	d0cf      	beq.n	8002202 <bmp280_init+0x222>
 8002262:	23e7      	movs	r3, #231	; 0xe7
 8002264:	f88d 3003 	strb.w	r3, [sp, #3]
	BMP280_enableCSB(dev);
 8002268:	4620      	mov	r0, r4
 800226a:	f7ff fe4d 	bl	8001f08 <BMP280_enableCSB>
	HAL_StatusTypeDef s1 = HAL_SPI_Transmit(dev->spi, &addr, 1, 1000);
 800226e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002272:	2201      	movs	r2, #1
 8002274:	f10d 0103 	add.w	r1, sp, #3
 8002278:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800227a:	f004 fd50 	bl	8006d1e <HAL_SPI_Transmit>
 800227e:	4606      	mov	r6, r0
	HAL_StatusTypeDef s2 = HAL_SPI_Receive(dev->spi, value, len, 1000);
 8002280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002284:	2201      	movs	r2, #1
 8002286:	f104 0122 	add.w	r1, r4, #34	; 0x22
 800228a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800228c:	f004 ff29 	bl	80070e2 <HAL_SPI_Receive>
 8002290:	4605      	mov	r5, r0
	BMP280_disableCSB(dev);
 8002292:	4620      	mov	r0, r4
 8002294:	f7ff fe3f 	bl	8001f16 <BMP280_disableCSB>
	return !(s1 == HAL_OK && s2 == HAL_OK);
 8002298:	2e00      	cmp	r6, #0
 800229a:	d1b2      	bne.n	8002202 <bmp280_init+0x222>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800229c:	2d00      	cmp	r5, #0
 800229e:	d1b0      	bne.n	8002202 <bmp280_init+0x222>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80022a0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80022a4:	0113      	lsls	r3, r2, #4
 80022a6:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80022aa:	f3c2 2203 	ubfx	r2, r2, #8, #4
 80022ae:	4313      	orrs	r3, r2
 80022b0:	83e3      	strh	r3, [r4, #30]
		dev->dig_H5 = h5 >> 4;
 80022b2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80022b6:	091b      	lsrs	r3, r3, #4
 80022b8:	8423      	strh	r3, [r4, #32]
		return true;
 80022ba:	e755      	b.n	8002168 <bmp280_init+0x188>
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80022bc:	793a      	ldrb	r2, [r7, #4]
 80022be:	21f2      	movs	r1, #242	; 0xf2
 80022c0:	4620      	mov	r0, r4
 80022c2:	f7ff fe5c 	bl	8001f7e <write_register8>
 80022c6:	2800      	cmp	r0, #0
 80022c8:	f43f af6e 	beq.w	80021a8 <bmp280_init+0x1c8>
			return false;
 80022cc:	2000      	movs	r0, #0
 80022ce:	e008      	b.n	80022e2 <bmp280_init+0x302>
		return false;
 80022d0:	2000      	movs	r0, #0
 80022d2:	e006      	b.n	80022e2 <bmp280_init+0x302>
		return false;
 80022d4:	2000      	movs	r0, #0
 80022d6:	e004      	b.n	80022e2 <bmp280_init+0x302>
		return false;
 80022d8:	2000      	movs	r0, #0
 80022da:	e002      	b.n	80022e2 <bmp280_init+0x302>
		return false;
 80022dc:	2000      	movs	r0, #0
 80022de:	e000      	b.n	80022e2 <bmp280_init+0x302>
		return false;
 80022e0:	2000      	movs	r0, #0
}
 80022e2:	b002      	add	sp, #8
 80022e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080022e8 <bmp280_read_fixed>:
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
	return v_x1_u32r >> 12;
}

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80022e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022ec:	b089      	sub	sp, #36	; 0x24
 80022ee:	4604      	mov	r4, r0
 80022f0:	460e      	mov	r6, r1
 80022f2:	9201      	str	r2, [sp, #4]
 80022f4:	4698      	mov	r8, r3
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80022f6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80022fa:	2b60      	cmp	r3, #96	; 0x60
 80022fc:	f000 8168 	beq.w	80025d0 <bmp280_read_fixed+0x2e8>
		if (humidity)
 8002300:	f1b8 0f00 	cmp.w	r8, #0
 8002304:	f000 816a 	beq.w	80025dc <bmp280_read_fixed+0x2f4>
			*humidity = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	f8c8 3000 	str.w	r3, [r8]
		humidity = NULL;
 800230e:	4698      	mov	r8, r3
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8002310:	2706      	movs	r7, #6
	if (read_data(dev, 0xf7, data, size)) {
 8002312:	23f7      	movs	r3, #247	; 0xf7
 8002314:	f88d 3017 	strb.w	r3, [sp, #23]
	BMP280_enableCSB(dev);
 8002318:	4620      	mov	r0, r4
 800231a:	f7ff fdf5 	bl	8001f08 <BMP280_enableCSB>
	HAL_StatusTypeDef s1 = HAL_SPI_Transmit(dev->spi, &addr, 1, 1000);
 800231e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002322:	2201      	movs	r2, #1
 8002324:	f10d 0117 	add.w	r1, sp, #23
 8002328:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800232a:	f004 fcf8 	bl	8006d1e <HAL_SPI_Transmit>
 800232e:	4605      	mov	r5, r0
	HAL_StatusTypeDef s2 = HAL_SPI_Receive(dev->spi, value, len, 1000);
 8002330:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002334:	463a      	mov	r2, r7
 8002336:	a906      	add	r1, sp, #24
 8002338:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800233a:	f004 fed2 	bl	80070e2 <HAL_SPI_Receive>
 800233e:	4607      	mov	r7, r0
	BMP280_disableCSB(dev);
 8002340:	4620      	mov	r0, r4
 8002342:	f7ff fde8 	bl	8001f16 <BMP280_disableCSB>
	return !(s1 == HAL_OK && s2 == HAL_OK);
 8002346:	2d00      	cmp	r5, #0
 8002348:	f040 8150 	bne.w	80025ec <bmp280_read_fixed+0x304>
	if (read_data(dev, 0xf7, data, size)) {
 800234c:	2f00      	cmp	r7, #0
 800234e:	f040 8149 	bne.w	80025e4 <bmp280_read_fixed+0x2fc>
		return false;
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002352:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002356:	9302      	str	r3, [sp, #8]
 8002358:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800235c:	9203      	str	r2, [sp, #12]
 800235e:	f89d 901a 	ldrb.w	r9, [sp, #26]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8002362:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8002366:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002370:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8002374:	ea43 1512 	orr.w	r5, r3, r2, lsr #4
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8002378:	8822      	ldrh	r2, [r4, #0]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800237a:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800237e:	0052      	lsls	r2, r2, #1
 8002380:	ebc2 02e5 	rsb	r2, r2, r5, asr #3
			* (int32_t) dev->dig_T2) >> 11;
 8002384:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 8002388:	fb05 f202 	mul.w	r2, r5, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800238c:	fb03 f303 	mul.w	r3, r3, r3
 8002390:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8002392:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 8002396:	fb05 f503 	mul.w	r5, r5, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800239a:	13ad      	asrs	r5, r5, #14
	*fine_temp = var1 + var2;
 800239c:	eb05 25e2 	add.w	r5, r5, r2, asr #11
	return (*fine_temp * 5 + 128) >> 8;
 80023a0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80023a4:	3380      	adds	r3, #128	; 0x80
 80023a6:	121b      	asrs	r3, r3, #8

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80023a8:	6033      	str	r3, [r6, #0]
	var1 = (int64_t) fine_temp - 128000;
 80023aa:	17eb      	asrs	r3, r5, #31
 80023ac:	f5b5 3cfa 	subs.w	ip, r5, #128000	; 0x1f400
 80023b0:	f143 3eff 	adc.w	lr, r3, #4294967295
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80023b4:	fb0c f30e 	mul.w	r3, ip, lr
 80023b8:	fbac ab0c 	umull	sl, fp, ip, ip
 80023bc:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80023c0:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80023c4:	17d3      	asrs	r3, r2, #31
 80023c6:	fb02 f10e 	mul.w	r1, r2, lr
 80023ca:	fb0c 1103 	mla	r1, ip, r3, r1
 80023ce:	fba2 230c 	umull	r2, r3, r2, ip
 80023d2:	440b      	add	r3, r1
 80023d4:	0319      	lsls	r1, r3, #12
 80023d6:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 80023da:	0310      	lsls	r0, r2, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80023dc:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80023e0:	17d3      	asrs	r3, r2, #31
 80023e2:	fb02 f60b 	mul.w	r6, r2, fp
 80023e6:	fb0a 6603 	mla	r6, sl, r3, r6
 80023ea:	fba2 230a 	umull	r2, r3, r2, sl
 80023ee:	4433      	add	r3, r6
 80023f0:	0a16      	lsrs	r6, r2, #8
 80023f2:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
 80023f6:	121f      	asrs	r7, r3, #8
 80023f8:	1836      	adds	r6, r6, r0
 80023fa:	eb47 0101 	adc.w	r1, r7, r1
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80023fe:	3600      	adds	r6, #0
 8002400:	f541 4100 	adc.w	r1, r1, #32768	; 0x8000
 8002404:	88e2      	ldrh	r2, [r4, #6]
 8002406:	fba6 6702 	umull	r6, r7, r6, r2
 800240a:	fb02 7701 	mla	r7, r2, r1, r7
 800240e:	107a      	asrs	r2, r7, #1
 8002410:	17fb      	asrs	r3, r7, #31
	if (var1 == 0) {
 8002412:	ea52 0603 	orrs.w	r6, r2, r3
 8002416:	f000 80e3 	beq.w	80025e0 <bmp280_read_fixed+0x2f8>
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800241a:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 800241e:	17f7      	asrs	r7, r6, #31
 8002420:	fb06 f10b 	mul.w	r1, r6, fp
 8002424:	fb0a 1107 	mla	r1, sl, r7, r1
 8002428:	fba6 ab0a 	umull	sl, fp, r6, sl
 800242c:	448b      	add	fp, r1
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 800242e:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 8002432:	17c1      	asrs	r1, r0, #31
 8002434:	fb00 fe0e 	mul.w	lr, r0, lr
 8002438:	fb0c ee01 	mla	lr, ip, r1, lr
 800243c:	fba0 010c 	umull	r0, r1, r0, ip
 8002440:	4471      	add	r1, lr
 8002442:	ea4f 4c41 	mov.w	ip, r1, lsl #17
 8002446:	ea4c 3cd0 	orr.w	ip, ip, r0, lsr #15
 800244a:	ea4f 4e40 	mov.w	lr, r0, lsl #17
 800244e:	eb1e 060a 	adds.w	r6, lr, sl
 8002452:	eb4c 0c0b 	adc.w	ip, ip, fp
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002456:	ea4f 1919 	mov.w	r9, r9, lsr #4
 800245a:	9803      	ldr	r0, [sp, #12]
 800245c:	ea49 1900 	orr.w	r9, r9, r0, lsl #4
 8002460:	9902      	ldr	r1, [sp, #8]
 8002462:	ea49 3901 	orr.w	r9, r9, r1, lsl #12
	p = 1048576 - adc_press;
 8002466:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
 800246a:	ea4f 7be9 	mov.w	fp, r9, asr #31
	p = (((p << 31) - var2) * 3125) / var1;
 800246e:	ea4f 71cb 	mov.w	r1, fp, lsl #31
 8002472:	ea41 0159 	orr.w	r1, r1, r9, lsr #1
 8002476:	ea4f 70c9 	mov.w	r0, r9, lsl #31
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800247a:	f9b4 a00c 	ldrsh.w	sl, [r4, #12]
 800247e:	ea4f 0eca 	mov.w	lr, sl, lsl #3
 8002482:	2700      	movs	r7, #0
 8002484:	19be      	adds	r6, r7, r6
 8002486:	eb4e 0c0c 	adc.w	ip, lr, ip
	p = (((p << 31) - var2) * 3125) / var1;
 800248a:	1b86      	subs	r6, r0, r6
 800248c:	eb61 0c0c 	sbc.w	ip, r1, ip
 8002490:	19b0      	adds	r0, r6, r6
 8002492:	eb4c 010c 	adc.w	r1, ip, ip
 8002496:	1980      	adds	r0, r0, r6
 8002498:	eb41 010c 	adc.w	r1, r1, ip
 800249c:	018f      	lsls	r7, r1, #6
 800249e:	ea47 6790 	orr.w	r7, r7, r0, lsr #26
 80024a2:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 80024a6:	eb10 000e 	adds.w	r0, r0, lr
 80024aa:	eb47 0101 	adc.w	r1, r7, r1
 80024ae:	008f      	lsls	r7, r1, #2
 80024b0:	ea47 7790 	orr.w	r7, r7, r0, lsr #30
 80024b4:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 80024b8:	eb1e 0006 	adds.w	r0, lr, r6
 80024bc:	eb47 010c 	adc.w	r1, r7, ip
 80024c0:	008f      	lsls	r7, r1, #2
 80024c2:	ea47 7790 	orr.w	r7, r7, r0, lsr #30
 80024c6:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 80024ca:	eb1e 0006 	adds.w	r0, lr, r6
 80024ce:	eb47 010c 	adc.w	r1, r7, ip
 80024d2:	f7fe fbe9 	bl	8000ca8 <__aeabi_ldivmod>
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80024d6:	0b47      	lsrs	r7, r0, #13
 80024d8:	ea47 47c1 	orr.w	r7, r7, r1, lsl #19
 80024dc:	134e      	asrs	r6, r1, #13
 80024de:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 80024e2:	17d3      	asrs	r3, r2, #31
 80024e4:	fb02 fc06 	mul.w	ip, r2, r6
 80024e8:	fb07 cc03 	mla	ip, r7, r3, ip
 80024ec:	fba2 2307 	umull	r2, r3, r2, r7
 80024f0:	4463      	add	r3, ip
 80024f2:	fb02 f606 	mul.w	r6, r2, r6
 80024f6:	fb07 6603 	mla	r6, r7, r3, r6
 80024fa:	fba2 2307 	umull	r2, r3, r2, r7
 80024fe:	4433      	add	r3, r6
 8002500:	0e56      	lsrs	r6, r2, #25
 8002502:	ea46 16c3 	orr.w	r6, r6, r3, lsl #7
 8002506:	165f      	asrs	r7, r3, #25
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8002508:	1836      	adds	r6, r6, r0
 800250a:	eb41 0707 	adc.w	r7, r1, r7
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 800250e:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8002512:	17d3      	asrs	r3, r2, #31
 8002514:	fb02 f101 	mul.w	r1, r2, r1
 8002518:	fb00 1103 	mla	r1, r0, r3, r1
 800251c:	fba2 2300 	umull	r2, r3, r2, r0
 8002520:	440b      	add	r3, r1
 8002522:	0cd1      	lsrs	r1, r2, #19
 8002524:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
 8002528:	14d8      	asrs	r0, r3, #19
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800252a:	1876      	adds	r6, r6, r1
 800252c:	eb40 0707 	adc.w	r7, r0, r7
 8002530:	0a32      	lsrs	r2, r6, #8
 8002532:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
 8002536:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
 800253a:	0103      	lsls	r3, r0, #4
	return p;
 800253c:	4413      	add	r3, r2
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 800253e:	9a01      	ldr	r2, [sp, #4]
 8002540:	6013      	str	r3, [r2, #0]

	if (humidity) {
 8002542:	f1b8 0f00 	cmp.w	r8, #0
 8002546:	d04f      	beq.n	80025e8 <bmp280_read_fixed+0x300>
	v_x1_u32r = fine_temp - (int32_t) 76800;
 8002548:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
		int32_t adc_humidity = data[6] << 8 | data[7];
 800254c:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8002550:	f89d 101f 	ldrb.w	r1, [sp, #31]
 8002554:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002558:	f9b4 301e 	ldrsh.w	r3, [r4, #30]
 800255c:	051b      	lsls	r3, r3, #20
 800255e:	ebc3 3181 	rsb	r1, r3, r1, lsl #14
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8002562:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 8002566:	fb05 1313 	mls	r3, r5, r3, r1
 800256a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800256e:	13d9      	asrs	r1, r3, #15
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002570:	7f23      	ldrb	r3, [r4, #28]
 8002572:	fb05 f303 	mul.w	r3, r5, r3
 8002576:	12db      	asrs	r3, r3, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002578:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 800257c:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
 8002580:	fb05 f303 	mul.w	r3, r5, r3
 8002584:	129b      	asrs	r3, r3, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002586:	fb03 f302 	mul.w	r3, r3, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800258a:	129b      	asrs	r3, r3, #10
 800258c:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8002590:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8002594:	fb03 f302 	mul.w	r3, r3, r2
 8002598:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800259c:	139b      	asrs	r3, r3, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800259e:	fb03 f301 	mul.w	r3, r3, r1
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80025a2:	13da      	asrs	r2, r3, #15
 80025a4:	fb02 f202 	mul.w	r2, r2, r2
 80025a8:	11d2      	asrs	r2, r2, #7
					* (int32_t) dev->dig_H1) >> 4);
 80025aa:	7e21      	ldrb	r1, [r4, #24]
 80025ac:	fb01 f202 	mul.w	r2, r1, r2
	v_x1_u32r = v_x1_u32r
 80025b0:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80025b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80025b8:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80025bc:	bfa8      	it	ge
 80025be:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
	return v_x1_u32r >> 12;
 80025c2:	131b      	asrs	r3, r3, #12
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 80025c4:	f8c8 3000 	str.w	r3, [r8]
	}

	return true;
 80025c8:	2001      	movs	r0, #1
}
 80025ca:	b009      	add	sp, #36	; 0x24
 80025cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t size = humidity ? 8 : 6;
 80025d0:	f1b8 0f00 	cmp.w	r8, #0
 80025d4:	bf14      	ite	ne
 80025d6:	2708      	movne	r7, #8
 80025d8:	2706      	moveq	r7, #6
 80025da:	e69a      	b.n	8002312 <bmp280_read_fixed+0x2a>
 80025dc:	2706      	movs	r7, #6
 80025de:	e698      	b.n	8002312 <bmp280_read_fixed+0x2a>
		return 0;  // avoid exception caused by division by zero
 80025e0:	2300      	movs	r3, #0
 80025e2:	e7ac      	b.n	800253e <bmp280_read_fixed+0x256>
		return false;
 80025e4:	2000      	movs	r0, #0
 80025e6:	e7f0      	b.n	80025ca <bmp280_read_fixed+0x2e2>
	return true;
 80025e8:	2001      	movs	r0, #1
 80025ea:	e7ee      	b.n	80025ca <bmp280_read_fixed+0x2e2>
		return false;
 80025ec:	2000      	movs	r0, #0
 80025ee:	e7ec      	b.n	80025ca <bmp280_read_fixed+0x2e2>

080025f0 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 80025f0:	b570      	push	{r4, r5, r6, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	460d      	mov	r5, r1
 80025f6:	4614      	mov	r4, r2
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 80025f8:	b143      	cbz	r3, 800260c <bmp280_read_float+0x1c>
 80025fa:	461e      	mov	r6, r3
 80025fc:	ab01      	add	r3, sp, #4
 80025fe:	aa02      	add	r2, sp, #8
 8002600:	a903      	add	r1, sp, #12
 8002602:	f7ff fe71 	bl	80022e8 <bmp280_read_fixed>
 8002606:	b9c0      	cbnz	r0, 800263a <bmp280_read_float+0x4a>
			*humidity = (float) fixed_humidity / 1024;
		return true;
	}

	return false;
}
 8002608:	b004      	add	sp, #16
 800260a:	bd70      	pop	{r4, r5, r6, pc}
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 800260c:	aa02      	add	r2, sp, #8
 800260e:	a903      	add	r1, sp, #12
 8002610:	f7ff fe6a 	bl	80022e8 <bmp280_read_fixed>
 8002614:	2800      	cmp	r0, #0
 8002616:	d0f7      	beq.n	8002608 <bmp280_read_float+0x18>
		*temperature = (float) fixed_temperature / 100;
 8002618:	eddd 7a03 	vldr	s15, [sp, #12]
 800261c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002620:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002668 <bmp280_read_float+0x78>
 8002624:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002628:	ed85 7a00 	vstr	s14, [r5]
		*pressure = (float) fixed_pressure / 256;
 800262c:	eddd 7a02 	vldr	s15, [sp, #8]
 8002630:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
 8002634:	edc4 7a00 	vstr	s15, [r4]
		if (humidity)
 8002638:	e7e6      	b.n	8002608 <bmp280_read_float+0x18>
		*temperature = (float) fixed_temperature / 100;
 800263a:	eddd 7a03 	vldr	s15, [sp, #12]
 800263e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002642:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002668 <bmp280_read_float+0x78>
 8002646:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800264a:	ed85 7a00 	vstr	s14, [r5]
		*pressure = (float) fixed_pressure / 256;
 800264e:	eddd 7a02 	vldr	s15, [sp, #8]
 8002652:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
 8002656:	edc4 7a00 	vstr	s15, [r4]
			*humidity = (float) fixed_humidity / 1024;
 800265a:	eddd 7a01 	vldr	s15, [sp, #4]
 800265e:	eefb 7acb 	vcvt.f32.u32	s15, s15, #10
 8002662:	edc6 7a00 	vstr	s15, [r6]
 8002666:	e7cf      	b.n	8002608 <bmp280_read_float+0x18>
 8002668:	42c80000 	.word	0x42c80000

0800266c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800266c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002670:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002672:	2400      	movs	r4, #0
 8002674:	9405      	str	r4, [sp, #20]
 8002676:	9406      	str	r4, [sp, #24]
 8002678:	9407      	str	r4, [sp, #28]
 800267a:	9408      	str	r4, [sp, #32]
 800267c:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800267e:	9401      	str	r4, [sp, #4]
 8002680:	4b2e      	ldr	r3, [pc, #184]	; (800273c <MX_GPIO_Init+0xd0>)
 8002682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002684:	f042 0204 	orr.w	r2, r2, #4
 8002688:	631a      	str	r2, [r3, #48]	; 0x30
 800268a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800268c:	f002 0204 	and.w	r2, r2, #4
 8002690:	9201      	str	r2, [sp, #4]
 8002692:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002694:	9402      	str	r4, [sp, #8]
 8002696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002698:	f042 0201 	orr.w	r2, r2, #1
 800269c:	631a      	str	r2, [r3, #48]	; 0x30
 800269e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026a0:	f002 0201 	and.w	r2, r2, #1
 80026a4:	9202      	str	r2, [sp, #8]
 80026a6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a8:	9403      	str	r4, [sp, #12]
 80026aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ac:	f042 0202 	orr.w	r2, r2, #2
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
 80026b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026b4:	f002 0202 	and.w	r2, r2, #2
 80026b8:	9203      	str	r2, [sp, #12]
 80026ba:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026bc:	9404      	str	r4, [sp, #16]
 80026be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c0:	f042 0208 	orr.w	r2, r2, #8
 80026c4:	631a      	str	r2, [r3, #48]	; 0x30
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	9304      	str	r3, [sp, #16]
 80026ce:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 80026d0:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8002744 <MX_GPIO_Init+0xd8>
 80026d4:	2201      	movs	r2, #1
 80026d6:	2106      	movs	r1, #6
 80026d8:	4640      	mov	r0, r8
 80026da:	f001 ff1d 	bl	8004518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_SET);
 80026de:	4d18      	ldr	r5, [pc, #96]	; (8002740 <MX_GPIO_Init+0xd4>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80026e6:	4628      	mov	r0, r5
 80026e8:	f001 ff16 	bl	8004518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80026ec:	4622      	mov	r2, r4
 80026ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026f2:	4628      	mov	r0, r5
 80026f4:	f001 ff10 	bl	8004518 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80026f8:	2306      	movs	r3, #6
 80026fa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fc:	2601      	movs	r6, #1
 80026fe:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002702:	2702      	movs	r7, #2
 8002704:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002706:	a905      	add	r1, sp, #20
 8002708:	4640      	mov	r0, r8
 800270a:	f001 fe0d 	bl	8004328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 800270e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002712:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002714:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002718:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271a:	a905      	add	r1, sp, #20
 800271c:	4628      	mov	r0, r5
 800271e:	f001 fe03 	bl	8004328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 8002722:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002726:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002728:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800272c:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272e:	a905      	add	r1, sp, #20
 8002730:	4628      	mov	r0, r5
 8002732:	f001 fdf9 	bl	8004328 <HAL_GPIO_Init>

}
 8002736:	b00a      	add	sp, #40	; 0x28
 8002738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800273c:	40023800 	.word	0x40023800
 8002740:	40020400 	.word	0x40020400
 8002744:	40020800 	.word	0x40020800

08002748 <GPS_Init>:

uint8_t receiveByte;
uint8_t gpsBuffer[GPS_BUFFER_SIZE];
uint8_t gpsIndex = 0;

void GPS_Init(UART_HandleTypeDef* huartx) {
 8002748:	b510      	push	{r4, lr}
	huart = huartx;
 800274a:	4c05      	ldr	r4, [pc, #20]	; (8002760 <GPS_Init+0x18>)
 800274c:	6020      	str	r0, [r4, #0]

	// delay for correct device start
	HAL_Delay(50);
 800274e:	2032      	movs	r0, #50	; 0x32
 8002750:	f001 fa18 	bl	8003b84 <HAL_Delay>

	HAL_UART_Receive_IT(huart, &receiveByte, 1);
 8002754:	2201      	movs	r2, #1
 8002756:	4903      	ldr	r1, [pc, #12]	; (8002764 <GPS_Init+0x1c>)
 8002758:	6820      	ldr	r0, [r4, #0]
 800275a:	f005 fd9e 	bl	800829a <HAL_UART_Receive_IT>
}
 800275e:	bd10      	pop	{r4, pc}
 8002760:	20000308 	.word	0x20000308
 8002764:	20000a3e 	.word	0x20000a3e

08002768 <getMsg>:

uint8_t receiveData = 0;
uint8_t nmeaHeaderBuf[6];
uint8_t msgResult = 0;

uint8_t getMsg(GPS_Data_Typedef* obj) {
 8002768:	b570      	push	{r4, r5, r6, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	4605      	mov	r5, r0
	uint8_t startI = 0, startOfPacket = 0;
	uint8_t checksum = 0;

	// go to last $ in msg
	for(uint8_t i = 0; i < gpsIndex; i++) {
 800276e:	4b2b      	ldr	r3, [pc, #172]	; (800281c <getMsg+0xb4>)
 8002770:	781c      	ldrb	r4, [r3, #0]
 8002772:	2c00      	cmp	r4, #0
 8002774:	d036      	beq.n	80027e4 <getMsg+0x7c>
 8002776:	492a      	ldr	r1, [pc, #168]	; (8002820 <getMsg+0xb8>)
 8002778:	2300      	movs	r3, #0
	uint8_t startI = 0, startOfPacket = 0;
 800277a:	461a      	mov	r2, r3
		if(gpsBuffer[i] == '$') startI = i;
 800277c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8002780:	2824      	cmp	r0, #36	; 0x24
 8002782:	bf08      	it	eq
 8002784:	461a      	moveq	r2, r3
	for(uint8_t i = 0; i < gpsIndex; i++) {
 8002786:	3301      	adds	r3, #1
 8002788:	b2db      	uxtb	r3, r3
 800278a:	42a3      	cmp	r3, r4
 800278c:	d1f6      	bne.n	800277c <getMsg+0x14>
	}

	// skip $
	startI++;
 800278e:	3201      	adds	r2, #1
 8002790:	b2d4      	uxtb	r4, r2
	startOfPacket = startI;

	// calculate checksum
	while(gpsBuffer[startI] != '*' && gpsBuffer[startI] != '\0') {
 8002792:	4621      	mov	r1, r4
 8002794:	4b22      	ldr	r3, [pc, #136]	; (8002820 <getMsg+0xb8>)
 8002796:	5d18      	ldrb	r0, [r3, r4]
 8002798:	282a      	cmp	r0, #42	; 0x2a
	uint8_t checksum = 0;
 800279a:	bf08      	it	eq
 800279c:	2200      	moveq	r2, #0
	while(gpsBuffer[startI] != '*' && gpsBuffer[startI] != '\0') {
 800279e:	d00a      	beq.n	80027b6 <getMsg+0x4e>
	startI++;
 80027a0:	4623      	mov	r3, r4
	uint8_t checksum = 0;
 80027a2:	2200      	movs	r2, #0
	while(gpsBuffer[startI] != '*' && gpsBuffer[startI] != '\0') {
 80027a4:	4e1e      	ldr	r6, [pc, #120]	; (8002820 <getMsg+0xb8>)
 80027a6:	b1d8      	cbz	r0, 80027e0 <getMsg+0x78>
		checksum ^= gpsBuffer[startI];
 80027a8:	4042      	eors	r2, r0
		startI++;
 80027aa:	3301      	adds	r3, #1
 80027ac:	b2db      	uxtb	r3, r3
	while(gpsBuffer[startI] != '*' && gpsBuffer[startI] != '\0') {
 80027ae:	4619      	mov	r1, r3
 80027b0:	5cf0      	ldrb	r0, [r6, r3]
 80027b2:	282a      	cmp	r0, #42	; 0x2a
 80027b4:	d1f7      	bne.n	80027a6 <getMsg+0x3e>
		return 0;
	}

	// get msg checksum
	char msgChecksum[3];
	msgChecksum[0] = gpsBuffer[startI + 1];
 80027b6:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <getMsg+0xb8>)
 80027b8:	4419      	add	r1, r3
 80027ba:	784b      	ldrb	r3, [r1, #1]
 80027bc:	f88d 301c 	strb.w	r3, [sp, #28]
	msgChecksum[1] = gpsBuffer[startI + 2];
 80027c0:	788b      	ldrb	r3, [r1, #2]
 80027c2:	f88d 301d 	strb.w	r3, [sp, #29]
	msgChecksum[2] = '\0';
 80027c6:	2300      	movs	r3, #0
 80027c8:	f88d 301e 	strb.w	r3, [sp, #30]

	// convert calculated checksum to hex format
	char calcChecksum[3];
	sprintf(calcChecksum, "%02X", checksum);
 80027cc:	4915      	ldr	r1, [pc, #84]	; (8002824 <getMsg+0xbc>)
 80027ce:	a806      	add	r0, sp, #24
 80027d0:	f008 fe7c 	bl	800b4cc <siprintf>

	uint8_t isPacketValid = strcmp(calcChecksum, msgChecksum) == 0;
 80027d4:	a907      	add	r1, sp, #28
 80027d6:	a806      	add	r0, sp, #24
 80027d8:	f7fd fcfa 	bl	80001d0 <strcmp>

	if(isPacketValid) {
 80027dc:	b120      	cbz	r0, 80027e8 <getMsg+0x80>
		sscanf(gpsBuffer + startOfPacket, "GPRMC,%f,%c,%d.%d,%c,%d.%d,%c", &obj->hhmmss_ms, &obj->packetValid, &obj->latitude1, &obj->latitude2, &obj->NS, &obj->longitude1, &obj->longitude2, &obj->EW);
	}

	return isPacketValid;
 80027de:	2000      	movs	r0, #0

		return 1;
	}*/

	//return 0;
}
 80027e0:	b008      	add	sp, #32
 80027e2:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t startI = 0, startOfPacket = 0;
 80027e4:	4622      	mov	r2, r4
 80027e6:	e7d2      	b.n	800278e <getMsg+0x26>
		sscanf(gpsBuffer + startOfPacket, "GPRMC,%f,%c,%d.%d,%c,%d.%d,%c", &obj->hhmmss_ms, &obj->packetValid, &obj->latitude1, &obj->latitude2, &obj->NS, &obj->longitude1, &obj->longitude2, &obj->EW);
 80027e8:	1dab      	adds	r3, r5, #6
 80027ea:	9305      	str	r3, [sp, #20]
 80027ec:	f105 0314 	add.w	r3, r5, #20
 80027f0:	9304      	str	r3, [sp, #16]
 80027f2:	f105 0310 	add.w	r3, r5, #16
 80027f6:	9303      	str	r3, [sp, #12]
 80027f8:	1d6b      	adds	r3, r5, #5
 80027fa:	9302      	str	r3, [sp, #8]
 80027fc:	f105 030c 	add.w	r3, r5, #12
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	f105 0308 	add.w	r3, r5, #8
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	1d2b      	adds	r3, r5, #4
 800280a:	462a      	mov	r2, r5
 800280c:	4906      	ldr	r1, [pc, #24]	; (8002828 <getMsg+0xc0>)
 800280e:	4804      	ldr	r0, [pc, #16]	; (8002820 <getMsg+0xb8>)
 8002810:	4420      	add	r0, r4
 8002812:	f008 fe7b 	bl	800b50c <siscanf>
	return isPacketValid;
 8002816:	2001      	movs	r0, #1
 8002818:	e7e2      	b.n	80027e0 <getMsg+0x78>
 800281a:	bf00      	nop
 800281c:	20000306 	.word	0x20000306
 8002820:	200009b8 	.word	0x200009b8
 8002824:	08010154 	.word	0x08010154
 8002828:	08010134 	.word	0x08010134

0800282c <GPS_Callback>:

void GPS_Callback(UART_HandleTypeDef* callbackUart, GPS_Data_Typedef* obj) {
	if(callbackUart != huart) return;
 800282c:	4b17      	ldr	r3, [pc, #92]	; (800288c <GPS_Callback+0x60>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4283      	cmp	r3, r0
 8002832:	d000      	beq.n	8002836 <GPS_Callback+0xa>
 8002834:	4770      	bx	lr
void GPS_Callback(UART_HandleTypeDef* callbackUart, GPS_Data_Typedef* obj) {
 8002836:	b570      	push	{r4, r5, r6, lr}
	//	receiveData = 1;
	//}

	//if(receiveData) {

	if(receiveByte != '\n' && gpsIndex < GPS_BUFFER_SIZE) {
 8002838:	4b15      	ldr	r3, [pc, #84]	; (8002890 <GPS_Callback+0x64>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b0a      	cmp	r3, #10
 800283e:	d00b      	beq.n	8002858 <GPS_Callback+0x2c>
 8002840:	4a14      	ldr	r2, [pc, #80]	; (8002894 <GPS_Callback+0x68>)
 8002842:	7810      	ldrb	r0, [r2, #0]
 8002844:	f992 2000 	ldrsb.w	r2, [r2]
 8002848:	2a00      	cmp	r2, #0
 800284a:	db05      	blt.n	8002858 <GPS_Callback+0x2c>
		gpsBuffer[gpsIndex++] = receiveByte;
 800284c:	1c41      	adds	r1, r0, #1
 800284e:	4a11      	ldr	r2, [pc, #68]	; (8002894 <GPS_Callback+0x68>)
 8002850:	7011      	strb	r1, [r2, #0]
 8002852:	4a11      	ldr	r2, [pc, #68]	; (8002898 <GPS_Callback+0x6c>)
 8002854:	5413      	strb	r3, [r2, r0]
 8002856:	e011      	b.n	800287c <GPS_Callback+0x50>
	} else {
		gpsBuffer[gpsIndex] = '\0';
 8002858:	4d0f      	ldr	r5, [pc, #60]	; (8002898 <GPS_Callback+0x6c>)
 800285a:	4e0e      	ldr	r6, [pc, #56]	; (8002894 <GPS_Callback+0x68>)
 800285c:	7833      	ldrb	r3, [r6, #0]
 800285e:	2400      	movs	r4, #0
 8002860:	54ec      	strb	r4, [r5, r3]
		msgResult = getMsg(obj);
 8002862:	4608      	mov	r0, r1
 8002864:	f7ff ff80 	bl	8002768 <getMsg>
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <GPS_Callback+0x70>)
 800286a:	7018      	strb	r0, [r3, #0]

		receiveData = 0;
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <GPS_Callback+0x74>)
 800286e:	701c      	strb	r4, [r3, #0]
		gpsIndex = 0;
 8002870:	7034      	strb	r4, [r6, #0]
		memset(gpsBuffer, 0, GPS_BUFFER_SIZE);
 8002872:	2280      	movs	r2, #128	; 0x80
 8002874:	4621      	mov	r1, r4
 8002876:	4628      	mov	r0, r5
 8002878:	f007 ffa0 	bl	800a7bc <memset>
		uint8_t test = 2;

		gpsIndex = 0;
		memset(gpsBuffer, 0, GPS_BUFFER_SIZE);
	}*/
	HAL_UART_Receive_IT(huart, &receiveByte, 1);
 800287c:	2201      	movs	r2, #1
 800287e:	4904      	ldr	r1, [pc, #16]	; (8002890 <GPS_Callback+0x64>)
 8002880:	4b02      	ldr	r3, [pc, #8]	; (800288c <GPS_Callback+0x60>)
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	f005 fd09 	bl	800829a <HAL_UART_Receive_IT>
}
 8002888:	bd70      	pop	{r4, r5, r6, pc}
 800288a:	bf00      	nop
 800288c:	20000308 	.word	0x20000308
 8002890:	20000a3e 	.word	0x20000a3e
 8002894:	20000306 	.word	0x20000306
 8002898:	200009b8 	.word	0x200009b8
 800289c:	2000030c 	.word	0x2000030c
 80028a0:	2000030d 	.word	0x2000030d

080028a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80028a4:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028a6:	480b      	ldr	r0, [pc, #44]	; (80028d4 <MX_I2C1_Init+0x30>)
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <MX_I2C1_Init+0x34>)
 80028aa:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <MX_I2C1_Init+0x38>)
 80028ae:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028b0:	2300      	movs	r3, #0
 80028b2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80028b4:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028ba:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028bc:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028be:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028c0:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028c2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028c4:	f001 fe38 	bl	8004538 <HAL_I2C_Init>
 80028c8:	b900      	cbnz	r0, 80028cc <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028ca:	bd08      	pop	{r3, pc}
    Error_Handler();
 80028cc:	f000 fd30 	bl	8003330 <Error_Handler>
}
 80028d0:	e7fb      	b.n	80028ca <MX_I2C1_Init+0x26>
 80028d2:	bf00      	nop
 80028d4:	20000a40 	.word	0x20000a40
 80028d8:	40005400 	.word	0x40005400
 80028dc:	000186a0 	.word	0x000186a0

080028e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80028e0:	b530      	push	{r4, r5, lr}
 80028e2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	2300      	movs	r3, #0
 80028e6:	9303      	str	r3, [sp, #12]
 80028e8:	9304      	str	r3, [sp, #16]
 80028ea:	9305      	str	r3, [sp, #20]
 80028ec:	9306      	str	r3, [sp, #24]
 80028ee:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 80028f0:	6802      	ldr	r2, [r0, #0]
 80028f2:	4b19      	ldr	r3, [pc, #100]	; (8002958 <HAL_I2C_MspInit+0x78>)
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80028f8:	b009      	add	sp, #36	; 0x24
 80028fa:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028fc:	2500      	movs	r5, #0
 80028fe:	9501      	str	r5, [sp, #4]
 8002900:	4c16      	ldr	r4, [pc, #88]	; (800295c <HAL_I2C_MspInit+0x7c>)
 8002902:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002904:	f043 0302 	orr.w	r3, r3, #2
 8002908:	6323      	str	r3, [r4, #48]	; 0x30
 800290a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	9301      	str	r3, [sp, #4]
 8002912:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002914:	23c0      	movs	r3, #192	; 0xc0
 8002916:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002918:	2312      	movs	r3, #18
 800291a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800291c:	2301      	movs	r3, #1
 800291e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002920:	2303      	movs	r3, #3
 8002922:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002924:	2304      	movs	r3, #4
 8002926:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002928:	a903      	add	r1, sp, #12
 800292a:	480d      	ldr	r0, [pc, #52]	; (8002960 <HAL_I2C_MspInit+0x80>)
 800292c:	f001 fcfc 	bl	8004328 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002930:	9502      	str	r5, [sp, #8]
 8002932:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002934:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002938:	6423      	str	r3, [r4, #64]	; 0x40
 800293a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800293c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002940:	9302      	str	r3, [sp, #8]
 8002942:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002944:	462a      	mov	r2, r5
 8002946:	4629      	mov	r1, r5
 8002948:	201f      	movs	r0, #31
 800294a:	f001 fbf1 	bl	8004130 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800294e:	201f      	movs	r0, #31
 8002950:	f001 fc20 	bl	8004194 <HAL_NVIC_EnableIRQ>
}
 8002954:	e7d0      	b.n	80028f8 <HAL_I2C_MspInit+0x18>
 8002956:	bf00      	nop
 8002958:	40005400 	.word	0x40005400
 800295c:	40023800 	.word	0x40023800
 8002960:	40020400 	.word	0x40020400

08002964 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// UART RX callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8002964:	b508      	push	{r3, lr}
	GPS_Callback(huart, &GPS_Data);
 8002966:	4902      	ldr	r1, [pc, #8]	; (8002970 <HAL_UART_RxCpltCallback+0xc>)
 8002968:	f7ff ff60 	bl	800282c <GPS_Callback>
}
 800296c:	bd08      	pop	{r3, pc}
 800296e:	bf00      	nop
 8002970:	20000414 	.word	0x20000414

08002974 <HAL_TIM_PeriodElapsedCallback>:
	}
}*/

// Buzzer update Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
	if(htim->Instance == TIM1) {
 8002974:	6802      	ldr	r2, [r0, #0]
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002978:	429a      	cmp	r2, r3
 800297a:	d000      	beq.n	800297e <HAL_TIM_PeriodElapsedCallback+0xa>
			} else {
				isBuzzerWorking = 1;
			}
		}
	}
}
 800297c:	4770      	bx	lr
		if(isTimerStarted > 0) {
 800297e:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0fa      	beq.n	800297c <HAL_TIM_PeriodElapsedCallback+0x8>
			if(isBuzzerWorking > 0) {
 8002986:	4b07      	ldr	r3, [pc, #28]	; (80029a4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	b11b      	cbz	r3, 8002994 <HAL_TIM_PeriodElapsedCallback+0x20>
				isBuzzerWorking = 0;
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
 8002992:	4770      	bx	lr
				isBuzzerWorking = 1;
 8002994:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002996:	2201      	movs	r2, #1
 8002998:	701a      	strb	r2, [r3, #0]
}
 800299a:	e7ef      	b.n	800297c <HAL_TIM_PeriodElapsedCallback+0x8>
 800299c:	40010000 	.word	0x40010000
 80029a0:	200008e6 	.word	0x200008e6
 80029a4:	200008e4 	.word	0x200008e4

080029a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029a8:	b500      	push	{lr}
 80029aa:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ac:	2230      	movs	r2, #48	; 0x30
 80029ae:	2100      	movs	r1, #0
 80029b0:	a808      	add	r0, sp, #32
 80029b2:	f007 ff03 	bl	800a7bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029b6:	2300      	movs	r3, #0
 80029b8:	9303      	str	r3, [sp, #12]
 80029ba:	9304      	str	r3, [sp, #16]
 80029bc:	9305      	str	r3, [sp, #20]
 80029be:	9306      	str	r3, [sp, #24]
 80029c0:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029c2:	9301      	str	r3, [sp, #4]
 80029c4:	4a1e      	ldr	r2, [pc, #120]	; (8002a40 <SystemClock_Config+0x98>)
 80029c6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80029c8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80029cc:	6411      	str	r1, [r2, #64]	; 0x40
 80029ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029d0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80029d4:	9201      	str	r2, [sp, #4]
 80029d6:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029d8:	9302      	str	r3, [sp, #8]
 80029da:	4a1a      	ldr	r2, [pc, #104]	; (8002a44 <SystemClock_Config+0x9c>)
 80029dc:	6811      	ldr	r1, [r2, #0]
 80029de:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80029e2:	6011      	str	r1, [r2, #0]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80029ea:	9202      	str	r2, [sp, #8]
 80029ec:	9a02      	ldr	r2, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029ee:	2102      	movs	r1, #2
 80029f0:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029f2:	2201      	movs	r2, #1
 80029f4:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029f6:	2210      	movs	r2, #16
 80029f8:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029fa:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029fc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80029fe:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002a00:	23c0      	movs	r3, #192	; 0xc0
 8002a02:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002a04:	2304      	movs	r3, #4
 8002a06:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a08:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a0a:	a808      	add	r0, sp, #32
 8002a0c:	f002 fdfc 	bl	8005608 <HAL_RCC_OscConfig>
 8002a10:	b988      	cbnz	r0, 8002a36 <SystemClock_Config+0x8e>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a12:	230f      	movs	r3, #15
 8002a14:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a16:	2302      	movs	r3, #2
 8002a18:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a22:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a24:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a26:	2101      	movs	r1, #1
 8002a28:	a803      	add	r0, sp, #12
 8002a2a:	f003 f83b 	bl	8005aa4 <HAL_RCC_ClockConfig>
 8002a2e:	b920      	cbnz	r0, 8002a3a <SystemClock_Config+0x92>
  {
    Error_Handler();
  }
}
 8002a30:	b015      	add	sp, #84	; 0x54
 8002a32:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a36:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a38:	e7fe      	b.n	8002a38 <SystemClock_Config+0x90>
 8002a3a:	b672      	cpsid	i
 8002a3c:	e7fe      	b.n	8002a3c <SystemClock_Config+0x94>
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40007000 	.word	0x40007000

08002a48 <main>:
{
 8002a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a4c:	ed2d 8b0c 	vpush	{d8-d13}
 8002a50:	b0b3      	sub	sp, #204	; 0xcc
  HAL_Init();
 8002a52:	f001 f86b 	bl	8003b2c <HAL_Init>
  SystemClock_Config();
 8002a56:	f7ff ffa7 	bl	80029a8 <SystemClock_Config>
  uint32_t sysInitStartTick = HAL_GetTick();
 8002a5a:	f001 f88d 	bl	8003b78 <HAL_GetTick>
 8002a5e:	4604      	mov	r4, r0
  MX_GPIO_Init();
 8002a60:	f7ff fe04 	bl	800266c <MX_GPIO_Init>
  MX_SPI1_Init();
 8002a64:	f000 fce2 	bl	800342c <MX_SPI1_Init>
  MX_SDIO_SD_Init();
 8002a68:	f000 fc64 	bl	8003334 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8002a6c:	f005 ffbc 	bl	80089e8 <MX_FATFS_Init>
  MX_I2C1_Init();
 8002a70:	f7ff ff18 	bl	80028a4 <MX_I2C1_Init>
  MX_UART4_Init();
 8002a74:	f000 ffb0 	bl	80039d8 <MX_UART4_Init>
  MX_TIM2_Init();
 8002a78:	f000 fefc 	bl	8003874 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002a7c:	f000 ff52 	bl	8003924 <MX_TIM3_Init>
  MX_ADC2_Init();
 8002a80:	f7ff f9c2 	bl	8001e08 <MX_ADC2_Init>
  MX_TIM1_Init();
 8002a84:	f000 fe2e 	bl	80036e4 <MX_TIM1_Init>
  sysInitTime = HAL_GetTick() - sysInitStartTick;
 8002a88:	f001 f876 	bl	8003b78 <HAL_GetTick>
 8002a8c:	f8df b248 	ldr.w	fp, [pc, #584]	; 8002cd8 <main+0x290>
 8002a90:	1b00      	subs	r0, r0, r4
 8002a92:	f8cb 0000 	str.w	r0, [fp]
  uint32_t userInitStartTick = HAL_GetTick();
 8002a96:	f001 f86f 	bl	8003b78 <HAL_GetTick>
 8002a9a:	9026      	str	r0, [sp, #152]	; 0x98
  HAL_Delay(50);
 8002a9c:	2032      	movs	r0, #50	; 0x32
 8002a9e:	f001 f871 	bl	8003b84 <HAL_Delay>
  STLM75M2F_Init(&hi2c1);
 8002aa2:	486f      	ldr	r0, [pc, #444]	; (8002c60 <main+0x218>)
 8002aa4:	f7ff f976 	bl	8001d94 <STLM75M2F_Init>
  MS5607_SetPressureOSR(MS5607_OSR_256);
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f7ff f945 	bl	8001d38 <MS5607_SetPressureOSR>
  MS5607_SetTemperatureOSR(MS5607_OSR_256);
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f7ff f93c 	bl	8001d2c <MS5607_SetTemperatureOSR>
  MS5607_status1 = MS5607_Init(&hspi1, GPIOB, GPIO_PIN_5);
 8002ab4:	4e6b      	ldr	r6, [pc, #428]	; (8002c64 <main+0x21c>)
 8002ab6:	4d6c      	ldr	r5, [pc, #432]	; (8002c68 <main+0x220>)
 8002ab8:	2220      	movs	r2, #32
 8002aba:	4631      	mov	r1, r6
 8002abc:	4628      	mov	r0, r5
 8002abe:	f7ff f85f 	bl	8001b80 <MS5607_Init>
 8002ac2:	f8df a218 	ldr.w	sl, [pc, #536]	; 8002cdc <main+0x294>
 8002ac6:	f88a 0000 	strb.w	r0, [sl]
  LSM6DSLTR_status2 = LSM6DSLTR_Init(&hspi1, GPIOC, GPIO_PIN_1);
 8002aca:	4c68      	ldr	r4, [pc, #416]	; (8002c6c <main+0x224>)
 8002acc:	2202      	movs	r2, #2
 8002ace:	4621      	mov	r1, r4
 8002ad0:	4628      	mov	r0, r5
 8002ad2:	f7fe fcfb 	bl	80014cc <LSM6DSLTR_Init>
 8002ad6:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8002ce0 <main+0x298>
 8002ada:	f889 0000 	strb.w	r0, [r9]
  LSM6DSLTR_SetAccelerometerODR_FS(LSM6DSLTR_ODR_12_5HZ, LSM6DSLTR_FS_16G);
 8002ade:	2101      	movs	r1, #1
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	f7fe fd21 	bl	8001528 <LSM6DSLTR_SetAccelerometerODR_FS>
  LSM6DSLTR_SetGyroscopeODR_FS(LSM6DSLTR_ODR_12_5HZ, LSM6DSLTR_FS_1KDPS, LSM6DSLTR_SETTING_FS_125DPS_DISABLE);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2102      	movs	r1, #2
 8002aea:	2001      	movs	r0, #1
 8002aec:	f7fe fd26 	bl	800153c <LSM6DSLTR_SetGyroscopeODR_FS>
  LSM303DTR_status3 = LSM303DTR_Init(&hspi1, GPIOC, GPIO_PIN_2);
 8002af0:	2204      	movs	r2, #4
 8002af2:	4621      	mov	r1, r4
 8002af4:	4628      	mov	r0, r5
 8002af6:	f7fe fbf9 	bl	80012ec <LSM303DTR_Init>
 8002afa:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8002ce4 <main+0x29c>
 8002afe:	f888 0000 	strb.w	r0, [r8]
  LSM303DTR_SetAccelerometerFS(LSM303DTR_FS_16G);
 8002b02:	2004      	movs	r0, #4
 8002b04:	f7fe fc42 	bl	800138c <LSM303DTR_SetAccelerometerFS>
  LSM303DTR_SetAccelerometerODR(LSM303DTR_ODR_12_5HZ);
 8002b08:	2003      	movs	r0, #3
 8002b0a:	f7fe fc21 	bl	8001350 <LSM303DTR_SetAccelerometerODR>
  LSM303DTR_SetCompassMode(LSM303DTR_CONTINUOUS_CONVERSION);
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f7fe fc4c 	bl	80013ac <LSM303DTR_SetCompassMode>
  LSM303DTR_SetCompassFS(LSM303DTR_FS_8GAUSS);
 8002b14:	2002      	movs	r0, #2
 8002b16:	f7fe fc41 	bl	800139c <LSM303DTR_SetCompassFS>
  LSM303DTR_SetCompassODR(LSM303DTR_ODR_12_5HZ);
 8002b1a:	2003      	movs	r0, #3
 8002b1c:	f7fe fc22 	bl	8001364 <LSM303DTR_SetCompassODR>
  HAL_Delay(50);
 8002b20:	2032      	movs	r0, #50	; 0x32
 8002b22:	f001 f82f 	bl	8003b84 <HAL_Delay>
  bmp280_init_default_params(&bmp280.params);
 8002b26:	4f52      	ldr	r7, [pc, #328]	; (8002c70 <main+0x228>)
 8002b28:	4638      	mov	r0, r7
 8002b2a:	f7ff fa50 	bl	8001fce <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002b2e:	f1a7 0432 	sub.w	r4, r7, #50	; 0x32
 8002b32:	2376      	movs	r3, #118	; 0x76
 8002b34:	84a3      	strh	r3, [r4, #36]	; 0x24
  bmp280.spi = &hspi1;
 8002b36:	62a5      	str	r5, [r4, #40]	; 0x28
  bmp280.spiPort = GPIOB;
 8002b38:	62e6      	str	r6, [r4, #44]	; 0x2c
  bmp280.spiPin = GPIO_PIN_10;
 8002b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b3e:	8623      	strh	r3, [r4, #48]	; 0x30
  bmp280_status = bmp280_init(&bmp280, &bmp280.params);
 8002b40:	4639      	mov	r1, r7
 8002b42:	4620      	mov	r0, r4
 8002b44:	f7ff fa4c 	bl	8001fe0 <bmp280_init>
 8002b48:	4b4a      	ldr	r3, [pc, #296]	; (8002c74 <main+0x22c>)
 8002b4a:	7018      	strb	r0, [r3, #0]
  LoRa_status4 = lora_init(&LoRa, &hspi1, GPIOB, GPIO_PIN_8, 434000000);
 8002b4c:	a342      	add	r3, pc, #264	; (adr r3, 8002c58 <main+0x210>)
 8002b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b52:	e9cd 2300 	strd	r2, r3, [sp]
 8002b56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b5a:	4632      	mov	r2, r6
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	4846      	ldr	r0, [pc, #280]	; (8002c78 <main+0x230>)
 8002b60:	f7fe fe7a 	bl	8001858 <lora_init>
 8002b64:	4d45      	ldr	r5, [pc, #276]	; (8002c7c <main+0x234>)
 8002b66:	7028      	strb	r0, [r5, #0]
  HAL_Delay(50);
 8002b68:	2032      	movs	r0, #50	; 0x32
 8002b6a:	f001 f80b 	bl	8003b84 <HAL_Delay>
  SD_mountStatus = f_mount(&fatfs, "", 1);
 8002b6e:	2201      	movs	r2, #1
 8002b70:	4943      	ldr	r1, [pc, #268]	; (8002c80 <main+0x238>)
 8002b72:	4844      	ldr	r0, [pc, #272]	; (8002c84 <main+0x23c>)
 8002b74:	f007 f80c 	bl	8009b90 <f_mount>
 8002b78:	4b43      	ldr	r3, [pc, #268]	; (8002c88 <main+0x240>)
 8002b7a:	7018      	strb	r0, [r3, #0]
  userInitTime = HAL_GetTick() - userInitStartTick;
 8002b7c:	f000 fffc 	bl	8003b78 <HAL_GetTick>
 8002b80:	4e42      	ldr	r6, [pc, #264]	; (8002c8c <main+0x244>)
 8002b82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002b84:	1ac0      	subs	r0, r0, r3
 8002b86:	6030      	str	r0, [r6, #0]
  SD_openStatus = f_open(&file, "data3.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8002b88:	4f41      	ldr	r7, [pc, #260]	; (8002c90 <main+0x248>)
 8002b8a:	2212      	movs	r2, #18
 8002b8c:	4941      	ldr	r1, [pc, #260]	; (8002c94 <main+0x24c>)
 8002b8e:	4638      	mov	r0, r7
 8002b90:	f007 f842 	bl	8009c18 <f_open>
 8002b94:	4b40      	ldr	r3, [pc, #256]	; (8002c98 <main+0x250>)
 8002b96:	7018      	strb	r0, [r3, #0]
  SD_seekStatus = f_lseek(&file, f_size(&file));
 8002b98:	68f9      	ldr	r1, [r7, #12]
 8002b9a:	4638      	mov	r0, r7
 8002b9c:	f007 faee 	bl	800a17c <f_lseek>
 8002ba0:	4b3e      	ldr	r3, [pc, #248]	; (8002c9c <main+0x254>)
 8002ba2:	7018      	strb	r0, [r3, #0]
 8002ba4:	b672      	cpsid	i
  SD_writeStatus = f_printf(&file, "\nSystem init: %dms\n", sysInitTime);
 8002ba6:	f8db 2000 	ldr.w	r2, [fp]
 8002baa:	493d      	ldr	r1, [pc, #244]	; (8002ca0 <main+0x258>)
 8002bac:	4638      	mov	r0, r7
 8002bae:	f007 fc3c 	bl	800a42a <f_printf>
 8002bb2:	4b3c      	ldr	r3, [pc, #240]	; (8002ca4 <main+0x25c>)
 8002bb4:	7018      	strb	r0, [r3, #0]
  f_printf(&file, "User init: %dms\n", userInitTime);
 8002bb6:	6832      	ldr	r2, [r6, #0]
 8002bb8:	493b      	ldr	r1, [pc, #236]	; (8002ca8 <main+0x260>)
 8002bba:	4638      	mov	r0, r7
 8002bbc:	f007 fc35 	bl	800a42a <f_printf>
  f_printf(&file, "MS5607 - %d\n", MS5607_status1);
 8002bc0:	f89a 2000 	ldrb.w	r2, [sl]
 8002bc4:	4939      	ldr	r1, [pc, #228]	; (8002cac <main+0x264>)
 8002bc6:	4638      	mov	r0, r7
 8002bc8:	f007 fc2f 	bl	800a42a <f_printf>
  f_printf(&file, "LSM6DSLTR - %d\n", LSM6DSLTR_status2);
 8002bcc:	f899 2000 	ldrb.w	r2, [r9]
 8002bd0:	4937      	ldr	r1, [pc, #220]	; (8002cb0 <main+0x268>)
 8002bd2:	4638      	mov	r0, r7
 8002bd4:	f007 fc29 	bl	800a42a <f_printf>
  f_printf(&file, "LSM303DTR - %d\n", LSM303DTR_status3);
 8002bd8:	f898 2000 	ldrb.w	r2, [r8]
 8002bdc:	4935      	ldr	r1, [pc, #212]	; (8002cb4 <main+0x26c>)
 8002bde:	4638      	mov	r0, r7
 8002be0:	f007 fc23 	bl	800a42a <f_printf>
  f_printf(&file, "LoRa-RA-02 - %d\n", LoRa_status4);
 8002be4:	782a      	ldrb	r2, [r5, #0]
 8002be6:	4934      	ldr	r1, [pc, #208]	; (8002cb8 <main+0x270>)
 8002be8:	4638      	mov	r0, r7
 8002bea:	f007 fc1e 	bl	800a42a <f_printf>
  f_printf(&file, "| T(ms), STLM75: temperature | MS5607: temperature, pressure | LSM6: T Gx Gy Gz Ax Ay Az | LSM3: T Ax Ay Az Mx My Mz |\n");
 8002bee:	4933      	ldr	r1, [pc, #204]	; (8002cbc <main+0x274>)
 8002bf0:	4638      	mov	r0, r7
 8002bf2:	f007 fc1a 	bl	800a42a <f_printf>
  f_printf(&file, "==================\n\n");
 8002bf6:	4932      	ldr	r1, [pc, #200]	; (8002cc0 <main+0x278>)
 8002bf8:	4638      	mov	r0, r7
 8002bfa:	f007 fc16 	bl	800a42a <f_printf>
  __ASM volatile ("cpsie i" : : : "memory");
 8002bfe:	b662      	cpsie	i
  SD_syncStatus = f_sync(&file);
 8002c00:	4638      	mov	r0, r7
 8002c02:	f007 fa5c 	bl	800a0be <f_sync>
 8002c06:	4b2f      	ldr	r3, [pc, #188]	; (8002cc4 <main+0x27c>)
 8002c08:	7018      	strb	r0, [r3, #0]
  setPWM(&htim3, TIM_CHANNEL_4, 1920, servoAngle(1920, 10));
 8002c0a:	210a      	movs	r1, #10
 8002c0c:	f44f 60f0 	mov.w	r0, #1920	; 0x780
 8002c10:	f000 fd24 	bl	800365c <servoAngle>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8002c1a:	210c      	movs	r1, #12
 8002c1c:	482a      	ldr	r0, [pc, #168]	; (8002cc8 <main+0x280>)
 8002c1e:	f000 fd3f 	bl	80036a0 <setPWM>
  HAL_Delay(4000);
 8002c22:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002c26:	f000 ffad 	bl	8003b84 <HAL_Delay>
  GPS_Init(&huart4);
 8002c2a:	4828      	ldr	r0, [pc, #160]	; (8002ccc <main+0x284>)
 8002c2c:	f7ff fd8c 	bl	8002748 <GPS_Init>
  MS5607_Update();
 8002c30:	f7ff f86e 	bl	8001d10 <MS5607_Update>
  ms5607_reference_pressure_pa = MS5607_GetPressurePa();
 8002c34:	f7fe ff22 	bl	8001a7c <MS5607_GetPressurePa>
 8002c38:	4b25      	ldr	r3, [pc, #148]	; (8002cd0 <main+0x288>)
 8002c3a:	6018      	str	r0, [r3, #0]
  bmp280_read_float(&bmp280, NULL, &bmp280_reference_pressure, NULL);
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	4a25      	ldr	r2, [pc, #148]	; (8002cd4 <main+0x28c>)
 8002c40:	4619      	mov	r1, r3
 8002c42:	4620      	mov	r0, r4
 8002c44:	f7ff fcd4 	bl	80025f0 <bmp280_read_float>
	loopStartTick = HAL_GetTick();
 8002c48:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8002ce8 <main+0x2a0>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 8002c4c:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	photoresist_adc_value = HAL_ADC_GetValue(&hadc2);
 8002c50:	f8df a098 	ldr.w	sl, [pc, #152]	; 8002cec <main+0x2a4>
 8002c54:	e2b6      	b.n	80031c4 <main+0x77c>
 8002c56:	bf00      	nop
 8002c58:	19de5080 	.word	0x19de5080
 8002c5c:	00000000 	.word	0x00000000
 8002c60:	20000a40 	.word	0x20000a40
 8002c64:	40020400 	.word	0x40020400
 8002c68:	20000b60 	.word	0x20000b60
 8002c6c:	40020800 	.word	0x40020800
 8002c70:	20000aca 	.word	0x20000aca
 8002c74:	2000047c 	.word	0x2000047c
 8002c78:	2000044c 	.word	0x2000044c
 8002c7c:	20000001 	.word	0x20000001
 8002c80:	08010260 	.word	0x08010260
 8002c84:	20000484 	.word	0x20000484
 8002c88:	20000004 	.word	0x20000004
 8002c8c:	20000924 	.word	0x20000924
 8002c90:	200006b4 	.word	0x200006b4
 8002c94:	0801015c 	.word	0x0801015c
 8002c98:	20000005 	.word	0x20000005
 8002c9c:	20000006 	.word	0x20000006
 8002ca0:	08010168 	.word	0x08010168
 8002ca4:	20000008 	.word	0x20000008
 8002ca8:	0801017c 	.word	0x0801017c
 8002cac:	08010190 	.word	0x08010190
 8002cb0:	080101a0 	.word	0x080101a0
 8002cb4:	080101b0 	.word	0x080101b0
 8002cb8:	080101c0 	.word	0x080101c0
 8002cbc:	080101d4 	.word	0x080101d4
 8002cc0:	0801024c 	.word	0x0801024c
 8002cc4:	20000007 	.word	0x20000007
 8002cc8:	20000bb8 	.word	0x20000bb8
 8002ccc:	20000c90 	.word	0x20000c90
 8002cd0:	20000900 	.word	0x20000900
 8002cd4:	20000478 	.word	0x20000478
 8002cd8:	20000920 	.word	0x20000920
 8002cdc:	20000468 	.word	0x20000468
 8002ce0:	2000044a 	.word	0x2000044a
 8002ce4:	2000043a 	.word	0x2000043a
 8002ce8:	200008e8 	.word	0x200008e8
 8002cec:	20000a94 	.word	0x20000a94
	if(startServoDelay != 0 && loopStartTick - startServoDelay >= 10000) { // увеличить до 10 сек
 8002cf0:	4bc7      	ldr	r3, [pc, #796]	; (8003010 <main+0x5c8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f040 81fe 	bne.w	80030f6 <main+0x6ae>
	if(startServoPWM != 0) {
 8002cfa:	4bc6      	ldr	r3, [pc, #792]	; (8003014 <main+0x5cc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f040 8216 	bne.w	8003130 <main+0x6e8>
	if(isBuzzerWorking > 0) {
 8002d04:	4bc4      	ldr	r3, [pc, #784]	; (8003018 <main+0x5d0>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 8224 	beq.w	8003156 <main+0x70e>
		setPWM(&htim2, TIM_CHANNEL_3, hzToPeriod(1500), hzToPeriod(1500)/2);
 8002d0e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002d12:	f000 fc8f 	bl	8003634 <hzToPeriod>
 8002d16:	4604      	mov	r4, r0
 8002d18:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002d1c:	f000 fc8a 	bl	8003634 <hzToPeriod>
 8002d20:	0843      	lsrs	r3, r0, #1
 8002d22:	4622      	mov	r2, r4
 8002d24:	2108      	movs	r1, #8
 8002d26:	48bd      	ldr	r0, [pc, #756]	; (800301c <main+0x5d4>)
 8002d28:	f000 fcba 	bl	80036a0 <setPWM>
	bmp280_read_float(&bmp280, NULL, &bmp280_pressure, NULL);
 8002d2c:	4cbc      	ldr	r4, [pc, #752]	; (8003020 <main+0x5d8>)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	4622      	mov	r2, r4
 8002d32:	4619      	mov	r1, r3
 8002d34:	48bb      	ldr	r0, [pc, #748]	; (8003024 <main+0x5dc>)
 8002d36:	f7ff fc5b 	bl	80025f0 <bmp280_read_float>
	bmp280_altitude = MS5607_Altitude(bmp280_reference_pressure, bmp280_pressure);
 8002d3a:	edd4 0a00 	vldr	s1, [r4]
 8002d3e:	4bba      	ldr	r3, [pc, #744]	; (8003028 <main+0x5e0>)
 8002d40:	ed93 0a00 	vldr	s0, [r3]
 8002d44:	f7fe fea0 	bl	8001a88 <MS5607_Altitude>
 8002d48:	4bb8      	ldr	r3, [pc, #736]	; (800302c <main+0x5e4>)
 8002d4a:	ed83 0a00 	vstr	s0, [r3]
	bmp280_altitude_i32 = MS5607_Altitude_I32(bmp280_altitude);
 8002d4e:	f7fe feb1 	bl	8001ab4 <MS5607_Altitude_I32>
 8002d52:	4bb7      	ldr	r3, [pc, #732]	; (8003030 <main+0x5e8>)
 8002d54:	6018      	str	r0, [r3, #0]
	MS5607_Update();
 8002d56:	f7fe ffdb 	bl	8001d10 <MS5607_Update>
	ms5607_raw_temperature = MS5607_GetRawTemperature();
 8002d5a:	f7fe fe89 	bl	8001a70 <MS5607_GetRawTemperature>
 8002d5e:	4fb5      	ldr	r7, [pc, #724]	; (8003034 <main+0x5ec>)
 8002d60:	6038      	str	r0, [r7, #0]
	ms5607_temperature_c = (float)MS5607_GetTemperatureC();
 8002d62:	f7fe fe75 	bl	8001a50 <MS5607_GetTemperatureC>
 8002d66:	ec51 0b10 	vmov	r0, r1, d0
 8002d6a:	f7fd ff4d 	bl	8000c08 <__aeabi_d2f>
 8002d6e:	4bb2      	ldr	r3, [pc, #712]	; (8003038 <main+0x5f0>)
 8002d70:	6018      	str	r0, [r3, #0]
	ms5607_pressure_pa = MS5607_GetPressurePa();
 8002d72:	f7fe fe83 	bl	8001a7c <MS5607_GetPressurePa>
 8002d76:	4bb1      	ldr	r3, [pc, #708]	; (800303c <main+0x5f4>)
 8002d78:	6018      	str	r0, [r3, #0]
	ms5607_altitude = MS5607_Altitude(ms5607_reference_pressure_pa, ms5607_pressure_pa);
 8002d7a:	4bb1      	ldr	r3, [pc, #708]	; (8003040 <main+0x5f8>)
 8002d7c:	ed93 0a00 	vldr	s0, [r3]
 8002d80:	ee07 0a90 	vmov	s15, r0
 8002d84:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8002d88:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002d8c:	f7fe fe7c 	bl	8001a88 <MS5607_Altitude>
 8002d90:	4aac      	ldr	r2, [pc, #688]	; (8003044 <main+0x5fc>)
 8002d92:	ed82 0a00 	vstr	s0, [r2]
	ms5607_altitude_i32 = MS5607_Altitude_I32(ms5607_altitude);
 8002d96:	f7fe fe8d 	bl	8001ab4 <MS5607_Altitude_I32>
 8002d9a:	4eab      	ldr	r6, [pc, #684]	; (8003048 <main+0x600>)
 8002d9c:	6030      	str	r0, [r6, #0]
	LSM303DTR_ReadData(&LSM303DTR_Data);
 8002d9e:	4dab      	ldr	r5, [pc, #684]	; (800304c <main+0x604>)
 8002da0:	4628      	mov	r0, r5
 8002da2:	f7fe fa03 	bl	80011ac <LSM303DTR_ReadData>
	LSM6DSLTR_ReadData(&LSM6DSLTR_Data);
 8002da6:	4caa      	ldr	r4, [pc, #680]	; (8003050 <main+0x608>)
 8002da8:	4620      	mov	r0, r4
 8002daa:	f7fe fb21 	bl	80013f0 <LSM6DSLTR_ReadData>
	stlmTemperature = STLM75M2F_GetTemperature();
 8002dae:	f7fe fff7 	bl	8001da0 <STLM75M2F_GetTemperature>
 8002db2:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 8003078 <main+0x630>
 8002db6:	f8a9 0000 	strh.w	r0, [r9]
	stlmTemperatureFloat = stlmTemperature / 256.0F;
 8002dba:	ee07 0a90 	vmov	s15, r0
 8002dbe:	eefa 7acc 	vcvt.f32.s32	s15, s15, #8
 8002dc2:	4ba4      	ldr	r3, [pc, #656]	; (8003054 <main+0x60c>)
 8002dc4:	edc3 7a00 	vstr	s15, [r3]
	Buf_clear();
 8002dc8:	f7fe f97a 	bl	80010c0 <Buf_clear>
	Buf_push8(0x24); // $
 8002dcc:	2024      	movs	r0, #36	; 0x24
 8002dce:	f7fe f98d 	bl	80010ec <Buf_push8>
	Buf_push32(loopStartTick/250);
 8002dd2:	f8d8 0000 	ldr.w	r0, [r8]
 8002dd6:	4ba0      	ldr	r3, [pc, #640]	; (8003058 <main+0x610>)
 8002dd8:	fba3 2000 	umull	r2, r0, r3, r0
 8002ddc:	0900      	lsrs	r0, r0, #4
 8002dde:	f7fe f9a3 	bl	8001128 <Buf_push32>
	Buf_push16(stlmTemperature);
 8002de2:	f9b9 0000 	ldrsh.w	r0, [r9]
 8002de6:	f7fe f98d 	bl	8001104 <Buf_push16>
	Buf_push32(ms5607_raw_temperature);
 8002dea:	6838      	ldr	r0, [r7, #0]
 8002dec:	f7fe f99c 	bl	8001128 <Buf_push32>
	Buf_push32(ms5607_altitude_i32);
 8002df0:	6830      	ldr	r0, [r6, #0]
 8002df2:	f7fe f999 	bl	8001128 <Buf_push32>
	Buf_push32(bmp280_altitude_i32);
 8002df6:	4b8e      	ldr	r3, [pc, #568]	; (8003030 <main+0x5e8>)
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	f7fe f995 	bl	8001128 <Buf_push32>
	Buf_push32(adc2_in13_value);
 8002dfe:	4b97      	ldr	r3, [pc, #604]	; (800305c <main+0x614>)
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	f7fe f991 	bl	8001128 <Buf_push32>
	Buf_push16((int16_t)photoresist_adc_value);
 8002e06:	f9ba 0000 	ldrsh.w	r0, [sl]
 8002e0a:	f7fe f97b 	bl	8001104 <Buf_push16>
	Buf_push32(GPS_Data.latitude1);
 8002e0e:	4e94      	ldr	r6, [pc, #592]	; (8003060 <main+0x618>)
 8002e10:	68b0      	ldr	r0, [r6, #8]
 8002e12:	f7fe f989 	bl	8001128 <Buf_push32>
	Buf_push32(GPS_Data.latitude2);
 8002e16:	68f0      	ldr	r0, [r6, #12]
 8002e18:	f7fe f986 	bl	8001128 <Buf_push32>
	Buf_push32(GPS_Data.longitude1);
 8002e1c:	6930      	ldr	r0, [r6, #16]
 8002e1e:	f7fe f983 	bl	8001128 <Buf_push32>
	Buf_push32(GPS_Data.longitude2);
 8002e22:	6970      	ldr	r0, [r6, #20]
 8002e24:	f7fe f980 	bl	8001128 <Buf_push32>
	Buf_push16(LSM6DSLTR_Data.gyroscope.x);
 8002e28:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8002e2c:	f7fe f96a 	bl	8001104 <Buf_push16>
	Buf_push16(LSM6DSLTR_Data.gyroscope.y);
 8002e30:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8002e34:	f7fe f966 	bl	8001104 <Buf_push16>
	Buf_push16(LSM6DSLTR_Data.gyroscope.z);
 8002e38:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 8002e3c:	f7fe f962 	bl	8001104 <Buf_push16>
	Buf_push16(LSM6DSLTR_Data.accelerometer.x);
 8002e40:	f9b4 0000 	ldrsh.w	r0, [r4]
 8002e44:	f7fe f95e 	bl	8001104 <Buf_push16>
	Buf_push16(LSM6DSLTR_Data.accelerometer.y);
 8002e48:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8002e4c:	f7fe f95a 	bl	8001104 <Buf_push16>
	Buf_push16(LSM6DSLTR_Data.accelerometer.z);
 8002e50:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8002e54:	f7fe f956 	bl	8001104 <Buf_push16>
	Buf_push16(LSM303DTR_Data.compass.x);
 8002e58:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
 8002e5c:	f7fe f952 	bl	8001104 <Buf_push16>
	Buf_push16(LSM303DTR_Data.compass.y);
 8002e60:	f9b5 0008 	ldrsh.w	r0, [r5, #8]
 8002e64:	f7fe f94e 	bl	8001104 <Buf_push16>
	Buf_push16(LSM303DTR_Data.compass.z);
 8002e68:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
 8002e6c:	f7fe f94a 	bl	8001104 <Buf_push16>
	Buf_push8(0x0A); // \n
 8002e70:	200a      	movs	r0, #10
 8002e72:	f7fe f93b 	bl	80010ec <Buf_push8>
	if(canLoRaSend > 0) {
 8002e76:	4b7b      	ldr	r3, [pc, #492]	; (8003064 <main+0x61c>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 8170 	beq.w	8003160 <main+0x718>
		LoRa_statusSend = lora_send_packet(&LoRa, Buf_getDatabuf(), Buf_getDatasize());
 8002e80:	f7fe f914 	bl	80010ac <Buf_getDatabuf>
 8002e84:	4604      	mov	r4, r0
 8002e86:	f7fe f915 	bl	80010b4 <Buf_getDatasize>
 8002e8a:	b2c2      	uxtb	r2, r0
 8002e8c:	4621      	mov	r1, r4
 8002e8e:	4876      	ldr	r0, [pc, #472]	; (8003068 <main+0x620>)
 8002e90:	f7fe fccc 	bl	800182c <lora_send_packet>
 8002e94:	4b75      	ldr	r3, [pc, #468]	; (800306c <main+0x624>)
 8002e96:	7018      	strb	r0, [r3, #0]
		canLoRaSend = 0;
 8002e98:	4b72      	ldr	r3, [pc, #456]	; (8003064 <main+0x61c>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]
		loopStartTick / 1000.0F,
 8002e9e:	edd8 7a00 	vldr	s15, [r8]
 8002ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
	DEBUG_BUFFER_SIZE = sprintf(
 8002ea6:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003070 <main+0x628>
 8002eaa:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8002eae:	ee17 0a90 	vmov	r0, s15
 8002eb2:	f7fd fb59 	bl	8000568 <__aeabi_f2d>
 8002eb6:	e9cd 0126 	strd	r0, r1, [sp, #152]	; 0x98
 8002eba:	4b66      	ldr	r3, [pc, #408]	; (8003054 <main+0x60c>)
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	f7fd fb53 	bl	8000568 <__aeabi_f2d>
 8002ec2:	ec41 0b1d 	vmov	d13, r0, r1
 8002ec6:	4b5c      	ldr	r3, [pc, #368]	; (8003038 <main+0x5f0>)
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	f7fd fb4d 	bl	8000568 <__aeabi_f2d>
 8002ece:	ec41 0b18 	vmov	d8, r0, r1
 8002ed2:	4b5a      	ldr	r3, [pc, #360]	; (800303c <main+0x5f4>)
 8002ed4:	681c      	ldr	r4, [r3, #0]
 8002ed6:	4b5b      	ldr	r3, [pc, #364]	; (8003044 <main+0x5fc>)
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	f7fd fb45 	bl	8000568 <__aeabi_f2d>
 8002ede:	ec41 0b19 	vmov	d9, r0, r1
 8002ee2:	4b4f      	ldr	r3, [pc, #316]	; (8003020 <main+0x5d8>)
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	f7fd fb3f 	bl	8000568 <__aeabi_f2d>
 8002eea:	ec41 0b1a 	vmov	d10, r0, r1
 8002eee:	4b4f      	ldr	r3, [pc, #316]	; (800302c <main+0x5e4>)
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	f7fd fb39 	bl	8000568 <__aeabi_f2d>
 8002ef6:	ec41 0b1b 	vmov	d11, r0, r1
 8002efa:	4b5e      	ldr	r3, [pc, #376]	; (8003074 <main+0x62c>)
 8002efc:	6818      	ldr	r0, [r3, #0]
 8002efe:	f7fd fb33 	bl	8000568 <__aeabi_f2d>
 8002f02:	ec41 0b1c 	vmov	d12, r0, r1
 8002f06:	f8da 6000 	ldr.w	r6, [sl]
 8002f0a:	4b55      	ldr	r3, [pc, #340]	; (8003060 <main+0x618>)
 8002f0c:	689f      	ldr	r7, [r3, #8]
 8002f0e:	68d9      	ldr	r1, [r3, #12]
 8002f10:	9128      	str	r1, [sp, #160]	; 0xa0
 8002f12:	691d      	ldr	r5, [r3, #16]
 8002f14:	9529      	str	r5, [sp, #164]	; 0xa4
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	932a      	str	r3, [sp, #168]	; 0xa8
		int16_tToFloat(LSM6DSLTR_Data.gyroscope.x, 1000),
 8002f1a:	4d4d      	ldr	r5, [pc, #308]	; (8003050 <main+0x608>)
 8002f1c:	4659      	mov	r1, fp
 8002f1e:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
 8002f22:	f7fe f91b 	bl	800115c <int16_tToFloat>
 8002f26:	ed8d 0a2b 	vstr	s0, [sp, #172]	; 0xac
		int16_tToFloat(LSM6DSLTR_Data.gyroscope.y, 1000),
 8002f2a:	4659      	mov	r1, fp
 8002f2c:	f9b5 0008 	ldrsh.w	r0, [r5, #8]
 8002f30:	f7fe f914 	bl	800115c <int16_tToFloat>
 8002f34:	ed8d 0a2c 	vstr	s0, [sp, #176]	; 0xb0
		int16_tToFloat(LSM6DSLTR_Data.gyroscope.z, 1000),
 8002f38:	4659      	mov	r1, fp
 8002f3a:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
 8002f3e:	f7fe f90d 	bl	800115c <int16_tToFloat>
 8002f42:	ed8d 0a2d 	vstr	s0, [sp, #180]	; 0xb4
		int16_tToFloat(LSM6DSLTR_Data.accelerometer.x, 16),
 8002f46:	2110      	movs	r1, #16
 8002f48:	f9b5 0000 	ldrsh.w	r0, [r5]
 8002f4c:	f7fe f906 	bl	800115c <int16_tToFloat>
 8002f50:	ed8d 0a2e 	vstr	s0, [sp, #184]	; 0xb8
		int16_tToFloat(LSM6DSLTR_Data.accelerometer.y, 16),
 8002f54:	2110      	movs	r1, #16
 8002f56:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 8002f5a:	f7fe f8ff 	bl	800115c <int16_tToFloat>
 8002f5e:	ed8d 0a2f 	vstr	s0, [sp, #188]	; 0xbc
		int16_tToFloat(LSM6DSLTR_Data.accelerometer.z, 16),
 8002f62:	2110      	movs	r1, #16
 8002f64:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8002f68:	f7fe f8f8 	bl	800115c <int16_tToFloat>
 8002f6c:	ee10 5a10 	vmov	r5, s0
		int16_tToFloat(LSM303DTR_Data.compass.x, 8),
 8002f70:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 800304c <main+0x604>
 8002f74:	2108      	movs	r1, #8
 8002f76:	f9b9 0006 	ldrsh.w	r0, [r9, #6]
 8002f7a:	f7fe f8ef 	bl	800115c <int16_tToFloat>
 8002f7e:	ed8d 0a30 	vstr	s0, [sp, #192]	; 0xc0
		int16_tToFloat(LSM303DTR_Data.compass.y, 8),
 8002f82:	2108      	movs	r1, #8
 8002f84:	f9b9 0008 	ldrsh.w	r0, [r9, #8]
 8002f88:	f7fe f8e8 	bl	800115c <int16_tToFloat>
 8002f8c:	ed8d 0a31 	vstr	s0, [sp, #196]	; 0xc4
		int16_tToFloat(LSM303DTR_Data.compass.z, 8)
 8002f90:	2108      	movs	r1, #8
 8002f92:	f9b9 000a 	ldrsh.w	r0, [r9, #10]
 8002f96:	f7fe f8e1 	bl	800115c <int16_tToFloat>
 8002f9a:	ee10 0a10 	vmov	r0, s0
	DEBUG_BUFFER_SIZE = sprintf(
 8002f9e:	f7fd fae3 	bl	8000568 <__aeabi_f2d>
 8002fa2:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
 8002fa6:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8002fa8:	f7fd fade 	bl	8000568 <__aeabi_f2d>
 8002fac:	e9cd 0122 	strd	r0, r1, [sp, #136]	; 0x88
 8002fb0:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8002fb2:	f7fd fad9 	bl	8000568 <__aeabi_f2d>
 8002fb6:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 8002fba:	4628      	mov	r0, r5
 8002fbc:	f7fd fad4 	bl	8000568 <__aeabi_f2d>
 8002fc0:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 8002fc4:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8002fc6:	f7fd facf 	bl	8000568 <__aeabi_f2d>
 8002fca:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 8002fce:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8002fd0:	f7fd faca 	bl	8000568 <__aeabi_f2d>
 8002fd4:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 8002fd8:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8002fda:	f7fd fac5 	bl	8000568 <__aeabi_f2d>
 8002fde:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8002fe2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8002fe4:	f7fd fac0 	bl	8000568 <__aeabi_f2d>
 8002fe8:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8002fec:	982b      	ldr	r0, [sp, #172]	; 0xac
 8002fee:	f7fd fabb 	bl	8000568 <__aeabi_f2d>
 8002ff2:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8002ff6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8002ff8:	9312      	str	r3, [sp, #72]	; 0x48
 8002ffa:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8002ffc:	9511      	str	r5, [sp, #68]	; 0x44
 8002ffe:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8003000:	9110      	str	r1, [sp, #64]	; 0x40
 8003002:	970f      	str	r7, [sp, #60]	; 0x3c
 8003004:	960e      	str	r6, [sp, #56]	; 0x38
 8003006:	ed8d cb0c 	vstr	d12, [sp, #48]	; 0x30
 800300a:	ed8d bb0a 	vstr	d11, [sp, #40]	; 0x28
 800300e:	e035      	b.n	800307c <main+0x634>
 8003010:	2000090c 	.word	0x2000090c
 8003014:	20000910 	.word	0x20000910
 8003018:	200008e4 	.word	0x200008e4
 800301c:	20000c48 	.word	0x20000c48
 8003020:	20000474 	.word	0x20000474
 8003024:	20000a98 	.word	0x20000a98
 8003028:	20000478 	.word	0x20000478
 800302c:	2000046c 	.word	0x2000046c
 8003030:	20000470 	.word	0x20000470
 8003034:	200008fc 	.word	0x200008fc
 8003038:	20000904 	.word	0x20000904
 800303c:	200008f8 	.word	0x200008f8
 8003040:	20000900 	.word	0x20000900
 8003044:	200008f0 	.word	0x200008f0
 8003048:	200008f4 	.word	0x200008f4
 800304c:	2000042c 	.word	0x2000042c
 8003050:	2000043c 	.word	0x2000043c
 8003054:	20000918 	.word	0x20000918
 8003058:	10624dd3 	.word	0x10624dd3
 800305c:	20000ad8 	.word	0x20000ad8
 8003060:	20000414 	.word	0x20000414
 8003064:	20000009 	.word	0x20000009
 8003068:	2000044c 	.word	0x2000044c
 800306c:	20000002 	.word	0x20000002
 8003070:	447a0000 	.word	0x447a0000
 8003074:	20000ad4 	.word	0x20000ad4
 8003078:	20000914 	.word	0x20000914
 800307c:	ed8d ab08 	vstr	d10, [sp, #32]
 8003080:	ed8d 9b06 	vstr	d9, [sp, #24]
 8003084:	9404      	str	r4, [sp, #16]
 8003086:	ed8d 8b02 	vstr	d8, [sp, #8]
 800308a:	ed8d db00 	vstr	d13, [sp]
 800308e:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8003092:	4987      	ldr	r1, [pc, #540]	; (80032b0 <main+0x868>)
 8003094:	4887      	ldr	r0, [pc, #540]	; (80032b4 <main+0x86c>)
 8003096:	f008 fa19 	bl	800b4cc <siprintf>
 800309a:	4b87      	ldr	r3, [pc, #540]	; (80032b8 <main+0x870>)
 800309c:	8018      	strh	r0, [r3, #0]
	if(!isSDFileClosed) {
 800309e:	4b87      	ldr	r3, [pc, #540]	; (80032bc <main+0x874>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d066      	beq.n	8003174 <main+0x72c>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80030a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030aa:	4885      	ldr	r0, [pc, #532]	; (80032c0 <main+0x878>)
 80030ac:	f001 fa3a 	bl	8004524 <HAL_GPIO_TogglePin>
	syncSDLoopIndex++;
 80030b0:	4a84      	ldr	r2, [pc, #528]	; (80032c4 <main+0x87c>)
 80030b2:	7813      	ldrb	r3, [r2, #0]
 80030b4:	3301      	adds	r3, #1
 80030b6:	7013      	strb	r3, [r2, #0]
	loopTime = HAL_GetTick() - loopStartTick;
 80030b8:	f000 fd5e 	bl	8003b78 <HAL_GetTick>
 80030bc:	f8d8 2000 	ldr.w	r2, [r8]
 80030c0:	1a81      	subs	r1, r0, r2
 80030c2:	4b81      	ldr	r3, [pc, #516]	; (80032c8 <main+0x880>)
 80030c4:	6019      	str	r1, [r3, #0]
	if(startDelayChange != 0 && loopStartTick - startDelayChange >= 180000) {
 80030c6:	4b81      	ldr	r3, [pc, #516]	; (80032cc <main+0x884>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d078      	beq.n	80031c0 <main+0x778>
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	4c7f      	ldr	r4, [pc, #508]	; (80032d0 <main+0x888>)
 80030d2:	42a3      	cmp	r3, r4
 80030d4:	d974      	bls.n	80031c0 <main+0x778>
		if(loopTime < 1000) HAL_Delay(1000 - 1 - loopTime);
 80030d6:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 80030da:	d36b      	bcc.n	80031b4 <main+0x76c>
		if(!isSDFileClosed) {
 80030dc:	4b77      	ldr	r3, [pc, #476]	; (80032bc <main+0x874>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d16f      	bne.n	80031c4 <main+0x77c>
			SD_closeStatus = f_close(&file);
 80030e4:	487b      	ldr	r0, [pc, #492]	; (80032d4 <main+0x88c>)
 80030e6:	f007 f834 	bl	800a152 <f_close>
 80030ea:	4b7b      	ldr	r3, [pc, #492]	; (80032d8 <main+0x890>)
 80030ec:	7018      	strb	r0, [r3, #0]
			isSDFileClosed = 1;
 80030ee:	4b73      	ldr	r3, [pc, #460]	; (80032bc <main+0x874>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]
 80030f4:	e066      	b.n	80031c4 <main+0x77c>
	if(startServoDelay != 0 && loopStartTick - startServoDelay >= 10000) { // увеличить до 10 сек
 80030f6:	f8d8 2000 	ldr.w	r2, [r8]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	f242 710f 	movw	r1, #9999	; 0x270f
 8003100:	428b      	cmp	r3, r1
 8003102:	f67f adfa 	bls.w	8002cfa <main+0x2b2>
		if(startServoPWM == 0) {
 8003106:	4b75      	ldr	r3, [pc, #468]	; (80032dc <main+0x894>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	b98b      	cbnz	r3, 8003130 <main+0x6e8>
			startServoPWM = loopStartTick;
 800310c:	4b73      	ldr	r3, [pc, #460]	; (80032dc <main+0x894>)
 800310e:	601a      	str	r2, [r3, #0]
	if(startServoPWM != 0) {
 8003110:	2a00      	cmp	r2, #0
 8003112:	f43f adf7 	beq.w	8002d04 <main+0x2bc>
			setPWM(&htim3, TIM_CHANNEL_4, 1920, servoAngle(1920, 100));
 8003116:	2164      	movs	r1, #100	; 0x64
 8003118:	f44f 60f0 	mov.w	r0, #1920	; 0x780
 800311c:	f000 fa9e 	bl	800365c <servoAngle>
 8003120:	4603      	mov	r3, r0
 8003122:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8003126:	210c      	movs	r1, #12
 8003128:	486d      	ldr	r0, [pc, #436]	; (80032e0 <main+0x898>)
 800312a:	f000 fab9 	bl	80036a0 <setPWM>
 800312e:	e5e9      	b.n	8002d04 <main+0x2bc>
		if(loopStartTick - startServoPWM < 30000) {
 8003130:	f8d8 2000 	ldr.w	r2, [r8]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f247 522f 	movw	r2, #29999	; 0x752f
 800313a:	4293      	cmp	r3, r2
 800313c:	d9eb      	bls.n	8003116 <main+0x6ce>
			if(isTimerStarted == 0) {
 800313e:	4b69      	ldr	r3, [pc, #420]	; (80032e4 <main+0x89c>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	f47f adde 	bne.w	8002d04 <main+0x2bc>
				HAL_TIM_Base_Start_IT(&htim1);
 8003148:	4867      	ldr	r0, [pc, #412]	; (80032e8 <main+0x8a0>)
 800314a:	f004 f9d5 	bl	80074f8 <HAL_TIM_Base_Start_IT>
				isTimerStarted = 1;
 800314e:	4b65      	ldr	r3, [pc, #404]	; (80032e4 <main+0x89c>)
 8003150:	2201      	movs	r2, #1
 8003152:	701a      	strb	r2, [r3, #0]
 8003154:	e5d6      	b.n	8002d04 <main+0x2bc>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8003156:	2108      	movs	r1, #8
 8003158:	4864      	ldr	r0, [pc, #400]	; (80032ec <main+0x8a4>)
 800315a:	f004 fd89 	bl	8007c70 <HAL_TIM_PWM_Stop>
 800315e:	e5e5      	b.n	8002d2c <main+0x2e4>
		if(lora_wait_send(&LoRa) == LORA_OK) {
 8003160:	4863      	ldr	r0, [pc, #396]	; (80032f0 <main+0x8a8>)
 8003162:	f7fe fb68 	bl	8001836 <lora_wait_send>
 8003166:	2800      	cmp	r0, #0
 8003168:	f47f ae99 	bne.w	8002e9e <main+0x456>
			canLoRaSend = 1;
 800316c:	4b61      	ldr	r3, [pc, #388]	; (80032f4 <main+0x8ac>)
 800316e:	2201      	movs	r2, #1
 8003170:	701a      	strb	r2, [r3, #0]
 8003172:	e694      	b.n	8002e9e <main+0x456>
		SD_seekStatus = f_lseek(&file, f_size(&file));
 8003174:	4c57      	ldr	r4, [pc, #348]	; (80032d4 <main+0x88c>)
 8003176:	68e1      	ldr	r1, [r4, #12]
 8003178:	4620      	mov	r0, r4
 800317a:	f006 ffff 	bl	800a17c <f_lseek>
 800317e:	4b5e      	ldr	r3, [pc, #376]	; (80032f8 <main+0x8b0>)
 8003180:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003182:	b672      	cpsid	i
		SD_writeStatus = f_write(&file, DEBUG_BUFFER, DEBUG_BUFFER_SIZE, &bytesWritten);
 8003184:	4b5d      	ldr	r3, [pc, #372]	; (80032fc <main+0x8b4>)
 8003186:	4a4c      	ldr	r2, [pc, #304]	; (80032b8 <main+0x870>)
 8003188:	8812      	ldrh	r2, [r2, #0]
 800318a:	494a      	ldr	r1, [pc, #296]	; (80032b4 <main+0x86c>)
 800318c:	4620      	mov	r0, r4
 800318e:	f006 fe69 	bl	8009e64 <f_write>
 8003192:	4b5b      	ldr	r3, [pc, #364]	; (8003300 <main+0x8b8>)
 8003194:	7018      	strb	r0, [r3, #0]
		if(syncSDLoopIndex >= 9) { // flush bytes to SD every 10 loops
 8003196:	4b4b      	ldr	r3, [pc, #300]	; (80032c4 <main+0x87c>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b08      	cmp	r3, #8
 800319c:	d801      	bhi.n	80031a2 <main+0x75a>
  __ASM volatile ("cpsie i" : : : "memory");
 800319e:	b662      	cpsie	i
}
 80031a0:	e781      	b.n	80030a6 <main+0x65e>
			SD_syncStatus = f_sync(&file);
 80031a2:	4620      	mov	r0, r4
 80031a4:	f006 ff8b 	bl	800a0be <f_sync>
 80031a8:	4b56      	ldr	r3, [pc, #344]	; (8003304 <main+0x8bc>)
 80031aa:	7018      	strb	r0, [r3, #0]
			syncSDLoopIndex = 0;
 80031ac:	4b45      	ldr	r3, [pc, #276]	; (80032c4 <main+0x87c>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	e7f4      	b.n	800319e <main+0x756>
		if(loopTime < 1000) HAL_Delay(1000 - 1 - loopTime);
 80031b4:	f202 32e7 	addw	r2, r2, #999	; 0x3e7
 80031b8:	1a10      	subs	r0, r2, r0
 80031ba:	f000 fce3 	bl	8003b84 <HAL_Delay>
 80031be:	e78d      	b.n	80030dc <main+0x694>
		if(loopTime < 50) HAL_Delay(50 - 1 - loopTime);
 80031c0:	2931      	cmp	r1, #49	; 0x31
 80031c2:	d96b      	bls.n	800329c <main+0x854>
	loopStartTick = HAL_GetTick();
 80031c4:	f000 fcd8 	bl	8003b78 <HAL_GetTick>
 80031c8:	f8c8 0000 	str.w	r0, [r8]
	ADC_SetChannel(ADC_CHANNEL_3);
 80031cc:	2003      	movs	r0, #3
 80031ce:	f7fe fe05 	bl	8001ddc <ADC_SetChannel>
	HAL_ADC_Start(&hadc2);
 80031d2:	4c4d      	ldr	r4, [pc, #308]	; (8003308 <main+0x8c0>)
 80031d4:	4620      	mov	r0, r4
 80031d6:	f000 fdab 	bl	8003d30 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 80031da:	4659      	mov	r1, fp
 80031dc:	4620      	mov	r0, r4
 80031de:	f000 fe6b 	bl	8003eb8 <HAL_ADC_PollForConversion>
	photoresist_adc_value = HAL_ADC_GetValue(&hadc2);
 80031e2:	4620      	mov	r0, r4
 80031e4:	f000 fec4 	bl	8003f70 <HAL_ADC_GetValue>
 80031e8:	f8ca 0000 	str.w	r0, [sl]
	HAL_ADC_Stop(&hadc2);
 80031ec:	4620      	mov	r0, r4
 80031ee:	f000 fe43 	bl	8003e78 <HAL_ADC_Stop>
	ADC_SetChannel(ADC_CHANNEL_13);
 80031f2:	200d      	movs	r0, #13
 80031f4:	f7fe fdf2 	bl	8001ddc <ADC_SetChannel>
	HAL_ADC_Start(&hadc2);
 80031f8:	4620      	mov	r0, r4
 80031fa:	f000 fd99 	bl	8003d30 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 80031fe:	4659      	mov	r1, fp
 8003200:	4620      	mov	r0, r4
 8003202:	f000 fe59 	bl	8003eb8 <HAL_ADC_PollForConversion>
	adc2_in13_value = HAL_ADC_GetValue(&hadc2);
 8003206:	4620      	mov	r0, r4
 8003208:	f000 feb2 	bl	8003f70 <HAL_ADC_GetValue>
 800320c:	4b3f      	ldr	r3, [pc, #252]	; (800330c <main+0x8c4>)
 800320e:	6018      	str	r0, [r3, #0]
	adc2_in13_v = adc2_in13_value * 3.3F / 4095.0F;
 8003210:	ee07 0a90 	vmov	s15, r0
 8003214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003218:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003310 <main+0x8c8>
 800321c:	ee67 7a87 	vmul.f32	s15, s15, s14
	adc2_in13_v = adc2_in13_v / (R2 / (R1+R2));
 8003220:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003314 <main+0x8cc>
 8003224:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8003228:	ee17 0a90 	vmov	r0, s15
 800322c:	f7fd f99c 	bl	8000568 <__aeabi_f2d>
 8003230:	a31d      	add	r3, pc, #116	; (adr r3, 80032a8 <main+0x860>)
 8003232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003236:	f7fd fb19 	bl	800086c <__aeabi_ddiv>
 800323a:	f7fd fce5 	bl	8000c08 <__aeabi_d2f>
 800323e:	4b36      	ldr	r3, [pc, #216]	; (8003318 <main+0x8d0>)
 8003240:	6018      	str	r0, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 8003242:	4620      	mov	r0, r4
 8003244:	f000 fe18 	bl	8003e78 <HAL_ADC_Stop>
	if((startDelayChange == 0 || startServoDelay == 0) && (ms5607_altitude >= ms5607_altitudeThreshold || bmp280_altitude >= ms5607_altitudeThreshold) && photoresist_adc_value >= photoresist_threshold) {
 8003248:	4b20      	ldr	r3, [pc, #128]	; (80032cc <main+0x884>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	b123      	cbz	r3, 8003258 <main+0x810>
 800324e:	4b33      	ldr	r3, [pc, #204]	; (800331c <main+0x8d4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f47f af4f 	bne.w	80030f6 <main+0x6ae>
 8003258:	4b31      	ldr	r3, [pc, #196]	; (8003320 <main+0x8d8>)
 800325a:	edd3 7a00 	vldr	s15, [r3]
 800325e:	4b31      	ldr	r3, [pc, #196]	; (8003324 <main+0x8dc>)
 8003260:	ed93 7a00 	vldr	s14, [r3]
 8003264:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326c:	da08      	bge.n	8003280 <main+0x838>
 800326e:	4b2e      	ldr	r3, [pc, #184]	; (8003328 <main+0x8e0>)
 8003270:	ed93 7a00 	vldr	s14, [r3]
 8003274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327c:	f63f ad38 	bhi.w	8002cf0 <main+0x2a8>
 8003280:	f8da 2000 	ldr.w	r2, [sl]
 8003284:	4b29      	ldr	r3, [pc, #164]	; (800332c <main+0x8e4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	f4ff ad31 	bcc.w	8002cf0 <main+0x2a8>
		startServoDelay = loopStartTick;
 800328e:	f8d8 3000 	ldr.w	r3, [r8]
 8003292:	4a22      	ldr	r2, [pc, #136]	; (800331c <main+0x8d4>)
 8003294:	6013      	str	r3, [r2, #0]
		startDelayChange = loopStartTick;
 8003296:	4a0d      	ldr	r2, [pc, #52]	; (80032cc <main+0x884>)
 8003298:	6013      	str	r3, [r2, #0]
	if(startServoDelay != 0 && loopStartTick - startServoDelay >= 10000) { // увеличить до 10 сек
 800329a:	e52e      	b.n	8002cfa <main+0x2b2>
		if(loopTime < 50) HAL_Delay(50 - 1 - loopTime);
 800329c:	3231      	adds	r2, #49	; 0x31
 800329e:	1a10      	subs	r0, r2, r0
 80032a0:	f000 fc70 	bl	8003b84 <HAL_Delay>
 80032a4:	e78e      	b.n	80031c4 <main+0x77c>
 80032a6:	bf00      	nop
 80032a8:	d80e865b 	.word	0xd80e865b
 80032ac:	3fe6b1ed 	.word	0x3fe6b1ed
 80032b0:	08010264 	.word	0x08010264
 80032b4:	20000310 	.word	0x20000310
 80032b8:	20000410 	.word	0x20000410
 80032bc:	200008e5 	.word	0x200008e5
 80032c0:	40020400 	.word	0x40020400
 80032c4:	2000091c 	.word	0x2000091c
 80032c8:	200008ec 	.word	0x200008ec
 80032cc:	20000908 	.word	0x20000908
 80032d0:	0002bf1f 	.word	0x0002bf1f
 80032d4:	200006b4 	.word	0x200006b4
 80032d8:	20000003 	.word	0x20000003
 80032dc:	20000910 	.word	0x20000910
 80032e0:	20000bb8 	.word	0x20000bb8
 80032e4:	200008e6 	.word	0x200008e6
 80032e8:	20000c00 	.word	0x20000c00
 80032ec:	20000c48 	.word	0x20000c48
 80032f0:	2000044c 	.word	0x2000044c
 80032f4:	20000009 	.word	0x20000009
 80032f8:	20000006 	.word	0x20000006
 80032fc:	20000480 	.word	0x20000480
 8003300:	20000008 	.word	0x20000008
 8003304:	20000007 	.word	0x20000007
 8003308:	20000970 	.word	0x20000970
 800330c:	20000ad8 	.word	0x20000ad8
 8003310:	40533333 	.word	0x40533333
 8003314:	457ff000 	.word	0x457ff000
 8003318:	20000ad4 	.word	0x20000ad4
 800331c:	2000090c 	.word	0x2000090c
 8003320:	2000000c 	.word	0x2000000c
 8003324:	200008f0 	.word	0x200008f0
 8003328:	2000046c 	.word	0x2000046c
 800332c:	20000010 	.word	0x20000010

08003330 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8003330:	b672      	cpsid	i
  while (1)
 8003332:	e7fe      	b.n	8003332 <Error_Handler+0x2>

08003334 <MX_SDIO_SD_Init>:
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <MX_SDIO_SD_Init+0x18>)
 8003336:	4a06      	ldr	r2, [pc, #24]	; (8003350 <MX_SDIO_SD_Init+0x1c>)
 8003338:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800333a:	2200      	movs	r2, #0
 800333c:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800333e:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003340:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003342:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003344:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 22;
 8003346:	2216      	movs	r2, #22
 8003348:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800334a:	4770      	bx	lr
 800334c:	20000adc 	.word	0x20000adc
 8003350:	40012c00 	.word	0x40012c00

08003354 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003358:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800335a:	2300      	movs	r3, #0
 800335c:	9303      	str	r3, [sp, #12]
 800335e:	9304      	str	r3, [sp, #16]
 8003360:	9305      	str	r3, [sp, #20]
 8003362:	9306      	str	r3, [sp, #24]
 8003364:	9307      	str	r3, [sp, #28]
  if(sdHandle->Instance==SDIO)
 8003366:	6802      	ldr	r2, [r0, #0]
 8003368:	4b2d      	ldr	r3, [pc, #180]	; (8003420 <HAL_SD_MspInit+0xcc>)
 800336a:	429a      	cmp	r2, r3
 800336c:	d002      	beq.n	8003374 <HAL_SD_MspInit+0x20>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800336e:	b009      	add	sp, #36	; 0x24
 8003370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003374:	2400      	movs	r4, #0
 8003376:	9400      	str	r4, [sp, #0]
 8003378:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 800337c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800337e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003382:	645a      	str	r2, [r3, #68]	; 0x44
 8003384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003386:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800338a:	9200      	str	r2, [sp, #0]
 800338c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800338e:	9401      	str	r4, [sp, #4]
 8003390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003392:	f042 0204 	orr.w	r2, r2, #4
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
 8003398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800339a:	f002 0204 	and.w	r2, r2, #4
 800339e:	9201      	str	r2, [sp, #4]
 80033a0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033a2:	9402      	str	r4, [sp, #8]
 80033a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033a6:	f042 0208 	orr.w	r2, r2, #8
 80033aa:	631a      	str	r2, [r3, #48]	; 0x30
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	9302      	str	r3, [sp, #8]
 80033b4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80033b6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80033ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033bc:	2702      	movs	r7, #2
 80033be:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033c0:	f04f 0801 	mov.w	r8, #1
 80033c4:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c8:	2603      	movs	r6, #3
 80033ca:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80033cc:	250c      	movs	r5, #12
 80033ce:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d0:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8003428 <HAL_SD_MspInit+0xd4>
 80033d4:	eb0d 0105 	add.w	r1, sp, r5
 80033d8:	4648      	mov	r0, r9
 80033da:	f000 ffa5 	bl	8004328 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80033de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e4:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80033ea:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ec:	eb0d 0105 	add.w	r1, sp, r5
 80033f0:	4648      	mov	r0, r9
 80033f2:	f000 ff99 	bl	8004328 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033f6:	2304      	movs	r3, #4
 80033f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fa:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033fc:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003400:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003402:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003404:	eb0d 0105 	add.w	r1, sp, r5
 8003408:	4806      	ldr	r0, [pc, #24]	; (8003424 <HAL_SD_MspInit+0xd0>)
 800340a:	f000 ff8d 	bl	8004328 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800340e:	4622      	mov	r2, r4
 8003410:	4621      	mov	r1, r4
 8003412:	2031      	movs	r0, #49	; 0x31
 8003414:	f000 fe8c 	bl	8004130 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003418:	2031      	movs	r0, #49	; 0x31
 800341a:	f000 febb 	bl	8004194 <HAL_NVIC_EnableIRQ>
}
 800341e:	e7a6      	b.n	800336e <HAL_SD_MspInit+0x1a>
 8003420:	40012c00 	.word	0x40012c00
 8003424:	40020c00 	.word	0x40020c00
 8003428:	40020800 	.word	0x40020800

0800342c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800342c:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800342e:	480d      	ldr	r0, [pc, #52]	; (8003464 <MX_SPI1_Init+0x38>)
 8003430:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <MX_SPI1_Init+0x3c>)
 8003432:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003434:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003438:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800343a:	2300      	movs	r3, #0
 800343c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800343e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003440:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003442:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003448:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800344a:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800344c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800344e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003450:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003452:	230a      	movs	r3, #10
 8003454:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003456:	f003 fc03 	bl	8006c60 <HAL_SPI_Init>
 800345a:	b900      	cbnz	r0, 800345e <MX_SPI1_Init+0x32>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800345c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800345e:	f7ff ff67 	bl	8003330 <Error_Handler>
}
 8003462:	e7fb      	b.n	800345c <MX_SPI1_Init+0x30>
 8003464:	20000b60 	.word	0x20000b60
 8003468:	40013000 	.word	0x40013000

0800346c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800346c:	b500      	push	{lr}
 800346e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003470:	2300      	movs	r3, #0
 8003472:	9303      	str	r3, [sp, #12]
 8003474:	9304      	str	r3, [sp, #16]
 8003476:	9305      	str	r3, [sp, #20]
 8003478:	9306      	str	r3, [sp, #24]
 800347a:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 800347c:	6802      	ldr	r2, [r0, #0]
 800347e:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <HAL_SPI_MspInit+0x68>)
 8003480:	429a      	cmp	r2, r3
 8003482:	d002      	beq.n	800348a <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003484:	b009      	add	sp, #36	; 0x24
 8003486:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 800348a:	2200      	movs	r2, #0
 800348c:	9201      	str	r2, [sp, #4]
 800348e:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8003492:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003494:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8003498:	6459      	str	r1, [r3, #68]	; 0x44
 800349a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800349c:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 80034a0:	9101      	str	r1, [sp, #4]
 80034a2:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a4:	9202      	str	r2, [sp, #8]
 80034a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034a8:	f041 0101 	orr.w	r1, r1, #1
 80034ac:	6319      	str	r1, [r3, #48]	; 0x30
 80034ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	9302      	str	r3, [sp, #8]
 80034b6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80034b8:	23e0      	movs	r3, #224	; 0xe0
 80034ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034bc:	2302      	movs	r3, #2
 80034be:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c0:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c2:	2303      	movs	r3, #3
 80034c4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034c6:	2305      	movs	r3, #5
 80034c8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ca:	a903      	add	r1, sp, #12
 80034cc:	4802      	ldr	r0, [pc, #8]	; (80034d8 <HAL_SPI_MspInit+0x6c>)
 80034ce:	f000 ff2b 	bl	8004328 <HAL_GPIO_Init>
}
 80034d2:	e7d7      	b.n	8003484 <HAL_SPI_MspInit+0x18>
 80034d4:	40013000 	.word	0x40013000
 80034d8:	40020000 	.word	0x40020000

080034dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034dc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034de:	2100      	movs	r1, #0
 80034e0:	9100      	str	r1, [sp, #0]
 80034e2:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <HAL_MspInit+0x34>)
 80034e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ea:	645a      	str	r2, [r3, #68]	; 0x44
 80034ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034ee:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80034f2:	9200      	str	r2, [sp, #0]
 80034f4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034f6:	9101      	str	r1, [sp, #4]
 80034f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003506:	9301      	str	r3, [sp, #4]
 8003508:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800350a:	b002      	add	sp, #8
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40023800 	.word	0x40023800

08003514 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003514:	e7fe      	b.n	8003514 <NMI_Handler>

08003516 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003516:	e7fe      	b.n	8003516 <HardFault_Handler>

08003518 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003518:	e7fe      	b.n	8003518 <MemManage_Handler>

0800351a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800351a:	e7fe      	b.n	800351a <BusFault_Handler>

0800351c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800351c:	e7fe      	b.n	800351c <UsageFault_Handler>

0800351e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800351e:	4770      	bx	lr

08003520 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003520:	4770      	bx	lr

08003522 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003522:	4770      	bx	lr

08003524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003524:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003526:	f000 fb1b 	bl	8003b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800352a:	bd08      	pop	{r3, pc}

0800352c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800352c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800352e:	4802      	ldr	r0, [pc, #8]	; (8003538 <TIM1_UP_TIM10_IRQHandler+0xc>)
 8003530:	f004 f82b 	bl	800758a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003534:	bd08      	pop	{r3, pc}
 8003536:	bf00      	nop
 8003538:	20000c00 	.word	0x20000c00

0800353c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800353c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800353e:	4802      	ldr	r0, [pc, #8]	; (8003548 <I2C1_EV_IRQHandler+0xc>)
 8003540:	f001 fb32 	bl	8004ba8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003544:	bd08      	pop	{r3, pc}
 8003546:	bf00      	nop
 8003548:	20000a40 	.word	0x20000a40

0800354c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800354c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800354e:	4802      	ldr	r0, [pc, #8]	; (8003558 <SDIO_IRQHandler+0xc>)
 8003550:	f003 f94c 	bl	80067ec <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003554:	bd08      	pop	{r3, pc}
 8003556:	bf00      	nop
 8003558:	20000adc 	.word	0x20000adc

0800355c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800355c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800355e:	4802      	ldr	r0, [pc, #8]	; (8003568 <UART4_IRQHandler+0xc>)
 8003560:	f004 fd46 	bl	8007ff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003564:	bd08      	pop	{r3, pc}
 8003566:	bf00      	nop
 8003568:	20000c90 	.word	0x20000c90

0800356c <_getpid>:
 800356c:	2001      	movs	r0, #1
 800356e:	4770      	bx	lr

08003570 <_kill>:
 8003570:	b508      	push	{r3, lr}
 8003572:	f007 f8f9 	bl	800a768 <__errno>
 8003576:	2316      	movs	r3, #22
 8003578:	6003      	str	r3, [r0, #0]
 800357a:	f04f 30ff 	mov.w	r0, #4294967295
 800357e:	bd08      	pop	{r3, pc}

08003580 <_exit>:
 8003580:	b508      	push	{r3, lr}
 8003582:	f007 f8f1 	bl	800a768 <__errno>
 8003586:	2316      	movs	r3, #22
 8003588:	6003      	str	r3, [r0, #0]
 800358a:	e7fe      	b.n	800358a <_exit+0xa>

0800358c <_read>:
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	1e16      	subs	r6, r2, #0
 8003590:	dd07      	ble.n	80035a2 <_read+0x16>
 8003592:	460c      	mov	r4, r1
 8003594:	198d      	adds	r5, r1, r6
 8003596:	f3af 8000 	nop.w
 800359a:	f804 0b01 	strb.w	r0, [r4], #1
 800359e:	42a5      	cmp	r5, r4
 80035a0:	d1f9      	bne.n	8003596 <_read+0xa>
 80035a2:	4630      	mov	r0, r6
 80035a4:	bd70      	pop	{r4, r5, r6, pc}

080035a6 <_write>:
 80035a6:	b570      	push	{r4, r5, r6, lr}
 80035a8:	1e16      	subs	r6, r2, #0
 80035aa:	dd07      	ble.n	80035bc <_write+0x16>
 80035ac:	460c      	mov	r4, r1
 80035ae:	198d      	adds	r5, r1, r6
 80035b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80035b4:	f3af 8000 	nop.w
 80035b8:	42a5      	cmp	r5, r4
 80035ba:	d1f9      	bne.n	80035b0 <_write+0xa>
 80035bc:	4630      	mov	r0, r6
 80035be:	bd70      	pop	{r4, r5, r6, pc}

080035c0 <_close>:
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295
 80035c4:	4770      	bx	lr

080035c6 <_fstat>:
 80035c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035ca:	604b      	str	r3, [r1, #4]
 80035cc:	2000      	movs	r0, #0
 80035ce:	4770      	bx	lr

080035d0 <_isatty>:
 80035d0:	2001      	movs	r0, #1
 80035d2:	4770      	bx	lr

080035d4 <_lseek>:
 80035d4:	2000      	movs	r0, #0
 80035d6:	4770      	bx	lr

080035d8 <_sbrk>:
 80035d8:	b508      	push	{r3, lr}
 80035da:	4603      	mov	r3, r0
 80035dc:	4a0c      	ldr	r2, [pc, #48]	; (8003610 <_sbrk+0x38>)
 80035de:	6812      	ldr	r2, [r2, #0]
 80035e0:	b152      	cbz	r2, 80035f8 <_sbrk+0x20>
 80035e2:	4a0b      	ldr	r2, [pc, #44]	; (8003610 <_sbrk+0x38>)
 80035e4:	6810      	ldr	r0, [r2, #0]
 80035e6:	4403      	add	r3, r0
 80035e8:	4a0a      	ldr	r2, [pc, #40]	; (8003614 <_sbrk+0x3c>)
 80035ea:	490b      	ldr	r1, [pc, #44]	; (8003618 <_sbrk+0x40>)
 80035ec:	1a52      	subs	r2, r2, r1
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d806      	bhi.n	8003600 <_sbrk+0x28>
 80035f2:	4a07      	ldr	r2, [pc, #28]	; (8003610 <_sbrk+0x38>)
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	bd08      	pop	{r3, pc}
 80035f8:	4a05      	ldr	r2, [pc, #20]	; (8003610 <_sbrk+0x38>)
 80035fa:	4908      	ldr	r1, [pc, #32]	; (800361c <_sbrk+0x44>)
 80035fc:	6011      	str	r1, [r2, #0]
 80035fe:	e7f0      	b.n	80035e2 <_sbrk+0xa>
 8003600:	f007 f8b2 	bl	800a768 <__errno>
 8003604:	230c      	movs	r3, #12
 8003606:	6003      	str	r3, [r0, #0]
 8003608:	f04f 30ff 	mov.w	r0, #4294967295
 800360c:	e7f3      	b.n	80035f6 <_sbrk+0x1e>
 800360e:	bf00      	nop
 8003610:	20000928 	.word	0x20000928
 8003614:	20020000 	.word	0x20020000
 8003618:	00000400 	.word	0x00000400
 800361c:	20001150 	.word	0x20001150

08003620 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003620:	4a03      	ldr	r2, [pc, #12]	; (8003630 <SystemInit+0x10>)
 8003622:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003626:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800362a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800362e:	4770      	bx	lr
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <hzToPeriod>:

/* Includes ------------------------------------------------------------------*/
#include "tim.h"

/* USER CODE BEGIN 0 */
uint32_t hzToPeriod(uint16_t hz) {
 8003634:	ee07 0a90 	vmov	s15, r0
	float T = 1.0F / (float)hz;
 8003638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003640:	eec7 6a27 	vdiv.f32	s13, s14, s15

	uint32_t period = T / (1.0F / 48000000);
 8003644:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003658 <hzToPeriod+0x24>
 8003648:	eec6 7a87 	vdiv.f32	s15, s13, s14
	return period;
}
 800364c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003650:	ee17 0a90 	vmov	r0, s15
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	32b2f4fc 	.word	0x32b2f4fc

0800365c <servoAngle>:

uint32_t servoAngle(uint32_t period, uint8_t angle) {
	angle *= 2;
 800365c:	0049      	lsls	r1, r1, #1
	float TIM3_prescaler = 500.0F;

	float ms = 1.0F + angle * 0.5F / 90.0F;
 800365e:	b2cb      	uxtb	r3, r1
 8003660:	ee07 3a90 	vmov	s15, r3
 8003664:	eefa 7aef 	vcvt.f32.s32	s15, s15, #1
 8003668:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003694 <servoAngle+0x38>
 800366c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003670:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003674:	ee77 7a27 	vadd.f32	s15, s14, s15
	return ms / 1000.0F / (1.0F / 48000000 * TIM3_prescaler);
 8003678:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003698 <servoAngle+0x3c>
 800367c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003680:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800369c <servoAngle+0x40>
 8003684:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 8003688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800368c:	ee17 0a90 	vmov	r0, s15
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	42b40000 	.word	0x42b40000
 8003698:	447a0000 	.word	0x447a0000
 800369c:	372ec33e 	.word	0x372ec33e

080036a0 <setPWM>:

void setPWM(TIM_HandleTypeDef* htim, uint32_t channel, uint32_t period, uint32_t pulse) {
 80036a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036a2:	b089      	sub	sp, #36	; 0x24
 80036a4:	4604      	mov	r4, r0
 80036a6:	460f      	mov	r7, r1
 80036a8:	4616      	mov	r6, r2
 80036aa:	461d      	mov	r5, r3
	HAL_TIM_PWM_Stop(htim, channel);
 80036ac:	f004 fae0 	bl	8007c70 <HAL_TIM_PWM_Stop>
	htim->Init.Period = period - 1;
 80036b0:	3e01      	subs	r6, #1
 80036b2:	60e6      	str	r6, [r4, #12]
	HAL_TIM_PWM_Init(htim);
 80036b4:	4620      	mov	r0, r4
 80036b6:	f004 f8d5 	bl	8007864 <HAL_TIM_PWM_Init>

	TIM_OC_InitTypeDef sConfigOC = {0};
 80036ba:	2200      	movs	r2, #0
 80036bc:	9204      	str	r2, [sp, #16]
 80036be:	9206      	str	r2, [sp, #24]
 80036c0:	9207      	str	r2, [sp, #28]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036c2:	2360      	movs	r3, #96	; 0x60
 80036c4:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = pulse - 1;
 80036c6:	3d01      	subs	r5, #1
 80036c8:	9502      	str	r5, [sp, #8]
	sConfigOC.OCPolarity = TIM_OCNPOLARITY_HIGH;
 80036ca:	9203      	str	r2, [sp, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036cc:	9205      	str	r2, [sp, #20]
	HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, channel);
 80036ce:	463a      	mov	r2, r7
 80036d0:	a901      	add	r1, sp, #4
 80036d2:	4620      	mov	r0, r4
 80036d4:	f004 f92a 	bl	800792c <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_PWM_Start(htim, channel);
 80036d8:	4639      	mov	r1, r7
 80036da:	4620      	mov	r0, r4
 80036dc:	f004 fa4e 	bl	8007b7c <HAL_TIM_PWM_Start>
}
 80036e0:	b009      	add	sp, #36	; 0x24
 80036e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036e4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80036e4:	b500      	push	{lr}
 80036e6:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036e8:	2300      	movs	r3, #0
 80036ea:	9302      	str	r3, [sp, #8]
 80036ec:	9303      	str	r3, [sp, #12]
 80036ee:	9304      	str	r3, [sp, #16]
 80036f0:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80036f6:	4816      	ldr	r0, [pc, #88]	; (8003750 <MX_TIM1_Init+0x6c>)
 80036f8:	4a16      	ldr	r2, [pc, #88]	; (8003754 <MX_TIM1_Init+0x70>)
 80036fa:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 1000-1;
 80036fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003700:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003702:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 48000-1;
 8003704:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8003708:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800370a:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800370c:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800370e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003710:	f004 f87c 	bl	800780c <HAL_TIM_Base_Init>
 8003714:	b990      	cbnz	r0, 800373c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800371a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800371c:	a902      	add	r1, sp, #8
 800371e:	480c      	ldr	r0, [pc, #48]	; (8003750 <MX_TIM1_Init+0x6c>)
 8003720:	f004 f978 	bl	8007a14 <HAL_TIM_ConfigClockSource>
 8003724:	b968      	cbnz	r0, 8003742 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003726:	2300      	movs	r3, #0
 8003728:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800372a:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800372c:	4669      	mov	r1, sp
 800372e:	4808      	ldr	r0, [pc, #32]	; (8003750 <MX_TIM1_Init+0x6c>)
 8003730:	f004 fae2 	bl	8007cf8 <HAL_TIMEx_MasterConfigSynchronization>
 8003734:	b940      	cbnz	r0, 8003748 <MX_TIM1_Init+0x64>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003736:	b007      	add	sp, #28
 8003738:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800373c:	f7ff fdf8 	bl	8003330 <Error_Handler>
 8003740:	e7e9      	b.n	8003716 <MX_TIM1_Init+0x32>
    Error_Handler();
 8003742:	f7ff fdf5 	bl	8003330 <Error_Handler>
 8003746:	e7ee      	b.n	8003726 <MX_TIM1_Init+0x42>
    Error_Handler();
 8003748:	f7ff fdf2 	bl	8003330 <Error_Handler>
}
 800374c:	e7f3      	b.n	8003736 <MX_TIM1_Init+0x52>
 800374e:	bf00      	nop
 8003750:	20000c00 	.word	0x20000c00
 8003754:	40010000 	.word	0x40010000

08003758 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003758:	b500      	push	{lr}
 800375a:	b085      	sub	sp, #20

  if(tim_baseHandle->Instance==TIM1)
 800375c:	6803      	ldr	r3, [r0, #0]
 800375e:	4a1d      	ldr	r2, [pc, #116]	; (80037d4 <HAL_TIM_Base_MspInit+0x7c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d008      	beq.n	8003776 <HAL_TIM_Base_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 8003764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003768:	d019      	beq.n	800379e <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 800376a:	4a1b      	ldr	r2, [pc, #108]	; (80037d8 <HAL_TIM_Base_MspInit+0x80>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d023      	beq.n	80037b8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003770:	b005      	add	sp, #20
 8003772:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003776:	2100      	movs	r1, #0
 8003778:	9101      	str	r1, [sp, #4]
 800377a:	4b18      	ldr	r3, [pc, #96]	; (80037dc <HAL_TIM_Base_MspInit+0x84>)
 800377c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	645a      	str	r2, [r3, #68]	; 0x44
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800378e:	460a      	mov	r2, r1
 8003790:	2019      	movs	r0, #25
 8003792:	f000 fccd 	bl	8004130 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003796:	2019      	movs	r0, #25
 8003798:	f000 fcfc 	bl	8004194 <HAL_NVIC_EnableIRQ>
 800379c:	e7e8      	b.n	8003770 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	9302      	str	r3, [sp, #8]
 80037a2:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <HAL_TIM_Base_MspInit+0x84>)
 80037a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	641a      	str	r2, [r3, #64]	; 0x40
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	9302      	str	r3, [sp, #8]
 80037b4:	9b02      	ldr	r3, [sp, #8]
 80037b6:	e7db      	b.n	8003770 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037b8:	2300      	movs	r3, #0
 80037ba:	9303      	str	r3, [sp, #12]
 80037bc:	4b07      	ldr	r3, [pc, #28]	; (80037dc <HAL_TIM_Base_MspInit+0x84>)
 80037be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037c0:	f042 0202 	orr.w	r2, r2, #2
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	9303      	str	r3, [sp, #12]
 80037ce:	9b03      	ldr	r3, [sp, #12]
}
 80037d0:	e7ce      	b.n	8003770 <HAL_TIM_Base_MspInit+0x18>
 80037d2:	bf00      	nop
 80037d4:	40010000 	.word	0x40010000
 80037d8:	40000400 	.word	0x40000400
 80037dc:	40023800 	.word	0x40023800

080037e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037e0:	b500      	push	{lr}
 80037e2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e4:	2300      	movs	r3, #0
 80037e6:	9303      	str	r3, [sp, #12]
 80037e8:	9304      	str	r3, [sp, #16]
 80037ea:	9305      	str	r3, [sp, #20]
 80037ec:	9306      	str	r3, [sp, #24]
 80037ee:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM2)
 80037f0:	6803      	ldr	r3, [r0, #0]
 80037f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f6:	d005      	beq.n	8003804 <HAL_TIM_MspPostInit+0x24>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 80037f8:	4a1a      	ldr	r2, [pc, #104]	; (8003864 <HAL_TIM_MspPostInit+0x84>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d01b      	beq.n	8003836 <HAL_TIM_MspPostInit+0x56>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80037fe:	b009      	add	sp, #36	; 0x24
 8003800:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003804:	2300      	movs	r3, #0
 8003806:	9301      	str	r3, [sp, #4]
 8003808:	4a17      	ldr	r2, [pc, #92]	; (8003868 <HAL_TIM_MspPostInit+0x88>)
 800380a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800380c:	f041 0101 	orr.w	r1, r1, #1
 8003810:	6311      	str	r1, [r2, #48]	; 0x30
 8003812:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003814:	f002 0201 	and.w	r2, r2, #1
 8003818:	9201      	str	r2, [sp, #4]
 800381a:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800381c:	2204      	movs	r2, #4
 800381e:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003820:	2202      	movs	r2, #2
 8003822:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003824:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003826:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003828:	2301      	movs	r3, #1
 800382a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800382c:	a903      	add	r1, sp, #12
 800382e:	480f      	ldr	r0, [pc, #60]	; (800386c <HAL_TIM_MspPostInit+0x8c>)
 8003830:	f000 fd7a 	bl	8004328 <HAL_GPIO_Init>
 8003834:	e7e3      	b.n	80037fe <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003836:	2200      	movs	r2, #0
 8003838:	9202      	str	r2, [sp, #8]
 800383a:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <HAL_TIM_MspPostInit+0x88>)
 800383c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800383e:	f041 0102 	orr.w	r1, r1, #2
 8003842:	6319      	str	r1, [r3, #48]	; 0x30
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	9302      	str	r3, [sp, #8]
 800384c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800384e:	2302      	movs	r3, #2
 8003850:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003852:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003854:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003856:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003858:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800385a:	a903      	add	r1, sp, #12
 800385c:	4804      	ldr	r0, [pc, #16]	; (8003870 <HAL_TIM_MspPostInit+0x90>)
 800385e:	f000 fd63 	bl	8004328 <HAL_GPIO_Init>
}
 8003862:	e7cc      	b.n	80037fe <HAL_TIM_MspPostInit+0x1e>
 8003864:	40000400 	.word	0x40000400
 8003868:	40023800 	.word	0x40023800
 800386c:	40020000 	.word	0x40020000
 8003870:	40020400 	.word	0x40020400

08003874 <MX_TIM2_Init>:
{
 8003874:	b500      	push	{lr}
 8003876:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003878:	2300      	movs	r3, #0
 800387a:	930a      	str	r3, [sp, #40]	; 0x28
 800387c:	930b      	str	r3, [sp, #44]	; 0x2c
 800387e:	930c      	str	r3, [sp, #48]	; 0x30
 8003880:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003882:	9308      	str	r3, [sp, #32]
 8003884:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003886:	9301      	str	r3, [sp, #4]
 8003888:	9302      	str	r3, [sp, #8]
 800388a:	9303      	str	r3, [sp, #12]
 800388c:	9304      	str	r3, [sp, #16]
 800388e:	9305      	str	r3, [sp, #20]
 8003890:	9306      	str	r3, [sp, #24]
 8003892:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 8003894:	4822      	ldr	r0, [pc, #136]	; (8003920 <MX_TIM2_Init+0xac>)
 8003896:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800389a:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 800389c:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800389e:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 26667-1;
 80038a0:	f646 022a 	movw	r2, #26666	; 0x682a
 80038a4:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038a6:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038a8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80038aa:	f003 ffaf 	bl	800780c <HAL_TIM_Base_Init>
 80038ae:	bb38      	cbnz	r0, 8003900 <MX_TIM2_Init+0x8c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038b4:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80038b6:	a90a      	add	r1, sp, #40	; 0x28
 80038b8:	4819      	ldr	r0, [pc, #100]	; (8003920 <MX_TIM2_Init+0xac>)
 80038ba:	f004 f8ab 	bl	8007a14 <HAL_TIM_ConfigClockSource>
 80038be:	bb10      	cbnz	r0, 8003906 <MX_TIM2_Init+0x92>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80038c0:	4817      	ldr	r0, [pc, #92]	; (8003920 <MX_TIM2_Init+0xac>)
 80038c2:	f003 ffcf 	bl	8007864 <HAL_TIM_PWM_Init>
 80038c6:	bb08      	cbnz	r0, 800390c <MX_TIM2_Init+0x98>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038c8:	2300      	movs	r3, #0
 80038ca:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038cc:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038ce:	a908      	add	r1, sp, #32
 80038d0:	4813      	ldr	r0, [pc, #76]	; (8003920 <MX_TIM2_Init+0xac>)
 80038d2:	f004 fa11 	bl	8007cf8 <HAL_TIMEx_MasterConfigSynchronization>
 80038d6:	b9e0      	cbnz	r0, 8003912 <MX_TIM2_Init+0x9e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038d8:	2360      	movs	r3, #96	; 0x60
 80038da:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 13333-1;
 80038dc:	f243 4314 	movw	r3, #13332	; 0x3414
 80038e0:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038e2:	2300      	movs	r3, #0
 80038e4:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038e6:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80038e8:	2208      	movs	r2, #8
 80038ea:	a901      	add	r1, sp, #4
 80038ec:	480c      	ldr	r0, [pc, #48]	; (8003920 <MX_TIM2_Init+0xac>)
 80038ee:	f004 f81d 	bl	800792c <HAL_TIM_PWM_ConfigChannel>
 80038f2:	b988      	cbnz	r0, 8003918 <MX_TIM2_Init+0xa4>
  HAL_TIM_MspPostInit(&htim2);
 80038f4:	480a      	ldr	r0, [pc, #40]	; (8003920 <MX_TIM2_Init+0xac>)
 80038f6:	f7ff ff73 	bl	80037e0 <HAL_TIM_MspPostInit>
}
 80038fa:	b00f      	add	sp, #60	; 0x3c
 80038fc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003900:	f7ff fd16 	bl	8003330 <Error_Handler>
 8003904:	e7d4      	b.n	80038b0 <MX_TIM2_Init+0x3c>
    Error_Handler();
 8003906:	f7ff fd13 	bl	8003330 <Error_Handler>
 800390a:	e7d9      	b.n	80038c0 <MX_TIM2_Init+0x4c>
    Error_Handler();
 800390c:	f7ff fd10 	bl	8003330 <Error_Handler>
 8003910:	e7da      	b.n	80038c8 <MX_TIM2_Init+0x54>
    Error_Handler();
 8003912:	f7ff fd0d 	bl	8003330 <Error_Handler>
 8003916:	e7df      	b.n	80038d8 <MX_TIM2_Init+0x64>
    Error_Handler();
 8003918:	f7ff fd0a 	bl	8003330 <Error_Handler>
 800391c:	e7ea      	b.n	80038f4 <MX_TIM2_Init+0x80>
 800391e:	bf00      	nop
 8003920:	20000c48 	.word	0x20000c48

08003924 <MX_TIM3_Init>:
{
 8003924:	b500      	push	{lr}
 8003926:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003928:	2300      	movs	r3, #0
 800392a:	930a      	str	r3, [sp, #40]	; 0x28
 800392c:	930b      	str	r3, [sp, #44]	; 0x2c
 800392e:	930c      	str	r3, [sp, #48]	; 0x30
 8003930:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003932:	9308      	str	r3, [sp, #32]
 8003934:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003936:	9301      	str	r3, [sp, #4]
 8003938:	9302      	str	r3, [sp, #8]
 800393a:	9303      	str	r3, [sp, #12]
 800393c:	9304      	str	r3, [sp, #16]
 800393e:	9305      	str	r3, [sp, #20]
 8003940:	9306      	str	r3, [sp, #24]
 8003942:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8003944:	4822      	ldr	r0, [pc, #136]	; (80039d0 <MX_TIM3_Init+0xac>)
 8003946:	4a23      	ldr	r2, [pc, #140]	; (80039d4 <MX_TIM3_Init+0xb0>)
 8003948:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 500-1;
 800394a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800394e:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003950:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1920-1;
 8003952:	f240 727f 	movw	r2, #1919	; 0x77f
 8003956:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003958:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800395a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800395c:	f003 ff56 	bl	800780c <HAL_TIM_Base_Init>
 8003960:	bb30      	cbnz	r0, 80039b0 <MX_TIM3_Init+0x8c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003966:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003968:	a90a      	add	r1, sp, #40	; 0x28
 800396a:	4819      	ldr	r0, [pc, #100]	; (80039d0 <MX_TIM3_Init+0xac>)
 800396c:	f004 f852 	bl	8007a14 <HAL_TIM_ConfigClockSource>
 8003970:	bb08      	cbnz	r0, 80039b6 <MX_TIM3_Init+0x92>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003972:	4817      	ldr	r0, [pc, #92]	; (80039d0 <MX_TIM3_Init+0xac>)
 8003974:	f003 ff76 	bl	8007864 <HAL_TIM_PWM_Init>
 8003978:	bb00      	cbnz	r0, 80039bc <MX_TIM3_Init+0x98>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800397a:	2300      	movs	r3, #0
 800397c:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800397e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003980:	a908      	add	r1, sp, #32
 8003982:	4813      	ldr	r0, [pc, #76]	; (80039d0 <MX_TIM3_Init+0xac>)
 8003984:	f004 f9b8 	bl	8007cf8 <HAL_TIMEx_MasterConfigSynchronization>
 8003988:	b9d8      	cbnz	r0, 80039c2 <MX_TIM3_Init+0x9e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800398a:	2360      	movs	r3, #96	; 0x60
 800398c:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 147-1;
 800398e:	2392      	movs	r3, #146	; 0x92
 8003990:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003992:	2300      	movs	r3, #0
 8003994:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003996:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003998:	220c      	movs	r2, #12
 800399a:	a901      	add	r1, sp, #4
 800399c:	480c      	ldr	r0, [pc, #48]	; (80039d0 <MX_TIM3_Init+0xac>)
 800399e:	f003 ffc5 	bl	800792c <HAL_TIM_PWM_ConfigChannel>
 80039a2:	b988      	cbnz	r0, 80039c8 <MX_TIM3_Init+0xa4>
  HAL_TIM_MspPostInit(&htim3);
 80039a4:	480a      	ldr	r0, [pc, #40]	; (80039d0 <MX_TIM3_Init+0xac>)
 80039a6:	f7ff ff1b 	bl	80037e0 <HAL_TIM_MspPostInit>
}
 80039aa:	b00f      	add	sp, #60	; 0x3c
 80039ac:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80039b0:	f7ff fcbe 	bl	8003330 <Error_Handler>
 80039b4:	e7d5      	b.n	8003962 <MX_TIM3_Init+0x3e>
    Error_Handler();
 80039b6:	f7ff fcbb 	bl	8003330 <Error_Handler>
 80039ba:	e7da      	b.n	8003972 <MX_TIM3_Init+0x4e>
    Error_Handler();
 80039bc:	f7ff fcb8 	bl	8003330 <Error_Handler>
 80039c0:	e7db      	b.n	800397a <MX_TIM3_Init+0x56>
    Error_Handler();
 80039c2:	f7ff fcb5 	bl	8003330 <Error_Handler>
 80039c6:	e7e0      	b.n	800398a <MX_TIM3_Init+0x66>
    Error_Handler();
 80039c8:	f7ff fcb2 	bl	8003330 <Error_Handler>
 80039cc:	e7ea      	b.n	80039a4 <MX_TIM3_Init+0x80>
 80039ce:	bf00      	nop
 80039d0:	20000bb8 	.word	0x20000bb8
 80039d4:	40000400 	.word	0x40000400

080039d8 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80039d8:	b508      	push	{r3, lr}
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80039da:	480a      	ldr	r0, [pc, #40]	; (8003a04 <MX_UART4_Init+0x2c>)
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <MX_UART4_Init+0x30>)
 80039de:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 9600;
 80039e0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80039e4:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80039e6:	2300      	movs	r3, #0
 80039e8:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80039ea:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80039ec:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80039ee:	220c      	movs	r2, #12
 80039f0:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039f2:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80039f4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80039f6:	f004 fa67 	bl	8007ec8 <HAL_UART_Init>
 80039fa:	b900      	cbnz	r0, 80039fe <MX_UART4_Init+0x26>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80039fc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80039fe:	f7ff fc97 	bl	8003330 <Error_Handler>
}
 8003a02:	e7fb      	b.n	80039fc <MX_UART4_Init+0x24>
 8003a04:	20000c90 	.word	0x20000c90
 8003a08:	40004c00 	.word	0x40004c00

08003a0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a0c:	b530      	push	{r4, r5, lr}
 8003a0e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a10:	2300      	movs	r3, #0
 8003a12:	9303      	str	r3, [sp, #12]
 8003a14:	9304      	str	r3, [sp, #16]
 8003a16:	9305      	str	r3, [sp, #20]
 8003a18:	9306      	str	r3, [sp, #24]
 8003a1a:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==UART4)
 8003a1c:	6802      	ldr	r2, [r0, #0]
 8003a1e:	4b19      	ldr	r3, [pc, #100]	; (8003a84 <HAL_UART_MspInit+0x78>)
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8003a24:	b009      	add	sp, #36	; 0x24
 8003a26:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_UART4_CLK_ENABLE();
 8003a28:	2400      	movs	r4, #0
 8003a2a:	9401      	str	r4, [sp, #4]
 8003a2c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8003a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a32:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40
 8003a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a3a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8003a3e:	9201      	str	r2, [sp, #4]
 8003a40:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a42:	9402      	str	r4, [sp, #8]
 8003a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	9302      	str	r3, [sp, #8]
 8003a54:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003a56:	2303      	movs	r3, #3
 8003a58:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a5e:	2501      	movs	r5, #1
 8003a60:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a62:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003a64:	2308      	movs	r3, #8
 8003a66:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a68:	a903      	add	r1, sp, #12
 8003a6a:	4807      	ldr	r0, [pc, #28]	; (8003a88 <HAL_UART_MspInit+0x7c>)
 8003a6c:	f000 fc5c 	bl	8004328 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 1, 0);
 8003a70:	4622      	mov	r2, r4
 8003a72:	4629      	mov	r1, r5
 8003a74:	2034      	movs	r0, #52	; 0x34
 8003a76:	f000 fb5b 	bl	8004130 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003a7a:	2034      	movs	r0, #52	; 0x34
 8003a7c:	f000 fb8a 	bl	8004194 <HAL_NVIC_EnableIRQ>
}
 8003a80:	e7d0      	b.n	8003a24 <HAL_UART_MspInit+0x18>
 8003a82:	bf00      	nop
 8003a84:	40004c00 	.word	0x40004c00
 8003a88:	40020000 	.word	0x40020000

08003a8c <Reset_Handler>:
 8003a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ac4 <LoopFillZerobss+0x12>
 8003a90:	480d      	ldr	r0, [pc, #52]	; (8003ac8 <LoopFillZerobss+0x16>)
 8003a92:	490e      	ldr	r1, [pc, #56]	; (8003acc <LoopFillZerobss+0x1a>)
 8003a94:	4a0e      	ldr	r2, [pc, #56]	; (8003ad0 <LoopFillZerobss+0x1e>)
 8003a96:	2300      	movs	r3, #0
 8003a98:	e002      	b.n	8003aa0 <LoopCopyDataInit>

08003a9a <CopyDataInit>:
 8003a9a:	58d4      	ldr	r4, [r2, r3]
 8003a9c:	50c4      	str	r4, [r0, r3]
 8003a9e:	3304      	adds	r3, #4

08003aa0 <LoopCopyDataInit>:
 8003aa0:	18c4      	adds	r4, r0, r3
 8003aa2:	428c      	cmp	r4, r1
 8003aa4:	d3f9      	bcc.n	8003a9a <CopyDataInit>
 8003aa6:	4a0b      	ldr	r2, [pc, #44]	; (8003ad4 <LoopFillZerobss+0x22>)
 8003aa8:	4c0b      	ldr	r4, [pc, #44]	; (8003ad8 <LoopFillZerobss+0x26>)
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e001      	b.n	8003ab2 <LoopFillZerobss>

08003aae <FillZerobss>:
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	3204      	adds	r2, #4

08003ab2 <LoopFillZerobss>:
 8003ab2:	42a2      	cmp	r2, r4
 8003ab4:	d3fb      	bcc.n	8003aae <FillZerobss>
 8003ab6:	f7ff fdb3 	bl	8003620 <SystemInit>
 8003aba:	f006 fe5b 	bl	800a774 <__libc_init_array>
 8003abe:	f7fe ffc3 	bl	8002a48 <main>
 8003ac2:	4770      	bx	lr
 8003ac4:	20020000 	.word	0x20020000
 8003ac8:	20000000 	.word	0x20000000
 8003acc:	200001fc 	.word	0x200001fc
 8003ad0:	080108ac 	.word	0x080108ac
 8003ad4:	200001fc 	.word	0x200001fc
 8003ad8:	20001150 	.word	0x20001150

08003adc <ADC_IRQHandler>:
 8003adc:	e7fe      	b.n	8003adc <ADC_IRQHandler>
	...

08003ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ae0:	b510      	push	{r4, lr}
 8003ae2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ae4:	4b0e      	ldr	r3, [pc, #56]	; (8003b20 <HAL_InitTick+0x40>)
 8003ae6:	7818      	ldrb	r0, [r3, #0]
 8003ae8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aec:	fbb3 f3f0 	udiv	r3, r3, r0
 8003af0:	4a0c      	ldr	r2, [pc, #48]	; (8003b24 <HAL_InitTick+0x44>)
 8003af2:	6810      	ldr	r0, [r2, #0]
 8003af4:	fbb0 f0f3 	udiv	r0, r0, r3
 8003af8:	f000 fb5a 	bl	80041b0 <HAL_SYSTICK_Config>
 8003afc:	b968      	cbnz	r0, 8003b1a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003afe:	2c0f      	cmp	r4, #15
 8003b00:	d901      	bls.n	8003b06 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8003b02:	2001      	movs	r0, #1
 8003b04:	e00a      	b.n	8003b1c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b06:	2200      	movs	r2, #0
 8003b08:	4621      	mov	r1, r4
 8003b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0e:	f000 fb0f 	bl	8004130 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <HAL_InitTick+0x48>)
 8003b14:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b16:	2000      	movs	r0, #0
 8003b18:	e000      	b.n	8003b1c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8003b1a:	2001      	movs	r0, #1
}
 8003b1c:	bd10      	pop	{r4, pc}
 8003b1e:	bf00      	nop
 8003b20:	20000018 	.word	0x20000018
 8003b24:	20000014 	.word	0x20000014
 8003b28:	2000001c 	.word	0x2000001c

08003b2c <HAL_Init>:
{
 8003b2c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b2e:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <HAL_Init+0x30>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b36:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b3e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b46:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b48:	2003      	movs	r0, #3
 8003b4a:	f000 fadf 	bl	800410c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b4e:	2000      	movs	r0, #0
 8003b50:	f7ff ffc6 	bl	8003ae0 <HAL_InitTick>
  HAL_MspInit();
 8003b54:	f7ff fcc2 	bl	80034dc <HAL_MspInit>
}
 8003b58:	2000      	movs	r0, #0
 8003b5a:	bd08      	pop	{r3, pc}
 8003b5c:	40023c00 	.word	0x40023c00

08003b60 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003b60:	4a03      	ldr	r2, [pc, #12]	; (8003b70 <HAL_IncTick+0x10>)
 8003b62:	6811      	ldr	r1, [r2, #0]
 8003b64:	4b03      	ldr	r3, [pc, #12]	; (8003b74 <HAL_IncTick+0x14>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	440b      	add	r3, r1
 8003b6a:	6013      	str	r3, [r2, #0]
}
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	20000cd4 	.word	0x20000cd4
 8003b74:	20000018 	.word	0x20000018

08003b78 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003b78:	4b01      	ldr	r3, [pc, #4]	; (8003b80 <HAL_GetTick+0x8>)
 8003b7a:	6818      	ldr	r0, [r3, #0]
}
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20000cd4 	.word	0x20000cd4

08003b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b84:	b538      	push	{r3, r4, r5, lr}
 8003b86:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003b88:	f7ff fff6 	bl	8003b78 <HAL_GetTick>
 8003b8c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b8e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003b92:	d002      	beq.n	8003b9a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b94:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <HAL_Delay+0x24>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b9a:	f7ff ffed 	bl	8003b78 <HAL_GetTick>
 8003b9e:	1b40      	subs	r0, r0, r5
 8003ba0:	42a0      	cmp	r0, r4
 8003ba2:	d3fa      	bcc.n	8003b9a <HAL_Delay+0x16>
  {
  }
}
 8003ba4:	bd38      	pop	{r3, r4, r5, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000018 	.word	0x20000018

08003bac <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003bac:	2800      	cmp	r0, #0
 8003bae:	f000 80b9 	beq.w	8003d24 <HAL_ADC_Init+0x178>
{
 8003bb2:	b510      	push	{r4, lr}
 8003bb4:	4604      	mov	r4, r0
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003bb6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003bb8:	b143      	cbz	r3, 8003bcc <HAL_ADC_Init+0x20>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bbc:	f013 0f10 	tst.w	r3, #16
 8003bc0:	d00b      	beq.n	8003bda <HAL_ADC_Init+0x2e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003bc2:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8003bca:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8003bcc:	f7fe f954 	bl	8001e78 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8003bd4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8003bd8:	e7ef      	b.n	8003bba <HAL_ADC_Init+0xe>
    ADC_STATE_CLR_SET(hadc->State,
 8003bda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bdc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003be0:	f023 0302 	bic.w	r3, r3, #2
 8003be4:	f043 0302 	orr.w	r3, r3, #2
 8003be8:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003bea:	4b4f      	ldr	r3, [pc, #316]	; (8003d28 <HAL_ADC_Init+0x17c>)
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003bf2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	6861      	ldr	r1, [r4, #4]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bfc:	6822      	ldr	r2, [r4, #0]
 8003bfe:	6853      	ldr	r3, [r2, #4]
 8003c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c04:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c06:	6822      	ldr	r2, [r4, #0]
 8003c08:	6853      	ldr	r3, [r2, #4]
 8003c0a:	6921      	ldr	r1, [r4, #16]
 8003c0c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003c10:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c12:	6822      	ldr	r2, [r4, #0]
 8003c14:	6853      	ldr	r3, [r2, #4]
 8003c16:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003c1a:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c1c:	6822      	ldr	r2, [r4, #0]
 8003c1e:	6853      	ldr	r3, [r2, #4]
 8003c20:	68a1      	ldr	r1, [r4, #8]
 8003c22:	430b      	orrs	r3, r1
 8003c24:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c26:	6822      	ldr	r2, [r4, #0]
 8003c28:	6893      	ldr	r3, [r2, #8]
 8003c2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c2e:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c30:	6822      	ldr	r2, [r4, #0]
 8003c32:	6893      	ldr	r3, [r2, #8]
 8003c34:	68e1      	ldr	r1, [r4, #12]
 8003c36:	430b      	orrs	r3, r1
 8003c38:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c3a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003c3c:	4b3b      	ldr	r3, [pc, #236]	; (8003d2c <HAL_ADC_Init+0x180>)
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d05f      	beq.n	8003d02 <HAL_ADC_Init+0x156>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c42:	6822      	ldr	r2, [r4, #0]
 8003c44:	6893      	ldr	r3, [r2, #8]
 8003c46:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003c4a:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c4c:	6822      	ldr	r2, [r4, #0]
 8003c4e:	6893      	ldr	r3, [r2, #8]
 8003c50:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003c52:	430b      	orrs	r3, r1
 8003c54:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c56:	6822      	ldr	r2, [r4, #0]
 8003c58:	6893      	ldr	r3, [r2, #8]
 8003c5a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003c5e:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c60:	6822      	ldr	r2, [r4, #0]
 8003c62:	6893      	ldr	r3, [r2, #8]
 8003c64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003c66:	430b      	orrs	r3, r1
 8003c68:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c6a:	6822      	ldr	r2, [r4, #0]
 8003c6c:	6893      	ldr	r3, [r2, #8]
 8003c6e:	f023 0302 	bic.w	r3, r3, #2
 8003c72:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c74:	6822      	ldr	r2, [r4, #0]
 8003c76:	6893      	ldr	r3, [r2, #8]
 8003c78:	7e21      	ldrb	r1, [r4, #24]
 8003c7a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8003c7e:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c80:	f894 3020 	ldrb.w	r3, [r4, #32]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d047      	beq.n	8003d18 <HAL_ADC_Init+0x16c>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c88:	6822      	ldr	r2, [r4, #0]
 8003c8a:	6853      	ldr	r3, [r2, #4]
 8003c8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c90:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c92:	6822      	ldr	r2, [r4, #0]
 8003c94:	6853      	ldr	r3, [r2, #4]
 8003c96:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003c9a:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c9c:	6821      	ldr	r1, [r4, #0]
 8003c9e:	684b      	ldr	r3, [r1, #4]
 8003ca0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003ca2:	3a01      	subs	r2, #1
 8003ca4:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8003ca8:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003caa:	6822      	ldr	r2, [r4, #0]
 8003cac:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003cae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003cb2:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003cb4:	6821      	ldr	r1, [r4, #0]
 8003cb6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8003cb8:	69e2      	ldr	r2, [r4, #28]
 8003cba:	3a01      	subs	r2, #1
 8003cbc:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8003cc0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003cc2:	6822      	ldr	r2, [r4, #0]
 8003cc4:	6893      	ldr	r3, [r2, #8]
 8003cc6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cca:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ccc:	6822      	ldr	r2, [r4, #0]
 8003cce:	6893      	ldr	r3, [r2, #8]
 8003cd0:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8003cd4:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8003cd8:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003cda:	6822      	ldr	r2, [r4, #0]
 8003cdc:	6893      	ldr	r3, [r2, #8]
 8003cde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ce2:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ce4:	6822      	ldr	r2, [r4, #0]
 8003ce6:	6893      	ldr	r3, [r2, #8]
 8003ce8:	6961      	ldr	r1, [r4, #20]
 8003cea:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8003cee:	6093      	str	r3, [r2, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003cf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cf6:	f023 0303 	bic.w	r3, r3, #3
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	6423      	str	r3, [r4, #64]	; 0x40
 8003d00:	e760      	b.n	8003bc4 <HAL_ADC_Init+0x18>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d02:	6822      	ldr	r2, [r4, #0]
 8003d04:	6893      	ldr	r3, [r2, #8]
 8003d06:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003d0a:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d0c:	6822      	ldr	r2, [r4, #0]
 8003d0e:	6893      	ldr	r3, [r2, #8]
 8003d10:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003d14:	6093      	str	r3, [r2, #8]
 8003d16:	e7a8      	b.n	8003c6a <HAL_ADC_Init+0xbe>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d18:	6822      	ldr	r2, [r4, #0]
 8003d1a:	6853      	ldr	r3, [r2, #4]
 8003d1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d20:	6053      	str	r3, [r2, #4]
 8003d22:	e7c2      	b.n	8003caa <HAL_ADC_Init+0xfe>
    return HAL_ERROR;
 8003d24:	2001      	movs	r0, #1
}
 8003d26:	4770      	bx	lr
 8003d28:	40012300 	.word	0x40012300
 8003d2c:	0f000001 	.word	0x0f000001

08003d30 <HAL_ADC_Start>:
{
 8003d30:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8003d36:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	f000 8089 	beq.w	8003e52 <HAL_ADC_Start+0x122>
 8003d40:	2301      	movs	r3, #1
 8003d42:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d46:	6803      	ldr	r3, [r0, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	f012 0f01 	tst.w	r2, #1
 8003d4e:	d114      	bne.n	8003d7a <HAL_ADC_Start+0x4a>
    __HAL_ADC_ENABLE(hadc);
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d58:	4b42      	ldr	r3, [pc, #264]	; (8003e64 <HAL_ADC_Start+0x134>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a42      	ldr	r2, [pc, #264]	; (8003e68 <HAL_ADC_Start+0x138>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	0c9b      	lsrs	r3, r3, #18
 8003d64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003d68:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8003d6a:	9b01      	ldr	r3, [sp, #4]
 8003d6c:	b12b      	cbz	r3, 8003d7a <HAL_ADC_Start+0x4a>
      counter--;
 8003d6e:	9b01      	ldr	r3, [sp, #4]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8003d74:	9b01      	ldr	r3, [sp, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f9      	bne.n	8003d6e <HAL_ADC_Start+0x3e>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d7a:	6802      	ldr	r2, [r0, #0]
 8003d7c:	6893      	ldr	r3, [r2, #8]
 8003d7e:	f013 0f01 	tst.w	r3, #1
 8003d82:	d05b      	beq.n	8003e3c <HAL_ADC_Start+0x10c>
    ADC_STATE_CLR_SET(hadc->State,
 8003d84:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003d86:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d8a:	f023 0301 	bic.w	r3, r3, #1
 8003d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d92:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d94:	6853      	ldr	r3, [r2, #4]
 8003d96:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003d9a:	d005      	beq.n	8003da8 <HAL_ADC_Start+0x78>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d9c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003d9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003da2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003da6:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003da8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003daa:	f413 5f80 	tst.w	r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003dae:	bf1a      	itte	ne
 8003db0:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 8003db2:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8003db6:	2300      	moveq	r3, #0
 8003db8:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003dc0:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8003dc4:	6013      	str	r3, [r2, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003dc6:	4b29      	ldr	r3, [pc, #164]	; (8003e6c <HAL_ADC_Start+0x13c>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f013 0f1f 	tst.w	r3, #31
 8003dce:	d124      	bne.n	8003e1a <HAL_ADC_Start+0xea>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003dd0:	6803      	ldr	r3, [r0, #0]
 8003dd2:	4a27      	ldr	r2, [pc, #156]	; (8003e70 <HAL_ADC_Start+0x140>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d016      	beq.n	8003e06 <HAL_ADC_Start+0xd6>
 8003dd8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d004      	beq.n	8003dea <HAL_ADC_Start+0xba>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003de0:	4a24      	ldr	r2, [pc, #144]	; (8003e74 <HAL_ADC_Start+0x144>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d009      	beq.n	8003dfa <HAL_ADC_Start+0xca>
  return HAL_OK;
 8003de6:	2000      	movs	r0, #0
 8003de8:	e031      	b.n	8003e4e <HAL_ADC_Start+0x11e>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003dea:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8003dee:	6852      	ldr	r2, [r2, #4]
 8003df0:	f012 0f1f 	tst.w	r2, #31
 8003df4:	d007      	beq.n	8003e06 <HAL_ADC_Start+0xd6>
  return HAL_OK;
 8003df6:	2000      	movs	r0, #0
 8003df8:	e029      	b.n	8003e4e <HAL_ADC_Start+0x11e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003dfa:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003dfe:	6852      	ldr	r2, [r2, #4]
 8003e00:	f012 0f10 	tst.w	r2, #16
 8003e04:	d127      	bne.n	8003e56 <HAL_ADC_Start+0x126>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8003e0c:	d125      	bne.n	8003e5a <HAL_ADC_Start+0x12a>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e16:	2000      	movs	r0, #0
 8003e18:	e019      	b.n	8003e4e <HAL_ADC_Start+0x11e>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e1a:	6802      	ldr	r2, [r0, #0]
 8003e1c:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <HAL_ADC_Start+0x140>)
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d001      	beq.n	8003e26 <HAL_ADC_Start+0xf6>
  return HAL_OK;
 8003e22:	2000      	movs	r0, #0
 8003e24:	e013      	b.n	8003e4e <HAL_ADC_Start+0x11e>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8003e2c:	d117      	bne.n	8003e5e <HAL_ADC_Start+0x12e>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e2e:	4a10      	ldr	r2, [pc, #64]	; (8003e70 <HAL_ADC_Start+0x140>)
 8003e30:	6893      	ldr	r3, [r2, #8]
 8003e32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e36:	6093      	str	r3, [r2, #8]
  return HAL_OK;
 8003e38:	2000      	movs	r0, #0
 8003e3a:	e008      	b.n	8003e4e <HAL_ADC_Start+0x11e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e3c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003e3e:	f043 0310 	orr.w	r3, r3, #16
 8003e42:	6403      	str	r3, [r0, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e44:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	6443      	str	r3, [r0, #68]	; 0x44
  return HAL_OK;
 8003e4c:	2000      	movs	r0, #0
}
 8003e4e:	b002      	add	sp, #8
 8003e50:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8003e52:	2002      	movs	r0, #2
 8003e54:	e7fb      	b.n	8003e4e <HAL_ADC_Start+0x11e>
  return HAL_OK;
 8003e56:	2000      	movs	r0, #0
 8003e58:	e7f9      	b.n	8003e4e <HAL_ADC_Start+0x11e>
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	e7f7      	b.n	8003e4e <HAL_ADC_Start+0x11e>
 8003e5e:	2000      	movs	r0, #0
 8003e60:	e7f5      	b.n	8003e4e <HAL_ADC_Start+0x11e>
 8003e62:	bf00      	nop
 8003e64:	20000014 	.word	0x20000014
 8003e68:	431bde83 	.word	0x431bde83
 8003e6c:	40012300 	.word	0x40012300
 8003e70:	40012000 	.word	0x40012000
 8003e74:	40012200 	.word	0x40012200

08003e78 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003e78:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d019      	beq.n	8003eb4 <HAL_ADC_Stop+0x3c>
 8003e80:	2301      	movs	r3, #1
 8003e82:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 8003e86:	6802      	ldr	r2, [r0, #0]
 8003e88:	6893      	ldr	r3, [r2, #8]
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e90:	6803      	ldr	r3, [r0, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f013 0f01 	tst.w	r3, #1
 8003e98:	d107      	bne.n	8003eaa <HAL_ADC_Stop+0x32>
    ADC_STATE_CLR_SET(hadc->State,
 8003e9a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003e9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ea0:	f023 0301 	bic.w	r3, r3, #1
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8003eb4:	2002      	movs	r0, #2
}
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_ADC_PollForConversion>:
{
 8003eb8:	b570      	push	{r4, r5, r6, lr}
 8003eba:	4605      	mov	r5, r0
 8003ebc:	460c      	mov	r4, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003ebe:	6803      	ldr	r3, [r0, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003ec6:	d003      	beq.n	8003ed0 <HAL_ADC_PollForConversion+0x18>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003ec8:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003eca:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ece:	d119      	bne.n	8003f04 <HAL_ADC_PollForConversion+0x4c>
  tickstart = HAL_GetTick();
 8003ed0:	f7ff fe52 	bl	8003b78 <HAL_GetTick>
 8003ed4:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003ed6:	682a      	ldr	r2, [r5, #0]
 8003ed8:	6813      	ldr	r3, [r2, #0]
 8003eda:	f013 0f02 	tst.w	r3, #2
 8003ede:	d120      	bne.n	8003f22 <HAL_ADC_PollForConversion+0x6a>
    if(Timeout != HAL_MAX_DELAY)
 8003ee0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003ee4:	d0f8      	beq.n	8003ed8 <HAL_ADC_PollForConversion+0x20>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003ee6:	b9b4      	cbnz	r4, 8003f16 <HAL_ADC_PollForConversion+0x5e>
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f013 0f02 	tst.w	r3, #2
 8003ef0:	d1f1      	bne.n	8003ed6 <HAL_ADC_PollForConversion+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ef2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003ef4:	f043 0304 	orr.w	r3, r3, #4
 8003ef8:	642b      	str	r3, [r5, #64]	; 0x40
          __HAL_UNLOCK(hadc);
 8003efa:	2300      	movs	r3, #0
 8003efc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_TIMEOUT;
 8003f00:	2003      	movs	r0, #3
 8003f02:	e032      	b.n	8003f6a <HAL_ADC_PollForConversion+0xb2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f04:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003f06:	f043 0320 	orr.w	r3, r3, #32
 8003f0a:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8003f12:	2001      	movs	r0, #1
 8003f14:	e029      	b.n	8003f6a <HAL_ADC_PollForConversion+0xb2>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003f16:	f7ff fe2f 	bl	8003b78 <HAL_GetTick>
 8003f1a:	1b80      	subs	r0, r0, r6
 8003f1c:	42a0      	cmp	r0, r4
 8003f1e:	d9da      	bls.n	8003ed6 <HAL_ADC_PollForConversion+0x1e>
 8003f20:	e7e2      	b.n	8003ee8 <HAL_ADC_PollForConversion+0x30>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003f22:	f06f 0312 	mvn.w	r3, #18
 8003f26:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f28:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f2e:	642b      	str	r3, [r5, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f30:	682b      	ldr	r3, [r5, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8003f38:	d116      	bne.n	8003f68 <HAL_ADC_PollForConversion+0xb0>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f3a:	7e28      	ldrb	r0, [r5, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f3c:	b9b0      	cbnz	r0, 8003f6c <HAL_ADC_PollForConversion+0xb4>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f40:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8003f44:	d003      	beq.n	8003f4e <HAL_ADC_PollForConversion+0x96>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003f46:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003f48:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003f4c:	d10d      	bne.n	8003f6a <HAL_ADC_PollForConversion+0xb2>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003f4e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f54:	642b      	str	r3, [r5, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f56:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003f58:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003f5c:	d105      	bne.n	8003f6a <HAL_ADC_PollForConversion+0xb2>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f5e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003f60:	f043 0301 	orr.w	r3, r3, #1
 8003f64:	642b      	str	r3, [r5, #64]	; 0x40
 8003f66:	e000      	b.n	8003f6a <HAL_ADC_PollForConversion+0xb2>
  return HAL_OK;
 8003f68:	2000      	movs	r0, #0
}
 8003f6a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	e7fc      	b.n	8003f6a <HAL_ADC_PollForConversion+0xb2>

08003f70 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8003f70:	6803      	ldr	r3, [r0, #0]
 8003f72:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8003f74:	4770      	bx	lr
	...

08003f78 <HAL_ADC_ConfigChannel>:
{
 8003f78:	b430      	push	{r4, r5}
 8003f7a:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8003f80:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	f000 80b8 	beq.w	80040fa <HAL_ADC_ConfigChannel+0x182>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f90:	680b      	ldr	r3, [r1, #0]
 8003f92:	2b09      	cmp	r3, #9
 8003f94:	d93a      	bls.n	800400c <HAL_ADC_ConfigChannel+0x94>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f96:	6805      	ldr	r5, [r0, #0]
 8003f98:	68ea      	ldr	r2, [r5, #12]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003fa0:	3b1e      	subs	r3, #30
 8003fa2:	2407      	movs	r4, #7
 8003fa4:	fa04 f303 	lsl.w	r3, r4, r3
 8003fa8:	ea22 0303 	bic.w	r3, r2, r3
 8003fac:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003fae:	6804      	ldr	r4, [r0, #0]
 8003fb0:	68e5      	ldr	r5, [r4, #12]
 8003fb2:	880b      	ldrh	r3, [r1, #0]
 8003fb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003fb8:	3b1e      	subs	r3, #30
 8003fba:	688a      	ldr	r2, [r1, #8]
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	432b      	orrs	r3, r5
 8003fc2:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8003fc4:	684b      	ldr	r3, [r1, #4]
 8003fc6:	2b06      	cmp	r3, #6
 8003fc8:	d835      	bhi.n	8004036 <HAL_ADC_ConfigChannel+0xbe>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fca:	6805      	ldr	r5, [r0, #0]
 8003fcc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003fce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003fd2:	3b05      	subs	r3, #5
 8003fd4:	241f      	movs	r4, #31
 8003fd6:	fa04 f303 	lsl.w	r3, r4, r3
 8003fda:	ea22 0303 	bic.w	r3, r2, r3
 8003fde:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003fe0:	6804      	ldr	r4, [r0, #0]
 8003fe2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8003fe4:	880a      	ldrh	r2, [r1, #0]
 8003fe6:	684b      	ldr	r3, [r1, #4]
 8003fe8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003fec:	3b05      	subs	r3, #5
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	432b      	orrs	r3, r5
 8003ff4:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ff6:	6802      	ldr	r2, [r0, #0]
 8003ff8:	4b41      	ldr	r3, [pc, #260]	; (8004100 <HAL_ADC_ConfigChannel+0x188>)
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d04b      	beq.n	8004096 <HAL_ADC_ConfigChannel+0x11e>
  __HAL_UNLOCK(hadc);
 8003ffe:	2300      	movs	r3, #0
 8004000:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004004:	4618      	mov	r0, r3
}
 8004006:	b002      	add	sp, #8
 8004008:	bc30      	pop	{r4, r5}
 800400a:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800400c:	6805      	ldr	r5, [r0, #0]
 800400e:	692a      	ldr	r2, [r5, #16]
 8004010:	b29b      	uxth	r3, r3
 8004012:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004016:	2407      	movs	r4, #7
 8004018:	fa04 f303 	lsl.w	r3, r4, r3
 800401c:	ea22 0303 	bic.w	r3, r2, r3
 8004020:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004022:	6804      	ldr	r4, [r0, #0]
 8004024:	6925      	ldr	r5, [r4, #16]
 8004026:	880b      	ldrh	r3, [r1, #0]
 8004028:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800402c:	688b      	ldr	r3, [r1, #8]
 800402e:	4093      	lsls	r3, r2
 8004030:	432b      	orrs	r3, r5
 8004032:	6123      	str	r3, [r4, #16]
 8004034:	e7c6      	b.n	8003fc4 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8004036:	2b0c      	cmp	r3, #12
 8004038:	d816      	bhi.n	8004068 <HAL_ADC_ConfigChannel+0xf0>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800403a:	6805      	ldr	r5, [r0, #0]
 800403c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800403e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004042:	3b23      	subs	r3, #35	; 0x23
 8004044:	241f      	movs	r4, #31
 8004046:	fa04 f303 	lsl.w	r3, r4, r3
 800404a:	ea22 0303 	bic.w	r3, r2, r3
 800404e:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004050:	6804      	ldr	r4, [r0, #0]
 8004052:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8004054:	880a      	ldrh	r2, [r1, #0]
 8004056:	684b      	ldr	r3, [r1, #4]
 8004058:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800405c:	3b23      	subs	r3, #35	; 0x23
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	432b      	orrs	r3, r5
 8004064:	6323      	str	r3, [r4, #48]	; 0x30
 8004066:	e7c6      	b.n	8003ff6 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004068:	6805      	ldr	r5, [r0, #0]
 800406a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800406c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004070:	3b41      	subs	r3, #65	; 0x41
 8004072:	241f      	movs	r4, #31
 8004074:	fa04 f303 	lsl.w	r3, r4, r3
 8004078:	ea22 0303 	bic.w	r3, r2, r3
 800407c:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800407e:	6804      	ldr	r4, [r0, #0]
 8004080:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8004082:	880a      	ldrh	r2, [r1, #0]
 8004084:	684b      	ldr	r3, [r1, #4]
 8004086:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800408a:	3b41      	subs	r3, #65	; 0x41
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	432b      	orrs	r3, r5
 8004092:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004094:	e7af      	b.n	8003ff6 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004096:	680b      	ldr	r3, [r1, #0]
 8004098:	2b12      	cmp	r3, #18
 800409a:	d024      	beq.n	80040e6 <HAL_ADC_ConfigChannel+0x16e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800409c:	680b      	ldr	r3, [r1, #0]
 800409e:	3b10      	subs	r3, #16
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d8ac      	bhi.n	8003ffe <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80040a4:	4a17      	ldr	r2, [pc, #92]	; (8004104 <HAL_ADC_ConfigChannel+0x18c>)
 80040a6:	6853      	ldr	r3, [r2, #4]
 80040a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040ac:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80040ae:	680b      	ldr	r3, [r1, #0]
 80040b0:	2b10      	cmp	r3, #16
 80040b2:	d1a4      	bne.n	8003ffe <HAL_ADC_ConfigChannel+0x86>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040b4:	4b14      	ldr	r3, [pc, #80]	; (8004108 <HAL_ADC_ConfigChannel+0x190>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 80040bc:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 80040c0:	f202 3283 	addw	r2, r2, #899	; 0x383
 80040c4:	fba2 2303 	umull	r2, r3, r2, r3
 80040c8:	0c9b      	lsrs	r3, r3, #18
 80040ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80040d2:	9b01      	ldr	r3, [sp, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d092      	beq.n	8003ffe <HAL_ADC_ConfigChannel+0x86>
        counter--;
 80040d8:	9b01      	ldr	r3, [sp, #4]
 80040da:	3b01      	subs	r3, #1
 80040dc:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80040de:	9b01      	ldr	r3, [sp, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1f9      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x160>
 80040e4:	e78b      	b.n	8003ffe <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80040e6:	4a07      	ldr	r2, [pc, #28]	; (8004104 <HAL_ADC_ConfigChannel+0x18c>)
 80040e8:	6853      	ldr	r3, [r2, #4]
 80040ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040ee:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040f0:	6802      	ldr	r2, [r0, #0]
 80040f2:	4b03      	ldr	r3, [pc, #12]	; (8004100 <HAL_ADC_ConfigChannel+0x188>)
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d0d1      	beq.n	800409c <HAL_ADC_ConfigChannel+0x124>
 80040f8:	e781      	b.n	8003ffe <HAL_ADC_ConfigChannel+0x86>
  __HAL_LOCK(hadc);
 80040fa:	2002      	movs	r0, #2
 80040fc:	e783      	b.n	8004006 <HAL_ADC_ConfigChannel+0x8e>
 80040fe:	bf00      	nop
 8004100:	40012000 	.word	0x40012000
 8004104:	40012300 	.word	0x40012300
 8004108:	20000014 	.word	0x20000014

0800410c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800410c:	4907      	ldr	r1, [pc, #28]	; (800412c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800410e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004110:	0203      	lsls	r3, r0, #8
 8004112:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004116:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800411a:	0412      	lsls	r2, r2, #16
 800411c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800411e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004128:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800412a:	4770      	bx	lr
 800412c:	e000ed00 	.word	0xe000ed00

08004130 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004130:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004132:	4b16      	ldr	r3, [pc, #88]	; (800418c <HAL_NVIC_SetPriority+0x5c>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800413a:	f1c3 0407 	rsb	r4, r3, #7
 800413e:	2c04      	cmp	r4, #4
 8004140:	bf28      	it	cs
 8004142:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004144:	1d1d      	adds	r5, r3, #4
 8004146:	2d06      	cmp	r5, #6
 8004148:	bf8c      	ite	hi
 800414a:	3b03      	subhi	r3, #3
 800414c:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800414e:	f04f 35ff 	mov.w	r5, #4294967295
 8004152:	fa05 f404 	lsl.w	r4, r5, r4
 8004156:	ea21 0104 	bic.w	r1, r1, r4
 800415a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800415c:	fa05 f303 	lsl.w	r3, r5, r3
 8004160:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004164:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8004166:	2800      	cmp	r0, #0
 8004168:	db09      	blt.n	800417e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800416a:	0109      	lsls	r1, r1, #4
 800416c:	b2c9      	uxtb	r1, r1
 800416e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004172:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004176:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800417a:	bc30      	pop	{r4, r5}
 800417c:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800417e:	f000 000f 	and.w	r0, r0, #15
 8004182:	0109      	lsls	r1, r1, #4
 8004184:	b2c9      	uxtb	r1, r1
 8004186:	4b02      	ldr	r3, [pc, #8]	; (8004190 <HAL_NVIC_SetPriority+0x60>)
 8004188:	5419      	strb	r1, [r3, r0]
 800418a:	e7f6      	b.n	800417a <HAL_NVIC_SetPriority+0x4a>
 800418c:	e000ed00 	.word	0xe000ed00
 8004190:	e000ed14 	.word	0xe000ed14

08004194 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004194:	2800      	cmp	r0, #0
 8004196:	db08      	blt.n	80041aa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004198:	0942      	lsrs	r2, r0, #5
 800419a:	f000 001f 	and.w	r0, r0, #31
 800419e:	2301      	movs	r3, #1
 80041a0:	fa03 f000 	lsl.w	r0, r3, r0
 80041a4:	4b01      	ldr	r3, [pc, #4]	; (80041ac <HAL_NVIC_EnableIRQ+0x18>)
 80041a6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80041aa:	4770      	bx	lr
 80041ac:	e000e100 	.word	0xe000e100

080041b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041b0:	3801      	subs	r0, #1
 80041b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80041b6:	d20a      	bcs.n	80041ce <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041b8:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <HAL_SYSTICK_Config+0x24>)
 80041ba:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041bc:	4a06      	ldr	r2, [pc, #24]	; (80041d8 <HAL_SYSTICK_Config+0x28>)
 80041be:	21f0      	movs	r1, #240	; 0xf0
 80041c0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041c4:	2000      	movs	r0, #0
 80041c6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041c8:	2207      	movs	r2, #7
 80041ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041cc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80041ce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	e000e010 	.word	0xe000e010
 80041d8:	e000ed00 	.word	0xe000ed00

080041dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041dc:	b470      	push	{r4, r5, r6}
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041de:	6d85      	ldr	r5, [r0, #88]	; 0x58
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80041e0:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80041e4:	2c01      	cmp	r4, #1
 80041e6:	d03c      	beq.n	8004262 <HAL_DMA_Start_IT+0x86>
 80041e8:	2401      	movs	r4, #1
 80041ea:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80041ee:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80041f2:	b2e4      	uxtb	r4, r4
 80041f4:	2c01      	cmp	r4, #1
 80041f6:	d005      	beq.n	8004204 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041f8:	2300      	movs	r3, #0
 80041fa:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041fe:	2002      	movs	r0, #2
  }
  
  return status;
}
 8004200:	bc70      	pop	{r4, r5, r6}
 8004202:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8004204:	2402      	movs	r4, #2
 8004206:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800420a:	2400      	movs	r4, #0
 800420c:	6544      	str	r4, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800420e:	6806      	ldr	r6, [r0, #0]
 8004210:	6834      	ldr	r4, [r6, #0]
 8004212:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8004216:	6034      	str	r4, [r6, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004218:	6804      	ldr	r4, [r0, #0]
 800421a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800421c:	6883      	ldr	r3, [r0, #8]
 800421e:	2b40      	cmp	r3, #64	; 0x40
 8004220:	d01a      	beq.n	8004258 <HAL_DMA_Start_IT+0x7c>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8004222:	6803      	ldr	r3, [r0, #0]
 8004224:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8004226:	6803      	ldr	r3, [r0, #0]
 8004228:	60da      	str	r2, [r3, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800422a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800422c:	233f      	movs	r3, #63	; 0x3f
 800422e:	4093      	lsls	r3, r2
 8004230:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004232:	6802      	ldr	r2, [r0, #0]
 8004234:	6813      	ldr	r3, [r2, #0]
 8004236:	f043 0316 	orr.w	r3, r3, #22
 800423a:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800423c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800423e:	b123      	cbz	r3, 800424a <HAL_DMA_Start_IT+0x6e>
      hdma->Instance->CR  |= DMA_IT_HT;
 8004240:	6802      	ldr	r2, [r0, #0]
 8004242:	6813      	ldr	r3, [r2, #0]
 8004244:	f043 0308 	orr.w	r3, r3, #8
 8004248:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800424a:	6802      	ldr	r2, [r0, #0]
 800424c:	6813      	ldr	r3, [r2, #0]
 800424e:	f043 0301 	orr.w	r3, r3, #1
 8004252:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004254:	2000      	movs	r0, #0
 8004256:	e7d3      	b.n	8004200 <HAL_DMA_Start_IT+0x24>
    hdma->Instance->PAR = DstAddress;
 8004258:	6803      	ldr	r3, [r0, #0]
 800425a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800425c:	6803      	ldr	r3, [r0, #0]
 800425e:	60d9      	str	r1, [r3, #12]
 8004260:	e7e3      	b.n	800422a <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8004262:	2002      	movs	r0, #2
 8004264:	e7cc      	b.n	8004200 <HAL_DMA_Start_IT+0x24>

08004266 <HAL_DMA_Abort>:
{
 8004266:	b570      	push	{r4, r5, r6, lr}
 8004268:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800426a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800426c:	f7ff fc84 	bl	8003b78 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004270:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d006      	beq.n	8004288 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800427a:	2380      	movs	r3, #128	; 0x80
 800427c:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800427e:	2300      	movs	r3, #0
 8004280:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8004284:	2001      	movs	r0, #1
}
 8004286:	bd70      	pop	{r4, r5, r6, pc}
 8004288:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800428a:	6822      	ldr	r2, [r4, #0]
 800428c:	6813      	ldr	r3, [r2, #0]
 800428e:	f023 0316 	bic.w	r3, r3, #22
 8004292:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004294:	6822      	ldr	r2, [r4, #0]
 8004296:	6953      	ldr	r3, [r2, #20]
 8004298:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800429c:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800429e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042a0:	b1e3      	cbz	r3, 80042dc <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042a2:	6822      	ldr	r2, [r4, #0]
 80042a4:	6813      	ldr	r3, [r2, #0]
 80042a6:	f023 0308 	bic.w	r3, r3, #8
 80042aa:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80042ac:	6822      	ldr	r2, [r4, #0]
 80042ae:	6813      	ldr	r3, [r2, #0]
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f013 0f01 	tst.w	r3, #1
 80042be:	d011      	beq.n	80042e4 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042c0:	f7ff fc5a 	bl	8003b78 <HAL_GetTick>
 80042c4:	1b43      	subs	r3, r0, r5
 80042c6:	2b05      	cmp	r3, #5
 80042c8:	d9f5      	bls.n	80042b6 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042ca:	2320      	movs	r3, #32
 80042cc:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80042ce:	2300      	movs	r3, #0
 80042d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042d4:	2003      	movs	r0, #3
 80042d6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 80042da:	e7d4      	b.n	8004286 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1df      	bne.n	80042a2 <HAL_DMA_Abort+0x3c>
 80042e2:	e7e3      	b.n	80042ac <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042e4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80042e6:	233f      	movs	r3, #63	; 0x3f
 80042e8:	4093      	lsls	r3, r2
 80042ea:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 80042ec:	2000      	movs	r0, #0
 80042ee:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80042f2:	2301      	movs	r3, #1
 80042f4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80042f8:	e7c5      	b.n	8004286 <HAL_DMA_Abort+0x20>

080042fa <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042fa:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d003      	beq.n	800430c <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8004308:	2001      	movs	r0, #1
 800430a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 800430c:	2305      	movs	r3, #5
 800430e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8004312:	6802      	ldr	r2, [r0, #0]
 8004314:	6813      	ldr	r3, [r2, #0]
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800431c:	2000      	movs	r0, #0
}
 800431e:	4770      	bx	lr

08004320 <HAL_DMA_GetState>:
  return hdma->State;
 8004320:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8004324:	4770      	bx	lr
	...

08004328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800432c:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800432e:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004330:	4e73      	ldr	r6, [pc, #460]	; (8004500 <HAL_GPIO_Init+0x1d8>)
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004332:	4d74      	ldr	r5, [pc, #464]	; (8004504 <HAL_GPIO_Init+0x1dc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004334:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 800450c <HAL_GPIO_Init+0x1e4>
 8004338:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8004510 <HAL_GPIO_Init+0x1e8>
 800433c:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8004514 <HAL_GPIO_Init+0x1ec>
 8004340:	e049      	b.n	80043d6 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR; 
 8004342:	f8d0 a008 	ldr.w	sl, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004346:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 800434a:	2203      	movs	r2, #3
 800434c:	fa02 f20b 	lsl.w	r2, r2, fp
 8004350:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004354:	68ca      	ldr	r2, [r1, #12]
 8004356:	fa02 f20b 	lsl.w	r2, r2, fp
 800435a:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->OSPEEDR = temp;
 800435e:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8004360:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004362:	ea22 0a04 	bic.w	sl, r2, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004366:	684a      	ldr	r2, [r1, #4]
 8004368:	f3c2 1400 	ubfx	r4, r2, #4, #1
 800436c:	409c      	lsls	r4, r3
 800436e:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->OTYPER = temp;
 8004372:	6044      	str	r4, [r0, #4]
 8004374:	e03d      	b.n	80043f2 <HAL_GPIO_Init+0xca>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004376:	2400      	movs	r4, #0
 8004378:	fa04 f40b 	lsl.w	r4, r4, fp
 800437c:	ea44 040a 	orr.w	r4, r4, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004380:	6094      	str	r4, [r2, #8]
        temp = EXTI->IMR;
 8004382:	682c      	ldr	r4, [r5, #0]
        temp &= ~((uint32_t)iocurrent);
 8004384:	ea6f 0208 	mvn.w	r2, r8
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004388:	684f      	ldr	r7, [r1, #4]
 800438a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800438e:	bf0c      	ite	eq
 8004390:	4014      	andeq	r4, r2
        {
          temp |= iocurrent;
 8004392:	ea48 0404 	orrne.w	r4, r8, r4
        }
        EXTI->IMR = temp;
 8004396:	602c      	str	r4, [r5, #0]

        temp = EXTI->EMR;
 8004398:	686c      	ldr	r4, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800439a:	684f      	ldr	r7, [r1, #4]
 800439c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80043a0:	bf0c      	ite	eq
 80043a2:	4014      	andeq	r4, r2
        {
          temp |= iocurrent;
 80043a4:	ea48 0404 	orrne.w	r4, r8, r4
        }
        EXTI->EMR = temp;
 80043a8:	606c      	str	r4, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043aa:	68ac      	ldr	r4, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043ac:	684f      	ldr	r7, [r1, #4]
 80043ae:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80043b2:	bf0c      	ite	eq
 80043b4:	4014      	andeq	r4, r2
        {
          temp |= iocurrent;
 80043b6:	ea48 0404 	orrne.w	r4, r8, r4
        }
        EXTI->RTSR = temp;
 80043ba:	60ac      	str	r4, [r5, #8]

        temp = EXTI->FTSR;
 80043bc:	68ec      	ldr	r4, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043be:	684f      	ldr	r7, [r1, #4]
 80043c0:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 80043c4:	bf0c      	ite	eq
 80043c6:	4022      	andeq	r2, r4
        {
          temp |= iocurrent;
 80043c8:	ea48 0204 	orrne.w	r2, r8, r4
        }
        EXTI->FTSR = temp;
 80043cc:	60ea      	str	r2, [r5, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ce:	3301      	adds	r3, #1
 80043d0:	2b10      	cmp	r3, #16
 80043d2:	f000 8091 	beq.w	80044f8 <HAL_GPIO_Init+0x1d0>
    ioposition = 0x01U << position;
 80043d6:	2401      	movs	r4, #1
 80043d8:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043da:	680a      	ldr	r2, [r1, #0]
 80043dc:	ea04 0802 	and.w	r8, r4, r2
    if(iocurrent == ioposition)
 80043e0:	ea34 0202 	bics.w	r2, r4, r2
 80043e4:	d1f3      	bne.n	80043ce <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043e6:	684a      	ldr	r2, [r1, #4]
 80043e8:	f002 0203 	and.w	r2, r2, #3
 80043ec:	3a01      	subs	r2, #1
 80043ee:	2a01      	cmp	r2, #1
 80043f0:	d9a7      	bls.n	8004342 <HAL_GPIO_Init+0x1a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043f2:	684a      	ldr	r2, [r1, #4]
 80043f4:	f002 0203 	and.w	r2, r2, #3
 80043f8:	2a03      	cmp	r2, #3
 80043fa:	d025      	beq.n	8004448 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 80043fc:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043fe:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8004402:	2203      	movs	r2, #3
 8004404:	fa02 f20a 	lsl.w	r2, r2, sl
 8004408:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800440c:	688a      	ldr	r2, [r1, #8]
 800440e:	fa02 f20a 	lsl.w	r2, r2, sl
 8004412:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8004414:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004416:	684a      	ldr	r2, [r1, #4]
 8004418:	f002 0203 	and.w	r2, r2, #3
 800441c:	2a02      	cmp	r2, #2
 800441e:	d113      	bne.n	8004448 <HAL_GPIO_Init+0x120>
        temp = GPIOx->AFR[position >> 3U];
 8004420:	08dc      	lsrs	r4, r3, #3
 8004422:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8004426:	f8d4 a020 	ldr.w	sl, [r4, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800442a:	f003 0207 	and.w	r2, r3, #7
 800442e:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8004432:	220f      	movs	r2, #15
 8004434:	fa02 f20b 	lsl.w	r2, r2, fp
 8004438:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800443c:	690a      	ldr	r2, [r1, #16]
 800443e:	fa02 f20b 	lsl.w	r2, r2, fp
 8004442:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3U] = temp;
 8004446:	6222      	str	r2, [r4, #32]
      temp = GPIOx->MODER;
 8004448:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800444a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 800444e:	2203      	movs	r2, #3
 8004450:	fa02 f20a 	lsl.w	r2, r2, sl
 8004454:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004458:	684a      	ldr	r2, [r1, #4]
 800445a:	f002 0203 	and.w	r2, r2, #3
 800445e:	fa02 f20a 	lsl.w	r2, r2, sl
 8004462:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8004464:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004466:	684a      	ldr	r2, [r1, #4]
 8004468:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800446c:	d0af      	beq.n	80043ce <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800446e:	2200      	movs	r2, #0
 8004470:	9201      	str	r2, [sp, #4]
 8004472:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8004474:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004478:	6472      	str	r2, [r6, #68]	; 0x44
 800447a:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800447c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004480:	9201      	str	r2, [sp, #4]
 8004482:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004484:	f023 0203 	bic.w	r2, r3, #3
 8004488:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800448c:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8004490:	f8d2 a008 	ldr.w	sl, [r2, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004494:	f003 0403 	and.w	r4, r3, #3
 8004498:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800449c:	240f      	movs	r4, #15
 800449e:	fa04 f40b 	lsl.w	r4, r4, fp
 80044a2:	ea2a 0a04 	bic.w	sl, sl, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044a6:	4c18      	ldr	r4, [pc, #96]	; (8004508 <HAL_GPIO_Init+0x1e0>)
 80044a8:	42a0      	cmp	r0, r4
 80044aa:	f43f af64 	beq.w	8004376 <HAL_GPIO_Init+0x4e>
 80044ae:	4560      	cmp	r0, ip
 80044b0:	d016      	beq.n	80044e0 <HAL_GPIO_Init+0x1b8>
 80044b2:	4570      	cmp	r0, lr
 80044b4:	d016      	beq.n	80044e4 <HAL_GPIO_Init+0x1bc>
 80044b6:	4548      	cmp	r0, r9
 80044b8:	d016      	beq.n	80044e8 <HAL_GPIO_Init+0x1c0>
 80044ba:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 80044be:	42a0      	cmp	r0, r4
 80044c0:	d014      	beq.n	80044ec <HAL_GPIO_Init+0x1c4>
 80044c2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80044c6:	42a0      	cmp	r0, r4
 80044c8:	d012      	beq.n	80044f0 <HAL_GPIO_Init+0x1c8>
 80044ca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80044ce:	42a0      	cmp	r0, r4
 80044d0:	d010      	beq.n	80044f4 <HAL_GPIO_Init+0x1cc>
 80044d2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80044d6:	42a0      	cmp	r0, r4
 80044d8:	bf0c      	ite	eq
 80044da:	2407      	moveq	r4, #7
 80044dc:	2408      	movne	r4, #8
 80044de:	e74b      	b.n	8004378 <HAL_GPIO_Init+0x50>
 80044e0:	2401      	movs	r4, #1
 80044e2:	e749      	b.n	8004378 <HAL_GPIO_Init+0x50>
 80044e4:	2402      	movs	r4, #2
 80044e6:	e747      	b.n	8004378 <HAL_GPIO_Init+0x50>
 80044e8:	2403      	movs	r4, #3
 80044ea:	e745      	b.n	8004378 <HAL_GPIO_Init+0x50>
 80044ec:	2404      	movs	r4, #4
 80044ee:	e743      	b.n	8004378 <HAL_GPIO_Init+0x50>
 80044f0:	2405      	movs	r4, #5
 80044f2:	e741      	b.n	8004378 <HAL_GPIO_Init+0x50>
 80044f4:	2406      	movs	r4, #6
 80044f6:	e73f      	b.n	8004378 <HAL_GPIO_Init+0x50>
      }
    }
  }
}
 80044f8:	b003      	add	sp, #12
 80044fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044fe:	bf00      	nop
 8004500:	40023800 	.word	0x40023800
 8004504:	40013c00 	.word	0x40013c00
 8004508:	40020000 	.word	0x40020000
 800450c:	40020400 	.word	0x40020400
 8004510:	40020800 	.word	0x40020800
 8004514:	40020c00 	.word	0x40020c00

08004518 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004518:	b10a      	cbz	r2, 800451e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800451a:	6181      	str	r1, [r0, #24]
 800451c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800451e:	0409      	lsls	r1, r1, #16
 8004520:	6181      	str	r1, [r0, #24]
  }
}
 8004522:	4770      	bx	lr

08004524 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004524:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004526:	ea01 0203 	and.w	r2, r1, r3
 800452a:	ea21 0103 	bic.w	r1, r1, r3
 800452e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004532:	6181      	str	r1, [r0, #24]
}
 8004534:	4770      	bx	lr
	...

08004538 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004538:	2800      	cmp	r0, #0
 800453a:	f000 80b0 	beq.w	800469e <HAL_I2C_Init+0x166>
{
 800453e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004540:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004542:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004546:	2b00      	cmp	r3, #0
 8004548:	d078      	beq.n	800463c <HAL_I2C_Init+0x104>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800454a:	2324      	movs	r3, #36	; 0x24
 800454c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004550:	6822      	ldr	r2, [r4, #0]
 8004552:	6813      	ldr	r3, [r2, #0]
 8004554:	f023 0301 	bic.w	r3, r3, #1
 8004558:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800455a:	6822      	ldr	r2, [r4, #0]
 800455c:	6813      	ldr	r3, [r2, #0]
 800455e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004562:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004564:	6822      	ldr	r2, [r4, #0]
 8004566:	6813      	ldr	r3, [r2, #0]
 8004568:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800456c:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800456e:	f001 fb4b 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004572:	6862      	ldr	r2, [r4, #4]
 8004574:	4b4c      	ldr	r3, [pc, #304]	; (80046a8 <HAL_I2C_Init+0x170>)
 8004576:	429a      	cmp	r2, r3
 8004578:	bf94      	ite	ls
 800457a:	4b4c      	ldrls	r3, [pc, #304]	; (80046ac <HAL_I2C_Init+0x174>)
 800457c:	4b4c      	ldrhi	r3, [pc, #304]	; (80046b0 <HAL_I2C_Init+0x178>)
 800457e:	4298      	cmp	r0, r3
 8004580:	bf8c      	ite	hi
 8004582:	2300      	movhi	r3, #0
 8004584:	2301      	movls	r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	f040 808b 	bne.w	80046a2 <HAL_I2C_Init+0x16a>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800458c:	4d49      	ldr	r5, [pc, #292]	; (80046b4 <HAL_I2C_Init+0x17c>)
 800458e:	fba5 3500 	umull	r3, r5, r5, r0
 8004592:	0caf      	lsrs	r7, r5, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004594:	6826      	ldr	r6, [r4, #0]
 8004596:	6871      	ldr	r1, [r6, #4]
 8004598:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800459c:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 80045a0:	6071      	str	r1, [r6, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045a2:	6821      	ldr	r1, [r4, #0]
 80045a4:	6a0b      	ldr	r3, [r1, #32]
 80045a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045aa:	6865      	ldr	r5, [r4, #4]
 80045ac:	4a3e      	ldr	r2, [pc, #248]	; (80046a8 <HAL_I2C_Init+0x170>)
 80045ae:	4295      	cmp	r5, r2
 80045b0:	d849      	bhi.n	8004646 <HAL_I2C_Init+0x10e>
 80045b2:	1c7a      	adds	r2, r7, #1
 80045b4:	4313      	orrs	r3, r2
 80045b6:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045b8:	6825      	ldr	r5, [r4, #0]
 80045ba:	69e9      	ldr	r1, [r5, #28]
 80045bc:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80045c0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80045c4:	6863      	ldr	r3, [r4, #4]
 80045c6:	4a38      	ldr	r2, [pc, #224]	; (80046a8 <HAL_I2C_Init+0x170>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d846      	bhi.n	800465a <HAL_I2C_Init+0x122>
 80045cc:	3801      	subs	r0, #1
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80045d4:	3001      	adds	r0, #1
 80045d6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045da:	4218      	tst	r0, r3
 80045dc:	d059      	beq.n	8004692 <HAL_I2C_Init+0x15a>
 80045de:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80045e2:	430b      	orrs	r3, r1
 80045e4:	61eb      	str	r3, [r5, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045e6:	6821      	ldr	r1, [r4, #0]
 80045e8:	680a      	ldr	r2, [r1, #0]
 80045ea:	69e3      	ldr	r3, [r4, #28]
 80045ec:	6a20      	ldr	r0, [r4, #32]
 80045ee:	4303      	orrs	r3, r0
 80045f0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80045f4:	4313      	orrs	r3, r2
 80045f6:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045f8:	6821      	ldr	r1, [r4, #0]
 80045fa:	688a      	ldr	r2, [r1, #8]
 80045fc:	6923      	ldr	r3, [r4, #16]
 80045fe:	68e0      	ldr	r0, [r4, #12]
 8004600:	4303      	orrs	r3, r0
 8004602:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 8004606:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800460a:	4313      	orrs	r3, r2
 800460c:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800460e:	6821      	ldr	r1, [r4, #0]
 8004610:	68ca      	ldr	r2, [r1, #12]
 8004612:	6963      	ldr	r3, [r4, #20]
 8004614:	69a0      	ldr	r0, [r4, #24]
 8004616:	4303      	orrs	r3, r0
 8004618:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800461c:	4313      	orrs	r3, r2
 800461e:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004620:	6822      	ldr	r2, [r4, #0]
 8004622:	6813      	ldr	r3, [r2, #0]
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800462a:	2000      	movs	r0, #0
 800462c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800462e:	2320      	movs	r3, #32
 8004630:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004634:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004636:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
}
 800463a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800463c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8004640:	f7fe f94e 	bl	80028e0 <HAL_I2C_MspInit>
 8004644:	e781      	b.n	800454a <HAL_I2C_Init+0x12>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004646:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800464a:	fb02 f207 	mul.w	r2, r2, r7
 800464e:	4d1a      	ldr	r5, [pc, #104]	; (80046b8 <HAL_I2C_Init+0x180>)
 8004650:	fba5 5202 	umull	r5, r2, r5, r2
 8004654:	0992      	lsrs	r2, r2, #6
 8004656:	3201      	adds	r2, #1
 8004658:	e7ac      	b.n	80045b4 <HAL_I2C_Init+0x7c>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800465a:	68a2      	ldr	r2, [r4, #8]
 800465c:	b95a      	cbnz	r2, 8004676 <HAL_I2C_Init+0x13e>
 800465e:	1e42      	subs	r2, r0, #1
 8004660:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004664:	fbb2 f2f3 	udiv	r2, r2, r3
 8004668:	3201      	adds	r2, #1
 800466a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800466e:	b192      	cbz	r2, 8004696 <HAL_I2C_Init+0x15e>
 8004670:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8004674:	e7b5      	b.n	80045e2 <HAL_I2C_Init+0xaa>
 8004676:	1e42      	subs	r2, r0, #1
 8004678:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800467c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004680:	fbb2 f2f3 	udiv	r2, r2, r3
 8004684:	3201      	adds	r2, #1
 8004686:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800468a:	b132      	cbz	r2, 800469a <HAL_I2C_Init+0x162>
 800468c:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8004690:	e7a7      	b.n	80045e2 <HAL_I2C_Init+0xaa>
 8004692:	2304      	movs	r3, #4
 8004694:	e7a5      	b.n	80045e2 <HAL_I2C_Init+0xaa>
 8004696:	2301      	movs	r3, #1
 8004698:	e7a3      	b.n	80045e2 <HAL_I2C_Init+0xaa>
 800469a:	2301      	movs	r3, #1
 800469c:	e7a1      	b.n	80045e2 <HAL_I2C_Init+0xaa>
    return HAL_ERROR;
 800469e:	2001      	movs	r0, #1
}
 80046a0:	4770      	bx	lr
    return HAL_ERROR;
 80046a2:	2001      	movs	r0, #1
 80046a4:	e7c9      	b.n	800463a <HAL_I2C_Init+0x102>
 80046a6:	bf00      	nop
 80046a8:	000186a0 	.word	0x000186a0
 80046ac:	001e847f 	.word	0x001e847f
 80046b0:	003d08ff 	.word	0x003d08ff
 80046b4:	431bde83 	.word	0x431bde83
 80046b8:	10624dd3 	.word	0x10624dd3

080046bc <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80046bc:	b430      	push	{r4, r5}
 80046be:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80046c0:	2400      	movs	r4, #0
 80046c2:	9401      	str	r4, [sp, #4]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046c4:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80046c8:	b2e4      	uxtb	r4, r4
 80046ca:	2c20      	cmp	r4, #32
 80046cc:	d156      	bne.n	800477c <HAL_I2C_Master_Transmit_IT+0xc0>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80046ce:	4c2e      	ldr	r4, [pc, #184]	; (8004788 <HAL_I2C_Master_Transmit_IT+0xcc>)
 80046d0:	6824      	ldr	r4, [r4, #0]
 80046d2:	08e4      	lsrs	r4, r4, #3
 80046d4:	4d2d      	ldr	r5, [pc, #180]	; (800478c <HAL_I2C_Master_Transmit_IT+0xd0>)
 80046d6:	fba5 5404 	umull	r5, r4, r5, r4
 80046da:	0a24      	lsrs	r4, r4, #8
 80046dc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80046e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80046e4:	9401      	str	r4, [sp, #4]
    do
    {
      count--;
 80046e6:	9c01      	ldr	r4, [sp, #4]
 80046e8:	3c01      	subs	r4, #1
 80046ea:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 80046ec:	9c01      	ldr	r4, [sp, #4]
 80046ee:	2c00      	cmp	r4, #0
 80046f0:	d035      	beq.n	800475e <HAL_I2C_Master_Transmit_IT+0xa2>
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80046f2:	6804      	ldr	r4, [r0, #0]
 80046f4:	69a5      	ldr	r5, [r4, #24]
 80046f6:	f015 0f02 	tst.w	r5, #2
 80046fa:	d1f4      	bne.n	80046e6 <HAL_I2C_Master_Transmit_IT+0x2a>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046fc:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 8004700:	2d01      	cmp	r5, #1
 8004702:	d03f      	beq.n	8004784 <HAL_I2C_Master_Transmit_IT+0xc8>
 8004704:	2501      	movs	r5, #1
 8004706:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800470a:	6825      	ldr	r5, [r4, #0]
 800470c:	f015 0f01 	tst.w	r5, #1
 8004710:	d103      	bne.n	800471a <HAL_I2C_Master_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004712:	6825      	ldr	r5, [r4, #0]
 8004714:	f045 0501 	orr.w	r5, r5, #1
 8004718:	6025      	str	r5, [r4, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800471a:	6805      	ldr	r5, [r0, #0]
 800471c:	682c      	ldr	r4, [r5, #0]
 800471e:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8004722:	602c      	str	r4, [r5, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004724:	2421      	movs	r4, #33	; 0x21
 8004726:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800472a:	2410      	movs	r4, #16
 800472c:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004730:	2400      	movs	r4, #0
 8004732:	6404      	str	r4, [r0, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004734:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004736:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004738:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800473a:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800473c:	4b14      	ldr	r3, [pc, #80]	; (8004790 <HAL_I2C_Master_Transmit_IT+0xd4>)
 800473e:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004740:	6441      	str	r1, [r0, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004742:	6802      	ldr	r2, [r0, #0]
 8004744:	6813      	ldr	r3, [r2, #0]
 8004746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800474a:	6013      	str	r3, [r2, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800474c:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004750:	6802      	ldr	r2, [r0, #0]
 8004752:	6853      	ldr	r3, [r2, #4]
 8004754:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004758:	6053      	str	r3, [r2, #4]

    return HAL_OK;
 800475a:	4620      	mov	r0, r4
 800475c:	e00f      	b.n	800477e <HAL_I2C_Master_Transmit_IT+0xc2>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800475e:	2300      	movs	r3, #0
 8004760:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004762:	2220      	movs	r2, #32
 8004764:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004768:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800476c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800476e:	f042 0220 	orr.w	r2, r2, #32
 8004772:	6402      	str	r2, [r0, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004774:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 8004778:	2001      	movs	r0, #1
 800477a:	e000      	b.n	800477e <HAL_I2C_Master_Transmit_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800477c:	2002      	movs	r0, #2
  }
}
 800477e:	b002      	add	sp, #8
 8004780:	bc30      	pop	{r4, r5}
 8004782:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004784:	2002      	movs	r0, #2
 8004786:	e7fa      	b.n	800477e <HAL_I2C_Master_Transmit_IT+0xc2>
 8004788:	20000014 	.word	0x20000014
 800478c:	14f8b589 	.word	0x14f8b589
 8004790:	ffff0000 	.word	0xffff0000

08004794 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004794:	b430      	push	{r4, r5}
 8004796:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004798:	2400      	movs	r4, #0
 800479a:	9401      	str	r4, [sp, #4]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800479c:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80047a0:	b2e4      	uxtb	r4, r4
 80047a2:	2c20      	cmp	r4, #32
 80047a4:	d15b      	bne.n	800485e <HAL_I2C_Master_Receive_IT+0xca>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80047a6:	4c31      	ldr	r4, [pc, #196]	; (800486c <HAL_I2C_Master_Receive_IT+0xd8>)
 80047a8:	6824      	ldr	r4, [r4, #0]
 80047aa:	08e4      	lsrs	r4, r4, #3
 80047ac:	4d30      	ldr	r5, [pc, #192]	; (8004870 <HAL_I2C_Master_Receive_IT+0xdc>)
 80047ae:	fba5 5404 	umull	r5, r4, r5, r4
 80047b2:	0a24      	lsrs	r4, r4, #8
 80047b4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80047b8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80047bc:	9401      	str	r4, [sp, #4]
    do
    {
      count--;
 80047be:	9c01      	ldr	r4, [sp, #4]
 80047c0:	3c01      	subs	r4, #1
 80047c2:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 80047c4:	9c01      	ldr	r4, [sp, #4]
 80047c6:	2c00      	cmp	r4, #0
 80047c8:	d03a      	beq.n	8004840 <HAL_I2C_Master_Receive_IT+0xac>
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80047ca:	6804      	ldr	r4, [r0, #0]
 80047cc:	69a5      	ldr	r5, [r4, #24]
 80047ce:	f015 0f02 	tst.w	r5, #2
 80047d2:	d1f4      	bne.n	80047be <HAL_I2C_Master_Receive_IT+0x2a>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047d4:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 80047d8:	2d01      	cmp	r5, #1
 80047da:	d044      	beq.n	8004866 <HAL_I2C_Master_Receive_IT+0xd2>
 80047dc:	2501      	movs	r5, #1
 80047de:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047e2:	6825      	ldr	r5, [r4, #0]
 80047e4:	f015 0f01 	tst.w	r5, #1
 80047e8:	d103      	bne.n	80047f2 <HAL_I2C_Master_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047ea:	6825      	ldr	r5, [r4, #0]
 80047ec:	f045 0501 	orr.w	r5, r5, #1
 80047f0:	6025      	str	r5, [r4, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047f2:	6805      	ldr	r5, [r0, #0]
 80047f4:	682c      	ldr	r4, [r5, #0]
 80047f6:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 80047fa:	602c      	str	r4, [r5, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047fc:	2422      	movs	r4, #34	; 0x22
 80047fe:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004802:	2410      	movs	r4, #16
 8004804:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004808:	2400      	movs	r4, #0
 800480a:	6404      	str	r4, [r0, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800480c:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 800480e:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004810:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004812:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004814:	4b17      	ldr	r3, [pc, #92]	; (8004874 <HAL_I2C_Master_Receive_IT+0xe0>)
 8004816:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004818:	6441      	str	r1, [r0, #68]	; 0x44

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800481a:	6802      	ldr	r2, [r0, #0]
 800481c:	6813      	ldr	r3, [r2, #0]
 800481e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004822:	6013      	str	r3, [r2, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004824:	6802      	ldr	r2, [r0, #0]
 8004826:	6813      	ldr	r3, [r2, #0]
 8004828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800482c:	6013      	str	r3, [r2, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800482e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004832:	6802      	ldr	r2, [r0, #0]
 8004834:	6853      	ldr	r3, [r2, #4]
 8004836:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800483a:	6053      	str	r3, [r2, #4]

    return HAL_OK;
 800483c:	4620      	mov	r0, r4
 800483e:	e00f      	b.n	8004860 <HAL_I2C_Master_Receive_IT+0xcc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004840:	2300      	movs	r3, #0
 8004842:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004844:	2220      	movs	r2, #32
 8004846:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800484a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800484e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004850:	f042 0220 	orr.w	r2, r2, #32
 8004854:	6402      	str	r2, [r0, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004856:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 800485a:	2001      	movs	r0, #1
 800485c:	e000      	b.n	8004860 <HAL_I2C_Master_Receive_IT+0xcc>
  }
  else
  {
    return HAL_BUSY;
 800485e:	2002      	movs	r0, #2
  }
}
 8004860:	b002      	add	sp, #8
 8004862:	bc30      	pop	{r4, r5}
 8004864:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004866:	2002      	movs	r0, #2
 8004868:	e7fa      	b.n	8004860 <HAL_I2C_Master_Receive_IT+0xcc>
 800486a:	bf00      	nop
 800486c:	20000014 	.word	0x20000014
 8004870:	14f8b589 	.word	0x14f8b589
 8004874:	ffff0000 	.word	0xffff0000

08004878 <HAL_I2C_SlaveTxCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004878:	4770      	bx	lr

0800487a <HAL_I2C_SlaveRxCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800487a:	4770      	bx	lr

0800487c <HAL_I2C_AddrCallback>:
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800487c:	4770      	bx	lr

0800487e <HAL_I2C_ListenCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800487e:	4770      	bx	lr

08004880 <HAL_I2C_MemTxCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004880:	4770      	bx	lr

08004882 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004882:	b508      	push	{r3, lr}
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004884:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d

  if (hi2c->EventCount == 0U)
 8004888:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800488a:	b99a      	cbnz	r2, 80048b4 <I2C_MemoryTransmit_TXE_BTF+0x32>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800488c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800488e:	2b01      	cmp	r3, #1
 8004890:	d008      	beq.n	80048a4 <I2C_MemoryTransmit_TXE_BTF+0x22>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Send MSB of Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004892:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004894:	6802      	ldr	r2, [r0, #0]
 8004896:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800489a:	6113      	str	r3, [r2, #16]

      hi2c->EventCount++;
 800489c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800489e:	3301      	adds	r3, #1
 80048a0:	6503      	str	r3, [r0, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80048a2:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80048a4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80048a6:	6802      	ldr	r2, [r0, #0]
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 80048ac:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80048ae:	3302      	adds	r3, #2
 80048b0:	6503      	str	r3, [r0, #80]	; 0x50
 80048b2:	e7f6      	b.n	80048a2 <I2C_MemoryTransmit_TXE_BTF+0x20>
 80048b4:	b2db      	uxtb	r3, r3
  else if (hi2c->EventCount == 1U)
 80048b6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80048b8:	2a01      	cmp	r2, #1
 80048ba:	d00b      	beq.n	80048d4 <I2C_MemoryTransmit_TXE_BTF+0x52>
  else if (hi2c->EventCount == 2U)
 80048bc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80048be:	2a02      	cmp	r2, #2
 80048c0:	d1ef      	bne.n	80048a2 <I2C_MemoryTransmit_TXE_BTF+0x20>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80048c2:	2b22      	cmp	r3, #34	; 0x22
 80048c4:	d00e      	beq.n	80048e4 <I2C_MemoryTransmit_TXE_BTF+0x62>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80048c6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80048c8:	b292      	uxth	r2, r2
 80048ca:	b1ea      	cbz	r2, 8004908 <I2C_MemoryTransmit_TXE_BTF+0x86>
 80048cc:	2b21      	cmp	r3, #33	; 0x21
 80048ce:	d00f      	beq.n	80048f0 <I2C_MemoryTransmit_TXE_BTF+0x6e>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80048d0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80048d2:	e7e6      	b.n	80048a2 <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80048d4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80048d6:	6802      	ldr	r2, [r0, #0]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 80048dc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80048de:	3301      	adds	r3, #1
 80048e0:	6503      	str	r3, [r0, #80]	; 0x50
 80048e2:	e7de      	b.n	80048a2 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80048e4:	6802      	ldr	r2, [r0, #0]
 80048e6:	6813      	ldr	r3, [r2, #0]
 80048e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	e7d8      	b.n	80048a2 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048f0:	6803      	ldr	r3, [r0, #0]
 80048f2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80048f4:	7812      	ldrb	r2, [r2, #0]
 80048f6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80048f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80048fa:	3301      	adds	r3, #1
 80048fc:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 80048fe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004900:	3b01      	subs	r3, #1
 8004902:	b29b      	uxth	r3, r3
 8004904:	8543      	strh	r3, [r0, #42]	; 0x2a
 8004906:	e7cc      	b.n	80048a2 <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004908:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800490a:	b292      	uxth	r2, r2
 800490c:	2a00      	cmp	r2, #0
 800490e:	d1c8      	bne.n	80048a2 <I2C_MemoryTransmit_TXE_BTF+0x20>
 8004910:	2b21      	cmp	r3, #33	; 0x21
 8004912:	d1c6      	bne.n	80048a2 <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004914:	6802      	ldr	r2, [r0, #0]
 8004916:	6853      	ldr	r3, [r2, #4]
 8004918:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800491c:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491e:	6802      	ldr	r2, [r0, #0]
 8004920:	6813      	ldr	r3, [r2, #0]
 8004922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004926:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004928:	2300      	movs	r3, #0
 800492a:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800492c:	2220      	movs	r2, #32
 800492e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004932:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004936:	f7ff ffa3 	bl	8004880 <HAL_I2C_MemTxCpltCallback>
}
 800493a:	e7b2      	b.n	80048a2 <I2C_MemoryTransmit_TXE_BTF+0x20>

0800493c <HAL_I2C_MemRxCpltCallback>:
}
 800493c:	4770      	bx	lr

0800493e <HAL_I2C_ErrorCallback>:
}
 800493e:	4770      	bx	lr

08004940 <HAL_I2C_AbortCpltCallback>:
}
 8004940:	4770      	bx	lr
	...

08004944 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004944:	b500      	push	{lr}
 8004946:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800494c:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800494e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8004952:	b2d2      	uxtb	r2, r2

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004954:	4b32      	ldr	r3, [pc, #200]	; (8004a20 <I2C_DMAAbort+0xdc>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	08db      	lsrs	r3, r3, #3
 800495a:	4932      	ldr	r1, [pc, #200]	; (8004a24 <I2C_DMAAbort+0xe0>)
 800495c:	fba1 1303 	umull	r1, r3, r1, r3
 8004960:	0a1b      	lsrs	r3, r3, #8
 8004962:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004966:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800496a:	9301      	str	r3, [sp, #4]
  do
  {
    if (count == 0U)
 800496c:	9b01      	ldr	r3, [sp, #4]
 800496e:	b143      	cbz	r3, 8004982 <I2C_DMAAbort+0x3e>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
      break;
    }
    count--;
 8004970:	9b01      	ldr	r3, [sp, #4]
 8004972:	3b01      	subs	r3, #1
 8004974:	9301      	str	r3, [sp, #4]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004976:	6803      	ldr	r3, [r0, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800497e:	d1f5      	bne.n	800496c <I2C_DMAAbort+0x28>
 8004980:	e003      	b.n	800498a <I2C_DMAAbort+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004982:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004984:	f043 0320 	orr.w	r3, r3, #32
 8004988:	6403      	str	r3, [r0, #64]	; 0x40

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800498a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800498c:	b10b      	cbz	r3, 8004992 <I2C_DMAAbort+0x4e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800498e:	2100      	movs	r1, #0
 8004990:	63d9      	str	r1, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004992:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004994:	b10b      	cbz	r3, 800499a <I2C_DMAAbort+0x56>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004996:	2100      	movs	r1, #0
 8004998:	63d9      	str	r1, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800499a:	6801      	ldr	r1, [r0, #0]
 800499c:	680b      	ldr	r3, [r1, #0]
 800499e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049a2:	600b      	str	r3, [r1, #0]

  hi2c->XferCount = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	8543      	strh	r3, [r0, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80049a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80049aa:	b10b      	cbz	r3, 80049b0 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80049ac:	2100      	movs	r1, #0
 80049ae:	6519      	str	r1, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80049b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80049b2:	b10b      	cbz	r3, 80049b8 <I2C_DMAAbort+0x74>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80049b4:	2100      	movs	r1, #0
 80049b6:	6519      	str	r1, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80049b8:	6801      	ldr	r1, [r0, #0]
 80049ba:	680b      	ldr	r3, [r1, #0]
 80049bc:	f023 0301 	bic.w	r3, r3, #1
 80049c0:	600b      	str	r3, [r1, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b60      	cmp	r3, #96	; 0x60
 80049ca:	d00e      	beq.n	80049ea <I2C_DMAAbort+0xa6>
    HAL_I2C_AbortCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049cc:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80049d0:	2a28      	cmp	r2, #40	; 0x28
 80049d2:	d014      	beq.n	80049fe <I2C_DMAAbort+0xba>
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State = HAL_I2C_STATE_LISTEN;
    }
    else
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80049d4:	2320      	movs	r3, #32
 80049d6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049da:	2300      	movs	r3, #0
 80049dc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80049e0:	f7ff ffad 	bl	800493e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049e4:	b003      	add	sp, #12
 80049e6:	f85d fb04 	ldr.w	pc, [sp], #4
    hi2c->State         = HAL_I2C_STATE_READY;
 80049ea:	2320      	movs	r3, #32
 80049ec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049f0:	2300      	movs	r3, #0
 80049f2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80049f6:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80049f8:	f7ff ffa2 	bl	8004940 <HAL_I2C_AbortCpltCallback>
 80049fc:	e7f2      	b.n	80049e4 <I2C_DMAAbort+0xa0>
      __HAL_I2C_ENABLE(hi2c);
 80049fe:	6802      	ldr	r2, [r0, #0]
 8004a00:	6813      	ldr	r3, [r2, #0]
 8004a02:	f043 0301 	orr.w	r3, r3, #1
 8004a06:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a08:	6802      	ldr	r2, [r0, #0]
 8004a0a:	6813      	ldr	r3, [r2, #0]
 8004a0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a10:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a12:	2300      	movs	r3, #0
 8004a14:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a16:	2328      	movs	r3, #40	; 0x28
 8004a18:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8004a1c:	e7e0      	b.n	80049e0 <I2C_DMAAbort+0x9c>
 8004a1e:	bf00      	nop
 8004a20:	20000014 	.word	0x20000014
 8004a24:	14f8b589 	.word	0x14f8b589

08004a28 <I2C_ITError>:
{
 8004a28:	b510      	push	{r4, lr}
 8004a2a:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a2c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8004a30:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004a32:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004a36:	b2db      	uxtb	r3, r3
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a38:	2b10      	cmp	r3, #16
 8004a3a:	d036      	beq.n	8004aaa <I2C_ITError+0x82>
 8004a3c:	2b40      	cmp	r3, #64	; 0x40
 8004a3e:	d034      	beq.n	8004aaa <I2C_ITError+0x82>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a40:	f002 0328 	and.w	r3, r2, #40	; 0x28
 8004a44:	2b28      	cmp	r3, #40	; 0x28
 8004a46:	d03d      	beq.n	8004ac4 <I2C_ITError+0x9c>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004a50:	d107      	bne.n	8004a62 <I2C_ITError+0x3a>
 8004a52:	2a60      	cmp	r2, #96	; 0x60
 8004a54:	d005      	beq.n	8004a62 <I2C_ITError+0x3a>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a56:	2320      	movs	r3, #32
 8004a58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004a6e:	d04d      	beq.n	8004b0c <I2C_ITError+0xe4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a76:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004a78:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004a7a:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d025      	beq.n	8004ad0 <I2C_ITError+0xa8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a84:	4b46      	ldr	r3, [pc, #280]	; (8004ba0 <I2C_ITError+0x178>)
 8004a86:	6513      	str	r3, [r2, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a88:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004a8a:	f7ff fc36 	bl	80042fa <HAL_DMA_Abort_IT>
 8004a8e:	2800      	cmp	r0, #0
 8004a90:	d04e      	beq.n	8004b30 <I2C_ITError+0x108>
        __HAL_I2C_DISABLE(hi2c);
 8004a92:	6822      	ldr	r2, [r4, #0]
 8004a94:	6813      	ldr	r3, [r2, #0]
 8004a96:	f023 0301 	bic.w	r3, r3, #1
 8004a9a:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8004a9c:	2320      	movs	r3, #32
 8004a9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004aa2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004aa4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004aa6:	4798      	blx	r3
 8004aa8:	e042      	b.n	8004b30 <I2C_ITError+0x108>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004aaa:	2a22      	cmp	r2, #34	; 0x22
 8004aac:	d1c8      	bne.n	8004a40 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004aae:	6822      	ldr	r2, [r4, #0]
 8004ab0:	6813      	ldr	r3, [r2, #0]
 8004ab2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ab6:	6013      	str	r3, [r2, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004ac0:	d0c9      	beq.n	8004a56 <I2C_ITError+0x2e>
 8004ac2:	e7ce      	b.n	8004a62 <I2C_ITError+0x3a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ac8:	2328      	movs	r3, #40	; 0x28
 8004aca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8004ace:	e7ca      	b.n	8004a66 <I2C_ITError+0x3e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ad0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ad2:	4a33      	ldr	r2, [pc, #204]	; (8004ba0 <I2C_ITError+0x178>)
 8004ad4:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ad6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004ad8:	f7ff fc0f 	bl	80042fa <HAL_DMA_Abort_IT>
 8004adc:	b340      	cbz	r0, 8004b30 <I2C_ITError+0x108>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	695a      	ldr	r2, [r3, #20]
 8004ae2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004ae6:	d005      	beq.n	8004af4 <I2C_ITError+0xcc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae8:	691a      	ldr	r2, [r3, #16]
 8004aea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004aec:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004af0:	3301      	adds	r3, #1
 8004af2:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8004af4:	6822      	ldr	r2, [r4, #0]
 8004af6:	6813      	ldr	r3, [r2, #0]
 8004af8:	f023 0301 	bic.w	r3, r3, #1
 8004afc:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8004afe:	2320      	movs	r3, #32
 8004b00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b04:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004b06:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004b08:	4798      	blx	r3
 8004b0a:	e011      	b.n	8004b30 <I2C_ITError+0x108>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b0c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	2a60      	cmp	r2, #96	; 0x60
 8004b14:	d01f      	beq.n	8004b56 <I2C_ITError+0x12e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b16:	695a      	ldr	r2, [r3, #20]
 8004b18:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004b1c:	d005      	beq.n	8004b2a <I2C_ITError+0x102>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b22:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004b24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b26:	3301      	adds	r3, #1
 8004b28:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	f7ff ff07 	bl	800493e <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8004b30:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b32:	f013 0f0f 	tst.w	r3, #15
 8004b36:	d004      	beq.n	8004b42 <I2C_ITError+0x11a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b38:	6822      	ldr	r2, [r4, #0]
 8004b3a:	6853      	ldr	r3, [r2, #4]
 8004b3c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004b40:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8004b42:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004b46:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004b48:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004b4a:	f012 0f04 	tst.w	r2, #4
 8004b4e:	d001      	beq.n	8004b54 <I2C_ITError+0x12c>
 8004b50:	2b28      	cmp	r3, #40	; 0x28
 8004b52:	d018      	beq.n	8004b86 <I2C_ITError+0x15e>
}
 8004b54:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004b56:	2220      	movs	r2, #32
 8004b58:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b60:	695a      	ldr	r2, [r3, #20]
 8004b62:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004b66:	d005      	beq.n	8004b74 <I2C_ITError+0x14c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b68:	691a      	ldr	r2, [r3, #16]
 8004b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b6c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b70:	3301      	adds	r3, #1
 8004b72:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8004b74:	6822      	ldr	r2, [r4, #0]
 8004b76:	6813      	ldr	r3, [r2, #0]
 8004b78:	f023 0301 	bic.w	r3, r3, #1
 8004b7c:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f7ff fede 	bl	8004940 <HAL_I2C_AbortCpltCallback>
 8004b84:	e7d4      	b.n	8004b30 <I2C_ITError+0x108>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b86:	4b07      	ldr	r3, [pc, #28]	; (8004ba4 <I2C_ITError+0x17c>)
 8004b88:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b94:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b98:	4620      	mov	r0, r4
 8004b9a:	f7ff fe70 	bl	800487e <HAL_I2C_ListenCpltCallback>
}
 8004b9e:	e7d9      	b.n	8004b54 <I2C_ITError+0x12c>
 8004ba0:	08004945 	.word	0x08004945
 8004ba4:	ffff0000 	.word	0xffff0000

08004ba8 <HAL_I2C_EV_IRQHandler>:
{
 8004ba8:	b570      	push	{r4, r5, r6, lr}
 8004baa:	b08c      	sub	sp, #48	; 0x30
 8004bac:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004bae:	6802      	ldr	r2, [r0, #0]
 8004bb0:	6850      	ldr	r0, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004bb2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004bb4:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004bb8:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bba:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004bbe:	2b10      	cmp	r3, #16
 8004bc0:	d022      	beq.n	8004c08 <HAL_I2C_EV_IRQHandler+0x60>
 8004bc2:	b2c9      	uxtb	r1, r1
 8004bc4:	2b40      	cmp	r3, #64	; 0x40
 8004bc6:	d01f      	beq.n	8004c08 <HAL_I2C_EV_IRQHandler+0x60>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 839c 	beq.w	8005308 <HAL_I2C_EV_IRQHandler+0x760>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004bd0:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 8004bd2:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bd4:	f013 0f02 	tst.w	r3, #2
 8004bd8:	f000 83ad 	beq.w	8005336 <HAL_I2C_EV_IRQHandler+0x78e>
 8004bdc:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004be0:	f000 83af 	beq.w	8005342 <HAL_I2C_EV_IRQHandler+0x79a>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004be4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004be6:	b103      	cbz	r3, 8004bea <HAL_I2C_EV_IRQHandler+0x42>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004be8:	6995      	ldr	r5, [r2, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bea:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004bee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bf2:	2b28      	cmp	r3, #40	; 0x28
 8004bf4:	f000 838b 	beq.w	800530e <HAL_I2C_EV_IRQHandler+0x766>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004bf8:	f06f 0302 	mvn.w	r3, #2
 8004bfc:	6153      	str	r3, [r2, #20]
    __HAL_UNLOCK(hi2c);
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004c04:	b00c      	add	sp, #48	; 0x30
 8004c06:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c08:	6996      	ldr	r6, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c0a:	6951      	ldr	r1, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004c0c:	f011 0f01 	tst.w	r1, #1
 8004c10:	d11d      	bne.n	8004c4e <HAL_I2C_EV_IRQHandler+0xa6>
 8004c12:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8004c16:	d0f5      	beq.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
 8004c18:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8004c1c:	d0f2      	beq.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c1e:	f011 0f08 	tst.w	r1, #8
 8004c22:	d01b      	beq.n	8004c5c <HAL_I2C_EV_IRQHandler+0xb4>
 8004c24:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004c28:	f000 8179 	beq.w	8004f1e <HAL_I2C_EV_IRQHandler+0x376>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004c2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	6113      	str	r3, [r2, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 8085 	beq.w	8004d44 <HAL_I2C_EV_IRQHandler+0x19c>
 8004c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 8081 	beq.w	8004d44 <HAL_I2C_EV_IRQHandler+0x19c>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c42:	6822      	ldr	r2, [r4, #0]
 8004c44:	6853      	ldr	r3, [r2, #4]
 8004c46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c4a:	6053      	str	r3, [r2, #4]
 8004c4c:	e7da      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c4e:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004c52:	d11d      	bne.n	8004c90 <HAL_I2C_EV_IRQHandler+0xe8>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c54:	f011 0f08 	tst.w	r1, #8
 8004c58:	f040 8161 	bne.w	8004f1e <HAL_I2C_EV_IRQHandler+0x376>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c5c:	f011 0f02 	tst.w	r1, #2
 8004c60:	f000 815d 	beq.w	8004f1e <HAL_I2C_EV_IRQHandler+0x376>
 8004c64:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004c68:	f000 8159 	beq.w	8004f1e <HAL_I2C_EV_IRQHandler+0x376>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004c6c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004c70:	b2d9      	uxtb	r1, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004c72:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004c74:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c76:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b22      	cmp	r3, #34	; 0x22
 8004c7e:	d06a      	beq.n	8004d56 <HAL_I2C_EV_IRQHandler+0x1ae>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c80:	2300      	movs	r3, #0
 8004c82:	9309      	str	r3, [sp, #36]	; 0x24
 8004c84:	6953      	ldr	r3, [r2, #20]
 8004c86:	9309      	str	r3, [sp, #36]	; 0x24
 8004c88:	6993      	ldr	r3, [r2, #24]
 8004c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c8e:	e7b9      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004c90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004c92:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004c96:	d01a      	beq.n	8004cce <HAL_I2C_EV_IRQHandler+0x126>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004c98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004c9a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004c9e:	bf04      	itt	eq
 8004ca0:	2308      	moveq	r3, #8
 8004ca2:	62e3      	streq	r3, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ca4:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b40      	cmp	r3, #64	; 0x40
 8004cac:	d012      	beq.n	8004cd4 <HAL_I2C_EV_IRQHandler+0x12c>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cae:	6923      	ldr	r3, [r4, #16]
 8004cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cb4:	d01b      	beq.n	8004cee <HAL_I2C_EV_IRQHandler+0x146>
      if (hi2c->EventCount == 0U)
 8004cb6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d136      	bne.n	8004d2a <HAL_I2C_EV_IRQHandler+0x182>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004cbc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004cbe:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8004cc2:	f003 0306 	and.w	r3, r3, #6
 8004cc6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8004cca:	6113      	str	r3, [r2, #16]
 8004ccc:	e79a      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004cd2:	e7e7      	b.n	8004ca4 <HAL_I2C_EV_IRQHandler+0xfc>
    if (hi2c->EventCount == 0U)
 8004cd4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004cd6:	b923      	cbnz	r3, 8004ce2 <HAL_I2C_EV_IRQHandler+0x13a>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004cd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004cda:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004cde:	6113      	str	r3, [r2, #16]
 8004ce0:	e790      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ce2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004ce4:	f043 0301 	orr.w	r3, r3, #1
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	6113      	str	r3, [r2, #16]
 8004cec:	e78a      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004cee:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b21      	cmp	r3, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004cf6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004cf8:	bf0e      	itee	eq
 8004cfa:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004cfe:	f043 0301 	orrne.w	r3, r3, #1
 8004d02:	b2db      	uxtbne	r3, r3
 8004d04:	6113      	str	r3, [r2, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004d06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d08:	b13b      	cbz	r3, 8004d1a <HAL_I2C_EV_IRQHandler+0x172>
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0c:	b12b      	cbz	r3, 8004d1a <HAL_I2C_EV_IRQHandler+0x172>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d0e:	6822      	ldr	r2, [r4, #0]
 8004d10:	6853      	ldr	r3, [r2, #4]
 8004d12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d16:	6053      	str	r3, [r2, #4]
 8004d18:	e774      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004d1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f43f af71 	beq.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
 8004d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1f2      	bne.n	8004d0e <HAL_I2C_EV_IRQHandler+0x166>
 8004d28:	e76c      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
      else if (hi2c->EventCount == 1U)
 8004d2a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	f47f af69 	bne.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004d32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004d34:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8004d38:	f003 0306 	and.w	r3, r3, #6
 8004d3c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 8004d40:	6113      	str	r3, [r2, #16]
 8004d42:	e75f      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004d44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f43f af5c 	beq.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f47f af77 	bne.w	8004c42 <HAL_I2C_EV_IRQHandler+0x9a>
 8004d54:	e756      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004d56:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004d58:	b90b      	cbnz	r3, 8004d5e <HAL_I2C_EV_IRQHandler+0x1b6>
 8004d5a:	2940      	cmp	r1, #64	; 0x40
 8004d5c:	d015      	beq.n	8004d8a <HAL_I2C_EV_IRQHandler+0x1e2>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004d5e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004d60:	b91b      	cbnz	r3, 8004d6a <HAL_I2C_EV_IRQHandler+0x1c2>
 8004d62:	6923      	ldr	r3, [r4, #16]
 8004d64:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d68:	d016      	beq.n	8004d98 <HAL_I2C_EV_IRQHandler+0x1f0>
      if (hi2c->XferCount == 0U)
 8004d6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	bb13      	cbnz	r3, 8004db6 <HAL_I2C_EV_IRQHandler+0x20e>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d70:	9302      	str	r3, [sp, #8]
 8004d72:	6953      	ldr	r3, [r2, #20]
 8004d74:	9302      	str	r3, [sp, #8]
 8004d76:	6993      	ldr	r3, [r2, #24]
 8004d78:	9302      	str	r3, [sp, #8]
 8004d7a:	9b02      	ldr	r3, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d7c:	6813      	ldr	r3, [r2, #0]
 8004d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d82:	6013      	str	r3, [r2, #0]
      hi2c->EventCount = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	6523      	str	r3, [r4, #80]	; 0x50
 8004d88:	e73c      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	6953      	ldr	r3, [r2, #20]
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	6993      	ldr	r3, [r2, #24]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	9b00      	ldr	r3, [sp, #0]
 8004d96:	e735      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d98:	2300      	movs	r3, #0
 8004d9a:	9301      	str	r3, [sp, #4]
 8004d9c:	6953      	ldr	r3, [r2, #20]
 8004d9e:	9301      	str	r3, [sp, #4]
 8004da0:	6993      	ldr	r3, [r2, #24]
 8004da2:	9301      	str	r3, [sp, #4]
 8004da4:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004da6:	6813      	ldr	r3, [r2, #0]
 8004da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dac:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 8004dae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004db0:	3301      	adds	r3, #1
 8004db2:	6523      	str	r3, [r4, #80]	; 0x50
 8004db4:	e726      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
      else if (hi2c->XferCount == 1U)
 8004db6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d025      	beq.n	8004e0a <HAL_I2C_EV_IRQHandler+0x262>
      else if (hi2c->XferCount == 2U)
 8004dbe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d079      	beq.n	8004eba <HAL_I2C_EV_IRQHandler+0x312>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc6:	6813      	ldr	r3, [r2, #0]
 8004dc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004dcc:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004dd6:	d00f      	beq.n	8004df8 <HAL_I2C_EV_IRQHandler+0x250>
 8004dd8:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8004ddc:	d008      	beq.n	8004df0 <HAL_I2C_EV_IRQHandler+0x248>
 8004dde:	3801      	subs	r0, #1
 8004de0:	281f      	cmp	r0, #31
 8004de2:	d809      	bhi.n	8004df8 <HAL_I2C_EV_IRQHandler+0x250>
 8004de4:	4a9d      	ldr	r2, [pc, #628]	; (800505c <HAL_I2C_EV_IRQHandler+0x4b4>)
 8004de6:	fa22 f000 	lsr.w	r0, r2, r0
 8004dea:	f010 0f01 	tst.w	r0, #1
 8004dee:	d003      	beq.n	8004df8 <HAL_I2C_EV_IRQHandler+0x250>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004df6:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df8:	2300      	movs	r3, #0
 8004dfa:	9308      	str	r3, [sp, #32]
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	695a      	ldr	r2, [r3, #20]
 8004e00:	9208      	str	r2, [sp, #32]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	9308      	str	r3, [sp, #32]
 8004e06:	9b08      	ldr	r3, [sp, #32]
 8004e08:	e7bc      	b.n	8004d84 <HAL_I2C_EV_IRQHandler+0x1dc>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004e0a:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8004e0e:	d01a      	beq.n	8004e46 <HAL_I2C_EV_IRQHandler+0x29e>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004e10:	2808      	cmp	r0, #8
 8004e12:	d03c      	beq.n	8004e8e <HAL_I2C_EV_IRQHandler+0x2e6>
 8004e14:	2820      	cmp	r0, #32
 8004e16:	d03a      	beq.n	8004e8e <HAL_I2C_EV_IRQHandler+0x2e6>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004e18:	2d12      	cmp	r5, #18
 8004e1a:	d036      	beq.n	8004e8a <HAL_I2C_EV_IRQHandler+0x2e2>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e1c:	2810      	cmp	r0, #16
 8004e1e:	d847      	bhi.n	8004eb0 <HAL_I2C_EV_IRQHandler+0x308>
 8004e20:	4b8f      	ldr	r3, [pc, #572]	; (8005060 <HAL_I2C_EV_IRQHandler+0x4b8>)
 8004e22:	fa23 f000 	lsr.w	r0, r3, r0
 8004e26:	f010 0f01 	tst.w	r0, #1
 8004e2a:	d041      	beq.n	8004eb0 <HAL_I2C_EV_IRQHandler+0x308>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2c:	6813      	ldr	r3, [r2, #0]
 8004e2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e32:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e34:	2300      	movs	r3, #0
 8004e36:	9305      	str	r3, [sp, #20]
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	695a      	ldr	r2, [r3, #20]
 8004e3c:	9205      	str	r2, [sp, #20]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	9305      	str	r3, [sp, #20]
 8004e42:	9b05      	ldr	r3, [sp, #20]
 8004e44:	e79e      	b.n	8004d84 <HAL_I2C_EV_IRQHandler+0x1dc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e46:	6813      	ldr	r3, [r2, #0]
 8004e48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e4c:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004e56:	d00c      	beq.n	8004e72 <HAL_I2C_EV_IRQHandler+0x2ca>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5e:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e60:	2300      	movs	r3, #0
 8004e62:	9303      	str	r3, [sp, #12]
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	695a      	ldr	r2, [r3, #20]
 8004e68:	9203      	str	r2, [sp, #12]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	9303      	str	r3, [sp, #12]
 8004e6e:	9b03      	ldr	r3, [sp, #12]
 8004e70:	e788      	b.n	8004d84 <HAL_I2C_EV_IRQHandler+0x1dc>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e72:	2200      	movs	r2, #0
 8004e74:	9204      	str	r2, [sp, #16]
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	9204      	str	r2, [sp, #16]
 8004e7a:	699a      	ldr	r2, [r3, #24]
 8004e7c:	9204      	str	r2, [sp, #16]
 8004e7e:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	e77c      	b.n	8004d84 <HAL_I2C_EV_IRQHandler+0x1dc>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004e8a:	2801      	cmp	r0, #1
 8004e8c:	d010      	beq.n	8004eb0 <HAL_I2C_EV_IRQHandler+0x308>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e8e:	6813      	ldr	r3, [r2, #0]
 8004e90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e94:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e96:	2300      	movs	r3, #0
 8004e98:	9306      	str	r3, [sp, #24]
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	695a      	ldr	r2, [r3, #20]
 8004e9e:	9206      	str	r2, [sp, #24]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	9206      	str	r2, [sp, #24]
 8004ea4:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	e769      	b.n	8004d84 <HAL_I2C_EV_IRQHandler+0x1dc>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb0:	6813      	ldr	r3, [r2, #0]
 8004eb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	e7bc      	b.n	8004e34 <HAL_I2C_EV_IRQHandler+0x28c>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004eba:	2810      	cmp	r0, #16
 8004ebc:	d825      	bhi.n	8004f0a <HAL_I2C_EV_IRQHandler+0x362>
 8004ebe:	4b68      	ldr	r3, [pc, #416]	; (8005060 <HAL_I2C_EV_IRQHandler+0x4b8>)
 8004ec0:	40c3      	lsrs	r3, r0
 8004ec2:	f013 0f01 	tst.w	r3, #1
 8004ec6:	d020      	beq.n	8004f0a <HAL_I2C_EV_IRQHandler+0x362>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ec8:	6813      	ldr	r3, [r2, #0]
 8004eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ece:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004ed8:	d00e      	beq.n	8004ef8 <HAL_I2C_EV_IRQHandler+0x350>
 8004eda:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8004ede:	d007      	beq.n	8004ef0 <HAL_I2C_EV_IRQHandler+0x348>
 8004ee0:	3801      	subs	r0, #1
 8004ee2:	281f      	cmp	r0, #31
 8004ee4:	d808      	bhi.n	8004ef8 <HAL_I2C_EV_IRQHandler+0x350>
 8004ee6:	4a5d      	ldr	r2, [pc, #372]	; (800505c <HAL_I2C_EV_IRQHandler+0x4b4>)
 8004ee8:	40c2      	lsrs	r2, r0
 8004eea:	f012 0f01 	tst.w	r2, #1
 8004eee:	d003      	beq.n	8004ef8 <HAL_I2C_EV_IRQHandler+0x350>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ef6:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9307      	str	r3, [sp, #28]
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	695a      	ldr	r2, [r3, #20]
 8004f00:	9207      	str	r2, [sp, #28]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	9307      	str	r3, [sp, #28]
 8004f06:	9b07      	ldr	r3, [sp, #28]
 8004f08:	e73c      	b.n	8004d84 <HAL_I2C_EV_IRQHandler+0x1dc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f0a:	6813      	ldr	r3, [r2, #0]
 8004f0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f10:	6013      	str	r3, [r2, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f12:	6822      	ldr	r2, [r4, #0]
 8004f14:	6813      	ldr	r3, [r2, #0]
 8004f16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f1a:	6013      	str	r3, [r2, #0]
 8004f1c:	e7d8      	b.n	8004ed0 <HAL_I2C_EV_IRQHandler+0x328>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004f1e:	f016 0f04 	tst.w	r6, #4
 8004f22:	f000 80ca 	beq.w	80050ba <HAL_I2C_EV_IRQHandler+0x512>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004f26:	6855      	ldr	r5, [r2, #4]
 8004f28:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8004f2c:	f47f ae6a 	bne.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f30:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004f34:	d06e      	beq.n	8005014 <HAL_I2C_EV_IRQHandler+0x46c>
 8004f36:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8004f3a:	d06b      	beq.n	8005014 <HAL_I2C_EV_IRQHandler+0x46c>
 8004f3c:	f011 0f04 	tst.w	r1, #4
 8004f40:	d16c      	bne.n	800501c <HAL_I2C_EV_IRQHandler+0x474>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f42:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004f46:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f48:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8004f4c:	b2c9      	uxtb	r1, r1
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f4e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f50:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d140      	bne.n	8004fd8 <HAL_I2C_EV_IRQHandler+0x430>
 8004f56:	2b21      	cmp	r3, #33	; 0x21
 8004f58:	d006      	beq.n	8004f68 <HAL_I2C_EV_IRQHandler+0x3c0>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004f5a:	2940      	cmp	r1, #64	; 0x40
 8004f5c:	f47f ae52 	bne.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004f60:	2b22      	cmp	r3, #34	; 0x22
 8004f62:	f47f ae4f 	bne.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
 8004f66:	e039      	b.n	8004fdc <HAL_I2C_EV_IRQHandler+0x434>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f68:	2d08      	cmp	r5, #8
 8004f6a:	d004      	beq.n	8004f76 <HAL_I2C_EV_IRQHandler+0x3ce>
 8004f6c:	2d20      	cmp	r5, #32
 8004f6e:	d002      	beq.n	8004f76 <HAL_I2C_EV_IRQHandler+0x3ce>
 8004f70:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8004f74:	d119      	bne.n	8004faa <HAL_I2C_EV_IRQHandler+0x402>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f76:	6853      	ldr	r3, [r2, #4]
 8004f78:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004f7c:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f7e:	6822      	ldr	r2, [r4, #0]
 8004f80:	6813      	ldr	r3, [r2, #0]
 8004f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f86:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f8c:	2320      	movs	r3, #32
 8004f8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f92:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b40      	cmp	r3, #64	; 0x40
 8004f9a:	d016      	beq.n	8004fca <HAL_I2C_EV_IRQHandler+0x422>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	f7fc fece 	bl	8001d44 <HAL_I2C_MasterTxCpltCallback>
 8004fa8:	e62c      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004faa:	6853      	ldr	r3, [r2, #4]
 8004fac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004fb0:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004fb2:	2311      	movs	r3, #17
 8004fb4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004fbc:	2320      	movs	r3, #32
 8004fbe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f7fc febe 	bl	8001d44 <HAL_I2C_MasterTxCpltCallback>
 8004fc8:	e61c      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f7ff fc55 	bl	8004880 <HAL_I2C_MemTxCpltCallback>
 8004fd6:	e615      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004fd8:	2b21      	cmp	r3, #33	; 0x21
 8004fda:	d1be      	bne.n	8004f5a <HAL_I2C_EV_IRQHandler+0x3b2>
    if (hi2c->XferCount == 0U)
 8004fdc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	b923      	cbnz	r3, 8004fec <HAL_I2C_EV_IRQHandler+0x444>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fe2:	6853      	ldr	r3, [r2, #4]
 8004fe4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fe8:	6053      	str	r3, [r2, #4]
 8004fea:	e60b      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fec:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b40      	cmp	r3, #64	; 0x40
 8004ff4:	d00a      	beq.n	800500c <HAL_I2C_EV_IRQHandler+0x464>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8004ffc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ffe:	3301      	adds	r3, #1
 8005000:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8005002:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005004:	3b01      	subs	r3, #1
 8005006:	b29b      	uxth	r3, r3
 8005008:	8563      	strh	r3, [r4, #42]	; 0x2a
 800500a:	e5fb      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800500c:	4620      	mov	r0, r4
 800500e:	f7ff fc38 	bl	8004882 <I2C_MemoryTransmit_TXE_BTF>
 8005012:	e5f7      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005014:	f011 0f04 	tst.w	r1, #4
 8005018:	f43f adf4 	beq.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
 800501c:	f410 7f00 	tst.w	r0, #512	; 0x200
 8005020:	f43f adf0 	beq.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8005024:	2b10      	cmp	r3, #16
 8005026:	d003      	beq.n	8005030 <HAL_I2C_EV_IRQHandler+0x488>
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005028:	4620      	mov	r0, r4
 800502a:	f7ff fc2a 	bl	8004882 <I2C_MemoryTransmit_TXE_BTF>
 800502e:	e5e9      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005030:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005032:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b21      	cmp	r3, #33	; 0x21
 800503a:	f47f ade3 	bne.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
    if (hi2c->XferCount != 0U)
 800503e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005040:	b29b      	uxth	r3, r3
 8005042:	b17b      	cbz	r3, 8005064 <HAL_I2C_EV_IRQHandler+0x4bc>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005044:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	6113      	str	r3, [r2, #16]
      hi2c->pBuffPtr++;
 800504a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800504c:	3301      	adds	r3, #1
 800504e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005050:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005052:	3b01      	subs	r3, #1
 8005054:	b29b      	uxth	r3, r3
 8005056:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005058:	e5d4      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
 800505a:	bf00      	nop
 800505c:	80008081 	.word	0x80008081
 8005060:	00010014 	.word	0x00010014
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005064:	2908      	cmp	r1, #8
 8005066:	d004      	beq.n	8005072 <HAL_I2C_EV_IRQHandler+0x4ca>
 8005068:	2920      	cmp	r1, #32
 800506a:	d002      	beq.n	8005072 <HAL_I2C_EV_IRQHandler+0x4ca>
 800506c:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8005070:	d113      	bne.n	800509a <HAL_I2C_EV_IRQHandler+0x4f2>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005072:	6853      	ldr	r3, [r2, #4]
 8005074:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005078:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800507a:	6822      	ldr	r2, [r4, #0]
 800507c:	6813      	ldr	r3, [r2, #0]
 800507e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005082:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005084:	2300      	movs	r3, #0
 8005086:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005088:	2220      	movs	r2, #32
 800508a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800508e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005092:	4620      	mov	r0, r4
 8005094:	f7fc fe56 	bl	8001d44 <HAL_I2C_MasterTxCpltCallback>
 8005098:	e5b4      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800509a:	6853      	ldr	r3, [r2, #4]
 800509c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80050a0:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80050a2:	2311      	movs	r3, #17
 80050a4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a6:	2300      	movs	r3, #0
 80050a8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80050ac:	2320      	movs	r3, #32
 80050ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80050b2:	4620      	mov	r0, r4
 80050b4:	f7fc fe46 	bl	8001d44 <HAL_I2C_MasterTxCpltCallback>
 80050b8:	e5a4      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80050ba:	6853      	ldr	r3, [r2, #4]
 80050bc:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80050c0:	f47f ada0 	bne.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050c4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80050c8:	f000 808c 	beq.w	80051e4 <HAL_I2C_EV_IRQHandler+0x63c>
 80050cc:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80050d0:	f000 8088 	beq.w	80051e4 <HAL_I2C_EV_IRQHandler+0x63c>
 80050d4:	f011 0f04 	tst.w	r1, #4
 80050d8:	f040 8088 	bne.w	80051ec <HAL_I2C_EV_IRQHandler+0x644>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050dc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b22      	cmp	r3, #34	; 0x22
 80050e4:	f47f ad8e 	bne.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
    tmp = hi2c->XferCount;
 80050e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80050ea:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 80050ec:	2b03      	cmp	r3, #3
 80050ee:	d914      	bls.n	800511a <HAL_I2C_EV_IRQHandler+0x572>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f0:	6912      	ldr	r2, [r2, #16]
 80050f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050f4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80050f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050f8:	3301      	adds	r3, #1
 80050fa:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80050fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80050fe:	3b01      	subs	r3, #1
 8005100:	b29b      	uxth	r3, r3
 8005102:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8005104:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005106:	b29b      	uxth	r3, r3
 8005108:	2b03      	cmp	r3, #3
 800510a:	f47f ad7b 	bne.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800510e:	6822      	ldr	r2, [r4, #0]
 8005110:	6853      	ldr	r3, [r2, #4]
 8005112:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005116:	6053      	str	r3, [r2, #4]
 8005118:	e574      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800511a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800511c:	2902      	cmp	r1, #2
 800511e:	f43f ad71 	beq.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
 8005122:	2b01      	cmp	r3, #1
 8005124:	f63f ad6e 	bhi.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
  __IO uint32_t count = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	930a      	str	r3, [sp, #40]	; 0x28
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800512c:	4ba1      	ldr	r3, [pc, #644]	; (80053b4 <HAL_I2C_EV_IRQHandler+0x80c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8005134:	fbb3 f3f1 	udiv	r3, r3, r1
 8005138:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800513c:	930a      	str	r3, [sp, #40]	; 0x28
    count--;
 800513e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005140:	3b01      	subs	r3, #1
 8005142:	930a      	str	r3, [sp, #40]	; 0x28
    if (count == 0U)
 8005144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005146:	b343      	cbz	r3, 800519a <HAL_I2C_EV_IRQHandler+0x5f2>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005148:	6813      	ldr	r3, [r2, #0]
 800514a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800514e:	d1f6      	bne.n	800513e <HAL_I2C_EV_IRQHandler+0x596>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005150:	6813      	ldr	r3, [r2, #0]
 8005152:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005156:	6013      	str	r3, [r2, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005158:	6822      	ldr	r2, [r4, #0]
 800515a:	6853      	ldr	r3, [r2, #4]
 800515c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005160:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	691a      	ldr	r2, [r3, #16]
 8005166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005168:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800516a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800516c:	3301      	adds	r3, #1
 800516e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8005170:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005172:	3b01      	subs	r3, #1
 8005174:	b29b      	uxth	r3, r3
 8005176:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005178:	2320      	movs	r3, #32
 800517a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800517e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b40      	cmp	r3, #64	; 0x40
 8005186:	d025      	beq.n	80051d4 <HAL_I2C_EV_IRQHandler+0x62c>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005188:	2300      	movs	r3, #0
 800518a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800518e:	2312      	movs	r3, #18
 8005190:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005192:	4620      	mov	r0, r4
 8005194:	f7fc fde8 	bl	8001d68 <HAL_I2C_MasterRxCpltCallback>
 8005198:	e534      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800519a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800519c:	f043 0320 	orr.w	r3, r3, #32
 80051a0:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051a2:	6853      	ldr	r3, [r2, #4]
 80051a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80051a8:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	691a      	ldr	r2, [r3, #16]
 80051ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051b0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80051b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051b4:	3301      	adds	r3, #1
 80051b6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80051b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29b      	uxth	r3, r3
 80051be:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80051c0:	2320      	movs	r3, #32
 80051c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c6:	2300      	movs	r3, #0
 80051c8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80051cc:	4620      	mov	r0, r4
 80051ce:	f7ff fbb6 	bl	800493e <HAL_I2C_ErrorCallback>
 80051d2:	e517      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d4:	2300      	movs	r3, #0
 80051d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80051da:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80051dc:	4620      	mov	r0, r4
 80051de:	f7ff fbad 	bl	800493c <HAL_I2C_MemRxCpltCallback>
 80051e2:	e50f      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051e4:	f011 0f04 	tst.w	r1, #4
 80051e8:	f43f ad0c 	beq.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
 80051ec:	f410 7f00 	tst.w	r0, #512	; 0x200
 80051f0:	f43f ad08 	beq.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 80051f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d012      	beq.n	8005224 <HAL_I2C_EV_IRQHandler+0x67c>
  else if (hi2c->XferCount == 3U)
 80051fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b03      	cmp	r3, #3
 8005204:	d01e      	beq.n	8005244 <HAL_I2C_EV_IRQHandler+0x69c>
  else if (hi2c->XferCount == 2U)
 8005206:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d033      	beq.n	8005276 <HAL_I2C_EV_IRQHandler+0x6ce>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800520e:	6912      	ldr	r2, [r2, #16]
 8005210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005212:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005214:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005216:	3301      	adds	r3, #1
 8005218:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800521a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800521c:	3b01      	subs	r3, #1
 800521e:	b29b      	uxth	r3, r3
 8005220:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005222:	e4ef      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005224:	6853      	ldr	r3, [r2, #4]
 8005226:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800522a:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	691a      	ldr	r2, [r3, #16]
 8005230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005232:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005234:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005236:	3301      	adds	r3, #1
 8005238:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800523a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800523c:	3b01      	subs	r3, #1
 800523e:	b29b      	uxth	r3, r3
 8005240:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005242:	e4df      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005244:	6853      	ldr	r3, [r2, #4]
 8005246:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800524a:	6053      	str	r3, [r2, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800524c:	2904      	cmp	r1, #4
 800524e:	d006      	beq.n	800525e <HAL_I2C_EV_IRQHandler+0x6b6>
 8005250:	2902      	cmp	r1, #2
 8005252:	d004      	beq.n	800525e <HAL_I2C_EV_IRQHandler+0x6b6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005254:	6822      	ldr	r2, [r4, #0]
 8005256:	6813      	ldr	r3, [r2, #0]
 8005258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800525c:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	691a      	ldr	r2, [r3, #16]
 8005262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005264:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005268:	3301      	adds	r3, #1
 800526a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800526c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800526e:	3b01      	subs	r3, #1
 8005270:	b29b      	uxth	r3, r3
 8005272:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005274:	e4c6      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005276:	2901      	cmp	r1, #1
 8005278:	d00a      	beq.n	8005290 <HAL_I2C_EV_IRQHandler+0x6e8>
 800527a:	2910      	cmp	r1, #16
 800527c:	d008      	beq.n	8005290 <HAL_I2C_EV_IRQHandler+0x6e8>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800527e:	2904      	cmp	r1, #4
 8005280:	d035      	beq.n	80052ee <HAL_I2C_EV_IRQHandler+0x746>
 8005282:	2902      	cmp	r1, #2
 8005284:	d033      	beq.n	80052ee <HAL_I2C_EV_IRQHandler+0x746>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005286:	6813      	ldr	r3, [r2, #0]
 8005288:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	e003      	b.n	8005298 <HAL_I2C_EV_IRQHandler+0x6f0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005290:	6813      	ldr	r3, [r2, #0]
 8005292:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005296:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005298:	6823      	ldr	r3, [r4, #0]
 800529a:	691a      	ldr	r2, [r3, #16]
 800529c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800529e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80052a2:	1c53      	adds	r3, r2, #1
 80052a4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80052a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 80052b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052b6:	3301      	adds	r3, #1
 80052b8:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80052ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29b      	uxth	r3, r3
 80052c0:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80052c2:	6822      	ldr	r2, [r4, #0]
 80052c4:	6853      	ldr	r3, [r2, #4]
 80052c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ca:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80052cc:	2320      	movs	r3, #32
 80052ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052d2:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b40      	cmp	r3, #64	; 0x40
 80052da:	d00d      	beq.n	80052f8 <HAL_I2C_EV_IRQHandler+0x750>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052dc:	2300      	movs	r3, #0
 80052de:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80052e2:	2312      	movs	r3, #18
 80052e4:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80052e6:	4620      	mov	r0, r4
 80052e8:	f7fc fd3e 	bl	8001d68 <HAL_I2C_MasterRxCpltCallback>
 80052ec:	e48a      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ee:	6813      	ldr	r3, [r2, #0]
 80052f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	e7cf      	b.n	8005298 <HAL_I2C_EV_IRQHandler+0x6f0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f8:	2300      	movs	r3, #0
 80052fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80052fe:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005300:	4620      	mov	r0, r4
 8005302:	f7ff fb1b 	bl	800493c <HAL_I2C_MemRxCpltCallback>
 8005306:	e47d      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005308:	6995      	ldr	r5, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800530a:	6953      	ldr	r3, [r2, #20]
 800530c:	e462      	b.n	8004bd4 <HAL_I2C_EV_IRQHandler+0x2c>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800530e:	6853      	ldr	r3, [r2, #4]
 8005310:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005314:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005316:	f085 0104 	eor.w	r1, r5, #4
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800531a:	f3c1 0180 	ubfx	r1, r1, #2, #1
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800531e:	f015 0f80 	tst.w	r5, #128	; 0x80
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005322:	bf0c      	ite	eq
 8005324:	89a2      	ldrheq	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005326:	8b22      	ldrhne	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8005328:	2300      	movs	r3, #0
 800532a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800532e:	4620      	mov	r0, r4
 8005330:	f7ff faa4 	bl	800487c <HAL_I2C_AddrCallback>
 8005334:	e466      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005336:	f013 0f10 	tst.w	r3, #16
 800533a:	d002      	beq.n	8005342 <HAL_I2C_EV_IRQHandler+0x79a>
 800533c:	f410 7f00 	tst.w	r0, #512	; 0x200
 8005340:	d13a      	bne.n	80053b8 <HAL_I2C_EV_IRQHandler+0x810>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005342:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 8005346:	2921      	cmp	r1, #33	; 0x21
 8005348:	f000 80f5 	beq.w	8005536 <HAL_I2C_EV_IRQHandler+0x98e>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800534c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005350:	f000 813c 	beq.w	80055cc <HAL_I2C_EV_IRQHandler+0xa24>
 8005354:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8005358:	f000 8138 	beq.w	80055cc <HAL_I2C_EV_IRQHandler+0xa24>
 800535c:	f013 0f04 	tst.w	r3, #4
 8005360:	f040 8138 	bne.w	80055d4 <HAL_I2C_EV_IRQHandler+0xa2c>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005364:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005368:	b2d9      	uxtb	r1, r3
  if (hi2c->XferCount != 0U)
 800536a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800536c:	b29b      	uxth	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	f43f ac48 	beq.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005374:	6912      	ldr	r2, [r2, #16]
 8005376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005378:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800537a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800537c:	3301      	adds	r3, #1
 800537e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8005380:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005382:	3b01      	subs	r3, #1
 8005384:	b29b      	uxth	r3, r3
 8005386:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005388:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	f47f ac39 	bne.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
 8005392:	292a      	cmp	r1, #42	; 0x2a
 8005394:	f47f ac36 	bne.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005398:	6822      	ldr	r2, [r4, #0]
 800539a:	6853      	ldr	r3, [r2, #4]
 800539c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053a0:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80053a2:	2322      	movs	r3, #34	; 0x22
 80053a4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053a6:	2328      	movs	r3, #40	; 0x28
 80053a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053ac:	4620      	mov	r0, r4
 80053ae:	f7ff fa64 	bl	800487a <HAL_I2C_SlaveRxCpltCallback>
 80053b2:	e427      	b.n	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
 80053b4:	20000014 	.word	0x20000014
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053b8:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
 80053bc:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053be:	6853      	ldr	r3, [r2, #4]
 80053c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80053c4:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80053c6:	2300      	movs	r3, #0
 80053c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	695a      	ldr	r2, [r3, #20]
 80053ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	f042 0201 	orr.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053da:	6822      	ldr	r2, [r4, #0]
 80053dc:	6813      	ldr	r3, [r2, #0]
 80053de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053e2:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80053ec:	d038      	beq.n	8005460 <HAL_I2C_EV_IRQHandler+0x8b8>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053ee:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 80053f2:	2a22      	cmp	r2, #34	; 0x22
 80053f4:	d01f      	beq.n	8005436 <HAL_I2C_EV_IRQHandler+0x88e>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80053f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	6852      	ldr	r2, [r2, #4]
 80053fc:	b292      	uxth	r2, r2
 80053fe:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8005400:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005402:	b292      	uxth	r2, r2
 8005404:	b11a      	cbz	r2, 800540e <HAL_I2C_EV_IRQHandler+0x866>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005406:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005408:	f042 0204 	orr.w	r2, r2, #4
 800540c:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005414:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005416:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005418:	f7fe ff82 	bl	8004320 <HAL_DMA_GetState>
 800541c:	2801      	cmp	r0, #1
 800541e:	d01f      	beq.n	8005460 <HAL_I2C_EV_IRQHandler+0x8b8>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005420:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005422:	4a77      	ldr	r2, [pc, #476]	; (8005600 <HAL_I2C_EV_IRQHandler+0xa58>)
 8005424:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005426:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005428:	f7fe ff67 	bl	80042fa <HAL_DMA_Abort_IT>
 800542c:	b1c0      	cbz	r0, 8005460 <HAL_I2C_EV_IRQHandler+0x8b8>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800542e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005430:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005432:	4798      	blx	r3
 8005434:	e014      	b.n	8005460 <HAL_I2C_EV_IRQHandler+0x8b8>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005436:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005438:	6812      	ldr	r2, [r2, #0]
 800543a:	6852      	ldr	r2, [r2, #4]
 800543c:	b292      	uxth	r2, r2
 800543e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8005440:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005442:	b292      	uxth	r2, r2
 8005444:	b11a      	cbz	r2, 800544e <HAL_I2C_EV_IRQHandler+0x8a6>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005446:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005448:	f042 0204 	orr.w	r2, r2, #4
 800544c:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005454:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005456:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005458:	f7fe ff62 	bl	8004320 <HAL_DMA_GetState>
 800545c:	2801      	cmp	r0, #1
 800545e:	d142      	bne.n	80054e6 <HAL_I2C_EV_IRQHandler+0x93e>
  if (hi2c->XferCount != 0U)
 8005460:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005462:	b29b      	uxth	r3, r3
 8005464:	b323      	cbz	r3, 80054b0 <HAL_I2C_EV_IRQHandler+0x908>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	695a      	ldr	r2, [r3, #20]
 800546a:	f012 0f04 	tst.w	r2, #4
 800546e:	d009      	beq.n	8005484 <HAL_I2C_EV_IRQHandler+0x8dc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005470:	691a      	ldr	r2, [r3, #16]
 8005472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005474:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005478:	3301      	adds	r3, #1
 800547a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800547c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800547e:	3b01      	subs	r3, #1
 8005480:	b29b      	uxth	r3, r3
 8005482:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	695a      	ldr	r2, [r3, #20]
 8005488:	f012 0f40 	tst.w	r2, #64	; 0x40
 800548c:	d009      	beq.n	80054a2 <HAL_I2C_EV_IRQHandler+0x8fa>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005492:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005494:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005496:	3301      	adds	r3, #1
 8005498:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800549a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800549c:	3b01      	subs	r3, #1
 800549e:	b29b      	uxth	r3, r3
 80054a0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 80054a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	b11b      	cbz	r3, 80054b0 <HAL_I2C_EV_IRQHandler+0x908>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054aa:	f043 0304 	orr.w	r3, r3, #4
 80054ae:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80054b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054b2:	bb23      	cbnz	r3, 80054fe <HAL_I2C_EV_IRQHandler+0x956>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80054b4:	2d2a      	cmp	r5, #42	; 0x2a
 80054b6:	d027      	beq.n	8005508 <HAL_I2C_EV_IRQHandler+0x960>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80054b8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b28      	cmp	r3, #40	; 0x28
 80054c0:	d02b      	beq.n	800551a <HAL_I2C_EV_IRQHandler+0x972>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80054c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80054c4:	2b22      	cmp	r3, #34	; 0x22
 80054c6:	d002      	beq.n	80054ce <HAL_I2C_EV_IRQHandler+0x926>
 80054c8:	2d22      	cmp	r5, #34	; 0x22
 80054ca:	f47f ab9b 	bne.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
        hi2c->PreviousState = I2C_STATE_NONE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80054d2:	2220      	movs	r2, #32
 80054d4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80054dc:	4620      	mov	r0, r4
 80054de:	f7ff f9cc 	bl	800487a <HAL_I2C_SlaveRxCpltCallback>
 80054e2:	f7ff bb8f 	b.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80054e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054e8:	4a45      	ldr	r2, [pc, #276]	; (8005600 <HAL_I2C_EV_IRQHandler+0xa58>)
 80054ea:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80054ec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80054ee:	f7fe ff04 	bl	80042fa <HAL_DMA_Abort_IT>
 80054f2:	2800      	cmp	r0, #0
 80054f4:	d0b4      	beq.n	8005460 <HAL_I2C_EV_IRQHandler+0x8b8>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80054f6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80054f8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80054fa:	4798      	blx	r3
 80054fc:	e7b0      	b.n	8005460 <HAL_I2C_EV_IRQHandler+0x8b8>
    I2C_ITError(hi2c);
 80054fe:	4620      	mov	r0, r4
 8005500:	f7ff fa92 	bl	8004a28 <I2C_ITError>
 8005504:	f7ff bb7e 	b.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005508:	2300      	movs	r3, #0
 800550a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800550c:	2328      	movs	r3, #40	; 0x28
 800550e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005512:	4620      	mov	r0, r4
 8005514:	f7ff f9b1 	bl	800487a <HAL_I2C_SlaveRxCpltCallback>
 8005518:	e7ce      	b.n	80054b8 <HAL_I2C_EV_IRQHandler+0x910>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800551a:	4b3a      	ldr	r3, [pc, #232]	; (8005604 <HAL_I2C_EV_IRQHandler+0xa5c>)
 800551c:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800551e:	2300      	movs	r3, #0
 8005520:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005522:	2220      	movs	r2, #32
 8005524:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005528:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800552c:	4620      	mov	r0, r4
 800552e:	f7ff f9a6 	bl	800487e <HAL_I2C_ListenCpltCallback>
 8005532:	f7ff bb67 	b.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005536:	f013 0f80 	tst.w	r3, #128	; 0x80
 800553a:	d02e      	beq.n	800559a <HAL_I2C_EV_IRQHandler+0x9f2>
 800553c:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8005540:	d02b      	beq.n	800559a <HAL_I2C_EV_IRQHandler+0x9f2>
 8005542:	f013 0f04 	tst.w	r3, #4
 8005546:	d12c      	bne.n	80055a2 <HAL_I2C_EV_IRQHandler+0x9fa>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005548:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800554c:	b2d9      	uxtb	r1, r3
  if (hi2c->XferCount != 0U)
 800554e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005550:	b29b      	uxth	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	f43f ab56 	beq.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005558:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	6113      	str	r3, [r2, #16]
    hi2c->pBuffPtr++;
 800555e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005560:	3301      	adds	r3, #1
 8005562:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8005564:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005566:	3b01      	subs	r3, #1
 8005568:	b29b      	uxth	r3, r3
 800556a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800556c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800556e:	b29b      	uxth	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	f47f ab47 	bne.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
 8005576:	2929      	cmp	r1, #41	; 0x29
 8005578:	f47f ab44 	bne.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800557c:	6822      	ldr	r2, [r4, #0]
 800557e:	6853      	ldr	r3, [r2, #4]
 8005580:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005584:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005586:	2321      	movs	r3, #33	; 0x21
 8005588:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800558a:	2328      	movs	r3, #40	; 0x28
 800558c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005590:	4620      	mov	r0, r4
 8005592:	f7ff f971 	bl	8004878 <HAL_I2C_SlaveTxCpltCallback>
 8005596:	f7ff bb35 	b.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800559a:	f013 0f04 	tst.w	r3, #4
 800559e:	f43f ab31 	beq.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
 80055a2:	f410 7f00 	tst.w	r0, #512	; 0x200
 80055a6:	f43f ab2d 	beq.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
  if (hi2c->XferCount != 0U)
 80055aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f43f ab28 	beq.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	6113      	str	r3, [r2, #16]
    hi2c->pBuffPtr++;
 80055ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055bc:	3301      	adds	r3, #1
 80055be:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80055c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	8563      	strh	r3, [r4, #42]	; 0x2a
 80055c8:	f7ff bb1c 	b.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055cc:	f013 0f04 	tst.w	r3, #4
 80055d0:	f43f ab18 	beq.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
 80055d4:	f410 7f00 	tst.w	r0, #512	; 0x200
 80055d8:	f43f ab14 	beq.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
  if (hi2c->XferCount != 0U)
 80055dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055de:	b29b      	uxth	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f43f ab0f 	beq.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e6:	6912      	ldr	r2, [r2, #16]
 80055e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80055ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055ee:	3301      	adds	r3, #1
 80055f0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80055f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055f4:	3b01      	subs	r3, #1
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	8563      	strh	r3, [r4, #42]	; 0x2a
      }
 80055fa:	f7ff bb03 	b.w	8004c04 <HAL_I2C_EV_IRQHandler+0x5c>
 80055fe:	bf00      	nop
 8005600:	08004945 	.word	0x08004945
 8005604:	ffff0000 	.word	0xffff0000

08005608 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005608:	2800      	cmp	r0, #0
 800560a:	f000 81e2 	beq.w	80059d2 <HAL_RCC_OscConfig+0x3ca>
{
 800560e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005616:	6803      	ldr	r3, [r0, #0]
 8005618:	f013 0f01 	tst.w	r3, #1
 800561c:	d03b      	beq.n	8005696 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800561e:	4ba7      	ldr	r3, [pc, #668]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 030c 	and.w	r3, r3, #12
 8005626:	2b04      	cmp	r3, #4
 8005628:	d02c      	beq.n	8005684 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800562a:	4ba4      	ldr	r3, [pc, #656]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005632:	2b08      	cmp	r3, #8
 8005634:	d021      	beq.n	800567a <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005636:	6863      	ldr	r3, [r4, #4]
 8005638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800563c:	d04f      	beq.n	80056de <HAL_RCC_OscConfig+0xd6>
 800563e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005642:	d052      	beq.n	80056ea <HAL_RCC_OscConfig+0xe2>
 8005644:	4b9d      	ldr	r3, [pc, #628]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005654:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005656:	6863      	ldr	r3, [r4, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d050      	beq.n	80056fe <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800565c:	f7fe fa8c 	bl	8003b78 <HAL_GetTick>
 8005660:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005662:	4e96      	ldr	r6, [pc, #600]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 8005664:	6833      	ldr	r3, [r6, #0]
 8005666:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800566a:	d114      	bne.n	8005696 <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800566c:	f7fe fa84 	bl	8003b78 <HAL_GetTick>
 8005670:	1b40      	subs	r0, r0, r5
 8005672:	2864      	cmp	r0, #100	; 0x64
 8005674:	d9f6      	bls.n	8005664 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 8005676:	2003      	movs	r0, #3
 8005678:	e1b2      	b.n	80059e0 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800567a:	4b90      	ldr	r3, [pc, #576]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005682:	d0d8      	beq.n	8005636 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005684:	4b8d      	ldr	r3, [pc, #564]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800568c:	d003      	beq.n	8005696 <HAL_RCC_OscConfig+0x8e>
 800568e:	6863      	ldr	r3, [r4, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 81a0 	beq.w	80059d6 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	f013 0f02 	tst.w	r3, #2
 800569c:	d054      	beq.n	8005748 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800569e:	4b87      	ldr	r3, [pc, #540]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f013 0f0c 	tst.w	r3, #12
 80056a6:	d03e      	beq.n	8005726 <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056a8:	4b84      	ldr	r3, [pc, #528]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d033      	beq.n	800571c <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056b4:	68e3      	ldr	r3, [r4, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d067      	beq.n	800578a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056ba:	4b81      	ldr	r3, [pc, #516]	; (80058c0 <HAL_RCC_OscConfig+0x2b8>)
 80056bc:	2201      	movs	r2, #1
 80056be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c0:	f7fe fa5a 	bl	8003b78 <HAL_GetTick>
 80056c4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056c6:	4e7d      	ldr	r6, [pc, #500]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 80056c8:	6833      	ldr	r3, [r6, #0]
 80056ca:	f013 0f02 	tst.w	r3, #2
 80056ce:	d153      	bne.n	8005778 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056d0:	f7fe fa52 	bl	8003b78 <HAL_GetTick>
 80056d4:	1b40      	subs	r0, r0, r5
 80056d6:	2802      	cmp	r0, #2
 80056d8:	d9f6      	bls.n	80056c8 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 80056da:	2003      	movs	r0, #3
 80056dc:	e180      	b.n	80059e0 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056de:	4a77      	ldr	r2, [pc, #476]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 80056e0:	6813      	ldr	r3, [r2, #0]
 80056e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e6:	6013      	str	r3, [r2, #0]
 80056e8:	e7b5      	b.n	8005656 <HAL_RCC_OscConfig+0x4e>
 80056ea:	4b74      	ldr	r3, [pc, #464]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	e7ab      	b.n	8005656 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 80056fe:	f7fe fa3b 	bl	8003b78 <HAL_GetTick>
 8005702:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005704:	4e6d      	ldr	r6, [pc, #436]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 8005706:	6833      	ldr	r3, [r6, #0]
 8005708:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800570c:	d0c3      	beq.n	8005696 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800570e:	f7fe fa33 	bl	8003b78 <HAL_GetTick>
 8005712:	1b40      	subs	r0, r0, r5
 8005714:	2864      	cmp	r0, #100	; 0x64
 8005716:	d9f6      	bls.n	8005706 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8005718:	2003      	movs	r0, #3
 800571a:	e161      	b.n	80059e0 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800571c:	4b67      	ldr	r3, [pc, #412]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005724:	d1c6      	bne.n	80056b4 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005726:	4b65      	ldr	r3, [pc, #404]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f013 0f02 	tst.w	r3, #2
 800572e:	d003      	beq.n	8005738 <HAL_RCC_OscConfig+0x130>
 8005730:	68e3      	ldr	r3, [r4, #12]
 8005732:	2b01      	cmp	r3, #1
 8005734:	f040 8151 	bne.w	80059da <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005738:	4a60      	ldr	r2, [pc, #384]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 800573a:	6813      	ldr	r3, [r2, #0]
 800573c:	6921      	ldr	r1, [r4, #16]
 800573e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005742:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005746:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	f013 0f08 	tst.w	r3, #8
 800574e:	d040      	beq.n	80057d2 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005750:	6963      	ldr	r3, [r4, #20]
 8005752:	b363      	cbz	r3, 80057ae <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005754:	4b5b      	ldr	r3, [pc, #364]	; (80058c4 <HAL_RCC_OscConfig+0x2bc>)
 8005756:	2201      	movs	r2, #1
 8005758:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800575a:	f7fe fa0d 	bl	8003b78 <HAL_GetTick>
 800575e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005760:	4e56      	ldr	r6, [pc, #344]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 8005762:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8005764:	f013 0f02 	tst.w	r3, #2
 8005768:	d133      	bne.n	80057d2 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800576a:	f7fe fa05 	bl	8003b78 <HAL_GetTick>
 800576e:	1b40      	subs	r0, r0, r5
 8005770:	2802      	cmp	r0, #2
 8005772:	d9f6      	bls.n	8005762 <HAL_RCC_OscConfig+0x15a>
        {
          return HAL_TIMEOUT;
 8005774:	2003      	movs	r0, #3
 8005776:	e133      	b.n	80059e0 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005778:	4a50      	ldr	r2, [pc, #320]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 800577a:	6813      	ldr	r3, [r2, #0]
 800577c:	6921      	ldr	r1, [r4, #16]
 800577e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005782:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005786:	6013      	str	r3, [r2, #0]
 8005788:	e7de      	b.n	8005748 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 800578a:	4b4d      	ldr	r3, [pc, #308]	; (80058c0 <HAL_RCC_OscConfig+0x2b8>)
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005790:	f7fe f9f2 	bl	8003b78 <HAL_GetTick>
 8005794:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005796:	4e49      	ldr	r6, [pc, #292]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 8005798:	6833      	ldr	r3, [r6, #0]
 800579a:	f013 0f02 	tst.w	r3, #2
 800579e:	d0d3      	beq.n	8005748 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057a0:	f7fe f9ea 	bl	8003b78 <HAL_GetTick>
 80057a4:	1b40      	subs	r0, r0, r5
 80057a6:	2802      	cmp	r0, #2
 80057a8:	d9f6      	bls.n	8005798 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 80057aa:	2003      	movs	r0, #3
 80057ac:	e118      	b.n	80059e0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057ae:	4b45      	ldr	r3, [pc, #276]	; (80058c4 <HAL_RCC_OscConfig+0x2bc>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057b4:	f7fe f9e0 	bl	8003b78 <HAL_GetTick>
 80057b8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057ba:	4e40      	ldr	r6, [pc, #256]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 80057bc:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80057be:	f013 0f02 	tst.w	r3, #2
 80057c2:	d006      	beq.n	80057d2 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057c4:	f7fe f9d8 	bl	8003b78 <HAL_GetTick>
 80057c8:	1b40      	subs	r0, r0, r5
 80057ca:	2802      	cmp	r0, #2
 80057cc:	d9f6      	bls.n	80057bc <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80057ce:	2003      	movs	r0, #3
 80057d0:	e106      	b.n	80059e0 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	f013 0f04 	tst.w	r3, #4
 80057d8:	d079      	beq.n	80058ce <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057da:	4b38      	ldr	r3, [pc, #224]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80057e2:	d10d      	bne.n	8005800 <HAL_RCC_OscConfig+0x1f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057e4:	2300      	movs	r3, #0
 80057e6:	9301      	str	r3, [sp, #4]
 80057e8:	4b34      	ldr	r3, [pc, #208]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 80057ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80057f0:	641a      	str	r2, [r3, #64]	; 0x40
 80057f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f8:	9301      	str	r3, [sp, #4]
 80057fa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80057fc:	2501      	movs	r5, #1
 80057fe:	e000      	b.n	8005802 <HAL_RCC_OscConfig+0x1fa>
    FlagStatus       pwrclkchanged = RESET;
 8005800:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005802:	4b31      	ldr	r3, [pc, #196]	; (80058c8 <HAL_RCC_OscConfig+0x2c0>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f413 7f80 	tst.w	r3, #256	; 0x100
 800580a:	d021      	beq.n	8005850 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800580c:	68a3      	ldr	r3, [r4, #8]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d032      	beq.n	8005878 <HAL_RCC_OscConfig+0x270>
 8005812:	2b05      	cmp	r3, #5
 8005814:	d036      	beq.n	8005884 <HAL_RCC_OscConfig+0x27c>
 8005816:	4b29      	ldr	r3, [pc, #164]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 8005818:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800581a:	f022 0201 	bic.w	r2, r2, #1
 800581e:	671a      	str	r2, [r3, #112]	; 0x70
 8005820:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005822:	f022 0204 	bic.w	r2, r2, #4
 8005826:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005828:	68a3      	ldr	r3, [r4, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d034      	beq.n	8005898 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800582e:	f7fe f9a3 	bl	8003b78 <HAL_GetTick>
 8005832:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005834:	4f21      	ldr	r7, [pc, #132]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005836:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800583a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800583c:	f013 0f02 	tst.w	r3, #2
 8005840:	d144      	bne.n	80058cc <HAL_RCC_OscConfig+0x2c4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005842:	f7fe f999 	bl	8003b78 <HAL_GetTick>
 8005846:	1b80      	subs	r0, r0, r6
 8005848:	4540      	cmp	r0, r8
 800584a:	d9f6      	bls.n	800583a <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 800584c:	2003      	movs	r0, #3
 800584e:	e0c7      	b.n	80059e0 <HAL_RCC_OscConfig+0x3d8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005850:	4a1d      	ldr	r2, [pc, #116]	; (80058c8 <HAL_RCC_OscConfig+0x2c0>)
 8005852:	6813      	ldr	r3, [r2, #0]
 8005854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005858:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800585a:	f7fe f98d 	bl	8003b78 <HAL_GetTick>
 800585e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005860:	4f19      	ldr	r7, [pc, #100]	; (80058c8 <HAL_RCC_OscConfig+0x2c0>)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005868:	d1d0      	bne.n	800580c <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800586a:	f7fe f985 	bl	8003b78 <HAL_GetTick>
 800586e:	1b80      	subs	r0, r0, r6
 8005870:	2802      	cmp	r0, #2
 8005872:	d9f6      	bls.n	8005862 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8005874:	2003      	movs	r0, #3
 8005876:	e0b3      	b.n	80059e0 <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005878:	4a10      	ldr	r2, [pc, #64]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 800587a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800587c:	f043 0301 	orr.w	r3, r3, #1
 8005880:	6713      	str	r3, [r2, #112]	; 0x70
 8005882:	e7d1      	b.n	8005828 <HAL_RCC_OscConfig+0x220>
 8005884:	4b0d      	ldr	r3, [pc, #52]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
 8005886:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005888:	f042 0204 	orr.w	r2, r2, #4
 800588c:	671a      	str	r2, [r3, #112]	; 0x70
 800588e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005890:	f042 0201 	orr.w	r2, r2, #1
 8005894:	671a      	str	r2, [r3, #112]	; 0x70
 8005896:	e7c7      	b.n	8005828 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005898:	f7fe f96e 	bl	8003b78 <HAL_GetTick>
 800589c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800589e:	4f07      	ldr	r7, [pc, #28]	; (80058bc <HAL_RCC_OscConfig+0x2b4>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058a0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058a6:	f013 0f02 	tst.w	r3, #2
 80058aa:	d00f      	beq.n	80058cc <HAL_RCC_OscConfig+0x2c4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058ac:	f7fe f964 	bl	8003b78 <HAL_GetTick>
 80058b0:	1b80      	subs	r0, r0, r6
 80058b2:	4540      	cmp	r0, r8
 80058b4:	d9f6      	bls.n	80058a4 <HAL_RCC_OscConfig+0x29c>
        {
          return HAL_TIMEOUT;
 80058b6:	2003      	movs	r0, #3
 80058b8:	e092      	b.n	80059e0 <HAL_RCC_OscConfig+0x3d8>
 80058ba:	bf00      	nop
 80058bc:	40023800 	.word	0x40023800
 80058c0:	42470000 	.word	0x42470000
 80058c4:	42470e80 	.word	0x42470e80
 80058c8:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058cc:	b9ed      	cbnz	r5, 800590a <HAL_RCC_OscConfig+0x302>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058ce:	69a3      	ldr	r3, [r4, #24]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 8084 	beq.w	80059de <HAL_RCC_OscConfig+0x3d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058d6:	4a49      	ldr	r2, [pc, #292]	; (80059fc <HAL_RCC_OscConfig+0x3f4>)
 80058d8:	6892      	ldr	r2, [r2, #8]
 80058da:	f002 020c 	and.w	r2, r2, #12
 80058de:	2a08      	cmp	r2, #8
 80058e0:	d051      	beq.n	8005986 <HAL_RCC_OscConfig+0x37e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d017      	beq.n	8005916 <HAL_RCC_OscConfig+0x30e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e6:	4b46      	ldr	r3, [pc, #280]	; (8005a00 <HAL_RCC_OscConfig+0x3f8>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ec:	f7fe f944 	bl	8003b78 <HAL_GetTick>
 80058f0:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058f2:	4d42      	ldr	r5, [pc, #264]	; (80059fc <HAL_RCC_OscConfig+0x3f4>)
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80058fa:	d042      	beq.n	8005982 <HAL_RCC_OscConfig+0x37a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058fc:	f7fe f93c 	bl	8003b78 <HAL_GetTick>
 8005900:	1b00      	subs	r0, r0, r4
 8005902:	2802      	cmp	r0, #2
 8005904:	d9f6      	bls.n	80058f4 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8005906:	2003      	movs	r0, #3
 8005908:	e06a      	b.n	80059e0 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 800590a:	4a3c      	ldr	r2, [pc, #240]	; (80059fc <HAL_RCC_OscConfig+0x3f4>)
 800590c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800590e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005912:	6413      	str	r3, [r2, #64]	; 0x40
 8005914:	e7db      	b.n	80058ce <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8005916:	4b3a      	ldr	r3, [pc, #232]	; (8005a00 <HAL_RCC_OscConfig+0x3f8>)
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800591c:	f7fe f92c 	bl	8003b78 <HAL_GetTick>
 8005920:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005922:	4e36      	ldr	r6, [pc, #216]	; (80059fc <HAL_RCC_OscConfig+0x3f4>)
 8005924:	6833      	ldr	r3, [r6, #0]
 8005926:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800592a:	d006      	beq.n	800593a <HAL_RCC_OscConfig+0x332>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800592c:	f7fe f924 	bl	8003b78 <HAL_GetTick>
 8005930:	1b40      	subs	r0, r0, r5
 8005932:	2802      	cmp	r0, #2
 8005934:	d9f6      	bls.n	8005924 <HAL_RCC_OscConfig+0x31c>
            return HAL_TIMEOUT;
 8005936:	2003      	movs	r0, #3
 8005938:	e052      	b.n	80059e0 <HAL_RCC_OscConfig+0x3d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800593a:	69e3      	ldr	r3, [r4, #28]
 800593c:	6a22      	ldr	r2, [r4, #32]
 800593e:	4313      	orrs	r3, r2
 8005940:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005942:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005946:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005948:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800594c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800594e:	0852      	lsrs	r2, r2, #1
 8005950:	3a01      	subs	r2, #1
 8005952:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005956:	4a29      	ldr	r2, [pc, #164]	; (80059fc <HAL_RCC_OscConfig+0x3f4>)
 8005958:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800595a:	4b29      	ldr	r3, [pc, #164]	; (8005a00 <HAL_RCC_OscConfig+0x3f8>)
 800595c:	2201      	movs	r2, #1
 800595e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005960:	f7fe f90a 	bl	8003b78 <HAL_GetTick>
 8005964:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005966:	4d25      	ldr	r5, [pc, #148]	; (80059fc <HAL_RCC_OscConfig+0x3f4>)
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800596e:	d106      	bne.n	800597e <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005970:	f7fe f902 	bl	8003b78 <HAL_GetTick>
 8005974:	1b00      	subs	r0, r0, r4
 8005976:	2802      	cmp	r0, #2
 8005978:	d9f6      	bls.n	8005968 <HAL_RCC_OscConfig+0x360>
            return HAL_TIMEOUT;
 800597a:	2003      	movs	r0, #3
 800597c:	e030      	b.n	80059e0 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800597e:	2000      	movs	r0, #0
 8005980:	e02e      	b.n	80059e0 <HAL_RCC_OscConfig+0x3d8>
 8005982:	2000      	movs	r0, #0
 8005984:	e02c      	b.n	80059e0 <HAL_RCC_OscConfig+0x3d8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005986:	2b01      	cmp	r3, #1
 8005988:	d02d      	beq.n	80059e6 <HAL_RCC_OscConfig+0x3de>
        pll_config = RCC->PLLCFGR;
 800598a:	4b1c      	ldr	r3, [pc, #112]	; (80059fc <HAL_RCC_OscConfig+0x3f4>)
 800598c:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800598e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005992:	69e2      	ldr	r2, [r4, #28]
 8005994:	4291      	cmp	r1, r2
 8005996:	d128      	bne.n	80059ea <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005998:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800599c:	6a21      	ldr	r1, [r4, #32]
 800599e:	428a      	cmp	r2, r1
 80059a0:	d125      	bne.n	80059ee <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059a4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80059a8:	401a      	ands	r2, r3
 80059aa:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80059ae:	d120      	bne.n	80059f2 <HAL_RCC_OscConfig+0x3ea>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059b0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80059b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80059b6:	0852      	lsrs	r2, r2, #1
 80059b8:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059ba:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80059be:	d11a      	bne.n	80059f6 <HAL_RCC_OscConfig+0x3ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80059c2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059c6:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
        return HAL_ERROR;
 80059ca:	bf14      	ite	ne
 80059cc:	2001      	movne	r0, #1
 80059ce:	2000      	moveq	r0, #0
 80059d0:	e006      	b.n	80059e0 <HAL_RCC_OscConfig+0x3d8>
    return HAL_ERROR;
 80059d2:	2001      	movs	r0, #1
}
 80059d4:	4770      	bx	lr
        return HAL_ERROR;
 80059d6:	2001      	movs	r0, #1
 80059d8:	e002      	b.n	80059e0 <HAL_RCC_OscConfig+0x3d8>
        return HAL_ERROR;
 80059da:	2001      	movs	r0, #1
 80059dc:	e000      	b.n	80059e0 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 80059de:	2000      	movs	r0, #0
}
 80059e0:	b002      	add	sp, #8
 80059e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80059e6:	2001      	movs	r0, #1
 80059e8:	e7fa      	b.n	80059e0 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
 80059ea:	2001      	movs	r0, #1
 80059ec:	e7f8      	b.n	80059e0 <HAL_RCC_OscConfig+0x3d8>
 80059ee:	2001      	movs	r0, #1
 80059f0:	e7f6      	b.n	80059e0 <HAL_RCC_OscConfig+0x3d8>
 80059f2:	2001      	movs	r0, #1
 80059f4:	e7f4      	b.n	80059e0 <HAL_RCC_OscConfig+0x3d8>
 80059f6:	2001      	movs	r0, #1
 80059f8:	e7f2      	b.n	80059e0 <HAL_RCC_OscConfig+0x3d8>
 80059fa:	bf00      	nop
 80059fc:	40023800 	.word	0x40023800
 8005a00:	42470060 	.word	0x42470060

08005a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a06:	4b24      	ldr	r3, [pc, #144]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 030c 	and.w	r3, r3, #12
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d03d      	beq.n	8005a8e <HAL_RCC_GetSysClockFreq+0x8a>
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d13d      	bne.n	8005a92 <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a16:	4b20      	ldr	r3, [pc, #128]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005a24:	d012      	beq.n	8005a4c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a26:	4b1c      	ldr	r3, [pc, #112]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a28:	6859      	ldr	r1, [r3, #4]
 8005a2a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005a2e:	2300      	movs	r3, #0
 8005a30:	481a      	ldr	r0, [pc, #104]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x98>)
 8005a32:	fba1 0100 	umull	r0, r1, r1, r0
 8005a36:	f7fb f987 	bl	8000d48 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a3a:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005a42:	3301      	adds	r3, #1
 8005a44:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005a46:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8005a4a:	e023      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a4c:	4b12      	ldr	r3, [pc, #72]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8005a54:	015c      	lsls	r4, r3, #5
 8005a56:	2500      	movs	r5, #0
 8005a58:	1ae4      	subs	r4, r4, r3
 8005a5a:	f165 0500 	sbc.w	r5, r5, #0
 8005a5e:	01ae      	lsls	r6, r5, #6
 8005a60:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8005a64:	01a7      	lsls	r7, r4, #6
 8005a66:	1b38      	subs	r0, r7, r4
 8005a68:	eb66 0105 	sbc.w	r1, r6, r5
 8005a6c:	00cc      	lsls	r4, r1, #3
 8005a6e:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8005a72:	00c5      	lsls	r5, r0, #3
 8005a74:	18e8      	adds	r0, r5, r3
 8005a76:	f144 0100 	adc.w	r1, r4, #0
 8005a7a:	028b      	lsls	r3, r1, #10
 8005a7c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8005a80:	0284      	lsls	r4, r0, #10
 8005a82:	4620      	mov	r0, r4
 8005a84:	4619      	mov	r1, r3
 8005a86:	2300      	movs	r3, #0
 8005a88:	f7fb f95e 	bl	8000d48 <__aeabi_uldivmod>
 8005a8c:	e7d5      	b.n	8005a3a <HAL_RCC_GetSysClockFreq+0x36>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a8e:	4803      	ldr	r0, [pc, #12]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x98>)
 8005a90:	e000      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x90>
      sysclockfreq = HSI_VALUE;
 8005a92:	4803      	ldr	r0, [pc, #12]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a96:	bf00      	nop
 8005a98:	40023800 	.word	0x40023800
 8005a9c:	017d7840 	.word	0x017d7840
 8005aa0:	00f42400 	.word	0x00f42400

08005aa4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	f000 809d 	beq.w	8005be4 <HAL_RCC_ClockConfig+0x140>
{
 8005aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aae:	460d      	mov	r5, r1
 8005ab0:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ab2:	4b50      	ldr	r3, [pc, #320]	; (8005bf4 <HAL_RCC_ClockConfig+0x150>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	428b      	cmp	r3, r1
 8005abc:	d208      	bcs.n	8005ad0 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005abe:	b2cb      	uxtb	r3, r1
 8005ac0:	4a4c      	ldr	r2, [pc, #304]	; (8005bf4 <HAL_RCC_ClockConfig+0x150>)
 8005ac2:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ac4:	6813      	ldr	r3, [r2, #0]
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	428b      	cmp	r3, r1
 8005acc:	f040 808c 	bne.w	8005be8 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	f013 0f02 	tst.w	r3, #2
 8005ad6:	d017      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ad8:	f013 0f04 	tst.w	r3, #4
 8005adc:	d004      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ade:	4a46      	ldr	r2, [pc, #280]	; (8005bf8 <HAL_RCC_ClockConfig+0x154>)
 8005ae0:	6893      	ldr	r3, [r2, #8]
 8005ae2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ae6:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	f013 0f08 	tst.w	r3, #8
 8005aee:	d004      	beq.n	8005afa <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005af0:	4a41      	ldr	r2, [pc, #260]	; (8005bf8 <HAL_RCC_ClockConfig+0x154>)
 8005af2:	6893      	ldr	r3, [r2, #8]
 8005af4:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005af8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005afa:	4a3f      	ldr	r2, [pc, #252]	; (8005bf8 <HAL_RCC_ClockConfig+0x154>)
 8005afc:	6893      	ldr	r3, [r2, #8]
 8005afe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b02:	68a1      	ldr	r1, [r4, #8]
 8005b04:	430b      	orrs	r3, r1
 8005b06:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	f013 0f01 	tst.w	r3, #1
 8005b0e:	d032      	beq.n	8005b76 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b10:	6862      	ldr	r2, [r4, #4]
 8005b12:	2a01      	cmp	r2, #1
 8005b14:	d021      	beq.n	8005b5a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b16:	1e93      	subs	r3, r2, #2
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d925      	bls.n	8005b68 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b1c:	4b36      	ldr	r3, [pc, #216]	; (8005bf8 <HAL_RCC_ClockConfig+0x154>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f013 0f02 	tst.w	r3, #2
 8005b24:	d062      	beq.n	8005bec <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b26:	4934      	ldr	r1, [pc, #208]	; (8005bf8 <HAL_RCC_ClockConfig+0x154>)
 8005b28:	688b      	ldr	r3, [r1, #8]
 8005b2a:	f023 0303 	bic.w	r3, r3, #3
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005b32:	f7fe f821 	bl	8003b78 <HAL_GetTick>
 8005b36:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b38:	4f2f      	ldr	r7, [pc, #188]	; (8005bf8 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b3a:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f003 030c 	and.w	r3, r3, #12
 8005b44:	6862      	ldr	r2, [r4, #4]
 8005b46:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005b4a:	d014      	beq.n	8005b76 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b4c:	f7fe f814 	bl	8003b78 <HAL_GetTick>
 8005b50:	1b80      	subs	r0, r0, r6
 8005b52:	4540      	cmp	r0, r8
 8005b54:	d9f3      	bls.n	8005b3e <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 8005b56:	2003      	movs	r0, #3
 8005b58:	e042      	b.n	8005be0 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b5a:	4b27      	ldr	r3, [pc, #156]	; (8005bf8 <HAL_RCC_ClockConfig+0x154>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005b62:	d1e0      	bne.n	8005b26 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8005b64:	2001      	movs	r0, #1
 8005b66:	e03b      	b.n	8005be0 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b68:	4b23      	ldr	r3, [pc, #140]	; (8005bf8 <HAL_RCC_ClockConfig+0x154>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005b70:	d1d9      	bne.n	8005b26 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8005b72:	2001      	movs	r0, #1
 8005b74:	e034      	b.n	8005be0 <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b76:	4b1f      	ldr	r3, [pc, #124]	; (8005bf4 <HAL_RCC_ClockConfig+0x150>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0307 	and.w	r3, r3, #7
 8005b7e:	42ab      	cmp	r3, r5
 8005b80:	d907      	bls.n	8005b92 <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b82:	b2ea      	uxtb	r2, r5
 8005b84:	4b1b      	ldr	r3, [pc, #108]	; (8005bf4 <HAL_RCC_ClockConfig+0x150>)
 8005b86:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	42ab      	cmp	r3, r5
 8005b90:	d12e      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	f013 0f04 	tst.w	r3, #4
 8005b98:	d006      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b9a:	4a17      	ldr	r2, [pc, #92]	; (8005bf8 <HAL_RCC_ClockConfig+0x154>)
 8005b9c:	6893      	ldr	r3, [r2, #8]
 8005b9e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005ba2:	68e1      	ldr	r1, [r4, #12]
 8005ba4:	430b      	orrs	r3, r1
 8005ba6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	f013 0f08 	tst.w	r3, #8
 8005bae:	d007      	beq.n	8005bc0 <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bb0:	4a11      	ldr	r2, [pc, #68]	; (8005bf8 <HAL_RCC_ClockConfig+0x154>)
 8005bb2:	6893      	ldr	r3, [r2, #8]
 8005bb4:	6921      	ldr	r1, [r4, #16]
 8005bb6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005bba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005bbe:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bc0:	f7ff ff20 	bl	8005a04 <HAL_RCC_GetSysClockFreq>
 8005bc4:	4b0c      	ldr	r3, [pc, #48]	; (8005bf8 <HAL_RCC_ClockConfig+0x154>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005bcc:	4a0b      	ldr	r2, [pc, #44]	; (8005bfc <HAL_RCC_ClockConfig+0x158>)
 8005bce:	5cd3      	ldrb	r3, [r2, r3]
 8005bd0:	40d8      	lsrs	r0, r3
 8005bd2:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <HAL_RCC_ClockConfig+0x15c>)
 8005bd4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <HAL_RCC_ClockConfig+0x160>)
 8005bd8:	6818      	ldr	r0, [r3, #0]
 8005bda:	f7fd ff81 	bl	8003ae0 <HAL_InitTick>
  return HAL_OK;
 8005bde:	2000      	movs	r0, #0
}
 8005be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8005be4:	2001      	movs	r0, #1
}
 8005be6:	4770      	bx	lr
      return HAL_ERROR;
 8005be8:	2001      	movs	r0, #1
 8005bea:	e7f9      	b.n	8005be0 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 8005bec:	2001      	movs	r0, #1
 8005bee:	e7f7      	b.n	8005be0 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	e7f5      	b.n	8005be0 <HAL_RCC_ClockConfig+0x13c>
 8005bf4:	40023c00 	.word	0x40023c00
 8005bf8:	40023800 	.word	0x40023800
 8005bfc:	080102f4 	.word	0x080102f4
 8005c00:	20000014 	.word	0x20000014
 8005c04:	2000001c 	.word	0x2000001c

08005c08 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c08:	4b04      	ldr	r3, [pc, #16]	; (8005c1c <HAL_RCC_GetPCLK1Freq+0x14>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005c10:	4a03      	ldr	r2, [pc, #12]	; (8005c20 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005c12:	5cd3      	ldrb	r3, [r2, r3]
 8005c14:	4a03      	ldr	r2, [pc, #12]	; (8005c24 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005c16:	6810      	ldr	r0, [r2, #0]
}
 8005c18:	40d8      	lsrs	r0, r3
 8005c1a:	4770      	bx	lr
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	08010304 	.word	0x08010304
 8005c24:	20000014 	.word	0x20000014

08005c28 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c28:	4b04      	ldr	r3, [pc, #16]	; (8005c3c <HAL_RCC_GetPCLK2Freq+0x14>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005c30:	4a03      	ldr	r2, [pc, #12]	; (8005c40 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005c32:	5cd3      	ldrb	r3, [r2, r3]
 8005c34:	4a03      	ldr	r2, [pc, #12]	; (8005c44 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005c36:	6810      	ldr	r0, [r2, #0]
}
 8005c38:	40d8      	lsrs	r0, r3
 8005c3a:	4770      	bx	lr
 8005c3c:	40023800 	.word	0x40023800
 8005c40:	08010304 	.word	0x08010304
 8005c44:	20000014 	.word	0x20000014

08005c48 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c4a:	b089      	sub	sp, #36	; 0x24
 8005c4c:	4604      	mov	r4, r0
 8005c4e:	460f      	mov	r7, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005c50:	f7fd ff92 	bl	8003b78 <HAL_GetTick>
 8005c54:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8005c56:	2300      	movs	r3, #0
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005c5c:	2108      	movs	r1, #8
 8005c5e:	6820      	ldr	r0, [r4, #0]
 8005c60:	f002 fc9d 	bl	800859e <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c64:	4605      	mov	r5, r0
 8005c66:	b110      	cbz	r0, 8005c6e <SD_FindSCR+0x26>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8005c68:	4628      	mov	r0, r5
 8005c6a:	b009      	add	sp, #36	; 0x24
 8005c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005c6e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005c70:	0409      	lsls	r1, r1, #16
 8005c72:	6820      	ldr	r0, [r4, #0]
 8005c74:	f002 fdb6 	bl	80087e4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c78:	4605      	mov	r5, r0
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	d1f4      	bne.n	8005c68 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c82:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8005c84:	2308      	movs	r3, #8
 8005c86:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005c88:	2330      	movs	r3, #48	; 0x30
 8005c8a:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005c94:	2301      	movs	r3, #1
 8005c96:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005c98:	a902      	add	r1, sp, #8
 8005c9a:	6820      	ldr	r0, [r4, #0]
 8005c9c:	f002 fc6a 	bl	8008574 <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005ca0:	6820      	ldr	r0, [r4, #0]
 8005ca2:	f002 fde8 	bl	8008876 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ca6:	4605      	mov	r5, r0
 8005ca8:	b170      	cbz	r0, 8005cc8 <SD_FindSCR+0x80>
 8005caa:	e7dd      	b.n	8005c68 <SD_FindSCR+0x20>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005cac:	f002 fc36 	bl	800851c <SDIO_ReadFIFO>
 8005cb0:	ab08      	add	r3, sp, #32
 8005cb2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8005cb6:	f843 0c20 	str.w	r0, [r3, #-32]
      index++;
 8005cba:	3501      	adds	r5, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005cbc:	f7fd ff5c 	bl	8003b78 <HAL_GetTick>
 8005cc0:	1b83      	subs	r3, r0, r6
 8005cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc6:	d03f      	beq.n	8005d48 <SD_FindSCR+0x100>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005cc8:	6820      	ldr	r0, [r4, #0]
 8005cca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005ccc:	f013 0f2a 	tst.w	r3, #42	; 0x2a
 8005cd0:	d107      	bne.n	8005ce2 <SD_FindSCR+0x9a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005cd2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005cd4:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005cd8:	d1e8      	bne.n	8005cac <SD_FindSCR+0x64>
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005cda:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005cdc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005ce0:	d1ec      	bne.n	8005cbc <SD_FindSCR+0x74>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005ce2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005ce4:	f013 0f08 	tst.w	r3, #8
 8005ce8:	d125      	bne.n	8005d36 <SD_FindSCR+0xee>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005cea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005cec:	f013 0f02 	tst.w	r3, #2
 8005cf0:	d124      	bne.n	8005d3c <SD_FindSCR+0xf4>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005cf2:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8005cf4:	f015 0520 	ands.w	r5, r5, #32
 8005cf8:	d123      	bne.n	8005d42 <SD_FindSCR+0xfa>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005cfa:	f240 533a 	movw	r3, #1338	; 0x53a
 8005cfe:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005d00:	9b01      	ldr	r3, [sp, #4]
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005d02:	0e1a      	lsrs	r2, r3, #24
 8005d04:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005d08:	0219      	lsls	r1, r3, #8
 8005d0a:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	0a1b      	lsrs	r3, r3, #8
 8005d12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005d16:	4313      	orrs	r3, r2
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005d18:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005d1a:	9b00      	ldr	r3, [sp, #0]
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005d1c:	0e1a      	lsrs	r2, r3, #24
 8005d1e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005d22:	0219      	lsls	r1, r3, #8
 8005d24:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	0a1b      	lsrs	r3, r3, #8
 8005d2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005d30:	4313      	orrs	r3, r2
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005d32:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8005d34:	e798      	b.n	8005c68 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005d36:	2508      	movs	r5, #8
 8005d38:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005d3a:	e795      	b.n	8005c68 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005d3c:	2502      	movs	r5, #2
 8005d3e:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005d40:	e792      	b.n	8005c68 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005d42:	2520      	movs	r5, #32
 8005d44:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8005d46:	e78f      	b.n	8005c68 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 8005d48:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8005d4c:	e78c      	b.n	8005c68 <SD_FindSCR+0x20>
	...

08005d50 <HAL_SD_ReadBlocks>:
{
 8005d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d54:	b089      	sub	sp, #36	; 0x24
 8005d56:	4604      	mov	r4, r0
 8005d58:	460f      	mov	r7, r1
 8005d5a:	4615      	mov	r5, r2
 8005d5c:	9301      	str	r3, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d5e:	f7fd ff0b 	bl	8003b78 <HAL_GetTick>
  if(NULL == pData)
 8005d62:	2f00      	cmp	r7, #0
 8005d64:	d038      	beq.n	8005dd8 <HAL_SD_ReadBlocks+0x88>
 8005d66:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8005d68:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
 8005d6c:	b2f6      	uxtb	r6, r6
 8005d6e:	2e01      	cmp	r6, #1
 8005d70:	f040 810a 	bne.w	8005f88 <HAL_SD_ReadBlocks+0x238>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d74:	2300      	movs	r3, #0
 8005d76:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005d78:	9b01      	ldr	r3, [sp, #4]
 8005d7a:	18eb      	adds	r3, r5, r3
 8005d7c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d830      	bhi.n	8005de4 <HAL_SD_ReadBlocks+0x94>
    hsd->State = HAL_SD_STATE_BUSY;
 8005d82:	2303      	movs	r3, #3
 8005d84:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005d8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005d90:	2b01      	cmp	r3, #1
      add *= 512U;
 8005d92:	bf18      	it	ne
 8005d94:	026d      	lslne	r5, r5, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d96:	f04f 33ff 	mov.w	r3, #4294967295
 8005d9a:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005d9c:	9b01      	ldr	r3, [sp, #4]
 8005d9e:	025b      	lsls	r3, r3, #9
 8005da0:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005da2:	2390      	movs	r3, #144	; 0x90
 8005da4:	9304      	str	r3, [sp, #16]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005da6:	2302      	movs	r3, #2
 8005da8:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005dae:	2301      	movs	r3, #1
 8005db0:	9307      	str	r3, [sp, #28]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005db2:	a902      	add	r1, sp, #8
 8005db4:	6820      	ldr	r0, [r4, #0]
 8005db6:	f002 fbdd 	bl	8008574 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8005dba:	9b01      	ldr	r3, [sp, #4]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d916      	bls.n	8005dee <HAL_SD_ReadBlocks+0x9e>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	6820      	ldr	r0, [r4, #0]
 8005dc8:	f002 fc19 	bl	80085fe <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dcc:	b9b0      	cbnz	r0, 8005dfc <HAL_SD_ReadBlocks+0xac>
    dataremaining = config.DataLength;
 8005dce:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005dd2:	f240 3a2a 	movw	sl, #810	; 0x32a
 8005dd6:	e024      	b.n	8005e22 <HAL_SD_ReadBlocks+0xd2>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005dd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005dda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dde:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005de0:	2601      	movs	r6, #1
 8005de2:	e0d6      	b.n	8005f92 <HAL_SD_ReadBlocks+0x242>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005de4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005de6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005dea:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8005dec:	e0d1      	b.n	8005f92 <HAL_SD_ReadBlocks+0x242>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005dee:	2301      	movs	r3, #1
 8005df0:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005df2:	4629      	mov	r1, r5
 8005df4:	6820      	ldr	r0, [r4, #0]
 8005df6:	f002 fbea 	bl	80085ce <SDMMC_CmdReadSingleBlock>
 8005dfa:	e7e7      	b.n	8005dcc <HAL_SD_ReadBlocks+0x7c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005dfc:	6823      	ldr	r3, [r4, #0]
 8005dfe:	4a67      	ldr	r2, [pc, #412]	; (8005f9c <HAL_SD_ReadBlocks+0x24c>)
 8005e00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005e02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e04:	4318      	orrs	r0, r3
 8005e06:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005e12:	e0be      	b.n	8005f92 <HAL_SD_ReadBlocks+0x242>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005e14:	f7fd feb0 	bl	8003b78 <HAL_GetTick>
 8005e18:	eba0 0008 	sub.w	r0, r0, r8
 8005e1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e1e:	4298      	cmp	r0, r3
 8005e20:	d223      	bcs.n	8005e6a <HAL_SD_ReadBlocks+0x11a>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005e22:	6820      	ldr	r0, [r4, #0]
 8005e24:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005e26:	ea13 0f0a 	tst.w	r3, sl
 8005e2a:	d12c      	bne.n	8005e86 <HAL_SD_ReadBlocks+0x136>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005e2c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005e2e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005e32:	d0ef      	beq.n	8005e14 <HAL_SD_ReadBlocks+0xc4>
 8005e34:	f1bb 0f00 	cmp.w	fp, #0
 8005e38:	d0ec      	beq.n	8005e14 <HAL_SD_ReadBlocks+0xc4>
        for(count = 0U; count < 8U; count++)
 8005e3a:	1d3d      	adds	r5, r7, #4
 8005e3c:	f107 0924 	add.w	r9, r7, #36	; 0x24
          data = SDIO_ReadFIFO(hsd->Instance);
 8005e40:	6820      	ldr	r0, [r4, #0]
 8005e42:	f002 fb6b 	bl	800851c <SDIO_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005e46:	f805 0c04 	strb.w	r0, [r5, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005e4a:	0a03      	lsrs	r3, r0, #8
 8005e4c:	f805 3c03 	strb.w	r3, [r5, #-3]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005e50:	0c03      	lsrs	r3, r0, #16
 8005e52:	f805 3c02 	strb.w	r3, [r5, #-2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005e56:	0e00      	lsrs	r0, r0, #24
 8005e58:	f805 0c01 	strb.w	r0, [r5, #-1]
        for(count = 0U; count < 8U; count++)
 8005e5c:	3504      	adds	r5, #4
 8005e5e:	454d      	cmp	r5, r9
 8005e60:	d1ee      	bne.n	8005e40 <HAL_SD_ReadBlocks+0xf0>
 8005e62:	3720      	adds	r7, #32
 8005e64:	f1ab 0b20 	sub.w	fp, fp, #32
 8005e68:	e7d4      	b.n	8005e14 <HAL_SD_ReadBlocks+0xc4>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	4a4b      	ldr	r2, [pc, #300]	; (8005f9c <HAL_SD_ReadBlocks+0x24c>)
 8005e6e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005e70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e76:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8005e82:	2603      	movs	r6, #3
 8005e84:	e085      	b.n	8005f92 <HAL_SD_ReadBlocks+0x242>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005e86:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005e88:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005e8c:	d005      	beq.n	8005e9a <HAL_SD_ReadBlocks+0x14a>
 8005e8e:	9b01      	ldr	r3, [sp, #4]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d902      	bls.n	8005e9a <HAL_SD_ReadBlocks+0x14a>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005e94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	d139      	bne.n	8005f0e <HAL_SD_ReadBlocks+0x1be>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e9e:	f012 0f08 	tst.w	r2, #8
 8005ea2:	d145      	bne.n	8005f30 <HAL_SD_ReadBlocks+0x1e0>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ea6:	f012 0f02 	tst.w	r2, #2
 8005eaa:	d14d      	bne.n	8005f48 <HAL_SD_ReadBlocks+0x1f8>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eae:	f012 0f20 	tst.w	r2, #32
 8005eb2:	d155      	bne.n	8005f60 <HAL_SD_ReadBlocks+0x210>
 8005eb4:	1d3d      	adds	r5, r7, #4
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005eb6:	f10b 0b04 	add.w	fp, fp, #4
 8005eba:	445f      	add	r7, fp
 8005ebc:	6820      	ldr	r0, [r4, #0]
 8005ebe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005ec0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005ec4:	d058      	beq.n	8005f78 <HAL_SD_ReadBlocks+0x228>
 8005ec6:	42af      	cmp	r7, r5
 8005ec8:	d056      	beq.n	8005f78 <HAL_SD_ReadBlocks+0x228>
      data = SDIO_ReadFIFO(hsd->Instance);
 8005eca:	f002 fb27 	bl	800851c <SDIO_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005ece:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005ed2:	0a03      	lsrs	r3, r0, #8
 8005ed4:	f805 3c03 	strb.w	r3, [r5, #-3]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005ed8:	0c03      	lsrs	r3, r0, #16
 8005eda:	f805 3c02 	strb.w	r3, [r5, #-2]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005ede:	0e00      	lsrs	r0, r0, #24
 8005ee0:	f805 0c01 	strb.w	r0, [r5, #-1]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005ee4:	f7fd fe48 	bl	8003b78 <HAL_GetTick>
 8005ee8:	3504      	adds	r5, #4
 8005eea:	eba0 0008 	sub.w	r0, r0, r8
 8005eee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ef0:	4298      	cmp	r0, r3
 8005ef2:	d3e3      	bcc.n	8005ebc <HAL_SD_ReadBlocks+0x16c>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	4a29      	ldr	r2, [pc, #164]	; (8005f9c <HAL_SD_ReadBlocks+0x24c>)
 8005ef8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005efa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f00:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005f02:	2301      	movs	r3, #1
 8005f04:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8005f0c:	e041      	b.n	8005f92 <HAL_SD_ReadBlocks+0x242>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005f0e:	f002 fbbf 	bl	8008690 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8005f12:	4603      	mov	r3, r0
 8005f14:	2800      	cmp	r0, #0
 8005f16:	d0c0      	beq.n	8005e9a <HAL_SD_ReadBlocks+0x14a>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f18:	6822      	ldr	r2, [r4, #0]
 8005f1a:	4920      	ldr	r1, [pc, #128]	; (8005f9c <HAL_SD_ReadBlocks+0x24c>)
 8005f1c:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005f1e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005f20:	4313      	orrs	r3, r2
 8005f22:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005f24:	2301      	movs	r3, #1
 8005f26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8005f2e:	e030      	b.n	8005f92 <HAL_SD_ReadBlocks+0x242>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f30:	4a1a      	ldr	r2, [pc, #104]	; (8005f9c <HAL_SD_ReadBlocks+0x24c>)
 8005f32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005f34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f36:	f043 0308 	orr.w	r3, r3, #8
 8005f3a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f42:	2300      	movs	r3, #0
 8005f44:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005f46:	e024      	b.n	8005f92 <HAL_SD_ReadBlocks+0x242>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f48:	4a14      	ldr	r2, [pc, #80]	; (8005f9c <HAL_SD_ReadBlocks+0x24c>)
 8005f4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005f4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f4e:	f043 0302 	orr.w	r3, r3, #2
 8005f52:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f54:	2301      	movs	r3, #1
 8005f56:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005f5e:	e018      	b.n	8005f92 <HAL_SD_ReadBlocks+0x242>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f60:	4a0e      	ldr	r2, [pc, #56]	; (8005f9c <HAL_SD_ReadBlocks+0x24c>)
 8005f62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005f64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f66:	f043 0320 	orr.w	r3, r3, #32
 8005f6a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f72:	2300      	movs	r3, #0
 8005f74:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005f76:	e00c      	b.n	8005f92 <HAL_SD_ReadBlocks+0x242>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005f78:	f240 533a 	movw	r3, #1338	; 0x53a
 8005f7c:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8005f84:	2600      	movs	r6, #0
 8005f86:	e004      	b.n	8005f92 <HAL_SD_ReadBlocks+0x242>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005f88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f8e:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005f90:	2601      	movs	r6, #1
}
 8005f92:	4630      	mov	r0, r6
 8005f94:	b009      	add	sp, #36	; 0x24
 8005f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9a:	bf00      	nop
 8005f9c:	004005ff 	.word	0x004005ff

08005fa0 <HAL_SD_WriteBlocks>:
{
 8005fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa4:	b08b      	sub	sp, #44	; 0x2c
 8005fa6:	4605      	mov	r5, r0
 8005fa8:	460f      	mov	r7, r1
 8005faa:	4614      	mov	r4, r2
 8005fac:	9301      	str	r3, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8005fae:	f7fd fde3 	bl	8003b78 <HAL_GetTick>
  if(NULL == pData)
 8005fb2:	2f00      	cmp	r7, #0
 8005fb4:	d037      	beq.n	8006026 <HAL_SD_WriteBlocks+0x86>
 8005fb6:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8005fb8:	f895 6034 	ldrb.w	r6, [r5, #52]	; 0x34
 8005fbc:	b2f6      	uxtb	r6, r6
 8005fbe:	2e01      	cmp	r6, #1
 8005fc0:	f040 80df 	bne.w	8006182 <HAL_SD_WriteBlocks+0x1e2>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	63ab      	str	r3, [r5, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005fc8:	9b01      	ldr	r3, [sp, #4]
 8005fca:	18e3      	adds	r3, r4, r3
 8005fcc:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d82f      	bhi.n	8006032 <HAL_SD_WriteBlocks+0x92>
    hsd->State = HAL_SD_STATE_BUSY;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005fde:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005fe0:	2b01      	cmp	r3, #1
      add *= 512U;
 8005fe2:	bf18      	it	ne
 8005fe4:	0264      	lslne	r4, r4, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fea:	9304      	str	r3, [sp, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005fec:	9b01      	ldr	r3, [sp, #4]
 8005fee:	025b      	lsls	r3, r3, #9
 8005ff0:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005ff2:	2390      	movs	r3, #144	; 0x90
 8005ff4:	9306      	str	r3, [sp, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005ffa:	9308      	str	r3, [sp, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006000:	a904      	add	r1, sp, #16
 8006002:	6828      	ldr	r0, [r5, #0]
 8006004:	f002 fab6 	bl	8008574 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8006008:	9b01      	ldr	r3, [sp, #4]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d916      	bls.n	800603c <HAL_SD_WriteBlocks+0x9c>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800600e:	2320      	movs	r3, #32
 8006010:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006012:	4621      	mov	r1, r4
 8006014:	6828      	ldr	r0, [r5, #0]
 8006016:	f002 fb22 	bl	800865e <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800601a:	b9b0      	cbnz	r0, 800604a <HAL_SD_WriteBlocks+0xaa>
    dataremaining = config.DataLength;
 800601c:	f8dd b014 	ldr.w	fp, [sp, #20]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006020:	f240 3a1a 	movw	sl, #794	; 0x31a
 8006024:	e024      	b.n	8006070 <HAL_SD_WriteBlocks+0xd0>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006026:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006028:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800602c:	63ab      	str	r3, [r5, #56]	; 0x38
    return HAL_ERROR;
 800602e:	2601      	movs	r6, #1
 8006030:	e0ac      	b.n	800618c <HAL_SD_WriteBlocks+0x1ec>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006032:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006034:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006038:	63ab      	str	r3, [r5, #56]	; 0x38
      return HAL_ERROR;
 800603a:	e0a7      	b.n	800618c <HAL_SD_WriteBlocks+0x1ec>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800603c:	2310      	movs	r3, #16
 800603e:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006040:	4621      	mov	r1, r4
 8006042:	6828      	ldr	r0, [r5, #0]
 8006044:	f002 faf3 	bl	800862e <SDMMC_CmdWriteSingleBlock>
 8006048:	e7e7      	b.n	800601a <HAL_SD_WriteBlocks+0x7a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800604a:	682b      	ldr	r3, [r5, #0]
 800604c:	4a51      	ldr	r2, [pc, #324]	; (8006194 <HAL_SD_WriteBlocks+0x1f4>)
 800604e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006050:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006052:	4318      	orrs	r0, r3
 8006054:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006056:	2301      	movs	r3, #1
 8006058:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800605c:	2300      	movs	r3, #0
 800605e:	632b      	str	r3, [r5, #48]	; 0x30
      return HAL_ERROR;
 8006060:	e094      	b.n	800618c <HAL_SD_WriteBlocks+0x1ec>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006062:	f7fd fd89 	bl	8003b78 <HAL_GetTick>
 8006066:	eba0 0008 	sub.w	r0, r0, r8
 800606a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800606c:	4298      	cmp	r0, r3
 800606e:	d228      	bcs.n	80060c2 <HAL_SD_WriteBlocks+0x122>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006070:	6828      	ldr	r0, [r5, #0]
 8006072:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006074:	ea13 0f0a 	tst.w	r3, sl
 8006078:	d12f      	bne.n	80060da <HAL_SD_WriteBlocks+0x13a>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800607a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800607c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006080:	d0ef      	beq.n	8006062 <HAL_SD_WriteBlocks+0xc2>
 8006082:	f1bb 0f00 	cmp.w	fp, #0
 8006086:	d0ec      	beq.n	8006062 <HAL_SD_WriteBlocks+0xc2>
        for(count = 0U; count < 8U; count++)
 8006088:	1d3c      	adds	r4, r7, #4
 800608a:	f107 0924 	add.w	r9, r7, #36	; 0x24
          data |= ((uint32_t)(*tempbuff) << 8U);
 800608e:	f814 2c03 	ldrb.w	r2, [r4, #-3]
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006092:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8006096:	041b      	lsls	r3, r3, #16
 8006098:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
          data = (uint32_t)(*tempbuff);
 800609c:	f814 2c04 	ldrb.w	r2, [r4, #-4]
          data |= ((uint32_t)(*tempbuff) << 16U);
 80060a0:	4313      	orrs	r3, r2
          data |= ((uint32_t)(*tempbuff) << 24U);
 80060a2:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80060a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80060aa:	9303      	str	r3, [sp, #12]
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80060ac:	a903      	add	r1, sp, #12
 80060ae:	6828      	ldr	r0, [r5, #0]
 80060b0:	f002 fa37 	bl	8008522 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80060b4:	3404      	adds	r4, #4
 80060b6:	454c      	cmp	r4, r9
 80060b8:	d1e9      	bne.n	800608e <HAL_SD_WriteBlocks+0xee>
 80060ba:	3720      	adds	r7, #32
 80060bc:	f1ab 0b20 	sub.w	fp, fp, #32
 80060c0:	e7cf      	b.n	8006062 <HAL_SD_WriteBlocks+0xc2>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80060c2:	682b      	ldr	r3, [r5, #0]
 80060c4:	4a33      	ldr	r2, [pc, #204]	; (8006194 <HAL_SD_WriteBlocks+0x1f4>)
 80060c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80060c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80060ca:	63ab      	str	r3, [r5, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80060cc:	2301      	movs	r3, #1
 80060ce:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80060d2:	2300      	movs	r3, #0
 80060d4:	632b      	str	r3, [r5, #48]	; 0x30
        return HAL_TIMEOUT;
 80060d6:	2603      	movs	r6, #3
 80060d8:	e058      	b.n	800618c <HAL_SD_WriteBlocks+0x1ec>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80060da:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80060dc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80060e0:	d005      	beq.n	80060ee <HAL_SD_WriteBlocks+0x14e>
 80060e2:	9b01      	ldr	r3, [sp, #4]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d902      	bls.n	80060ee <HAL_SD_WriteBlocks+0x14e>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80060e8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d118      	bne.n	8006120 <HAL_SD_WriteBlocks+0x180>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80060ee:	682b      	ldr	r3, [r5, #0]
 80060f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060f2:	f012 0f08 	tst.w	r2, #8
 80060f6:	d124      	bne.n	8006142 <HAL_SD_WriteBlocks+0x1a2>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80060f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060fa:	f012 0f02 	tst.w	r2, #2
 80060fe:	d12c      	bne.n	800615a <HAL_SD_WriteBlocks+0x1ba>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8006100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006102:	f012 0f10 	tst.w	r2, #16
 8006106:	d034      	beq.n	8006172 <HAL_SD_WriteBlocks+0x1d2>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006108:	4a22      	ldr	r2, [pc, #136]	; (8006194 <HAL_SD_WriteBlocks+0x1f4>)
 800610a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800610c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800610e:	f043 0310 	orr.w	r3, r3, #16
 8006112:	63ab      	str	r3, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006114:	2301      	movs	r3, #1
 8006116:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800611a:	2300      	movs	r3, #0
 800611c:	632b      	str	r3, [r5, #48]	; 0x30
      return HAL_ERROR;
 800611e:	e035      	b.n	800618c <HAL_SD_WriteBlocks+0x1ec>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006120:	f002 fab6 	bl	8008690 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006124:	4603      	mov	r3, r0
 8006126:	2800      	cmp	r0, #0
 8006128:	d0e1      	beq.n	80060ee <HAL_SD_WriteBlocks+0x14e>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800612a:	682a      	ldr	r2, [r5, #0]
 800612c:	4919      	ldr	r1, [pc, #100]	; (8006194 <HAL_SD_WriteBlocks+0x1f4>)
 800612e:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006130:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8006132:	4313      	orrs	r3, r2
 8006134:	63ab      	str	r3, [r5, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006136:	2301      	movs	r3, #1
 8006138:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800613c:	2300      	movs	r3, #0
 800613e:	632b      	str	r3, [r5, #48]	; 0x30
          return HAL_ERROR;
 8006140:	e024      	b.n	800618c <HAL_SD_WriteBlocks+0x1ec>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006142:	4a14      	ldr	r2, [pc, #80]	; (8006194 <HAL_SD_WriteBlocks+0x1f4>)
 8006144:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006146:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006148:	f043 0308 	orr.w	r3, r3, #8
 800614c:	63ab      	str	r3, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800614e:	2301      	movs	r3, #1
 8006150:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006154:	2300      	movs	r3, #0
 8006156:	632b      	str	r3, [r5, #48]	; 0x30
      return HAL_ERROR;
 8006158:	e018      	b.n	800618c <HAL_SD_WriteBlocks+0x1ec>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800615a:	4a0e      	ldr	r2, [pc, #56]	; (8006194 <HAL_SD_WriteBlocks+0x1f4>)
 800615c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800615e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006160:	f043 0302 	orr.w	r3, r3, #2
 8006164:	63ab      	str	r3, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006166:	2301      	movs	r3, #1
 8006168:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800616c:	2300      	movs	r3, #0
 800616e:	632b      	str	r3, [r5, #48]	; 0x30
      return HAL_ERROR;
 8006170:	e00c      	b.n	800618c <HAL_SD_WriteBlocks+0x1ec>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006172:	f240 523a 	movw	r2, #1338	; 0x53a
 8006176:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006178:	2301      	movs	r3, #1
 800617a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    return HAL_OK;
 800617e:	2600      	movs	r6, #0
 8006180:	e004      	b.n	800618c <HAL_SD_WriteBlocks+0x1ec>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006182:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006184:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006188:	63ab      	str	r3, [r5, #56]	; 0x38
    return HAL_ERROR;
 800618a:	2601      	movs	r6, #1
}
 800618c:	4630      	mov	r0, r6
 800618e:	b00b      	add	sp, #44	; 0x2c
 8006190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006194:	004005ff 	.word	0x004005ff

08006198 <HAL_SD_ErrorCallback>:
}
 8006198:	4770      	bx	lr
	...

0800619c <HAL_SD_GetCardCSD>:
{
 800619c:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800619e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80061a0:	0f9b      	lsrs	r3, r3, #30
 80061a2:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80061a4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80061a6:	f3c3 6383 	ubfx	r3, r3, #26, #4
 80061aa:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80061ac:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 80061b0:	f003 0303 	and.w	r3, r3, #3
 80061b4:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80061b6:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 80061ba:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80061bc:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 80061c0:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80061c2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 80061c6:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80061c8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80061ca:	0d1b      	lsrs	r3, r3, #20
 80061cc:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80061ce:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 80061d2:	f003 030f 	and.w	r3, r3, #15
 80061d6:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80061d8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80061da:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80061de:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80061e0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80061e2:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80061e6:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80061e8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80061ea:	f3c3 3340 	ubfx	r3, r3, #13, #1
 80061ee:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80061f0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80061f2:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80061f6:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80061f8:	2300      	movs	r3, #0
 80061fa:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80061fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f040 8087 	bne.w	8006312 <HAL_SD_GetCardCSD+0x176>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006204:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8006206:	f640 73fc 	movw	r3, #4092	; 0xffc
 800620a:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 800620e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006210:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8006214:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006216:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006218:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 800621c:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800621e:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006228:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800622a:	f3c3 5342 	ubfx	r3, r3, #21, #3
 800622e:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006230:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006232:	f3c3 4382 	ubfx	r3, r3, #18, #3
 8006236:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006238:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800623a:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 800623e:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006240:	690b      	ldr	r3, [r1, #16]
 8006242:	3301      	adds	r3, #1
 8006244:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006246:	7e0a      	ldrb	r2, [r1, #24]
 8006248:	f002 0207 	and.w	r2, r2, #7
 800624c:	3202      	adds	r2, #2
 800624e:	4093      	lsls	r3, r2
 8006250:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006252:	7a0a      	ldrb	r2, [r1, #8]
 8006254:	f002 040f 	and.w	r4, r2, #15
 8006258:	2201      	movs	r2, #1
 800625a:	40a2      	lsls	r2, r4
 800625c:	6582      	str	r2, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800625e:	0a52      	lsrs	r2, r2, #9
 8006260:	fb03 f302 	mul.w	r3, r3, r2
 8006264:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006266:	f44f 7300 	mov.w	r3, #512	; 0x200
 800626a:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800626c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800626e:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8006272:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006274:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006276:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 800627a:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800627c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800627e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006282:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006284:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8006286:	0fdb      	lsrs	r3, r3, #31
 8006288:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800628a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800628c:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8006290:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006292:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8006294:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8006298:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800629a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800629c:	f3c3 5383 	ubfx	r3, r3, #22, #4
 80062a0:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80062a2:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80062a4:	f3c3 5340 	ubfx	r3, r3, #21, #1
 80062a8:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80062b2:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
 80062b6:	f002 0201 	and.w	r2, r2, #1
 80062ba:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80062be:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80062c0:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80062c4:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80062c8:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80062ca:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80062ce:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80062d2:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80062d4:	f3c2 3240 	ubfx	r2, r2, #13, #1
 80062d8:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80062dc:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80062de:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80062e2:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80062e6:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80062e8:	f3c2 2281 	ubfx	r2, r2, #10, #2
 80062ec:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80062f0:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80062f2:	f3c2 2201 	ubfx	r2, r2, #8, #2
 80062f6:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80062fa:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80062fc:	f3c2 0246 	ubfx	r2, r2, #1, #7
 8006300:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8006304:	2201      	movs	r2, #1
 8006306:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 800630a:	4618      	mov	r0, r3
}
 800630c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006310:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006312:	2b01      	cmp	r3, #1
 8006314:	d111      	bne.n	800633a <HAL_SD_GetCardCSD+0x19e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006316:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006318:	041b      	lsls	r3, r3, #16
 800631a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800631e:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8006322:	4313      	orrs	r3, r2
 8006324:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006326:	690b      	ldr	r3, [r1, #16]
 8006328:	3301      	adds	r3, #1
 800632a:	029b      	lsls	r3, r3, #10
 800632c:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800632e:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006334:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006336:	6603      	str	r3, [r0, #96]	; 0x60
 8006338:	e798      	b.n	800626c <HAL_SD_GetCardCSD+0xd0>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800633a:	6803      	ldr	r3, [r0, #0]
 800633c:	4a05      	ldr	r2, [pc, #20]	; (8006354 <HAL_SD_GetCardCSD+0x1b8>)
 800633e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006340:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006346:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006348:	2301      	movs	r3, #1
 800634a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 800634e:	4618      	mov	r0, r3
 8006350:	e7dc      	b.n	800630c <HAL_SD_GetCardCSD+0x170>
 8006352:	bf00      	nop
 8006354:	004005ff 	.word	0x004005ff

08006358 <HAL_SD_InitCard>:
{
 8006358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800635a:	b099      	sub	sp, #100	; 0x64
 800635c:	4604      	mov	r4, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800635e:	2300      	movs	r3, #0
 8006360:	9312      	str	r3, [sp, #72]	; 0x48
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006362:	9313      	str	r3, [sp, #76]	; 0x4c
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006364:	9314      	str	r3, [sp, #80]	; 0x50
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006366:	9315      	str	r3, [sp, #84]	; 0x54
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006368:	9316      	str	r3, [sp, #88]	; 0x58
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800636a:	2376      	movs	r3, #118	; 0x76
 800636c:	9317      	str	r3, [sp, #92]	; 0x5c
  status = SDIO_Init(hsd->Instance, Init);
 800636e:	ab18      	add	r3, sp, #96	; 0x60
 8006370:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006374:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006378:	ab12      	add	r3, sp, #72	; 0x48
 800637a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800637c:	6820      	ldr	r0, [r4, #0]
 800637e:	f002 f8b1 	bl	80084e4 <SDIO_Init>
  if(status != HAL_OK)
 8006382:	b118      	cbz	r0, 800638c <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 8006384:	2501      	movs	r5, #1
}
 8006386:	4628      	mov	r0, r5
 8006388:	b019      	add	sp, #100	; 0x64
 800638a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_SD_DISABLE(hsd);
 800638c:	4e7f      	ldr	r6, [pc, #508]	; (800658c <HAL_SD_InitCard+0x234>)
 800638e:	2500      	movs	r5, #0
 8006390:	6035      	str	r5, [r6, #0]
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006392:	6820      	ldr	r0, [r4, #0]
 8006394:	f002 f8ca 	bl	800852c <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8006398:	2301      	movs	r3, #1
 800639a:	6033      	str	r3, [r6, #0]
  __IO uint32_t count = 0U;
 800639c:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800639e:	6820      	ldr	r0, [r4, #0]
 80063a0:	f002 f9a8 	bl	80086f4 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80063a4:	4603      	mov	r3, r0
 80063a6:	b130      	cbz	r0, 80063b6 <HAL_SD_InitCard+0x5e>
    hsd->State = HAL_SD_STATE_READY;
 80063a8:	2501      	movs	r5, #1
 80063aa:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80063ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80063b0:	4313      	orrs	r3, r2
 80063b2:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80063b4:	e7e7      	b.n	8006386 <HAL_SD_InitCard+0x2e>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80063b6:	6820      	ldr	r0, [r4, #0]
 80063b8:	f002 f9c8 	bl	800874c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80063bc:	b948      	cbnz	r0, 80063d2 <HAL_SD_InitCard+0x7a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80063be:	2301      	movs	r3, #1
 80063c0:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80063c2:	2100      	movs	r1, #0
 80063c4:	6820      	ldr	r0, [r4, #0]
 80063c6:	f002 fa0d 	bl	80087e4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80063ca:	b160      	cbz	r0, 80063e6 <HAL_SD_InitCard+0x8e>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80063d0:	e7ea      	b.n	80063a8 <HAL_SD_InitCard+0x50>
    hsd->SdCard.CardVersion = CARD_V1_X;
 80063d2:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80063d4:	6820      	ldr	r0, [r4, #0]
 80063d6:	f002 f98d 	bl	80086f4 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 80063da:	4603      	mov	r3, r0
 80063dc:	2800      	cmp	r0, #0
 80063de:	d1e3      	bne.n	80063a8 <HAL_SD_InitCard+0x50>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80063e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d0ed      	beq.n	80063c2 <HAL_SD_InitCard+0x6a>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80063e6:	9a06      	ldr	r2, [sp, #24]
 80063e8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80063ec:	429a      	cmp	r2, r3
 80063ee:	f200 80c4 	bhi.w	800657a <HAL_SD_InitCard+0x222>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80063f2:	2500      	movs	r5, #0
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80063f4:	4f66      	ldr	r7, [pc, #408]	; (8006590 <HAL_SD_InitCard+0x238>)
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80063f6:	461e      	mov	r6, r3
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80063f8:	4629      	mov	r1, r5
 80063fa:	6820      	ldr	r0, [r4, #0]
 80063fc:	f002 f9f2 	bl	80087e4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006400:	4603      	mov	r3, r0
 8006402:	2800      	cmp	r0, #0
 8006404:	d1d0      	bne.n	80063a8 <HAL_SD_InitCard+0x50>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006406:	4639      	mov	r1, r7
 8006408:	6820      	ldr	r0, [r4, #0]
 800640a:	f002 fa03 	bl	8008814 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800640e:	2800      	cmp	r0, #0
 8006410:	f040 80aa 	bne.w	8006568 <HAL_SD_InitCard+0x210>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006414:	4629      	mov	r1, r5
 8006416:	6820      	ldr	r0, [r4, #0]
 8006418:	f002 f8a9 	bl	800856e <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800641c:	0fc2      	lsrs	r2, r0, #31
    count++;
 800641e:	9b06      	ldr	r3, [sp, #24]
 8006420:	3301      	adds	r3, #1
 8006422:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006424:	9b06      	ldr	r3, [sp, #24]
 8006426:	42b3      	cmp	r3, r6
 8006428:	d801      	bhi.n	800642e <HAL_SD_InitCard+0xd6>
 800642a:	2a00      	cmp	r2, #0
 800642c:	d0e4      	beq.n	80063f8 <HAL_SD_InitCard+0xa0>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800642e:	9a06      	ldr	r2, [sp, #24]
 8006430:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8006434:	429a      	cmp	r2, r3
 8006436:	f200 809a 	bhi.w	800656e <HAL_SD_InitCard+0x216>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800643a:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800643e:	f000 80a1 	beq.w	8006584 <HAL_SD_InitCard+0x22c>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006442:	2301      	movs	r3, #1
 8006444:	6463      	str	r3, [r4, #68]	; 0x44
  uint16_t sd_rca = 1U;
 8006446:	2301      	movs	r3, #1
 8006448:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800644c:	6820      	ldr	r0, [r4, #0]
 800644e:	f002 f875 	bl	800853c <SDIO_GetPowerState>
 8006452:	2800      	cmp	r0, #0
 8006454:	d07f      	beq.n	8006556 <HAL_SD_InitCard+0x1fe>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006456:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006458:	2b03      	cmp	r3, #3
 800645a:	d133      	bne.n	80064c4 <HAL_SD_InitCard+0x16c>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800645c:	2104      	movs	r1, #4
 800645e:	6820      	ldr	r0, [r4, #0]
 8006460:	f002 f885 	bl	800856e <SDIO_GetResponse>
 8006464:	0d00      	lsrs	r0, r0, #20
 8006466:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006468:	a907      	add	r1, sp, #28
 800646a:	4620      	mov	r0, r4
 800646c:	f7ff fe96 	bl	800619c <HAL_SD_GetCardCSD>
 8006470:	4605      	mov	r5, r0
 8006472:	2800      	cmp	r0, #0
 8006474:	d16c      	bne.n	8006550 <HAL_SD_InitCard+0x1f8>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006476:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006478:	0412      	lsls	r2, r2, #16
 800647a:	2300      	movs	r3, #0
 800647c:	6820      	ldr	r0, [r4, #0]
 800647e:	f002 f921 	bl	80086c4 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006482:	4602      	mov	r2, r0
 8006484:	2800      	cmp	r0, #0
 8006486:	d168      	bne.n	800655a <HAL_SD_InitCard+0x202>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006488:	4623      	mov	r3, r4
 800648a:	f853 6b10 	ldr.w	r6, [r3], #16
 800648e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006492:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006496:	1d23      	adds	r3, r4, #4
 8006498:	cb0e      	ldmia	r3, {r1, r2, r3}
 800649a:	4630      	mov	r0, r6
 800649c:	f002 f822 	bl	80084e4 <SDIO_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80064a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064a4:	6820      	ldr	r0, [r4, #0]
 80064a6:	f002 f87a 	bl	800859e <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80064aa:	2800      	cmp	r0, #0
 80064ac:	f43f af6b 	beq.w	8006386 <HAL_SD_InitCard+0x2e>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	4938      	ldr	r1, [pc, #224]	; (8006594 <HAL_SD_InitCard+0x23c>)
 80064b4:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80064b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80064b8:	4303      	orrs	r3, r0
 80064ba:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80064bc:	2501      	movs	r5, #1
 80064be:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 80064c2:	e760      	b.n	8006386 <HAL_SD_InitCard+0x2e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80064c4:	6820      	ldr	r0, [r4, #0]
 80064c6:	f002 f9ee 	bl	80088a6 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80064ca:	4602      	mov	r2, r0
 80064cc:	2800      	cmp	r0, #0
 80064ce:	d144      	bne.n	800655a <HAL_SD_InitCard+0x202>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80064d0:	2100      	movs	r1, #0
 80064d2:	6820      	ldr	r0, [r4, #0]
 80064d4:	f002 f84b 	bl	800856e <SDIO_GetResponse>
 80064d8:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80064da:	2104      	movs	r1, #4
 80064dc:	6820      	ldr	r0, [r4, #0]
 80064de:	f002 f846 	bl	800856e <SDIO_GetResponse>
 80064e2:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80064e4:	2108      	movs	r1, #8
 80064e6:	6820      	ldr	r0, [r4, #0]
 80064e8:	f002 f841 	bl	800856e <SDIO_GetResponse>
 80064ec:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80064ee:	210c      	movs	r1, #12
 80064f0:	6820      	ldr	r0, [r4, #0]
 80064f2:	f002 f83c 	bl	800856e <SDIO_GetResponse>
 80064f6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 80064fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d0ad      	beq.n	800645c <HAL_SD_InitCard+0x104>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006500:	f10d 0116 	add.w	r1, sp, #22
 8006504:	6820      	ldr	r0, [r4, #0]
 8006506:	f002 f9f9 	bl	80088fc <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800650a:	4602      	mov	r2, r0
 800650c:	bb28      	cbnz	r0, 800655a <HAL_SD_InitCard+0x202>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800650e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006510:	2b03      	cmp	r3, #3
 8006512:	d0a3      	beq.n	800645c <HAL_SD_InitCard+0x104>
    hsd->SdCard.RelCardAdd = sd_rca;
 8006514:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8006518:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800651a:	0409      	lsls	r1, r1, #16
 800651c:	6820      	ldr	r0, [r4, #0]
 800651e:	f002 f9d7 	bl	80088d0 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006522:	4602      	mov	r2, r0
 8006524:	b9c8      	cbnz	r0, 800655a <HAL_SD_InitCard+0x202>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006526:	2100      	movs	r1, #0
 8006528:	6820      	ldr	r0, [r4, #0]
 800652a:	f002 f820 	bl	800856e <SDIO_GetResponse>
 800652e:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006530:	2104      	movs	r1, #4
 8006532:	6820      	ldr	r0, [r4, #0]
 8006534:	f002 f81b 	bl	800856e <SDIO_GetResponse>
 8006538:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800653a:	2108      	movs	r1, #8
 800653c:	6820      	ldr	r0, [r4, #0]
 800653e:	f002 f816 	bl	800856e <SDIO_GetResponse>
 8006542:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006544:	210c      	movs	r1, #12
 8006546:	6820      	ldr	r0, [r4, #0]
 8006548:	f002 f811 	bl	800856e <SDIO_GetResponse>
 800654c:	6720      	str	r0, [r4, #112]	; 0x70
 800654e:	e785      	b.n	800645c <HAL_SD_InitCard+0x104>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006554:	e001      	b.n	800655a <HAL_SD_InitCard+0x202>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006556:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 800655a:	2501      	movs	r5, #1
 800655c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006560:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006562:	4313      	orrs	r3, r2
 8006564:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8006566:	e70e      	b.n	8006386 <HAL_SD_InitCard+0x2e>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006568:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800656c:	e71c      	b.n	80063a8 <HAL_SD_InitCard+0x50>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800656e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006572:	e719      	b.n	80063a8 <HAL_SD_InitCard+0x50>
 8006574:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006578:	e716      	b.n	80063a8 <HAL_SD_InitCard+0x50>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800657a:	9a06      	ldr	r2, [sp, #24]
 800657c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8006580:	429a      	cmp	r2, r3
 8006582:	d8f7      	bhi.n	8006574 <HAL_SD_InitCard+0x21c>
    hsd->SdCard.CardType = CARD_SDSC;
 8006584:	2300      	movs	r3, #0
 8006586:	6463      	str	r3, [r4, #68]	; 0x44
 8006588:	e75d      	b.n	8006446 <HAL_SD_InitCard+0xee>
 800658a:	bf00      	nop
 800658c:	422580a0 	.word	0x422580a0
 8006590:	c1100000 	.word	0xc1100000
 8006594:	004005ff 	.word	0x004005ff

08006598 <HAL_SD_Init>:
  if(hsd == NULL)
 8006598:	b1a8      	cbz	r0, 80065c6 <HAL_SD_Init+0x2e>
{
 800659a:	b510      	push	{r4, lr}
 800659c:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 800659e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80065a2:	b163      	cbz	r3, 80065be <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 80065a4:	2303      	movs	r3, #3
 80065a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80065aa:	4620      	mov	r0, r4
 80065ac:	f7ff fed4 	bl	8006358 <HAL_SD_InitCard>
 80065b0:	b958      	cbnz	r0, 80065ca <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80065b2:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80065b4:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80065b6:	2301      	movs	r3, #1
 80065b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80065bc:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 80065be:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 80065c0:	f7fc fec8 	bl	8003354 <HAL_SD_MspInit>
 80065c4:	e7ee      	b.n	80065a4 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 80065c6:	2001      	movs	r0, #1
}
 80065c8:	4770      	bx	lr
    return HAL_ERROR;
 80065ca:	2001      	movs	r0, #1
 80065cc:	e7f6      	b.n	80065bc <HAL_SD_Init+0x24>

080065ce <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80065ce:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80065d0:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80065d2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80065d4:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80065d6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80065d8:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80065da:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80065dc:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80065de:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80065e0:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80065e2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80065e4:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80065e6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80065e8:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80065ea:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80065ec:	61cb      	str	r3, [r1, #28]
}
 80065ee:	2000      	movs	r0, #0
 80065f0:	4770      	bx	lr
	...

080065f4 <HAL_SD_ConfigWideBusOperation>:
{
 80065f4:	b530      	push	{r4, r5, lr}
 80065f6:	b08d      	sub	sp, #52	; 0x34
 80065f8:	4604      	mov	r4, r0
 80065fa:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 80065fc:	2303      	movs	r3, #3
 80065fe:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006602:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006604:	2b03      	cmp	r3, #3
 8006606:	d061      	beq.n	80066cc <HAL_SD_ConfigWideBusOperation+0xd8>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006608:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800660c:	d008      	beq.n	8006620 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800660e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8006612:	d00a      	beq.n	800662a <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006614:	b389      	cbz	r1, 800667a <HAL_SD_ConfigWideBusOperation+0x86>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006616:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006618:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800661c:	6383      	str	r3, [r0, #56]	; 0x38
 800661e:	e059      	b.n	80066d4 <HAL_SD_ConfigWideBusOperation+0xe0>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006620:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006626:	6383      	str	r3, [r0, #56]	; 0x38
 8006628:	e054      	b.n	80066d4 <HAL_SD_ConfigWideBusOperation+0xe0>
  uint32_t scr[2U] = {0U, 0U};
 800662a:	2100      	movs	r1, #0
 800662c:	9104      	str	r1, [sp, #16]
 800662e:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006630:	6800      	ldr	r0, [r0, #0]
 8006632:	f001 ff9c 	bl	800856e <SDIO_GetResponse>
 8006636:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800663a:	d116      	bne.n	800666a <HAL_SD_ConfigWideBusOperation+0x76>
  errorstate = SD_FindSCR(hsd, scr);
 800663c:	a904      	add	r1, sp, #16
 800663e:	4620      	mov	r0, r4
 8006640:	f7ff fb02 	bl	8005c48 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006644:	4603      	mov	r3, r0
 8006646:	b988      	cbnz	r0, 800666c <HAL_SD_ConfigWideBusOperation+0x78>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006648:	9b05      	ldr	r3, [sp, #20]
 800664a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800664e:	d011      	beq.n	8006674 <HAL_SD_ConfigWideBusOperation+0x80>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006650:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006652:	0409      	lsls	r1, r1, #16
 8006654:	6820      	ldr	r0, [r4, #0]
 8006656:	f002 f8c5 	bl	80087e4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800665a:	4603      	mov	r3, r0
 800665c:	b930      	cbnz	r0, 800666c <HAL_SD_ConfigWideBusOperation+0x78>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800665e:	2102      	movs	r1, #2
 8006660:	6820      	ldr	r0, [r4, #0]
 8006662:	f002 f8f0 	bl	8008846 <SDMMC_CmdBusWidth>
 8006666:	4603      	mov	r3, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8006668:	e000      	b.n	800666c <HAL_SD_ConfigWideBusOperation+0x78>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800666a:	462b      	mov	r3, r5
      hsd->ErrorCode |= errorstate;
 800666c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800666e:	4318      	orrs	r0, r3
 8006670:	63a0      	str	r0, [r4, #56]	; 0x38
 8006672:	e02f      	b.n	80066d4 <HAL_SD_ConfigWideBusOperation+0xe0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006674:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006678:	e7f8      	b.n	800666c <HAL_SD_ConfigWideBusOperation+0x78>
  uint32_t scr[2U] = {0U, 0U};
 800667a:	2100      	movs	r1, #0
 800667c:	9104      	str	r1, [sp, #16]
 800667e:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006680:	6800      	ldr	r0, [r0, #0]
 8006682:	f001 ff74 	bl	800856e <SDIO_GetResponse>
 8006686:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800668a:	d116      	bne.n	80066ba <HAL_SD_ConfigWideBusOperation+0xc6>
  errorstate = SD_FindSCR(hsd, scr);
 800668c:	a904      	add	r1, sp, #16
 800668e:	4620      	mov	r0, r4
 8006690:	f7ff fada 	bl	8005c48 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006694:	4603      	mov	r3, r0
 8006696:	b990      	cbnz	r0, 80066be <HAL_SD_ConfigWideBusOperation+0xca>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006698:	9b05      	ldr	r3, [sp, #20]
 800669a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800669e:	d012      	beq.n	80066c6 <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80066a0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80066a2:	0409      	lsls	r1, r1, #16
 80066a4:	6820      	ldr	r0, [r4, #0]
 80066a6:	f002 f89d 	bl	80087e4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80066aa:	4603      	mov	r3, r0
 80066ac:	b938      	cbnz	r0, 80066be <HAL_SD_ConfigWideBusOperation+0xca>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80066ae:	2100      	movs	r1, #0
 80066b0:	6820      	ldr	r0, [r4, #0]
 80066b2:	f002 f8c8 	bl	8008846 <SDMMC_CmdBusWidth>
 80066b6:	4603      	mov	r3, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 80066b8:	e001      	b.n	80066be <HAL_SD_ConfigWideBusOperation+0xca>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80066ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
      hsd->ErrorCode |= errorstate;
 80066be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80066c0:	4318      	orrs	r0, r3
 80066c2:	63a0      	str	r0, [r4, #56]	; 0x38
 80066c4:	e006      	b.n	80066d4 <HAL_SD_ConfigWideBusOperation+0xe0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80066c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80066ca:	e7f8      	b.n	80066be <HAL_SD_ConfigWideBusOperation+0xca>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80066ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066d2:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80066d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066d6:	b1c3      	cbz	r3, 800670a <HAL_SD_ConfigWideBusOperation+0x116>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	4a17      	ldr	r2, [pc, #92]	; (8006738 <HAL_SD_ConfigWideBusOperation+0x144>)
 80066dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80066de:	2501      	movs	r5, #1
 80066e0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80066e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066e8:	6820      	ldr	r0, [r4, #0]
 80066ea:	f001 ff58 	bl	800859e <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80066ee:	b130      	cbz	r0, 80066fe <HAL_SD_ConfigWideBusOperation+0x10a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	4911      	ldr	r1, [pc, #68]	; (8006738 <HAL_SD_ConfigWideBusOperation+0x144>)
 80066f4:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80066f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066f8:	4303      	orrs	r3, r0
 80066fa:	63a3      	str	r3, [r4, #56]	; 0x38
    status = HAL_ERROR;
 80066fc:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 80066fe:	2301      	movs	r3, #1
 8006700:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8006704:	4628      	mov	r0, r5
 8006706:	b00d      	add	sp, #52	; 0x34
 8006708:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800670a:	6863      	ldr	r3, [r4, #4]
 800670c:	9306      	str	r3, [sp, #24]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800670e:	68a3      	ldr	r3, [r4, #8]
 8006710:	9307      	str	r3, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006712:	68e3      	ldr	r3, [r4, #12]
 8006714:	9308      	str	r3, [sp, #32]
    Init.BusWide             = WideMode;
 8006716:	9509      	str	r5, [sp, #36]	; 0x24
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006718:	6963      	ldr	r3, [r4, #20]
 800671a:	930a      	str	r3, [sp, #40]	; 0x28
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800671c:	69a3      	ldr	r3, [r4, #24]
 800671e:	930b      	str	r3, [sp, #44]	; 0x2c
    (void)SDIO_Init(hsd->Instance, Init);
 8006720:	ab0c      	add	r3, sp, #48	; 0x30
 8006722:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006726:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800672a:	ab06      	add	r3, sp, #24
 800672c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800672e:	6820      	ldr	r0, [r4, #0]
 8006730:	f001 fed8 	bl	80084e4 <SDIO_Init>
  HAL_StatusTypeDef status = HAL_OK;
 8006734:	2500      	movs	r5, #0
 8006736:	e7d5      	b.n	80066e4 <HAL_SD_ConfigWideBusOperation+0xf0>
 8006738:	004005ff 	.word	0x004005ff

0800673c <HAL_SD_GetCardState>:
{
 800673c:	b510      	push	{r4, lr}
 800673e:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006740:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8006742:	0409      	lsls	r1, r1, #16
 8006744:	6800      	ldr	r0, [r0, #0]
 8006746:	f002 f937 	bl	80089b8 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800674a:	b130      	cbz	r0, 800675a <HAL_SD_GetCardState+0x1e>
    hsd->ErrorCode |= errorstate;
 800674c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800674e:	4303      	orrs	r3, r0
 8006750:	63a3      	str	r3, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8006752:	2000      	movs	r0, #0
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006754:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8006758:	bd10      	pop	{r4, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800675a:	2100      	movs	r1, #0
 800675c:	6820      	ldr	r0, [r4, #0]
 800675e:	f001 ff06 	bl	800856e <SDIO_GetResponse>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006762:	e7f7      	b.n	8006754 <HAL_SD_GetCardState+0x18>

08006764 <SD_DMATxAbort>:
{
 8006764:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006766:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	f240 523a 	movw	r2, #1338	; 0x53a
 800676e:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8006770:	4620      	mov	r0, r4
 8006772:	f7ff ffe3 	bl	800673c <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8006776:	2301      	movs	r3, #1
 8006778:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800677c:	2300      	movs	r3, #0
 800677e:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006780:	3805      	subs	r0, #5
 8006782:	2801      	cmp	r0, #1
 8006784:	d905      	bls.n	8006792 <SD_DMATxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006786:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006788:	b953      	cbnz	r3, 80067a0 <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 800678a:	4620      	mov	r0, r4
 800678c:	f002 f973 	bl	8008a76 <HAL_SD_AbortCallback>
}
 8006790:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006792:	6820      	ldr	r0, [r4, #0]
 8006794:	f001 ff7c 	bl	8008690 <SDMMC_CmdStopTransfer>
 8006798:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800679a:	4303      	orrs	r3, r0
 800679c:	63a3      	str	r3, [r4, #56]	; 0x38
 800679e:	e7f2      	b.n	8006786 <SD_DMATxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 80067a0:	4620      	mov	r0, r4
 80067a2:	f7ff fcf9 	bl	8006198 <HAL_SD_ErrorCallback>
}
 80067a6:	e7f3      	b.n	8006790 <SD_DMATxAbort+0x2c>

080067a8 <SD_DMARxAbort>:
{
 80067a8:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80067aa:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80067ac:	6823      	ldr	r3, [r4, #0]
 80067ae:	f240 523a 	movw	r2, #1338	; 0x53a
 80067b2:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 80067b4:	4620      	mov	r0, r4
 80067b6:	f7ff ffc1 	bl	800673c <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 80067ba:	2301      	movs	r3, #1
 80067bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80067c0:	2300      	movs	r3, #0
 80067c2:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80067c4:	3805      	subs	r0, #5
 80067c6:	2801      	cmp	r0, #1
 80067c8:	d905      	bls.n	80067d6 <SD_DMARxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80067ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067cc:	b953      	cbnz	r3, 80067e4 <SD_DMARxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 80067ce:	4620      	mov	r0, r4
 80067d0:	f002 f951 	bl	8008a76 <HAL_SD_AbortCallback>
}
 80067d4:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80067d6:	6820      	ldr	r0, [r4, #0]
 80067d8:	f001 ff5a 	bl	8008690 <SDMMC_CmdStopTransfer>
 80067dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067de:	4303      	orrs	r3, r0
 80067e0:	63a3      	str	r3, [r4, #56]	; 0x38
 80067e2:	e7f2      	b.n	80067ca <SD_DMARxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 80067e4:	4620      	mov	r0, r4
 80067e6:	f7ff fcd7 	bl	8006198 <HAL_SD_ErrorCallback>
}
 80067ea:	e7f3      	b.n	80067d4 <SD_DMARxAbort+0x2c>

080067ec <HAL_SD_IRQHandler>:
{
 80067ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067f0:	b082      	sub	sp, #8
 80067f2:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 80067f4:	6b05      	ldr	r5, [r0, #48]	; 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80067f6:	6803      	ldr	r3, [r0, #0]
 80067f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067fa:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80067fe:	f000 8082 	beq.w	8006906 <HAL_SD_IRQHandler+0x11a>
 8006802:	f015 0f08 	tst.w	r5, #8
 8006806:	d15e      	bne.n	80068c6 <HAL_SD_IRQHandler+0xda>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800680a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800680e:	f040 8114 	bne.w	8006a3a <HAL_SD_IRQHandler+0x24e>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006814:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006816:	f240 223a 	movw	r2, #570	; 0x23a
 800681a:	4211      	tst	r1, r2
 800681c:	f000 809c 	beq.w	8006958 <HAL_SD_IRQHandler+0x16c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006822:	f012 0f02 	tst.w	r2, #2
 8006826:	d003      	beq.n	8006830 <HAL_SD_IRQHandler+0x44>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006828:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800682a:	f042 0202 	orr.w	r2, r2, #2
 800682e:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006832:	f012 0f08 	tst.w	r2, #8
 8006836:	d003      	beq.n	8006840 <HAL_SD_IRQHandler+0x54>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006838:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800683a:	f042 0208 	orr.w	r2, r2, #8
 800683e:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006842:	f012 0f20 	tst.w	r2, #32
 8006846:	d003      	beq.n	8006850 <HAL_SD_IRQHandler+0x64>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006848:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800684a:	f042 0220 	orr.w	r2, r2, #32
 800684e:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006852:	f012 0f10 	tst.w	r2, #16
 8006856:	d003      	beq.n	8006860 <HAL_SD_IRQHandler+0x74>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006858:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800685a:	f042 0210 	orr.w	r2, r2, #16
 800685e:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8006860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006862:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006866:	d003      	beq.n	8006870 <HAL_SD_IRQHandler+0x84>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006868:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800686a:	f042 0208 	orr.w	r2, r2, #8
 800686e:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8006870:	f240 723a 	movw	r2, #1850	; 0x73a
 8006874:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006876:	6822      	ldr	r2, [r4, #0]
 8006878:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800687a:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800687e:	f023 0302 	bic.w	r3, r3, #2
 8006882:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006884:	6820      	ldr	r0, [r4, #0]
 8006886:	f001 ff03 	bl	8008690 <SDMMC_CmdStopTransfer>
 800688a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800688c:	4303      	orrs	r3, r0
 800688e:	63a3      	str	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006890:	f015 0f08 	tst.w	r5, #8
 8006894:	f040 80b2 	bne.w	80069fc <HAL_SD_IRQHandler+0x210>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006898:	f015 0f80 	tst.w	r5, #128	; 0x80
 800689c:	d05c      	beq.n	8006958 <HAL_SD_IRQHandler+0x16c>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800689e:	f015 0f30 	tst.w	r5, #48	; 0x30
 80068a2:	f040 80b4 	bne.w	8006a0e <HAL_SD_IRQHandler+0x222>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80068a6:	f015 0f03 	tst.w	r5, #3
 80068aa:	f000 80bc 	beq.w	8006a26 <HAL_SD_IRQHandler+0x23a>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80068ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068b0:	4a75      	ldr	r2, [pc, #468]	; (8006a88 <HAL_SD_IRQHandler+0x29c>)
 80068b2:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80068b4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80068b6:	f7fd fd20 	bl	80042fa <HAL_DMA_Abort_IT>
 80068ba:	2800      	cmp	r0, #0
 80068bc:	d04c      	beq.n	8006958 <HAL_SD_IRQHandler+0x16c>
          SD_DMARxAbort(hsd->hdmarx);
 80068be:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80068c0:	f7ff ff72 	bl	80067a8 <SD_DMARxAbort>
 80068c4:	e048      	b.n	8006958 <HAL_SD_IRQHandler+0x16c>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
  dataremaining = hsd->RxXferSize;
 80068c6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c

  if (dataremaining > 0U)
 80068c8:	2f00      	cmp	r7, #0
 80068ca:	d045      	beq.n	8006958 <HAL_SD_IRQHandler+0x16c>
  tmp = hsd->pRxBuffPtr;
 80068cc:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 80068d0:	f108 0504 	add.w	r5, r8, #4
 80068d4:	f108 0624 	add.w	r6, r8, #36	; 0x24
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80068d8:	6820      	ldr	r0, [r4, #0]
 80068da:	f001 fe1f 	bl	800851c <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 80068de:	f805 0c04 	strb.w	r0, [r5, #-4]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80068e2:	0a03      	lsrs	r3, r0, #8
 80068e4:	f805 3c03 	strb.w	r3, [r5, #-3]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80068e8:	0c03      	lsrs	r3, r0, #16
 80068ea:	f805 3c02 	strb.w	r3, [r5, #-2]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80068ee:	0e00      	lsrs	r0, r0, #24
 80068f0:	f805 0c01 	strb.w	r0, [r5, #-1]
    for(count = 0U; count < 8U; count++)
 80068f4:	3504      	adds	r5, #4
 80068f6:	42b5      	cmp	r5, r6
 80068f8:	d1ee      	bne.n	80068d8 <HAL_SD_IRQHandler+0xec>
      tmp++;
      dataremaining--;
    }

    hsd->pRxBuffPtr = tmp;
 80068fa:	f108 0320 	add.w	r3, r8, #32
 80068fe:	62a3      	str	r3, [r4, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006900:	3f20      	subs	r7, #32
 8006902:	62e7      	str	r7, [r4, #44]	; 0x2c
 8006904:	e028      	b.n	8006958 <HAL_SD_IRQHandler+0x16c>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006908:	f412 7f80 	tst.w	r2, #256	; 0x100
 800690c:	d045      	beq.n	800699a <HAL_SD_IRQHandler+0x1ae>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800690e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006912:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006914:	6802      	ldr	r2, [r0, #0]
 8006916:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006918:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800691c:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006920:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006922:	6802      	ldr	r2, [r0, #0]
 8006924:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006926:	f023 0301 	bic.w	r3, r3, #1
 800692a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 800692c:	f015 0f08 	tst.w	r5, #8
 8006930:	f000 8092 	beq.w	8006a58 <HAL_SD_IRQHandler+0x26c>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006934:	f015 0f22 	tst.w	r5, #34	; 0x22
 8006938:	d111      	bne.n	800695e <HAL_SD_IRQHandler+0x172>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006940:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006942:	2301      	movs	r3, #1
 8006944:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006948:	2300      	movs	r3, #0
 800694a:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800694c:	f015 0f03 	tst.w	r5, #3
 8006950:	d012      	beq.n	8006978 <HAL_SD_IRQHandler+0x18c>
        HAL_SD_RxCpltCallback(hsd);
 8006952:	4620      	mov	r0, r4
 8006954:	f002 f899 	bl	8008a8a <HAL_SD_RxCpltCallback>
}
 8006958:	b002      	add	sp, #8
 800695a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800695e:	6800      	ldr	r0, [r0, #0]
 8006960:	f001 fe96 	bl	8008690 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006964:	4603      	mov	r3, r0
 8006966:	2800      	cmp	r0, #0
 8006968:	d0e7      	beq.n	800693a <HAL_SD_IRQHandler+0x14e>
          hsd->ErrorCode |= errorstate;
 800696a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800696c:	4313      	orrs	r3, r2
 800696e:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006970:	4620      	mov	r0, r4
 8006972:	f7ff fc11 	bl	8006198 <HAL_SD_ErrorCallback>
 8006976:	e7e0      	b.n	800693a <HAL_SD_IRQHandler+0x14e>
        HAL_SD_TxCpltCallback(hsd);
 8006978:	4620      	mov	r0, r4
 800697a:	f002 f881 	bl	8008a80 <HAL_SD_TxCpltCallback>
 800697e:	e7eb      	b.n	8006958 <HAL_SD_IRQHandler+0x16c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006980:	6820      	ldr	r0, [r4, #0]
 8006982:	f001 fe85 	bl	8008690 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006986:	4603      	mov	r3, r0
 8006988:	2800      	cmp	r0, #0
 800698a:	d06c      	beq.n	8006a66 <HAL_SD_IRQHandler+0x27a>
          hsd->ErrorCode |= errorstate;
 800698c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800698e:	4313      	orrs	r3, r2
 8006990:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006992:	4620      	mov	r0, r4
 8006994:	f7ff fc00 	bl	8006198 <HAL_SD_ErrorCallback>
 8006998:	e065      	b.n	8006a66 <HAL_SD_IRQHandler+0x27a>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800699a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800699c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80069a0:	f43f af38 	beq.w	8006814 <HAL_SD_IRQHandler+0x28>
 80069a4:	f015 0f08 	tst.w	r5, #8
 80069a8:	f43f af34 	beq.w	8006814 <HAL_SD_IRQHandler+0x28>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 80069ac:	6a47      	ldr	r7, [r0, #36]	; 0x24

  if (dataremaining > 0U)
 80069ae:	2f00      	cmp	r7, #0
 80069b0:	d0d2      	beq.n	8006958 <HAL_SD_IRQHandler+0x16c>
  tmp = hsd->pTxBuffPtr;
 80069b2:	f8d0 8020 	ldr.w	r8, [r0, #32]
 80069b6:	f108 0504 	add.w	r5, r8, #4
 80069ba:	f108 0624 	add.w	r6, r8, #36	; 0x24
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 80069be:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80069c2:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 8U);
 80069c4:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 80069c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80069cc:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 16U);
 80069ce:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 80069d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069d6:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
 80069d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80069dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80069e0:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80069e2:	a901      	add	r1, sp, #4
 80069e4:	6820      	ldr	r0, [r4, #0]
 80069e6:	f001 fd9c 	bl	8008522 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80069ea:	3504      	adds	r5, #4
 80069ec:	42b5      	cmp	r5, r6
 80069ee:	d1e6      	bne.n	80069be <HAL_SD_IRQHandler+0x1d2>
    }

    hsd->pTxBuffPtr = tmp;
 80069f0:	f108 0320 	add.w	r3, r8, #32
 80069f4:	6223      	str	r3, [r4, #32]
    hsd->TxXferSize = dataremaining;
 80069f6:	3f20      	subs	r7, #32
 80069f8:	6267      	str	r7, [r4, #36]	; 0x24
  }
}
 80069fa:	e7ad      	b.n	8006958 <HAL_SD_IRQHandler+0x16c>
      hsd->State = HAL_SD_STATE_READY;
 80069fc:	2301      	movs	r3, #1
 80069fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a02:	2300      	movs	r3, #0
 8006a04:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006a06:	4620      	mov	r0, r4
 8006a08:	f7ff fbc6 	bl	8006198 <HAL_SD_ErrorCallback>
 8006a0c:	e7a4      	b.n	8006958 <HAL_SD_IRQHandler+0x16c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006a0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006a10:	4a1e      	ldr	r2, [pc, #120]	; (8006a8c <HAL_SD_IRQHandler+0x2a0>)
 8006a12:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006a14:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006a16:	f7fd fc70 	bl	80042fa <HAL_DMA_Abort_IT>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d09c      	beq.n	8006958 <HAL_SD_IRQHandler+0x16c>
          SD_DMATxAbort(hsd->hdmatx);
 8006a1e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006a20:	f7ff fea0 	bl	8006764 <SD_DMATxAbort>
 8006a24:	e798      	b.n	8006958 <HAL_SD_IRQHandler+0x16c>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006a26:	2300      	movs	r3, #0
 8006a28:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006a30:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006a32:	4620      	mov	r0, r4
 8006a34:	f002 f81f 	bl	8008a76 <HAL_SD_AbortCallback>
}
 8006a38:	e78e      	b.n	8006958 <HAL_SD_IRQHandler+0x16c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006a3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a3e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006a40:	6822      	ldr	r2, [r4, #0]
 8006a42:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006a44:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8006a48:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006a4c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006a4e:	6822      	ldr	r2, [r4, #0]
 8006a50:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006a52:	f023 0301 	bic.w	r3, r3, #1
 8006a56:	62d3      	str	r3, [r2, #44]	; 0x2c
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006a58:	f015 0f80 	tst.w	r5, #128	; 0x80
 8006a5c:	f43f af7c 	beq.w	8006958 <HAL_SD_IRQHandler+0x16c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006a60:	f015 0f20 	tst.w	r5, #32
 8006a64:	d18c      	bne.n	8006980 <HAL_SD_IRQHandler+0x194>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006a66:	f015 0f03 	tst.w	r5, #3
 8006a6a:	f47f af75 	bne.w	8006958 <HAL_SD_IRQHandler+0x16c>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006a6e:	6822      	ldr	r2, [r4, #0]
 8006a70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006a72:	f023 0308 	bic.w	r3, r3, #8
 8006a76:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f001 fffe 	bl	8008a80 <HAL_SD_TxCpltCallback>
 8006a84:	e768      	b.n	8006958 <HAL_SD_IRQHandler+0x16c>
 8006a86:	bf00      	nop
 8006a88:	080067a9 	.word	0x080067a9
 8006a8c:	08006765 	.word	0x08006765

08006a90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a94:	b082      	sub	sp, #8
 8006a96:	4681      	mov	r9, r0
 8006a98:	460f      	mov	r7, r1
 8006a9a:	4616      	mov	r6, r2
 8006a9c:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a9e:	f7fd f86b 	bl	8003b78 <HAL_GetTick>
 8006aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aa4:	442b      	add	r3, r5
 8006aa6:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 8006aaa:	f7fd f865 	bl	8003b78 <HAL_GetTick>
 8006aae:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ab0:	4b2c      	ldr	r3, [pc, #176]	; (8006b64 <SPI_WaitFlagStateUntilTimeout+0xd4>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8006ab8:	fb08 f303 	mul.w	r3, r8, r3
 8006abc:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006abe:	f8d9 3000 	ldr.w	r3, [r9]
 8006ac2:	689c      	ldr	r4, [r3, #8]
 8006ac4:	ea37 0204 	bics.w	r2, r7, r4
 8006ac8:	bf0c      	ite	eq
 8006aca:	2401      	moveq	r4, #1
 8006acc:	2400      	movne	r4, #0
 8006ace:	42b4      	cmp	r4, r6
 8006ad0:	d044      	beq.n	8006b5c <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ad2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006ad6:	d0f4      	beq.n	8006ac2 <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ad8:	f7fd f84e 	bl	8003b78 <HAL_GetTick>
 8006adc:	eba0 000a 	sub.w	r0, r0, sl
 8006ae0:	4540      	cmp	r0, r8
 8006ae2:	d207      	bcs.n	8006af4 <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006ae4:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	bf08      	it	eq
 8006aea:	4698      	moveq	r8, r3
      }
      count--;
 8006aec:	9b01      	ldr	r3, [sp, #4]
 8006aee:	3b01      	subs	r3, #1
 8006af0:	9301      	str	r3, [sp, #4]
 8006af2:	e7e4      	b.n	8006abe <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006af4:	f8d9 2000 	ldr.w	r2, [r9]
 8006af8:	6853      	ldr	r3, [r2, #4]
 8006afa:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8006afe:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b00:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006b04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b08:	d00c      	beq.n	8006b24 <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b0a:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8006b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b12:	d016      	beq.n	8006b42 <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 8006b14:	2301      	movs	r3, #1
 8006b16:	f889 3051 	strb.w	r3, [r9, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	f889 3050 	strb.w	r3, [r9, #80]	; 0x50
        return HAL_TIMEOUT;
 8006b20:	2003      	movs	r0, #3
 8006b22:	e01c      	b.n	8006b5e <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b24:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b2c:	d002      	beq.n	8006b34 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b32:	d1ea      	bne.n	8006b0a <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8006b34:	f8d9 2000 	ldr.w	r2, [r9]
 8006b38:	6813      	ldr	r3, [r2, #0]
 8006b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b3e:	6013      	str	r3, [r2, #0]
 8006b40:	e7e3      	b.n	8006b0a <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8006b42:	f8d9 2000 	ldr.w	r2, [r9]
 8006b46:	6813      	ldr	r3, [r2, #0]
 8006b48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	f8d9 2000 	ldr.w	r2, [r9]
 8006b52:	6813      	ldr	r3, [r2, #0]
 8006b54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	e7db      	b.n	8006b14 <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 8006b5c:	2000      	movs	r0, #0
}
 8006b5e:	b002      	add	sp, #8
 8006b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b64:	20000014 	.word	0x20000014

08006b68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b68:	b530      	push	{r4, r5, lr}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b6e:	4b16      	ldr	r3, [pc, #88]	; (8006bc8 <SPI_EndRxTxTransaction+0x60>)
 8006b70:	6818      	ldr	r0, [r3, #0]
 8006b72:	4b16      	ldr	r3, [pc, #88]	; (8006bcc <SPI_EndRxTxTransaction+0x64>)
 8006b74:	fba3 3000 	umull	r3, r0, r3, r0
 8006b78:	0d40      	lsrs	r0, r0, #21
 8006b7a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8006b7e:	fb05 f000 	mul.w	r0, r5, r0
 8006b82:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b84:	6863      	ldr	r3, [r4, #4]
 8006b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b8a:	d00b      	beq.n	8006ba4 <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b8c:	9b03      	ldr	r3, [sp, #12]
 8006b8e:	b1bb      	cbz	r3, 8006bc0 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8006b90:	9b03      	ldr	r3, [sp, #12]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006b9e:	d1f5      	bne.n	8006b8c <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	e00e      	b.n	8006bc2 <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ba4:	9200      	str	r2, [sp, #0]
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2180      	movs	r1, #128	; 0x80
 8006bac:	4620      	mov	r0, r4
 8006bae:	f7ff ff6f 	bl	8006a90 <SPI_WaitFlagStateUntilTimeout>
 8006bb2:	b130      	cbz	r0, 8006bc2 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006bb6:	f043 0320 	orr.w	r3, r3, #32
 8006bba:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8006bbc:	2003      	movs	r0, #3
 8006bbe:	e000      	b.n	8006bc2 <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8006bc0:	2000      	movs	r0, #0
}
 8006bc2:	b005      	add	sp, #20
 8006bc4:	bd30      	pop	{r4, r5, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20000014 	.word	0x20000014
 8006bcc:	165e9f81 	.word	0x165e9f81

08006bd0 <SPI_EndRxTransaction>:
{
 8006bd0:	b510      	push	{r4, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	4604      	mov	r4, r0
 8006bd6:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bd8:	6841      	ldr	r1, [r0, #4]
 8006bda:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8006bde:	d009      	beq.n	8006bf4 <SPI_EndRxTransaction+0x24>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006be0:	9200      	str	r2, [sp, #0]
 8006be2:	2200      	movs	r2, #0
 8006be4:	2101      	movs	r1, #1
 8006be6:	4620      	mov	r0, r4
 8006be8:	f7ff ff52 	bl	8006a90 <SPI_WaitFlagStateUntilTimeout>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	d131      	bne.n	8006c54 <SPI_EndRxTransaction+0x84>
}
 8006bf0:	b002      	add	sp, #8
 8006bf2:	bd10      	pop	{r4, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bf4:	6881      	ldr	r1, [r0, #8]
 8006bf6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006bfa:	d002      	beq.n	8006c02 <SPI_EndRxTransaction+0x32>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bfc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006c00:	d10c      	bne.n	8006c1c <SPI_EndRxTransaction+0x4c>
    __HAL_SPI_DISABLE(hspi);
 8006c02:	6820      	ldr	r0, [r4, #0]
 8006c04:	6801      	ldr	r1, [r0, #0]
 8006c06:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006c0a:	6001      	str	r1, [r0, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c0c:	6861      	ldr	r1, [r4, #4]
 8006c0e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8006c12:	d1e5      	bne.n	8006be0 <SPI_EndRxTransaction+0x10>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006c14:	68a1      	ldr	r1, [r4, #8]
 8006c16:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006c1a:	d00d      	beq.n	8006c38 <SPI_EndRxTransaction+0x68>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c1c:	9200      	str	r2, [sp, #0]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2180      	movs	r1, #128	; 0x80
 8006c22:	4620      	mov	r0, r4
 8006c24:	f7ff ff34 	bl	8006a90 <SPI_WaitFlagStateUntilTimeout>
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	d0e1      	beq.n	8006bf0 <SPI_EndRxTransaction+0x20>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c2e:	f043 0320 	orr.w	r3, r3, #32
 8006c32:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8006c34:	2003      	movs	r0, #3
 8006c36:	e7db      	b.n	8006bf0 <SPI_EndRxTransaction+0x20>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006c38:	9200      	str	r2, [sp, #0]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f7ff ff26 	bl	8006a90 <SPI_WaitFlagStateUntilTimeout>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	d0d3      	beq.n	8006bf0 <SPI_EndRxTransaction+0x20>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c48:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c4a:	f043 0320 	orr.w	r3, r3, #32
 8006c4e:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8006c50:	2003      	movs	r0, #3
 8006c52:	e7cd      	b.n	8006bf0 <SPI_EndRxTransaction+0x20>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c54:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c56:	f043 0320 	orr.w	r3, r3, #32
 8006c5a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c5c:	2003      	movs	r0, #3
 8006c5e:	e7c7      	b.n	8006bf0 <SPI_EndRxTransaction+0x20>

08006c60 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006c60:	2800      	cmp	r0, #0
 8006c62:	d05a      	beq.n	8006d1a <HAL_SPI_Init+0xba>
{
 8006c64:	b510      	push	{r4, lr}
 8006c66:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c6a:	b933      	cbnz	r3, 8006c7a <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c6c:	6843      	ldr	r3, [r0, #4]
 8006c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c72:	d005      	beq.n	8006c80 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c74:	2300      	movs	r3, #0
 8006c76:	61c3      	str	r3, [r0, #28]
 8006c78:	e002      	b.n	8006c80 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c7e:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c80:	2300      	movs	r3, #0
 8006c82:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c84:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d040      	beq.n	8006d0e <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8006c92:	6822      	ldr	r2, [r4, #0]
 8006c94:	6813      	ldr	r3, [r2, #0]
 8006c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c9a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c9c:	6822      	ldr	r2, [r4, #0]
 8006c9e:	6863      	ldr	r3, [r4, #4]
 8006ca0:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8006ca4:	68a1      	ldr	r1, [r4, #8]
 8006ca6:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8006caa:	430b      	orrs	r3, r1
 8006cac:	68e1      	ldr	r1, [r4, #12]
 8006cae:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8006cb2:	430b      	orrs	r3, r1
 8006cb4:	6921      	ldr	r1, [r4, #16]
 8006cb6:	f001 0102 	and.w	r1, r1, #2
 8006cba:	430b      	orrs	r3, r1
 8006cbc:	6961      	ldr	r1, [r4, #20]
 8006cbe:	f001 0101 	and.w	r1, r1, #1
 8006cc2:	430b      	orrs	r3, r1
 8006cc4:	69a1      	ldr	r1, [r4, #24]
 8006cc6:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8006cca:	430b      	orrs	r3, r1
 8006ccc:	69e1      	ldr	r1, [r4, #28]
 8006cce:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8006cd2:	430b      	orrs	r3, r1
 8006cd4:	6a21      	ldr	r1, [r4, #32]
 8006cd6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8006cda:	430b      	orrs	r3, r1
 8006cdc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006cde:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8006ce2:	430b      	orrs	r3, r1
 8006ce4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ce6:	6821      	ldr	r1, [r4, #0]
 8006ce8:	8b63      	ldrh	r3, [r4, #26]
 8006cea:	f003 0304 	and.w	r3, r3, #4
 8006cee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006cf0:	f002 0210 	and.w	r2, r2, #16
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006cf8:	6822      	ldr	r2, [r4, #0]
 8006cfa:	69d3      	ldr	r3, [r2, #28]
 8006cfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d00:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d02:	2000      	movs	r0, #0
 8006d04:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8006d0c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8006d0e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8006d12:	4620      	mov	r0, r4
 8006d14:	f7fc fbaa 	bl	800346c <HAL_SPI_MspInit>
 8006d18:	e7b8      	b.n	8006c8c <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8006d1a:	2001      	movs	r0, #1
}
 8006d1c:	4770      	bx	lr

08006d1e <HAL_SPI_Transmit>:
{
 8006d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8006d26:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	f000 80c2 	beq.w	8006eb4 <HAL_SPI_Transmit+0x196>
 8006d30:	4604      	mov	r4, r0
 8006d32:	4688      	mov	r8, r1
 8006d34:	4617      	mov	r7, r2
 8006d36:	2301      	movs	r3, #1
 8006d38:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8006d3c:	f7fc ff1c 	bl	8003b78 <HAL_GetTick>
 8006d40:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006d42:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8006d46:	b2c0      	uxtb	r0, r0
 8006d48:	2801      	cmp	r0, #1
 8006d4a:	f040 80a5 	bne.w	8006e98 <HAL_SPI_Transmit+0x17a>
  if ((pData == NULL) || (Size == 0U))
 8006d4e:	f1b8 0f00 	cmp.w	r8, #0
 8006d52:	f000 80a2 	beq.w	8006e9a <HAL_SPI_Transmit+0x17c>
 8006d56:	2f00      	cmp	r7, #0
 8006d58:	f000 809f 	beq.w	8006e9a <HAL_SPI_Transmit+0x17c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d62:	2300      	movs	r3, #0
 8006d64:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d66:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006d6a:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006d6c:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d6e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006d70:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006d72:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006d74:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006d76:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d78:	68a3      	ldr	r3, [r4, #8]
 8006d7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d7e:	d035      	beq.n	8006dec <HAL_SPI_Transmit+0xce>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d80:	6823      	ldr	r3, [r4, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006d88:	d103      	bne.n	8006d92 <HAL_SPI_Transmit+0x74>
    __HAL_SPI_ENABLE(hspi);
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d90:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d92:	68e3      	ldr	r3, [r4, #12]
 8006d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d98:	d033      	beq.n	8006e02 <HAL_SPI_Transmit+0xe4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d9a:	6863      	ldr	r3, [r4, #4]
 8006d9c:	b10b      	cbz	r3, 8006da2 <HAL_SPI_Transmit+0x84>
 8006d9e:	2f01      	cmp	r7, #1
 8006da0:	d10a      	bne.n	8006db8 <HAL_SPI_Transmit+0x9a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006da6:	7812      	ldrb	r2, [r2, #0]
 8006da8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006daa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006dac:	3301      	adds	r3, #1
 8006dae:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006db0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8006db8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d15b      	bne.n	8006e78 <HAL_SPI_Transmit+0x15a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006dc0:	4632      	mov	r2, r6
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f7ff fecf 	bl	8006b68 <SPI_EndRxTxTransaction>
 8006dca:	b108      	cbz	r0, 8006dd0 <HAL_SPI_Transmit+0xb2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dcc:	2320      	movs	r3, #32
 8006dce:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006dd0:	68a3      	ldr	r3, [r4, #8]
 8006dd2:	b933      	cbnz	r3, 8006de2 <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dd4:	9301      	str	r3, [sp, #4]
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	9201      	str	r2, [sp, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	9301      	str	r3, [sp, #4]
 8006de0:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006de2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8006de4:	3800      	subs	r0, #0
 8006de6:	bf18      	it	ne
 8006de8:	2001      	movne	r0, #1
error:
 8006dea:	e056      	b.n	8006e9a <HAL_SPI_Transmit+0x17c>
    __HAL_SPI_DISABLE(hspi);
 8006dec:	6822      	ldr	r2, [r4, #0]
 8006dee:	6813      	ldr	r3, [r2, #0]
 8006df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df4:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8006df6:	6822      	ldr	r2, [r4, #0]
 8006df8:	6813      	ldr	r3, [r2, #0]
 8006dfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	e7be      	b.n	8006d80 <HAL_SPI_Transmit+0x62>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e02:	6863      	ldr	r3, [r4, #4]
 8006e04:	b10b      	cbz	r3, 8006e0a <HAL_SPI_Transmit+0xec>
 8006e06:	2f01      	cmp	r7, #1
 8006e08:	d10a      	bne.n	8006e20 <HAL_SPI_Transmit+0x102>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006e0e:	8812      	ldrh	r2, [r2, #0]
 8006e10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006e14:	3302      	adds	r3, #2
 8006e16:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006e18:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8006e20:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	b963      	cbnz	r3, 8006e40 <HAL_SPI_Transmit+0x122>
 8006e26:	e7cb      	b.n	8006dc0 <HAL_SPI_Transmit+0xa2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e28:	f7fc fea6 	bl	8003b78 <HAL_GetTick>
 8006e2c:	1b80      	subs	r0, r0, r6
 8006e2e:	42a8      	cmp	r0, r5
 8006e30:	d302      	bcc.n	8006e38 <HAL_SPI_Transmit+0x11a>
 8006e32:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006e36:	d139      	bne.n	8006eac <HAL_SPI_Transmit+0x18e>
    while (hspi->TxXferCount > 0U)
 8006e38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d0bf      	beq.n	8006dc0 <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	f012 0f02 	tst.w	r2, #2
 8006e48:	d0ee      	beq.n	8006e28 <HAL_SPI_Transmit+0x10a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e4a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006e4c:	8812      	ldrh	r2, [r2, #0]
 8006e4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006e52:	3302      	adds	r3, #2
 8006e54:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006e56:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	86e3      	strh	r3, [r4, #54]	; 0x36
 8006e5e:	e7eb      	b.n	8006e38 <HAL_SPI_Transmit+0x11a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e60:	f7fc fe8a 	bl	8003b78 <HAL_GetTick>
 8006e64:	1b80      	subs	r0, r0, r6
 8006e66:	42a8      	cmp	r0, r5
 8006e68:	d302      	bcc.n	8006e70 <HAL_SPI_Transmit+0x152>
 8006e6a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006e6e:	d11f      	bne.n	8006eb0 <HAL_SPI_Transmit+0x192>
    while (hspi->TxXferCount > 0U)
 8006e70:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006e72:	b292      	uxth	r2, r2
 8006e74:	2a00      	cmp	r2, #0
 8006e76:	d0a3      	beq.n	8006dc0 <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	689a      	ldr	r2, [r3, #8]
 8006e7c:	f012 0f02 	tst.w	r2, #2
 8006e80:	d0ee      	beq.n	8006e60 <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e82:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006e84:	7812      	ldrb	r2, [r2, #0]
 8006e86:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006e8e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006e90:	3a01      	subs	r2, #1
 8006e92:	b292      	uxth	r2, r2
 8006e94:	86e2      	strh	r2, [r4, #54]	; 0x36
 8006e96:	e7eb      	b.n	8006e70 <HAL_SPI_Transmit+0x152>
    errorcode = HAL_BUSY;
 8006e98:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8006ea6:	b002      	add	sp, #8
 8006ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          errorcode = HAL_TIMEOUT;
 8006eac:	2003      	movs	r0, #3
 8006eae:	e7f4      	b.n	8006e9a <HAL_SPI_Transmit+0x17c>
          errorcode = HAL_TIMEOUT;
 8006eb0:	2003      	movs	r0, #3
 8006eb2:	e7f2      	b.n	8006e9a <HAL_SPI_Transmit+0x17c>
  __HAL_LOCK(hspi);
 8006eb4:	2002      	movs	r0, #2
 8006eb6:	e7f6      	b.n	8006ea6 <HAL_SPI_Transmit+0x188>

08006eb8 <HAL_SPI_TransmitReceive>:
{
 8006eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ebc:	b083      	sub	sp, #12
 8006ebe:	461f      	mov	r7, r3
 8006ec0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8006ec2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	f000 8109 	beq.w	80070de <HAL_SPI_TransmitReceive+0x226>
 8006ecc:	4604      	mov	r4, r0
 8006ece:	4688      	mov	r8, r1
 8006ed0:	4691      	mov	r9, r2
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8006ed8:	f7fc fe4e 	bl	8003b78 <HAL_GetTick>
 8006edc:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8006ede:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8006ee2:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ee4:	2801      	cmp	r0, #1
 8006ee6:	d00b      	beq.n	8006f00 <HAL_SPI_TransmitReceive+0x48>
 8006ee8:	6863      	ldr	r3, [r4, #4]
 8006eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eee:	f040 80de 	bne.w	80070ae <HAL_SPI_TransmitReceive+0x1f6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ef2:	68a3      	ldr	r3, [r4, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f040 80e4 	bne.w	80070c2 <HAL_SPI_TransmitReceive+0x20a>
 8006efa:	2804      	cmp	r0, #4
 8006efc:	f040 80e3 	bne.w	80070c6 <HAL_SPI_TransmitReceive+0x20e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f00:	f1b8 0f00 	cmp.w	r8, #0
 8006f04:	f000 80e1 	beq.w	80070ca <HAL_SPI_TransmitReceive+0x212>
 8006f08:	f1b9 0f00 	cmp.w	r9, #0
 8006f0c:	f000 80df 	beq.w	80070ce <HAL_SPI_TransmitReceive+0x216>
 8006f10:	2f00      	cmp	r7, #0
 8006f12:	f000 80de 	beq.w	80070d2 <HAL_SPI_TransmitReceive+0x21a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f16:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f1e:	bf1c      	itt	ne
 8006f20:	2305      	movne	r3, #5
 8006f22:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f26:	2300      	movs	r3, #0
 8006f28:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f2a:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006f2e:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006f30:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f32:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006f36:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006f38:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8006f3a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f3c:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006f46:	d103      	bne.n	8006f50 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f4e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f50:	68e3      	ldr	r3, [r4, #12]
 8006f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f56:	d012      	beq.n	8006f7e <HAL_SPI_TransmitReceive+0xc6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f58:	6863      	ldr	r3, [r4, #4]
 8006f5a:	b10b      	cbz	r3, 8006f60 <HAL_SPI_TransmitReceive+0xa8>
 8006f5c:	2f01      	cmp	r7, #1
 8006f5e:	d10a      	bne.n	8006f76 <HAL_SPI_TransmitReceive+0xbe>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f60:	6823      	ldr	r3, [r4, #0]
 8006f62:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006f64:	7812      	ldrb	r2, [r2, #0]
 8006f66:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f68:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006f6e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006f70:	3b01      	subs	r3, #1
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006f76:	2701      	movs	r7, #1
        txallowed = 0U;
 8006f78:	f04f 0800 	mov.w	r8, #0
 8006f7c:	e066      	b.n	800704c <HAL_SPI_TransmitReceive+0x194>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f7e:	6863      	ldr	r3, [r4, #4]
 8006f80:	b10b      	cbz	r3, 8006f86 <HAL_SPI_TransmitReceive+0xce>
 8006f82:	2f01      	cmp	r7, #1
 8006f84:	d10a      	bne.n	8006f9c <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006f8a:	8812      	ldrh	r2, [r2, #0]
 8006f8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006f90:	3302      	adds	r3, #2
 8006f92:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006f94:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006f96:	3b01      	subs	r3, #1
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006f9c:	2701      	movs	r7, #1
        txallowed = 0U;
 8006f9e:	f04f 0800 	mov.w	r8, #0
 8006fa2:	e01a      	b.n	8006fda <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fa4:	6822      	ldr	r2, [r4, #0]
 8006fa6:	6893      	ldr	r3, [r2, #8]
 8006fa8:	f013 0301 	ands.w	r3, r3, #1
 8006fac:	d00d      	beq.n	8006fca <HAL_SPI_TransmitReceive+0x112>
 8006fae:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8006fb0:	b289      	uxth	r1, r1
 8006fb2:	b151      	cbz	r1, 8006fca <HAL_SPI_TransmitReceive+0x112>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fb4:	68d1      	ldr	r1, [r2, #12]
 8006fb6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006fb8:	8011      	strh	r1, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006fbc:	3202      	adds	r2, #2
 8006fbe:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006fc0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8006fc2:	3a01      	subs	r2, #1
 8006fc4:	b292      	uxth	r2, r2
 8006fc6:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 1U;
 8006fc8:	461f      	mov	r7, r3
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006fca:	f7fc fdd5 	bl	8003b78 <HAL_GetTick>
 8006fce:	1b40      	subs	r0, r0, r5
 8006fd0:	42b0      	cmp	r0, r6
 8006fd2:	d302      	bcc.n	8006fda <HAL_SPI_TransmitReceive+0x122>
 8006fd4:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006fd8:	d17d      	bne.n	80070d6 <HAL_SPI_TransmitReceive+0x21e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fda:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	b91b      	cbnz	r3, 8006fe8 <HAL_SPI_TransmitReceive+0x130>
 8006fe0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d04e      	beq.n	8007086 <HAL_SPI_TransmitReceive+0x1ce>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fe8:	6823      	ldr	r3, [r4, #0]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	f012 0f02 	tst.w	r2, #2
 8006ff0:	d0d8      	beq.n	8006fa4 <HAL_SPI_TransmitReceive+0xec>
 8006ff2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006ff4:	b292      	uxth	r2, r2
 8006ff6:	2a00      	cmp	r2, #0
 8006ff8:	d0d4      	beq.n	8006fa4 <HAL_SPI_TransmitReceive+0xec>
 8006ffa:	2f00      	cmp	r7, #0
 8006ffc:	d0d2      	beq.n	8006fa4 <HAL_SPI_TransmitReceive+0xec>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ffe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007000:	8812      	ldrh	r2, [r2, #0]
 8007002:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007004:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007006:	3302      	adds	r3, #2
 8007008:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800700a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800700c:	3b01      	subs	r3, #1
 800700e:	b29b      	uxth	r3, r3
 8007010:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8007012:	4647      	mov	r7, r8
 8007014:	e7c6      	b.n	8006fa4 <HAL_SPI_TransmitReceive+0xec>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007016:	6822      	ldr	r2, [r4, #0]
 8007018:	6893      	ldr	r3, [r2, #8]
 800701a:	f013 0301 	ands.w	r3, r3, #1
 800701e:	d00d      	beq.n	800703c <HAL_SPI_TransmitReceive+0x184>
 8007020:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8007022:	b289      	uxth	r1, r1
 8007024:	b151      	cbz	r1, 800703c <HAL_SPI_TransmitReceive+0x184>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007026:	68d1      	ldr	r1, [r2, #12]
 8007028:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800702a:	7011      	strb	r1, [r2, #0]
        hspi->pRxBuffPtr++;
 800702c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800702e:	3201      	adds	r2, #1
 8007030:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8007032:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8007034:	3a01      	subs	r2, #1
 8007036:	b292      	uxth	r2, r2
 8007038:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 1U;
 800703a:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800703c:	f7fc fd9c 	bl	8003b78 <HAL_GetTick>
 8007040:	1b43      	subs	r3, r0, r5
 8007042:	42b3      	cmp	r3, r6
 8007044:	d302      	bcc.n	800704c <HAL_SPI_TransmitReceive+0x194>
 8007046:	f1b6 3fff 	cmp.w	r6, #4294967295
 800704a:	d146      	bne.n	80070da <HAL_SPI_TransmitReceive+0x222>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800704c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800704e:	b29b      	uxth	r3, r3
 8007050:	b913      	cbnz	r3, 8007058 <HAL_SPI_TransmitReceive+0x1a0>
 8007052:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007054:	b29b      	uxth	r3, r3
 8007056:	b1b3      	cbz	r3, 8007086 <HAL_SPI_TransmitReceive+0x1ce>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	f012 0f02 	tst.w	r2, #2
 8007060:	d0d9      	beq.n	8007016 <HAL_SPI_TransmitReceive+0x15e>
 8007062:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8007064:	b292      	uxth	r2, r2
 8007066:	2a00      	cmp	r2, #0
 8007068:	d0d5      	beq.n	8007016 <HAL_SPI_TransmitReceive+0x15e>
 800706a:	2f01      	cmp	r7, #1
 800706c:	d1d3      	bne.n	8007016 <HAL_SPI_TransmitReceive+0x15e>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800706e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007070:	7812      	ldrb	r2, [r2, #0]
 8007072:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8007074:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007076:	3301      	adds	r3, #1
 8007078:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800707a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800707c:	3b01      	subs	r3, #1
 800707e:	b29b      	uxth	r3, r3
 8007080:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8007082:	4647      	mov	r7, r8
 8007084:	e7c7      	b.n	8007016 <HAL_SPI_TransmitReceive+0x15e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007086:	462a      	mov	r2, r5
 8007088:	4631      	mov	r1, r6
 800708a:	4620      	mov	r0, r4
 800708c:	f7ff fd6c 	bl	8006b68 <SPI_EndRxTxTransaction>
 8007090:	b948      	cbnz	r0, 80070a6 <HAL_SPI_TransmitReceive+0x1ee>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007092:	68a3      	ldr	r3, [r4, #8]
 8007094:	b963      	cbnz	r3, 80070b0 <HAL_SPI_TransmitReceive+0x1f8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007096:	9301      	str	r3, [sp, #4]
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	68da      	ldr	r2, [r3, #12]
 800709c:	9201      	str	r2, [sp, #4]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	9301      	str	r3, [sp, #4]
 80070a2:	9b01      	ldr	r3, [sp, #4]
 80070a4:	e004      	b.n	80070b0 <HAL_SPI_TransmitReceive+0x1f8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070a6:	2320      	movs	r3, #32
 80070a8:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80070aa:	2001      	movs	r0, #1
    goto error;
 80070ac:	e000      	b.n	80070b0 <HAL_SPI_TransmitReceive+0x1f8>
    errorcode = HAL_BUSY;
 80070ae:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80070b0:	2301      	movs	r3, #1
 80070b2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80070b6:	2300      	movs	r3, #0
 80070b8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80070bc:	b003      	add	sp, #12
 80070be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 80070c2:	2002      	movs	r0, #2
 80070c4:	e7f4      	b.n	80070b0 <HAL_SPI_TransmitReceive+0x1f8>
 80070c6:	2002      	movs	r0, #2
 80070c8:	e7f2      	b.n	80070b0 <HAL_SPI_TransmitReceive+0x1f8>
    errorcode = HAL_ERROR;
 80070ca:	2001      	movs	r0, #1
 80070cc:	e7f0      	b.n	80070b0 <HAL_SPI_TransmitReceive+0x1f8>
 80070ce:	2001      	movs	r0, #1
 80070d0:	e7ee      	b.n	80070b0 <HAL_SPI_TransmitReceive+0x1f8>
 80070d2:	2001      	movs	r0, #1
 80070d4:	e7ec      	b.n	80070b0 <HAL_SPI_TransmitReceive+0x1f8>
        errorcode = HAL_TIMEOUT;
 80070d6:	2003      	movs	r0, #3
 80070d8:	e7ea      	b.n	80070b0 <HAL_SPI_TransmitReceive+0x1f8>
        errorcode = HAL_TIMEOUT;
 80070da:	2003      	movs	r0, #3
 80070dc:	e7e8      	b.n	80070b0 <HAL_SPI_TransmitReceive+0x1f8>
  __HAL_LOCK(hspi);
 80070de:	2002      	movs	r0, #2
 80070e0:	e7ec      	b.n	80070bc <HAL_SPI_TransmitReceive+0x204>

080070e2 <HAL_SPI_Receive>:
{
 80070e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	4604      	mov	r4, r0
 80070ea:	4688      	mov	r8, r1
 80070ec:	4617      	mov	r7, r2
 80070ee:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80070f0:	6843      	ldr	r3, [r0, #4]
 80070f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070f6:	d045      	beq.n	8007184 <HAL_SPI_Receive+0xa2>
  __HAL_LOCK(hspi);
 80070f8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	f000 80a2 	beq.w	8007246 <HAL_SPI_Receive+0x164>
 8007102:	2301      	movs	r3, #1
 8007104:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8007108:	f7fc fd36 	bl	8003b78 <HAL_GetTick>
 800710c:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800710e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8007112:	b2c0      	uxtb	r0, r0
 8007114:	2801      	cmp	r0, #1
 8007116:	f040 8088 	bne.w	800722a <HAL_SPI_Receive+0x148>
  if ((pData == NULL) || (Size == 0U))
 800711a:	f1b8 0f00 	cmp.w	r8, #0
 800711e:	f000 8085 	beq.w	800722c <HAL_SPI_Receive+0x14a>
 8007122:	2f00      	cmp	r7, #0
 8007124:	f000 8082 	beq.w	800722c <HAL_SPI_Receive+0x14a>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007128:	2304      	movs	r3, #4
 800712a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800712e:	2300      	movs	r3, #0
 8007130:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007132:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007136:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007138:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800713a:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800713c:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800713e:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007140:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007142:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007144:	68a3      	ldr	r3, [r4, #8]
 8007146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800714a:	d027      	beq.n	800719c <HAL_SPI_Receive+0xba>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800714c:	6823      	ldr	r3, [r4, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007154:	d103      	bne.n	800715e <HAL_SPI_Receive+0x7c>
    __HAL_SPI_ENABLE(hspi);
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800715c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800715e:	68e3      	ldr	r3, [r4, #12]
 8007160:	b33b      	cbz	r3, 80071b2 <HAL_SPI_Receive+0xd0>
    while (hspi->RxXferCount > 0U)
 8007162:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007164:	b29b      	uxth	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d14f      	bne.n	800720a <HAL_SPI_Receive+0x128>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800716a:	4632      	mov	r2, r6
 800716c:	4629      	mov	r1, r5
 800716e:	4620      	mov	r0, r4
 8007170:	f7ff fd2e 	bl	8006bd0 <SPI_EndRxTransaction>
 8007174:	b108      	cbz	r0, 800717a <HAL_SPI_Receive+0x98>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007176:	2320      	movs	r3, #32
 8007178:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800717a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800717c:	3800      	subs	r0, #0
 800717e:	bf18      	it	ne
 8007180:	2001      	movne	r0, #1
error :
 8007182:	e053      	b.n	800722c <HAL_SPI_Receive+0x14a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007184:	6883      	ldr	r3, [r0, #8]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1b6      	bne.n	80070f8 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800718a:	2304      	movs	r3, #4
 800718c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007190:	9500      	str	r5, [sp, #0]
 8007192:	4613      	mov	r3, r2
 8007194:	460a      	mov	r2, r1
 8007196:	f7ff fe8f 	bl	8006eb8 <HAL_SPI_TransmitReceive>
 800719a:	e04d      	b.n	8007238 <HAL_SPI_Receive+0x156>
    __HAL_SPI_DISABLE(hspi);
 800719c:	6822      	ldr	r2, [r4, #0]
 800719e:	6813      	ldr	r3, [r2, #0]
 80071a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071a4:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80071a6:	6822      	ldr	r2, [r4, #0]
 80071a8:	6813      	ldr	r3, [r2, #0]
 80071aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071ae:	6013      	str	r3, [r2, #0]
 80071b0:	e7cc      	b.n	800714c <HAL_SPI_Receive+0x6a>
    while (hspi->RxXferCount > 0U)
 80071b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	b963      	cbnz	r3, 80071d2 <HAL_SPI_Receive+0xf0>
 80071b8:	e7d7      	b.n	800716a <HAL_SPI_Receive+0x88>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071ba:	f7fc fcdd 	bl	8003b78 <HAL_GetTick>
 80071be:	1b80      	subs	r0, r0, r6
 80071c0:	42a8      	cmp	r0, r5
 80071c2:	d302      	bcc.n	80071ca <HAL_SPI_Receive+0xe8>
 80071c4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80071c8:	d139      	bne.n	800723e <HAL_SPI_Receive+0x15c>
    while (hspi->RxXferCount > 0U)
 80071ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0cb      	beq.n	800716a <HAL_SPI_Receive+0x88>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	689a      	ldr	r2, [r3, #8]
 80071d6:	f012 0f01 	tst.w	r2, #1
 80071da:	d0ee      	beq.n	80071ba <HAL_SPI_Receive+0xd8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80071de:	7b1b      	ldrb	r3, [r3, #12]
 80071e0:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80071e4:	3301      	adds	r3, #1
 80071e6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80071e8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80071ea:	3a01      	subs	r2, #1
 80071ec:	b292      	uxth	r2, r2
 80071ee:	87e2      	strh	r2, [r4, #62]	; 0x3e
 80071f0:	e7eb      	b.n	80071ca <HAL_SPI_Receive+0xe8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071f2:	f7fc fcc1 	bl	8003b78 <HAL_GetTick>
 80071f6:	1b80      	subs	r0, r0, r6
 80071f8:	42a8      	cmp	r0, r5
 80071fa:	d302      	bcc.n	8007202 <HAL_SPI_Receive+0x120>
 80071fc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007200:	d11f      	bne.n	8007242 <HAL_SPI_Receive+0x160>
    while (hspi->RxXferCount > 0U)
 8007202:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007204:	b29b      	uxth	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d0af      	beq.n	800716a <HAL_SPI_Receive+0x88>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800720a:	6823      	ldr	r3, [r4, #0]
 800720c:	689a      	ldr	r2, [r3, #8]
 800720e:	f012 0f01 	tst.w	r2, #1
 8007212:	d0ee      	beq.n	80071f2 <HAL_SPI_Receive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007214:	68da      	ldr	r2, [r3, #12]
 8007216:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007218:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800721a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800721c:	3302      	adds	r3, #2
 800721e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8007220:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8007222:	3a01      	subs	r2, #1
 8007224:	b292      	uxth	r2, r2
 8007226:	87e2      	strh	r2, [r4, #62]	; 0x3e
 8007228:	e7eb      	b.n	8007202 <HAL_SPI_Receive+0x120>
    errorcode = HAL_BUSY;
 800722a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800722c:	2301      	movs	r3, #1
 800722e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007232:	2300      	movs	r3, #0
 8007234:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8007238:	b002      	add	sp, #8
 800723a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          errorcode = HAL_TIMEOUT;
 800723e:	2003      	movs	r0, #3
 8007240:	e7f4      	b.n	800722c <HAL_SPI_Receive+0x14a>
          errorcode = HAL_TIMEOUT;
 8007242:	2003      	movs	r0, #3
 8007244:	e7f2      	b.n	800722c <HAL_SPI_Receive+0x14a>
  __HAL_LOCK(hspi);
 8007246:	2002      	movs	r0, #2
 8007248:	e7f6      	b.n	8007238 <HAL_SPI_Receive+0x156>
	...

0800724c <HAL_SPI_Transmit_DMA>:
{
 800724c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 800724e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8007252:	2b01      	cmp	r3, #1
 8007254:	d061      	beq.n	800731a <HAL_SPI_Transmit_DMA+0xce>
 8007256:	4604      	mov	r4, r0
 8007258:	2301      	movs	r3, #1
 800725a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 800725e:	f890 5051 	ldrb.w	r5, [r0, #81]	; 0x51
 8007262:	b2ed      	uxtb	r5, r5
 8007264:	429d      	cmp	r5, r3
 8007266:	d152      	bne.n	800730e <HAL_SPI_Transmit_DMA+0xc2>
  if ((pData == NULL) || (Size == 0U))
 8007268:	2900      	cmp	r1, #0
 800726a:	d051      	beq.n	8007310 <HAL_SPI_Transmit_DMA+0xc4>
 800726c:	2a00      	cmp	r2, #0
 800726e:	d04f      	beq.n	8007310 <HAL_SPI_Transmit_DMA+0xc4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007270:	2303      	movs	r3, #3
 8007272:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007276:	2300      	movs	r3, #0
 8007278:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800727a:	6301      	str	r1, [r0, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800727c:	8682      	strh	r2, [r0, #52]	; 0x34
  hspi->TxXferCount = Size;
 800727e:	86c2      	strh	r2, [r0, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007280:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxISR       = NULL;
 8007282:	6443      	str	r3, [r0, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007284:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007286:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007288:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800728a:	6883      	ldr	r3, [r0, #8]
 800728c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007290:	d02a      	beq.n	80072e8 <HAL_SPI_Transmit_DMA+0x9c>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007292:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007294:	4a22      	ldr	r2, [pc, #136]	; (8007320 <HAL_SPI_Transmit_DMA+0xd4>)
 8007296:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007298:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800729a:	4a22      	ldr	r2, [pc, #136]	; (8007324 <HAL_SPI_Transmit_DMA+0xd8>)
 800729c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800729e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80072a0:	4a21      	ldr	r2, [pc, #132]	; (8007328 <HAL_SPI_Transmit_DMA+0xdc>)
 80072a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 80072a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80072a6:	2200      	movs	r2, #0
 80072a8:	651a      	str	r2, [r3, #80]	; 0x50
                                 hspi->TxXferCount))
 80072aa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80072ac:	6822      	ldr	r2, [r4, #0]
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	320c      	adds	r2, #12
 80072b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80072b4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80072b6:	f7fc ff91 	bl	80041dc <HAL_DMA_Start_IT>
 80072ba:	4601      	mov	r1, r0
 80072bc:	b9f8      	cbnz	r0, 80072fe <HAL_SPI_Transmit_DMA+0xb2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80072c6:	d103      	bne.n	80072d0 <HAL_SPI_Transmit_DMA+0x84>
    __HAL_SPI_ENABLE(hspi);
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072ce:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80072d0:	6822      	ldr	r2, [r4, #0]
 80072d2:	6853      	ldr	r3, [r2, #4]
 80072d4:	f043 0320 	orr.w	r3, r3, #32
 80072d8:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80072da:	6822      	ldr	r2, [r4, #0]
 80072dc:	6853      	ldr	r3, [r2, #4]
 80072de:	f043 0302 	orr.w	r3, r3, #2
 80072e2:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80072e4:	460d      	mov	r5, r1
 80072e6:	e013      	b.n	8007310 <HAL_SPI_Transmit_DMA+0xc4>
    __HAL_SPI_DISABLE(hspi);
 80072e8:	6802      	ldr	r2, [r0, #0]
 80072ea:	6813      	ldr	r3, [r2, #0]
 80072ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072f0:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80072f2:	6802      	ldr	r2, [r0, #0]
 80072f4:	6813      	ldr	r3, [r2, #0]
 80072f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072fa:	6013      	str	r3, [r2, #0]
 80072fc:	e7c9      	b.n	8007292 <HAL_SPI_Transmit_DMA+0x46>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80072fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007300:	f043 0310 	orr.w	r3, r3, #16
 8007304:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8007306:	2301      	movs	r3, #1
 8007308:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    goto error;
 800730c:	e000      	b.n	8007310 <HAL_SPI_Transmit_DMA+0xc4>
    errorcode = HAL_BUSY;
 800730e:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 8007310:	2300      	movs	r3, #0
 8007312:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8007316:	4628      	mov	r0, r5
 8007318:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hspi);
 800731a:	2502      	movs	r5, #2
 800731c:	e7fb      	b.n	8007316 <HAL_SPI_Transmit_DMA+0xca>
 800731e:	bf00      	nop
 8007320:	08007331 	.word	0x08007331
 8007324:	0800735f 	.word	0x0800735f
 8007328:	0800733d 	.word	0x0800733d

0800732c <HAL_SPI_TxCpltCallback>:
}
 800732c:	4770      	bx	lr

0800732e <HAL_SPI_TxHalfCpltCallback>:
}
 800732e:	4770      	bx	lr

08007330 <SPI_DMAHalfTransmitCplt>:
{
 8007330:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007332:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8007334:	f7ff fffb 	bl	800732e <HAL_SPI_TxHalfCpltCallback>
}
 8007338:	bd08      	pop	{r3, pc}

0800733a <HAL_SPI_ErrorCallback>:
}
 800733a:	4770      	bx	lr

0800733c <SPI_DMAError>:
{
 800733c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800733e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007340:	6802      	ldr	r2, [r0, #0]
 8007342:	6853      	ldr	r3, [r2, #4]
 8007344:	f023 0303 	bic.w	r3, r3, #3
 8007348:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800734a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800734c:	f043 0310 	orr.w	r3, r3, #16
 8007350:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007352:	2301      	movs	r3, #1
 8007354:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8007358:	f7ff ffef 	bl	800733a <HAL_SPI_ErrorCallback>
}
 800735c:	bd08      	pop	{r3, pc}

0800735e <SPI_DMATransmitCplt>:
{
 800735e:	b530      	push	{r4, r5, lr}
 8007360:	b083      	sub	sp, #12
 8007362:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007364:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8007366:	f7fc fc07 	bl	8003b78 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800736a:	682b      	ldr	r3, [r5, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007372:	d123      	bne.n	80073bc <SPI_DMATransmitCplt+0x5e>
 8007374:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007376:	6821      	ldr	r1, [r4, #0]
 8007378:	684b      	ldr	r3, [r1, #4]
 800737a:	f023 0320 	bic.w	r3, r3, #32
 800737e:	604b      	str	r3, [r1, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007380:	6821      	ldr	r1, [r4, #0]
 8007382:	684b      	ldr	r3, [r1, #4]
 8007384:	f023 0302 	bic.w	r3, r3, #2
 8007388:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800738a:	2164      	movs	r1, #100	; 0x64
 800738c:	4620      	mov	r0, r4
 800738e:	f7ff fbeb 	bl	8006b68 <SPI_EndRxTxTransaction>
 8007392:	b118      	cbz	r0, 800739c <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007394:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007396:	f043 0320 	orr.w	r3, r3, #32
 800739a:	6563      	str	r3, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800739c:	68a3      	ldr	r3, [r4, #8]
 800739e:	b933      	cbnz	r3, 80073ae <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073a0:	9301      	str	r3, [sp, #4]
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	9201      	str	r2, [sp, #4]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	9301      	str	r3, [sp, #4]
 80073ac:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80073b2:	2301      	movs	r3, #1
 80073b4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80073ba:	b923      	cbnz	r3, 80073c6 <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 80073bc:	4620      	mov	r0, r4
 80073be:	f7ff ffb5 	bl	800732c <HAL_SPI_TxCpltCallback>
}
 80073c2:	b003      	add	sp, #12
 80073c4:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 80073c6:	4620      	mov	r0, r4
 80073c8:	f7ff ffb7 	bl	800733a <HAL_SPI_ErrorCallback>
      return;
 80073cc:	e7f9      	b.n	80073c2 <SPI_DMATransmitCplt+0x64>
	...

080073d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073d0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073d2:	6a03      	ldr	r3, [r0, #32]
 80073d4:	f023 0301 	bic.w	r3, r3, #1
 80073d8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073da:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073dc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073de:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073e0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073e4:	680d      	ldr	r5, [r1, #0]
 80073e6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073e8:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073ec:	688d      	ldr	r5, [r1, #8]
 80073ee:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073f0:	4d10      	ldr	r5, [pc, #64]	; (8007434 <TIM_OC1_SetConfig+0x64>)
 80073f2:	42a8      	cmp	r0, r5
 80073f4:	d00a      	beq.n	800740c <TIM_OC1_SetConfig+0x3c>
 80073f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80073fa:	42a8      	cmp	r0, r5
 80073fc:	d112      	bne.n	8007424 <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073fe:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007402:	68cd      	ldr	r5, [r1, #12]
 8007404:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007406:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800740a:	e005      	b.n	8007418 <TIM_OC1_SetConfig+0x48>
    tmpccer &= ~TIM_CCER_CC1NP;
 800740c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007410:	68cd      	ldr	r5, [r1, #12]
 8007412:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8007414:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007418:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800741c:	694d      	ldr	r5, [r1, #20]
 800741e:	698e      	ldr	r6, [r1, #24]
 8007420:	4335      	orrs	r5, r6
 8007422:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007424:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007426:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007428:	684a      	ldr	r2, [r1, #4]
 800742a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800742c:	6203      	str	r3, [r0, #32]
}
 800742e:	bc70      	pop	{r4, r5, r6}
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	40010000 	.word	0x40010000

08007438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007438:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800743a:	6a03      	ldr	r3, [r0, #32]
 800743c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007440:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007442:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007444:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007446:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007448:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800744c:	680d      	ldr	r5, [r1, #0]
 800744e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007454:	688d      	ldr	r5, [r1, #8]
 8007456:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800745a:	4d12      	ldr	r5, [pc, #72]	; (80074a4 <TIM_OC3_SetConfig+0x6c>)
 800745c:	42a8      	cmp	r0, r5
 800745e:	d00b      	beq.n	8007478 <TIM_OC3_SetConfig+0x40>
 8007460:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007464:	42a8      	cmp	r0, r5
 8007466:	d115      	bne.n	8007494 <TIM_OC3_SetConfig+0x5c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007468:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800746c:	68cd      	ldr	r5, [r1, #12]
 800746e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007472:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007476:	e006      	b.n	8007486 <TIM_OC3_SetConfig+0x4e>
    tmpccer &= ~TIM_CCER_CC3NP;
 8007478:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800747c:	68cd      	ldr	r5, [r1, #12]
 800747e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007482:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007486:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800748a:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800748c:	698e      	ldr	r6, [r1, #24]
 800748e:	4335      	orrs	r5, r6
 8007490:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007494:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007496:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007498:	684a      	ldr	r2, [r1, #4]
 800749a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800749c:	6203      	str	r3, [r0, #32]
}
 800749e:	bc70      	pop	{r4, r5, r6}
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	40010000 	.word	0x40010000

080074a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074a8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074aa:	6a03      	ldr	r3, [r0, #32]
 80074ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074b0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074b2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074b4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074b6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074b8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074bc:	680d      	ldr	r5, [r1, #0]
 80074be:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074c6:	688d      	ldr	r5, [r1, #8]
 80074c8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074cc:	4d09      	ldr	r5, [pc, #36]	; (80074f4 <TIM_OC4_SetConfig+0x4c>)
 80074ce:	42a8      	cmp	r0, r5
 80074d0:	d003      	beq.n	80074da <TIM_OC4_SetConfig+0x32>
 80074d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80074d6:	42a8      	cmp	r0, r5
 80074d8:	d104      	bne.n	80074e4 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074da:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074de:	694d      	ldr	r5, [r1, #20]
 80074e0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074e4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074e6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074e8:	684a      	ldr	r2, [r1, #4]
 80074ea:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ec:	6203      	str	r3, [r0, #32]
}
 80074ee:	bc30      	pop	{r4, r5}
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	40010000 	.word	0x40010000

080074f8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80074f8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d137      	bne.n	8007572 <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 8007502:	2302      	movs	r3, #2
 8007504:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007508:	6802      	ldr	r2, [r0, #0]
 800750a:	68d3      	ldr	r3, [r2, #12]
 800750c:	f043 0301 	orr.w	r3, r3, #1
 8007510:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007512:	6803      	ldr	r3, [r0, #0]
 8007514:	4a19      	ldr	r2, [pc, #100]	; (800757c <HAL_TIM_Base_Start_IT+0x84>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d020      	beq.n	800755c <HAL_TIM_Base_Start_IT+0x64>
 800751a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800751e:	d01d      	beq.n	800755c <HAL_TIM_Base_Start_IT+0x64>
 8007520:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007524:	4293      	cmp	r3, r2
 8007526:	d019      	beq.n	800755c <HAL_TIM_Base_Start_IT+0x64>
 8007528:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800752c:	4293      	cmp	r3, r2
 800752e:	d015      	beq.n	800755c <HAL_TIM_Base_Start_IT+0x64>
 8007530:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007534:	4293      	cmp	r3, r2
 8007536:	d011      	beq.n	800755c <HAL_TIM_Base_Start_IT+0x64>
 8007538:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800753c:	4293      	cmp	r3, r2
 800753e:	d00d      	beq.n	800755c <HAL_TIM_Base_Start_IT+0x64>
 8007540:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8007544:	4293      	cmp	r3, r2
 8007546:	d009      	beq.n	800755c <HAL_TIM_Base_Start_IT+0x64>
 8007548:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800754c:	4293      	cmp	r3, r2
 800754e:	d005      	beq.n	800755c <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	f042 0201 	orr.w	r2, r2, #1
 8007556:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007558:	2000      	movs	r0, #0
 800755a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800755c:	689a      	ldr	r2, [r3, #8]
 800755e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007562:	2a06      	cmp	r2, #6
 8007564:	d007      	beq.n	8007576 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	f042 0201 	orr.w	r2, r2, #1
 800756c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800756e:	2000      	movs	r0, #0
 8007570:	4770      	bx	lr
    return HAL_ERROR;
 8007572:	2001      	movs	r0, #1
 8007574:	4770      	bx	lr
  return HAL_OK;
 8007576:	2000      	movs	r0, #0
}
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	40010000 	.word	0x40010000

08007580 <HAL_TIM_PWM_MspInit>:
}
 8007580:	4770      	bx	lr

08007582 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8007582:	4770      	bx	lr

08007584 <HAL_TIM_IC_CaptureCallback>:
}
 8007584:	4770      	bx	lr

08007586 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8007586:	4770      	bx	lr

08007588 <HAL_TIM_TriggerCallback>:
}
 8007588:	4770      	bx	lr

0800758a <HAL_TIM_IRQHandler>:
{
 800758a:	b510      	push	{r4, lr}
 800758c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800758e:	6803      	ldr	r3, [r0, #0]
 8007590:	691a      	ldr	r2, [r3, #16]
 8007592:	f012 0f02 	tst.w	r2, #2
 8007596:	d011      	beq.n	80075bc <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	f012 0f02 	tst.w	r2, #2
 800759e:	d00d      	beq.n	80075bc <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075a0:	f06f 0202 	mvn.w	r2, #2
 80075a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075a6:	2301      	movs	r3, #1
 80075a8:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075aa:	6803      	ldr	r3, [r0, #0]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	f013 0f03 	tst.w	r3, #3
 80075b2:	d070      	beq.n	8007696 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80075b4:	f7ff ffe6 	bl	8007584 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075b8:	2300      	movs	r3, #0
 80075ba:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	691a      	ldr	r2, [r3, #16]
 80075c0:	f012 0f04 	tst.w	r2, #4
 80075c4:	d012      	beq.n	80075ec <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075c6:	68da      	ldr	r2, [r3, #12]
 80075c8:	f012 0f04 	tst.w	r2, #4
 80075cc:	d00e      	beq.n	80075ec <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075ce:	f06f 0204 	mvn.w	r2, #4
 80075d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075d4:	2302      	movs	r3, #2
 80075d6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075d8:	6823      	ldr	r3, [r4, #0]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	f413 7f40 	tst.w	r3, #768	; 0x300
 80075e0:	d05f      	beq.n	80076a2 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80075e2:	4620      	mov	r0, r4
 80075e4:	f7ff ffce 	bl	8007584 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075e8:	2300      	movs	r3, #0
 80075ea:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075ec:	6823      	ldr	r3, [r4, #0]
 80075ee:	691a      	ldr	r2, [r3, #16]
 80075f0:	f012 0f08 	tst.w	r2, #8
 80075f4:	d012      	beq.n	800761c <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075f6:	68da      	ldr	r2, [r3, #12]
 80075f8:	f012 0f08 	tst.w	r2, #8
 80075fc:	d00e      	beq.n	800761c <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075fe:	f06f 0208 	mvn.w	r2, #8
 8007602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007604:	2304      	movs	r3, #4
 8007606:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007608:	6823      	ldr	r3, [r4, #0]
 800760a:	69db      	ldr	r3, [r3, #28]
 800760c:	f013 0f03 	tst.w	r3, #3
 8007610:	d04e      	beq.n	80076b0 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8007612:	4620      	mov	r0, r4
 8007614:	f7ff ffb6 	bl	8007584 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007618:	2300      	movs	r3, #0
 800761a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	691a      	ldr	r2, [r3, #16]
 8007620:	f012 0f10 	tst.w	r2, #16
 8007624:	d012      	beq.n	800764c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007626:	68da      	ldr	r2, [r3, #12]
 8007628:	f012 0f10 	tst.w	r2, #16
 800762c:	d00e      	beq.n	800764c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800762e:	f06f 0210 	mvn.w	r2, #16
 8007632:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007634:	2308      	movs	r3, #8
 8007636:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007638:	6823      	ldr	r3, [r4, #0]
 800763a:	69db      	ldr	r3, [r3, #28]
 800763c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007640:	d03d      	beq.n	80076be <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8007642:	4620      	mov	r0, r4
 8007644:	f7ff ff9e 	bl	8007584 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007648:	2300      	movs	r3, #0
 800764a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	691a      	ldr	r2, [r3, #16]
 8007650:	f012 0f01 	tst.w	r2, #1
 8007654:	d003      	beq.n	800765e <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	f012 0f01 	tst.w	r2, #1
 800765c:	d136      	bne.n	80076cc <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	691a      	ldr	r2, [r3, #16]
 8007662:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007666:	d003      	beq.n	8007670 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007668:	68da      	ldr	r2, [r3, #12]
 800766a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800766e:	d134      	bne.n	80076da <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	691a      	ldr	r2, [r3, #16]
 8007674:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007678:	d003      	beq.n	8007682 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007680:	d132      	bne.n	80076e8 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	691a      	ldr	r2, [r3, #16]
 8007686:	f012 0f20 	tst.w	r2, #32
 800768a:	d003      	beq.n	8007694 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	f012 0f20 	tst.w	r2, #32
 8007692:	d130      	bne.n	80076f6 <HAL_TIM_IRQHandler+0x16c>
}
 8007694:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007696:	f7ff ff74 	bl	8007582 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800769a:	4620      	mov	r0, r4
 800769c:	f7ff ff73 	bl	8007586 <HAL_TIM_PWM_PulseFinishedCallback>
 80076a0:	e78a      	b.n	80075b8 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076a2:	4620      	mov	r0, r4
 80076a4:	f7ff ff6d 	bl	8007582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076a8:	4620      	mov	r0, r4
 80076aa:	f7ff ff6c 	bl	8007586 <HAL_TIM_PWM_PulseFinishedCallback>
 80076ae:	e79b      	b.n	80075e8 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076b0:	4620      	mov	r0, r4
 80076b2:	f7ff ff66 	bl	8007582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076b6:	4620      	mov	r0, r4
 80076b8:	f7ff ff65 	bl	8007586 <HAL_TIM_PWM_PulseFinishedCallback>
 80076bc:	e7ac      	b.n	8007618 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076be:	4620      	mov	r0, r4
 80076c0:	f7ff ff5f 	bl	8007582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c4:	4620      	mov	r0, r4
 80076c6:	f7ff ff5e 	bl	8007586 <HAL_TIM_PWM_PulseFinishedCallback>
 80076ca:	e7bd      	b.n	8007648 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076cc:	f06f 0201 	mvn.w	r2, #1
 80076d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80076d2:	4620      	mov	r0, r4
 80076d4:	f7fb f94e 	bl	8002974 <HAL_TIM_PeriodElapsedCallback>
 80076d8:	e7c1      	b.n	800765e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076de:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80076e0:	4620      	mov	r0, r4
 80076e2:	f000 fb4e 	bl	8007d82 <HAL_TIMEx_BreakCallback>
 80076e6:	e7c3      	b.n	8007670 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80076ee:	4620      	mov	r0, r4
 80076f0:	f7ff ff4a 	bl	8007588 <HAL_TIM_TriggerCallback>
 80076f4:	e7c5      	b.n	8007682 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076f6:	f06f 0220 	mvn.w	r2, #32
 80076fa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80076fc:	4620      	mov	r0, r4
 80076fe:	f000 fb3f 	bl	8007d80 <HAL_TIMEx_CommutCallback>
}
 8007702:	e7c7      	b.n	8007694 <HAL_TIM_IRQHandler+0x10a>

08007704 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8007704:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007706:	4a40      	ldr	r2, [pc, #256]	; (8007808 <TIM_Base_SetConfig+0x104>)
 8007708:	4290      	cmp	r0, r2
 800770a:	d05d      	beq.n	80077c8 <TIM_Base_SetConfig+0xc4>
 800770c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007710:	d031      	beq.n	8007776 <TIM_Base_SetConfig+0x72>
 8007712:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007716:	4290      	cmp	r0, r2
 8007718:	d051      	beq.n	80077be <TIM_Base_SetConfig+0xba>
 800771a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800771e:	4290      	cmp	r0, r2
 8007720:	d06d      	beq.n	80077fe <TIM_Base_SetConfig+0xfa>
 8007722:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007726:	4290      	cmp	r0, r2
 8007728:	d064      	beq.n	80077f4 <TIM_Base_SetConfig+0xf0>
 800772a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800772e:	4290      	cmp	r0, r2
 8007730:	d033      	beq.n	800779a <TIM_Base_SetConfig+0x96>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007732:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8007736:	4290      	cmp	r0, r2
 8007738:	d021      	beq.n	800777e <TIM_Base_SetConfig+0x7a>
 800773a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800773e:	4290      	cmp	r0, r2
 8007740:	d01d      	beq.n	800777e <TIM_Base_SetConfig+0x7a>
 8007742:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007746:	4290      	cmp	r0, r2
 8007748:	d019      	beq.n	800777e <TIM_Base_SetConfig+0x7a>
 800774a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800774e:	4290      	cmp	r0, r2
 8007750:	d015      	beq.n	800777e <TIM_Base_SetConfig+0x7a>
 8007752:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007756:	4290      	cmp	r0, r2
 8007758:	d011      	beq.n	800777e <TIM_Base_SetConfig+0x7a>
 800775a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800775e:	4290      	cmp	r0, r2
 8007760:	d00d      	beq.n	800777e <TIM_Base_SetConfig+0x7a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007762:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007766:	694a      	ldr	r2, [r1, #20]
 8007768:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800776a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800776c:	688b      	ldr	r3, [r1, #8]
 800776e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007770:	680b      	ldr	r3, [r1, #0]
 8007772:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007774:	e03b      	b.n	80077ee <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800777a:	684a      	ldr	r2, [r1, #4]
 800777c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800777e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007782:	68ca      	ldr	r2, [r1, #12]
 8007784:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800778a:	694a      	ldr	r2, [r1, #20]
 800778c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800778e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007790:	688b      	ldr	r3, [r1, #8]
 8007792:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007794:	680b      	ldr	r3, [r1, #0]
 8007796:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007798:	e029      	b.n	80077ee <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800779a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800779e:	684a      	ldr	r2, [r1, #4]
 80077a0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80077a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077a6:	68ca      	ldr	r2, [r1, #12]
 80077a8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077ae:	694a      	ldr	r2, [r1, #20]
 80077b0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80077b2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077b4:	688b      	ldr	r3, [r1, #8]
 80077b6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80077b8:	680b      	ldr	r3, [r1, #0]
 80077ba:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077bc:	e015      	b.n	80077ea <TIM_Base_SetConfig+0xe6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80077c2:	684a      	ldr	r2, [r1, #4]
 80077c4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077c6:	e7da      	b.n	800777e <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80077cc:	684a      	ldr	r2, [r1, #4]
 80077ce:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80077d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077d4:	68ca      	ldr	r2, [r1, #12]
 80077d6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077dc:	694a      	ldr	r2, [r1, #20]
 80077de:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80077e0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077e2:	688b      	ldr	r3, [r1, #8]
 80077e4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80077e6:	680b      	ldr	r3, [r1, #0]
 80077e8:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80077ea:	690b      	ldr	r3, [r1, #16]
 80077ec:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80077ee:	2301      	movs	r3, #1
 80077f0:	6143      	str	r3, [r0, #20]
}
 80077f2:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80077f8:	684a      	ldr	r2, [r1, #4]
 80077fa:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077fc:	e7bf      	b.n	800777e <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007802:	684a      	ldr	r2, [r1, #4]
 8007804:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007806:	e7ba      	b.n	800777e <TIM_Base_SetConfig+0x7a>
 8007808:	40010000 	.word	0x40010000

0800780c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800780c:	b340      	cbz	r0, 8007860 <HAL_TIM_Base_Init+0x54>
{
 800780e:	b510      	push	{r4, lr}
 8007810:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007812:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007816:	b1f3      	cbz	r3, 8007856 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8007818:	2302      	movs	r3, #2
 800781a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800781e:	4621      	mov	r1, r4
 8007820:	f851 0b04 	ldr.w	r0, [r1], #4
 8007824:	f7ff ff6e 	bl	8007704 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007828:	2301      	movs	r3, #1
 800782a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800782e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007832:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007836:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800783a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800783e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007842:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007846:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800784a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800784e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007852:	2000      	movs	r0, #0
}
 8007854:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007856:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800785a:	f7fb ff7d 	bl	8003758 <HAL_TIM_Base_MspInit>
 800785e:	e7db      	b.n	8007818 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8007860:	2001      	movs	r0, #1
}
 8007862:	4770      	bx	lr

08007864 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007864:	b340      	cbz	r0, 80078b8 <HAL_TIM_PWM_Init+0x54>
{
 8007866:	b510      	push	{r4, lr}
 8007868:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800786a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800786e:	b1f3      	cbz	r3, 80078ae <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8007870:	2302      	movs	r3, #2
 8007872:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007876:	4621      	mov	r1, r4
 8007878:	f851 0b04 	ldr.w	r0, [r1], #4
 800787c:	f7ff ff42 	bl	8007704 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007880:	2301      	movs	r3, #1
 8007882:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007886:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800788a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800788e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007892:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007896:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800789a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800789e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80078a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80078a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80078aa:	2000      	movs	r0, #0
}
 80078ac:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80078ae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80078b2:	f7ff fe65 	bl	8007580 <HAL_TIM_PWM_MspInit>
 80078b6:	e7db      	b.n	8007870 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80078b8:	2001      	movs	r0, #1
}
 80078ba:	4770      	bx	lr

080078bc <TIM_OC2_SetConfig>:
{
 80078bc:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078be:	6a03      	ldr	r3, [r0, #32]
 80078c0:	f023 0310 	bic.w	r3, r3, #16
 80078c4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80078c6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80078c8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80078ca:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078cc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078d0:	680d      	ldr	r5, [r1, #0]
 80078d2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80078d6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078da:	688d      	ldr	r5, [r1, #8]
 80078dc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078e0:	4d11      	ldr	r5, [pc, #68]	; (8007928 <TIM_OC2_SetConfig+0x6c>)
 80078e2:	42a8      	cmp	r0, r5
 80078e4:	d00b      	beq.n	80078fe <TIM_OC2_SetConfig+0x42>
 80078e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80078ea:	42a8      	cmp	r0, r5
 80078ec:	d115      	bne.n	800791a <TIM_OC2_SetConfig+0x5e>
    tmpccer &= ~TIM_CCER_CC2NP;
 80078ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078f2:	68cd      	ldr	r5, [r1, #12]
 80078f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80078f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078fc:	e006      	b.n	800790c <TIM_OC2_SetConfig+0x50>
    tmpccer &= ~TIM_CCER_CC2NP;
 80078fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007902:	68cd      	ldr	r5, [r1, #12]
 8007904:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800790c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007910:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007912:	698e      	ldr	r6, [r1, #24]
 8007914:	4335      	orrs	r5, r6
 8007916:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800791a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800791c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800791e:	684a      	ldr	r2, [r1, #4]
 8007920:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007922:	6203      	str	r3, [r0, #32]
}
 8007924:	bc70      	pop	{r4, r5, r6}
 8007926:	4770      	bx	lr
 8007928:	40010000 	.word	0x40010000

0800792c <HAL_TIM_PWM_ConfigChannel>:
{
 800792c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800792e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007932:	2b01      	cmp	r3, #1
 8007934:	d060      	beq.n	80079f8 <HAL_TIM_PWM_ConfigChannel+0xcc>
 8007936:	4604      	mov	r4, r0
 8007938:	460d      	mov	r5, r1
 800793a:	2301      	movs	r3, #1
 800793c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8007940:	2a0c      	cmp	r2, #12
 8007942:	d81a      	bhi.n	800797a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8007944:	e8df f002 	tbb	[pc, r2]
 8007948:	19191907 	.word	0x19191907
 800794c:	1919191d 	.word	0x1919191d
 8007950:	19191931 	.word	0x19191931
 8007954:	44          	.byte	0x44
 8007955:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007956:	6800      	ldr	r0, [r0, #0]
 8007958:	f7ff fd3a 	bl	80073d0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800795c:	6822      	ldr	r2, [r4, #0]
 800795e:	6993      	ldr	r3, [r2, #24]
 8007960:	f043 0308 	orr.w	r3, r3, #8
 8007964:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007966:	6822      	ldr	r2, [r4, #0]
 8007968:	6993      	ldr	r3, [r2, #24]
 800796a:	f023 0304 	bic.w	r3, r3, #4
 800796e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007970:	6822      	ldr	r2, [r4, #0]
 8007972:	6993      	ldr	r3, [r2, #24]
 8007974:	6929      	ldr	r1, [r5, #16]
 8007976:	430b      	orrs	r3, r1
 8007978:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 800797a:	2000      	movs	r0, #0
 800797c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007980:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007982:	6800      	ldr	r0, [r0, #0]
 8007984:	f7ff ff9a 	bl	80078bc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007988:	6822      	ldr	r2, [r4, #0]
 800798a:	6993      	ldr	r3, [r2, #24]
 800798c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007990:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007992:	6822      	ldr	r2, [r4, #0]
 8007994:	6993      	ldr	r3, [r2, #24]
 8007996:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800799a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800799c:	6822      	ldr	r2, [r4, #0]
 800799e:	6993      	ldr	r3, [r2, #24]
 80079a0:	6929      	ldr	r1, [r5, #16]
 80079a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80079a6:	6193      	str	r3, [r2, #24]
      break;
 80079a8:	e7e7      	b.n	800797a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079aa:	6800      	ldr	r0, [r0, #0]
 80079ac:	f7ff fd44 	bl	8007438 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079b0:	6822      	ldr	r2, [r4, #0]
 80079b2:	69d3      	ldr	r3, [r2, #28]
 80079b4:	f043 0308 	orr.w	r3, r3, #8
 80079b8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079ba:	6822      	ldr	r2, [r4, #0]
 80079bc:	69d3      	ldr	r3, [r2, #28]
 80079be:	f023 0304 	bic.w	r3, r3, #4
 80079c2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079c4:	6822      	ldr	r2, [r4, #0]
 80079c6:	69d3      	ldr	r3, [r2, #28]
 80079c8:	6929      	ldr	r1, [r5, #16]
 80079ca:	430b      	orrs	r3, r1
 80079cc:	61d3      	str	r3, [r2, #28]
      break;
 80079ce:	e7d4      	b.n	800797a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079d0:	6800      	ldr	r0, [r0, #0]
 80079d2:	f7ff fd69 	bl	80074a8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079d6:	6822      	ldr	r2, [r4, #0]
 80079d8:	69d3      	ldr	r3, [r2, #28]
 80079da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80079de:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079e0:	6822      	ldr	r2, [r4, #0]
 80079e2:	69d3      	ldr	r3, [r2, #28]
 80079e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079e8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079ea:	6822      	ldr	r2, [r4, #0]
 80079ec:	69d3      	ldr	r3, [r2, #28]
 80079ee:	6929      	ldr	r1, [r5, #16]
 80079f0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80079f4:	61d3      	str	r3, [r2, #28]
      break;
 80079f6:	e7c0      	b.n	800797a <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 80079f8:	2002      	movs	r0, #2
 80079fa:	e7c1      	b.n	8007980 <HAL_TIM_PWM_ConfigChannel+0x54>

080079fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079fc:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079fe:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a00:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a04:	430a      	orrs	r2, r1
 8007a06:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8007a0a:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a0c:	6082      	str	r2, [r0, #8]
}
 8007a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007a14:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	f000 809c 	beq.w	8007b56 <HAL_TIM_ConfigClockSource+0x142>
{
 8007a1e:	b570      	push	{r4, r5, r6, lr}
 8007a20:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007a22:	2301      	movs	r3, #1
 8007a24:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007a28:	2302      	movs	r3, #2
 8007a2a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007a2e:	6802      	ldr	r2, [r0, #0]
 8007a30:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007a3a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8007a3c:	680b      	ldr	r3, [r1, #0]
 8007a3e:	2b60      	cmp	r3, #96	; 0x60
 8007a40:	d054      	beq.n	8007aec <HAL_TIM_ConfigClockSource+0xd8>
 8007a42:	d836      	bhi.n	8007ab2 <HAL_TIM_ConfigClockSource+0x9e>
 8007a44:	2b40      	cmp	r3, #64	; 0x40
 8007a46:	d06c      	beq.n	8007b22 <HAL_TIM_ConfigClockSource+0x10e>
 8007a48:	d91b      	bls.n	8007a82 <HAL_TIM_ConfigClockSource+0x6e>
 8007a4a:	2b50      	cmp	r3, #80	; 0x50
 8007a4c:	d12a      	bne.n	8007aa4 <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a4e:	6803      	ldr	r3, [r0, #0]
 8007a50:	6848      	ldr	r0, [r1, #4]
 8007a52:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8007a54:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a56:	6a1d      	ldr	r5, [r3, #32]
 8007a58:	f025 0501 	bic.w	r5, r5, #1
 8007a5c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a5e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a60:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a64:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a68:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007a6c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8007a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a70:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a72:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8007a74:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a7a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8007a7e:	6093      	str	r3, [r2, #8]
}
 8007a80:	e010      	b.n	8007aa4 <HAL_TIM_ConfigClockSource+0x90>
  switch (sClockSourceConfig->ClockSource)
 8007a82:	2b20      	cmp	r3, #32
 8007a84:	d002      	beq.n	8007a8c <HAL_TIM_ConfigClockSource+0x78>
 8007a86:	d90a      	bls.n	8007a9e <HAL_TIM_ConfigClockSource+0x8a>
 8007a88:	2b30      	cmp	r3, #48	; 0x30
 8007a8a:	d10b      	bne.n	8007aa4 <HAL_TIM_ConfigClockSource+0x90>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a8c:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8007a8e:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a94:	4313      	orrs	r3, r2
 8007a96:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8007a9a:	608b      	str	r3, [r1, #8]
}
 8007a9c:	e002      	b.n	8007aa4 <HAL_TIM_ConfigClockSource+0x90>
  switch (sClockSourceConfig->ClockSource)
 8007a9e:	f033 0210 	bics.w	r2, r3, #16
 8007aa2:	d0f3      	beq.n	8007a8c <HAL_TIM_ConfigClockSource+0x78>
  htim->State = HAL_TIM_STATE_READY;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007aaa:	2000      	movs	r0, #0
 8007aac:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007ab0:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8007ab2:	2b70      	cmp	r3, #112	; 0x70
 8007ab4:	d00e      	beq.n	8007ad4 <HAL_TIM_ConfigClockSource+0xc0>
 8007ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aba:	d1f3      	bne.n	8007aa4 <HAL_TIM_ConfigClockSource+0x90>
      TIM_ETR_SetConfig(htim->Instance,
 8007abc:	68cb      	ldr	r3, [r1, #12]
 8007abe:	684a      	ldr	r2, [r1, #4]
 8007ac0:	6889      	ldr	r1, [r1, #8]
 8007ac2:	6800      	ldr	r0, [r0, #0]
 8007ac4:	f7ff ff9a 	bl	80079fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ac8:	6822      	ldr	r2, [r4, #0]
 8007aca:	6893      	ldr	r3, [r2, #8]
 8007acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ad0:	6093      	str	r3, [r2, #8]
      break;
 8007ad2:	e7e7      	b.n	8007aa4 <HAL_TIM_ConfigClockSource+0x90>
      TIM_ETR_SetConfig(htim->Instance,
 8007ad4:	68cb      	ldr	r3, [r1, #12]
 8007ad6:	684a      	ldr	r2, [r1, #4]
 8007ad8:	6889      	ldr	r1, [r1, #8]
 8007ada:	6800      	ldr	r0, [r0, #0]
 8007adc:	f7ff ff8e 	bl	80079fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007ae0:	6822      	ldr	r2, [r4, #0]
 8007ae2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ae4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007ae8:	6093      	str	r3, [r2, #8]
      break;
 8007aea:	e7db      	b.n	8007aa4 <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007aec:	6803      	ldr	r3, [r0, #0]
 8007aee:	684d      	ldr	r5, [r1, #4]
 8007af0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007af2:	6a18      	ldr	r0, [r3, #32]
 8007af4:	f020 0010 	bic.w	r0, r0, #16
 8007af8:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007afa:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8007afc:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007afe:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b02:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b0a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8007b0e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b10:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b12:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8007b14:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b1a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8007b1e:	6093      	str	r3, [r2, #8]
}
 8007b20:	e7c0      	b.n	8007aa4 <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b22:	6803      	ldr	r3, [r0, #0]
 8007b24:	6848      	ldr	r0, [r1, #4]
 8007b26:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8007b28:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b2a:	6a1d      	ldr	r5, [r3, #32]
 8007b2c:	f025 0501 	bic.w	r5, r5, #1
 8007b30:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b32:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b34:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b38:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b3c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007b40:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8007b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b44:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b46:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8007b48:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b4e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8007b52:	6093      	str	r3, [r2, #8]
}
 8007b54:	e7a6      	b.n	8007aa4 <HAL_TIM_ConfigClockSource+0x90>
  __HAL_LOCK(htim);
 8007b56:	2002      	movs	r0, #2
}
 8007b58:	4770      	bx	lr

08007b5a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b5a:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b5c:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b60:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b62:	2401      	movs	r4, #1
 8007b64:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8007b66:	ea23 0304 	bic.w	r3, r3, r4
 8007b6a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b6c:	6a03      	ldr	r3, [r0, #32]
 8007b6e:	408a      	lsls	r2, r1
 8007b70:	431a      	orrs	r2, r3
 8007b72:	6202      	str	r2, [r0, #32]
}
 8007b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b78:	4770      	bx	lr
	...

08007b7c <HAL_TIM_PWM_Start>:
{
 8007b7c:	b510      	push	{r4, lr}
 8007b7e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b80:	460b      	mov	r3, r1
 8007b82:	bba1      	cbnz	r1, 8007bee <HAL_TIM_PWM_Start+0x72>
 8007b84:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8007b88:	b2d2      	uxtb	r2, r2
 8007b8a:	2a01      	cmp	r2, #1
 8007b8c:	d161      	bne.n	8007c52 <HAL_TIM_PWM_Start+0xd6>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b8e:	2202      	movs	r2, #2
 8007b90:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b94:	2201      	movs	r2, #1
 8007b96:	4619      	mov	r1, r3
 8007b98:	6820      	ldr	r0, [r4, #0]
 8007b9a:	f7ff ffde 	bl	8007b5a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b9e:	6823      	ldr	r3, [r4, #0]
 8007ba0:	4a31      	ldr	r2, [pc, #196]	; (8007c68 <HAL_TIM_PWM_Start+0xec>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d042      	beq.n	8007c2c <HAL_TIM_PWM_Start+0xb0>
 8007ba6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d03e      	beq.n	8007c2c <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bb2:	d043      	beq.n	8007c3c <HAL_TIM_PWM_Start+0xc0>
 8007bb4:	4a2d      	ldr	r2, [pc, #180]	; (8007c6c <HAL_TIM_PWM_Start+0xf0>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d040      	beq.n	8007c3c <HAL_TIM_PWM_Start+0xc0>
 8007bba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d03c      	beq.n	8007c3c <HAL_TIM_PWM_Start+0xc0>
 8007bc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d038      	beq.n	8007c3c <HAL_TIM_PWM_Start+0xc0>
 8007bca:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d034      	beq.n	8007c3c <HAL_TIM_PWM_Start+0xc0>
 8007bd2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d030      	beq.n	8007c3c <HAL_TIM_PWM_Start+0xc0>
 8007bda:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d02c      	beq.n	8007c3c <HAL_TIM_PWM_Start+0xc0>
    __HAL_TIM_ENABLE(htim);
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	f042 0201 	orr.w	r2, r2, #1
 8007be8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007bea:	2000      	movs	r0, #0
 8007bec:	e030      	b.n	8007c50 <HAL_TIM_PWM_Start+0xd4>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007bee:	2904      	cmp	r1, #4
 8007bf0:	d00a      	beq.n	8007c08 <HAL_TIM_PWM_Start+0x8c>
 8007bf2:	2908      	cmp	r1, #8
 8007bf4:	d011      	beq.n	8007c1a <HAL_TIM_PWM_Start+0x9e>
 8007bf6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8007bfa:	b2d2      	uxtb	r2, r2
 8007bfc:	2a01      	cmp	r2, #1
 8007bfe:	d12e      	bne.n	8007c5e <HAL_TIM_PWM_Start+0xe2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c00:	2202      	movs	r2, #2
 8007c02:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
 8007c06:	e7c5      	b.n	8007b94 <HAL_TIM_PWM_Start+0x18>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c08:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 8007c0c:	b2d2      	uxtb	r2, r2
 8007c0e:	2a01      	cmp	r2, #1
 8007c10:	d121      	bne.n	8007c56 <HAL_TIM_PWM_Start+0xda>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c12:	2202      	movs	r2, #2
 8007c14:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
 8007c18:	e7bc      	b.n	8007b94 <HAL_TIM_PWM_Start+0x18>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c1a:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8007c1e:	b2d2      	uxtb	r2, r2
 8007c20:	2a01      	cmp	r2, #1
 8007c22:	d11a      	bne.n	8007c5a <HAL_TIM_PWM_Start+0xde>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c24:	2202      	movs	r2, #2
 8007c26:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 8007c2a:	e7b3      	b.n	8007b94 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 8007c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c32:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c34:	6823      	ldr	r3, [r4, #0]
 8007c36:	4a0c      	ldr	r2, [pc, #48]	; (8007c68 <HAL_TIM_PWM_Start+0xec>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d1b8      	bne.n	8007bae <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c3c:	689a      	ldr	r2, [r3, #8]
 8007c3e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c42:	2a06      	cmp	r2, #6
 8007c44:	d00d      	beq.n	8007c62 <HAL_TIM_PWM_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	f042 0201 	orr.w	r2, r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007c4e:	2000      	movs	r0, #0
}
 8007c50:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007c52:	2001      	movs	r0, #1
 8007c54:	e7fc      	b.n	8007c50 <HAL_TIM_PWM_Start+0xd4>
 8007c56:	2001      	movs	r0, #1
 8007c58:	e7fa      	b.n	8007c50 <HAL_TIM_PWM_Start+0xd4>
 8007c5a:	2001      	movs	r0, #1
 8007c5c:	e7f8      	b.n	8007c50 <HAL_TIM_PWM_Start+0xd4>
 8007c5e:	2001      	movs	r0, #1
 8007c60:	e7f6      	b.n	8007c50 <HAL_TIM_PWM_Start+0xd4>
  return HAL_OK;
 8007c62:	2000      	movs	r0, #0
 8007c64:	e7f4      	b.n	8007c50 <HAL_TIM_PWM_Start+0xd4>
 8007c66:	bf00      	nop
 8007c68:	40010000 	.word	0x40010000
 8007c6c:	40000400 	.word	0x40000400

08007c70 <HAL_TIM_PWM_Stop>:
{
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	4604      	mov	r4, r0
 8007c74:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007c76:	2200      	movs	r2, #0
 8007c78:	6800      	ldr	r0, [r0, #0]
 8007c7a:	f7ff ff6e 	bl	8007b5a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	4a1c      	ldr	r2, [pc, #112]	; (8007cf4 <HAL_TIM_PWM_Stop+0x84>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d018      	beq.n	8007cb8 <HAL_TIM_PWM_Stop+0x48>
 8007c86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d014      	beq.n	8007cb8 <HAL_TIM_PWM_Stop+0x48>
  __HAL_TIM_DISABLE(htim);
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	6a19      	ldr	r1, [r3, #32]
 8007c92:	f241 1211 	movw	r2, #4369	; 0x1111
 8007c96:	4211      	tst	r1, r2
 8007c98:	d108      	bne.n	8007cac <HAL_TIM_PWM_Stop+0x3c>
 8007c9a:	6a19      	ldr	r1, [r3, #32]
 8007c9c:	f240 4244 	movw	r2, #1092	; 0x444
 8007ca0:	4211      	tst	r1, r2
 8007ca2:	d103      	bne.n	8007cac <HAL_TIM_PWM_Stop+0x3c>
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	f022 0201 	bic.w	r2, r2, #1
 8007caa:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007cac:	b99d      	cbnz	r5, 8007cd6 <HAL_TIM_PWM_Stop+0x66>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8007cb8:	6a19      	ldr	r1, [r3, #32]
 8007cba:	f241 1211 	movw	r2, #4369	; 0x1111
 8007cbe:	4211      	tst	r1, r2
 8007cc0:	d1e5      	bne.n	8007c8e <HAL_TIM_PWM_Stop+0x1e>
 8007cc2:	6a19      	ldr	r1, [r3, #32]
 8007cc4:	f240 4244 	movw	r2, #1092	; 0x444
 8007cc8:	4211      	tst	r1, r2
 8007cca:	d1e0      	bne.n	8007c8e <HAL_TIM_PWM_Stop+0x1e>
 8007ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007cd2:	645a      	str	r2, [r3, #68]	; 0x44
 8007cd4:	e7db      	b.n	8007c8e <HAL_TIM_PWM_Stop+0x1e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007cd6:	2d04      	cmp	r5, #4
 8007cd8:	d008      	beq.n	8007cec <HAL_TIM_PWM_Stop+0x7c>
 8007cda:	2d08      	cmp	r5, #8
 8007cdc:	f04f 0301 	mov.w	r3, #1
 8007ce0:	bf0c      	ite	eq
 8007ce2:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 8007ce6:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 8007cea:	e7e3      	b.n	8007cb4 <HAL_TIM_PWM_Stop+0x44>
 8007cec:	2301      	movs	r3, #1
 8007cee:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007cf2:	e7df      	b.n	8007cb4 <HAL_TIM_PWM_Stop+0x44>
 8007cf4:	40010000 	.word	0x40010000

08007cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cf8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d03b      	beq.n	8007d78 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 8007d00:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8007d02:	2301      	movs	r3, #1
 8007d04:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d08:	2302      	movs	r3, #2
 8007d0a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d0e:	6804      	ldr	r4, [r0, #0]
 8007d10:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d12:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d18:	680d      	ldr	r5, [r1, #0]
 8007d1a:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d1c:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d1e:	6803      	ldr	r3, [r0, #0]
 8007d20:	4c16      	ldr	r4, [pc, #88]	; (8007d7c <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8007d22:	42a3      	cmp	r3, r4
 8007d24:	d01a      	beq.n	8007d5c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d2a:	d017      	beq.n	8007d5c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d2c:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8007d30:	42a3      	cmp	r3, r4
 8007d32:	d013      	beq.n	8007d5c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d34:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007d38:	42a3      	cmp	r3, r4
 8007d3a:	d00f      	beq.n	8007d5c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d3c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007d40:	42a3      	cmp	r3, r4
 8007d42:	d00b      	beq.n	8007d5c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d44:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8007d48:	42a3      	cmp	r3, r4
 8007d4a:	d007      	beq.n	8007d5c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d4c:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8007d50:	42a3      	cmp	r3, r4
 8007d52:	d003      	beq.n	8007d5c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d54:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8007d58:	42a3      	cmp	r3, r4
 8007d5a:	d104      	bne.n	8007d66 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d60:	6849      	ldr	r1, [r1, #4]
 8007d62:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d66:	2301      	movs	r3, #1
 8007d68:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8007d72:	4618      	mov	r0, r3
}
 8007d74:	bc30      	pop	{r4, r5}
 8007d76:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007d78:	2002      	movs	r0, #2
}
 8007d7a:	4770      	bx	lr
 8007d7c:	40010000 	.word	0x40010000

08007d80 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d80:	4770      	bx	lr

08007d82 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d82:	4770      	bx	lr

08007d84 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d84:	6802      	ldr	r2, [r0, #0]
 8007d86:	68d3      	ldr	r3, [r2, #12]
 8007d88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d8c:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d8e:	6802      	ldr	r2, [r0, #0]
 8007d90:	6953      	ldr	r3, [r2, #20]
 8007d92:	f023 0301 	bic.w	r3, r3, #1
 8007d96:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d98:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d005      	beq.n	8007daa <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d9e:	2320      	movs	r3, #32
 8007da0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007da4:	2300      	movs	r3, #0
 8007da6:	6303      	str	r3, [r0, #48]	; 0x30
}
 8007da8:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007daa:	6802      	ldr	r2, [r0, #0]
 8007dac:	68d3      	ldr	r3, [r2, #12]
 8007dae:	f023 0310 	bic.w	r3, r3, #16
 8007db2:	60d3      	str	r3, [r2, #12]
 8007db4:	e7f3      	b.n	8007d9e <UART_EndRxTransfer+0x1a>
	...

08007db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007db8:	b570      	push	{r4, r5, r6, lr}
 8007dba:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dbc:	6802      	ldr	r2, [r0, #0]
 8007dbe:	6913      	ldr	r3, [r2, #16]
 8007dc0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007dc4:	68c1      	ldr	r1, [r0, #12]
 8007dc6:	430b      	orrs	r3, r1
 8007dc8:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8007dca:	6801      	ldr	r1, [r0, #0]
 8007dcc:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007dce:	6883      	ldr	r3, [r0, #8]
 8007dd0:	6900      	ldr	r0, [r0, #16]
 8007dd2:	4303      	orrs	r3, r0
 8007dd4:	6960      	ldr	r0, [r4, #20]
 8007dd6:	4303      	orrs	r3, r0
 8007dd8:	69e0      	ldr	r0, [r4, #28]
 8007dda:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8007ddc:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8007de0:	f022 020c 	bic.w	r2, r2, #12
 8007de4:	4313      	orrs	r3, r2
 8007de6:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007de8:	6822      	ldr	r2, [r4, #0]
 8007dea:	6953      	ldr	r3, [r2, #20]
 8007dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007df0:	69a1      	ldr	r1, [r4, #24]
 8007df2:	430b      	orrs	r3, r1
 8007df4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	4a31      	ldr	r2, [pc, #196]	; (8007ec0 <UART_SetConfig+0x108>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d006      	beq.n	8007e0c <UART_SetConfig+0x54>
 8007dfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d002      	beq.n	8007e0c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e06:	f7fd feff 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 8007e0a:	e001      	b.n	8007e10 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e0c:	f7fd ff0c 	bl	8005c28 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e10:	69e3      	ldr	r3, [r4, #28]
 8007e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e16:	d025      	beq.n	8007e64 <UART_SetConfig+0xac>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e18:	2600      	movs	r6, #0
 8007e1a:	1805      	adds	r5, r0, r0
 8007e1c:	eb46 0106 	adc.w	r1, r6, r6
 8007e20:	182d      	adds	r5, r5, r0
 8007e22:	eb46 0101 	adc.w	r1, r6, r1
 8007e26:	00cb      	lsls	r3, r1, #3
 8007e28:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8007e2c:	00ea      	lsls	r2, r5, #3
 8007e2e:	4615      	mov	r5, r2
 8007e30:	4619      	mov	r1, r3
 8007e32:	6863      	ldr	r3, [r4, #4]
 8007e34:	009a      	lsls	r2, r3, #2
 8007e36:	0f9b      	lsrs	r3, r3, #30
 8007e38:	1828      	adds	r0, r5, r0
 8007e3a:	eb46 0101 	adc.w	r1, r6, r1
 8007e3e:	f7f8 ff83 	bl	8000d48 <__aeabi_uldivmod>
 8007e42:	6824      	ldr	r4, [r4, #0]
 8007e44:	491f      	ldr	r1, [pc, #124]	; (8007ec4 <UART_SetConfig+0x10c>)
 8007e46:	fba1 3200 	umull	r3, r2, r1, r0
 8007e4a:	0952      	lsrs	r2, r2, #5
 8007e4c:	2364      	movs	r3, #100	; 0x64
 8007e4e:	fb03 0312 	mls	r3, r3, r2, r0
 8007e52:	011b      	lsls	r3, r3, #4
 8007e54:	3332      	adds	r3, #50	; 0x32
 8007e56:	fba1 1303 	umull	r1, r3, r1, r3
 8007e5a:	0112      	lsls	r2, r2, #4
 8007e5c:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 8007e60:	60a3      	str	r3, [r4, #8]
  }
}
 8007e62:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e64:	2600      	movs	r6, #0
 8007e66:	1805      	adds	r5, r0, r0
 8007e68:	eb46 0106 	adc.w	r1, r6, r6
 8007e6c:	182d      	adds	r5, r5, r0
 8007e6e:	eb46 0101 	adc.w	r1, r6, r1
 8007e72:	00cb      	lsls	r3, r1, #3
 8007e74:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8007e78:	00ea      	lsls	r2, r5, #3
 8007e7a:	4615      	mov	r5, r2
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6862      	ldr	r2, [r4, #4]
 8007e80:	4633      	mov	r3, r6
 8007e82:	1892      	adds	r2, r2, r2
 8007e84:	eb46 0303 	adc.w	r3, r6, r3
 8007e88:	1828      	adds	r0, r5, r0
 8007e8a:	eb46 0101 	adc.w	r1, r6, r1
 8007e8e:	f7f8 ff5b 	bl	8000d48 <__aeabi_uldivmod>
 8007e92:	4d0c      	ldr	r5, [pc, #48]	; (8007ec4 <UART_SetConfig+0x10c>)
 8007e94:	fba5 3200 	umull	r3, r2, r5, r0
 8007e98:	0951      	lsrs	r1, r2, #5
 8007e9a:	2364      	movs	r3, #100	; 0x64
 8007e9c:	fb03 0311 	mls	r3, r3, r1, r0
 8007ea0:	00db      	lsls	r3, r3, #3
 8007ea2:	3332      	adds	r3, #50	; 0x32
 8007ea4:	fba5 2303 	umull	r2, r3, r5, r3
 8007ea8:	6820      	ldr	r0, [r4, #0]
 8007eaa:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8007eae:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007eb2:	091b      	lsrs	r3, r3, #4
 8007eb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007eb8:	4413      	add	r3, r2
 8007eba:	6083      	str	r3, [r0, #8]
 8007ebc:	e7d1      	b.n	8007e62 <UART_SetConfig+0xaa>
 8007ebe:	bf00      	nop
 8007ec0:	40011000 	.word	0x40011000
 8007ec4:	51eb851f 	.word	0x51eb851f

08007ec8 <HAL_UART_Init>:
  if (huart == NULL)
 8007ec8:	b358      	cbz	r0, 8007f22 <HAL_UART_Init+0x5a>
{
 8007eca:	b510      	push	{r4, lr}
 8007ecc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007ece:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007ed2:	b30b      	cbz	r3, 8007f18 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8007ed4:	2324      	movs	r3, #36	; 0x24
 8007ed6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8007eda:	6822      	ldr	r2, [r4, #0]
 8007edc:	68d3      	ldr	r3, [r2, #12]
 8007ede:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ee2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f7ff ff67 	bl	8007db8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eea:	6822      	ldr	r2, [r4, #0]
 8007eec:	6913      	ldr	r3, [r2, #16]
 8007eee:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007ef2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ef4:	6822      	ldr	r2, [r4, #0]
 8007ef6:	6953      	ldr	r3, [r2, #20]
 8007ef8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007efc:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8007efe:	6822      	ldr	r2, [r4, #0]
 8007f00:	68d3      	ldr	r3, [r2, #12]
 8007f02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007f06:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f08:	2000      	movs	r0, #0
 8007f0a:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f0c:	2320      	movs	r3, #32
 8007f0e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f12:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8007f16:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007f18:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8007f1c:	f7fb fd76 	bl	8003a0c <HAL_UART_MspInit>
 8007f20:	e7d8      	b.n	8007ed4 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8007f22:	2001      	movs	r0, #1
}
 8007f24:	4770      	bx	lr

08007f26 <HAL_UART_TxCpltCallback>:
}
 8007f26:	4770      	bx	lr

08007f28 <HAL_UART_ErrorCallback>:
}
 8007f28:	4770      	bx	lr

08007f2a <UART_DMAAbortOnError>:
{
 8007f2a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f2c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007f32:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8007f34:	f7ff fff8 	bl	8007f28 <HAL_UART_ErrorCallback>
}
 8007f38:	bd08      	pop	{r3, pc}

08007f3a <HAL_UARTEx_RxEventCallback>:
}
 8007f3a:	4770      	bx	lr

08007f3c <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f3c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2b22      	cmp	r3, #34	; 0x22
 8007f44:	d126      	bne.n	8007f94 <UART_Receive_IT+0x58>
{
 8007f46:	b510      	push	{r4, lr}
 8007f48:	4604      	mov	r4, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f4a:	6883      	ldr	r3, [r0, #8]
 8007f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f50:	d006      	beq.n	8007f60 <UART_Receive_IT+0x24>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f52:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f54:	b183      	cbz	r3, 8007f78 <UART_Receive_IT+0x3c>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f5e:	e021      	b.n	8007fa4 <UART_Receive_IT+0x68>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f60:	6903      	ldr	r3, [r0, #16]
 8007f62:	b9db      	cbnz	r3, 8007f9c <UART_Receive_IT+0x60>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f64:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f66:	6803      	ldr	r3, [r0, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f6e:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8007f70:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007f72:	3302      	adds	r3, #2
 8007f74:	6283      	str	r3, [r0, #40]	; 0x28
 8007f76:	e019      	b.n	8007fac <UART_Receive_IT+0x70>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f78:	6923      	ldr	r3, [r4, #16]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1eb      	bne.n	8007f56 <UART_Receive_IT+0x1a>
 8007f7e:	e00e      	b.n	8007f9e <UART_Receive_IT+0x62>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f80:	6822      	ldr	r2, [r4, #0]
 8007f82:	68d3      	ldr	r3, [r2, #12]
 8007f84:	f023 0310 	bic.w	r3, r3, #16
 8007f88:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f8a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	f7ff ffd4 	bl	8007f3a <HAL_UARTEx_RxEventCallback>
 8007f92:	e029      	b.n	8007fe8 <UART_Receive_IT+0xac>
    return HAL_BUSY;
 8007f94:	2002      	movs	r0, #2
}
 8007f96:	4770      	bx	lr
    return HAL_OK;
 8007f98:	2000      	movs	r0, #0
}
 8007f9a:	bd10      	pop	{r4, pc}
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f9c:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8007fa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007fa8:	3301      	adds	r3, #1
 8007faa:	62a3      	str	r3, [r4, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8007fac:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1ef      	bne.n	8007f98 <UART_Receive_IT+0x5c>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007fb8:	6822      	ldr	r2, [r4, #0]
 8007fba:	68d3      	ldr	r3, [r2, #12]
 8007fbc:	f023 0320 	bic.w	r3, r3, #32
 8007fc0:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007fc2:	6822      	ldr	r2, [r4, #0]
 8007fc4:	68d3      	ldr	r3, [r2, #12]
 8007fc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fca:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007fcc:	6822      	ldr	r2, [r4, #0]
 8007fce:	6953      	ldr	r3, [r2, #20]
 8007fd0:	f023 0301 	bic.w	r3, r3, #1
 8007fd4:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007fd6:	2320      	movs	r3, #32
 8007fd8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fdc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d0ce      	beq.n	8007f80 <UART_Receive_IT+0x44>
       HAL_UART_RxCpltCallback(huart);
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f7fa fcbe 	bl	8002964 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fe8:	2000      	movs	r0, #0
 8007fea:	6320      	str	r0, [r4, #48]	; 0x30
      return HAL_OK;
 8007fec:	e7d5      	b.n	8007f9a <UART_Receive_IT+0x5e>
	...

08007ff0 <HAL_UART_IRQHandler>:
{
 8007ff0:	b530      	push	{r4, r5, lr}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ff6:	6802      	ldr	r2, [r0, #0]
 8007ff8:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ffa:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ffc:	6950      	ldr	r0, [r2, #20]
  if (errorflags == RESET)
 8007ffe:	f013 0f0f 	tst.w	r3, #15
 8008002:	d109      	bne.n	8008018 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008004:	f013 0f20 	tst.w	r3, #32
 8008008:	d00c      	beq.n	8008024 <HAL_UART_IRQHandler+0x34>
 800800a:	f011 0f20 	tst.w	r1, #32
 800800e:	d009      	beq.n	8008024 <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 8008010:	4620      	mov	r0, r4
 8008012:	f7ff ff93 	bl	8007f3c <UART_Receive_IT>
      return;
 8008016:	e016      	b.n	8008046 <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008018:	f000 0001 	and.w	r0, r0, #1
 800801c:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8008020:	4305      	orrs	r5, r0
 8008022:	d112      	bne.n	800804a <HAL_UART_IRQHandler+0x5a>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008024:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008026:	2801      	cmp	r0, #1
 8008028:	d078      	beq.n	800811c <HAL_UART_IRQHandler+0x12c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800802a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800802e:	d003      	beq.n	8008038 <HAL_UART_IRQHandler+0x48>
 8008030:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008034:	f040 80db 	bne.w	80081ee <HAL_UART_IRQHandler+0x1fe>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008038:	f013 0f40 	tst.w	r3, #64	; 0x40
 800803c:	d003      	beq.n	8008046 <HAL_UART_IRQHandler+0x56>
 800803e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8008042:	f040 8101 	bne.w	8008248 <HAL_UART_IRQHandler+0x258>
}
 8008046:	b003      	add	sp, #12
 8008048:	bd30      	pop	{r4, r5, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800804a:	f013 0f01 	tst.w	r3, #1
 800804e:	d006      	beq.n	800805e <HAL_UART_IRQHandler+0x6e>
 8008050:	f411 7f80 	tst.w	r1, #256	; 0x100
 8008054:	d003      	beq.n	800805e <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008056:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008058:	f042 0201 	orr.w	r2, r2, #1
 800805c:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800805e:	f013 0f04 	tst.w	r3, #4
 8008062:	d00b      	beq.n	800807c <HAL_UART_IRQHandler+0x8c>
 8008064:	b190      	cbz	r0, 800808c <HAL_UART_IRQHandler+0x9c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008066:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008068:	f042 0202 	orr.w	r2, r2, #2
 800806c:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800806e:	f013 0f02 	tst.w	r3, #2
 8008072:	d107      	bne.n	8008084 <HAL_UART_IRQHandler+0x94>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008074:	f013 0f08 	tst.w	r3, #8
 8008078:	d10f      	bne.n	800809a <HAL_UART_IRQHandler+0xaa>
 800807a:	e012      	b.n	80080a2 <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800807c:	f013 0f02 	tst.w	r3, #2
 8008080:	d004      	beq.n	800808c <HAL_UART_IRQHandler+0x9c>
 8008082:	b118      	cbz	r0, 800808c <HAL_UART_IRQHandler+0x9c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008084:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008086:	f042 0204 	orr.w	r2, r2, #4
 800808a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800808c:	f013 0f08 	tst.w	r3, #8
 8008090:	d007      	beq.n	80080a2 <HAL_UART_IRQHandler+0xb2>
 8008092:	f001 0220 	and.w	r2, r1, #32
 8008096:	4302      	orrs	r2, r0
 8008098:	d003      	beq.n	80080a2 <HAL_UART_IRQHandler+0xb2>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800809a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800809c:	f042 0208 	orr.w	r2, r2, #8
 80080a0:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80080a4:	2a00      	cmp	r2, #0
 80080a6:	d0ce      	beq.n	8008046 <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080a8:	f013 0f20 	tst.w	r3, #32
 80080ac:	d002      	beq.n	80080b4 <HAL_UART_IRQHandler+0xc4>
 80080ae:	f011 0f20 	tst.w	r1, #32
 80080b2:	d10e      	bne.n	80080d2 <HAL_UART_IRQHandler+0xe2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80080b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080ba:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80080be:	f003 0308 	and.w	r3, r3, #8
 80080c2:	4313      	orrs	r3, r2
 80080c4:	d109      	bne.n	80080da <HAL_UART_IRQHandler+0xea>
        HAL_UART_ErrorCallback(huart);
 80080c6:	4620      	mov	r0, r4
 80080c8:	f7ff ff2e 	bl	8007f28 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080cc:	2300      	movs	r3, #0
 80080ce:	6423      	str	r3, [r4, #64]	; 0x40
 80080d0:	e7b9      	b.n	8008046 <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 80080d2:	4620      	mov	r0, r4
 80080d4:	f7ff ff32 	bl	8007f3c <UART_Receive_IT>
 80080d8:	e7ec      	b.n	80080b4 <HAL_UART_IRQHandler+0xc4>
        UART_EndRxTransfer(huart);
 80080da:	4620      	mov	r0, r4
 80080dc:	f7ff fe52 	bl	8007d84 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e0:	6823      	ldr	r3, [r4, #0]
 80080e2:	695a      	ldr	r2, [r3, #20]
 80080e4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80080e8:	d014      	beq.n	8008114 <HAL_UART_IRQHandler+0x124>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ea:	695a      	ldr	r2, [r3, #20]
 80080ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080f0:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80080f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80080f4:	b153      	cbz	r3, 800810c <HAL_UART_IRQHandler+0x11c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080f6:	4a5a      	ldr	r2, [pc, #360]	; (8008260 <HAL_UART_IRQHandler+0x270>)
 80080f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080fa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80080fc:	f7fc f8fd 	bl	80042fa <HAL_DMA_Abort_IT>
 8008100:	2800      	cmp	r0, #0
 8008102:	d0a0      	beq.n	8008046 <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008104:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008106:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008108:	4798      	blx	r3
 800810a:	e79c      	b.n	8008046 <HAL_UART_IRQHandler+0x56>
            HAL_UART_ErrorCallback(huart);
 800810c:	4620      	mov	r0, r4
 800810e:	f7ff ff0b 	bl	8007f28 <HAL_UART_ErrorCallback>
 8008112:	e798      	b.n	8008046 <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 8008114:	4620      	mov	r0, r4
 8008116:	f7ff ff07 	bl	8007f28 <HAL_UART_ErrorCallback>
 800811a:	e794      	b.n	8008046 <HAL_UART_IRQHandler+0x56>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800811c:	f013 0f10 	tst.w	r3, #16
 8008120:	d083      	beq.n	800802a <HAL_UART_IRQHandler+0x3a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008122:	f011 0f10 	tst.w	r1, #16
 8008126:	d080      	beq.n	800802a <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008128:	2300      	movs	r3, #0
 800812a:	9301      	str	r3, [sp, #4]
 800812c:	6813      	ldr	r3, [r2, #0]
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	6853      	ldr	r3, [r2, #4]
 8008132:	9301      	str	r3, [sp, #4]
 8008134:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008136:	6953      	ldr	r3, [r2, #20]
 8008138:	f013 0f40 	tst.w	r3, #64	; 0x40
 800813c:	d033      	beq.n	80081a6 <HAL_UART_IRQHandler+0x1b6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800813e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008140:	680b      	ldr	r3, [r1, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8008146:	2b00      	cmp	r3, #0
 8008148:	f43f af7d 	beq.w	8008046 <HAL_UART_IRQHandler+0x56>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800814c:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 800814e:	4298      	cmp	r0, r3
 8008150:	f67f af79 	bls.w	8008046 <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8008154:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008156:	69cb      	ldr	r3, [r1, #28]
 8008158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800815c:	d107      	bne.n	800816e <HAL_UART_IRQHandler+0x17e>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800815e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8008160:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8008162:	1ac9      	subs	r1, r1, r3
 8008164:	b289      	uxth	r1, r1
 8008166:	4620      	mov	r0, r4
 8008168:	f7ff fee7 	bl	8007f3a <HAL_UARTEx_RxEventCallback>
 800816c:	e76b      	b.n	8008046 <HAL_UART_IRQHandler+0x56>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800816e:	68d3      	ldr	r3, [r2, #12]
 8008170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008174:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008176:	6822      	ldr	r2, [r4, #0]
 8008178:	6953      	ldr	r3, [r2, #20]
 800817a:	f023 0301 	bic.w	r3, r3, #1
 800817e:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008180:	6822      	ldr	r2, [r4, #0]
 8008182:	6953      	ldr	r3, [r2, #20]
 8008184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008188:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800818a:	2320      	movs	r3, #32
 800818c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008190:	2300      	movs	r3, #0
 8008192:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008194:	6822      	ldr	r2, [r4, #0]
 8008196:	68d3      	ldr	r3, [r2, #12]
 8008198:	f023 0310 	bic.w	r3, r3, #16
 800819c:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800819e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80081a0:	f7fc f861 	bl	8004266 <HAL_DMA_Abort>
 80081a4:	e7db      	b.n	800815e <HAL_UART_IRQHandler+0x16e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081a6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80081a8:	b299      	uxth	r1, r3
      if (  (huart->RxXferCount > 0U)
 80081aa:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f43f af49 	beq.w	8008046 <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081b4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80081b6:	1a59      	subs	r1, r3, r1
 80081b8:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 80081ba:	2900      	cmp	r1, #0
 80081bc:	f43f af43 	beq.w	8008046 <HAL_UART_IRQHandler+0x56>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081c0:	68d3      	ldr	r3, [r2, #12]
 80081c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081c6:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081c8:	6822      	ldr	r2, [r4, #0]
 80081ca:	6953      	ldr	r3, [r2, #20]
 80081cc:	f023 0301 	bic.w	r3, r3, #1
 80081d0:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 80081d2:	2320      	movs	r3, #32
 80081d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081d8:	2300      	movs	r3, #0
 80081da:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081dc:	6822      	ldr	r2, [r4, #0]
 80081de:	68d3      	ldr	r3, [r2, #12]
 80081e0:	f023 0310 	bic.w	r3, r3, #16
 80081e4:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081e6:	4620      	mov	r0, r4
 80081e8:	f7ff fea7 	bl	8007f3a <HAL_UARTEx_RxEventCallback>
 80081ec:	e72b      	b.n	8008046 <HAL_UART_IRQHandler+0x56>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081ee:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b21      	cmp	r3, #33	; 0x21
 80081f6:	f47f af26 	bne.w	8008046 <HAL_UART_IRQHandler+0x56>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081fa:	68a3      	ldr	r3, [r4, #8]
 80081fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008200:	d016      	beq.n	8008230 <HAL_UART_IRQHandler+0x240>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008202:	6a23      	ldr	r3, [r4, #32]
 8008204:	1c59      	adds	r1, r3, #1
 8008206:	6221      	str	r1, [r4, #32]
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 800820c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800820e:	3b01      	subs	r3, #1
 8008210:	b29b      	uxth	r3, r3
 8008212:	84e3      	strh	r3, [r4, #38]	; 0x26
 8008214:	2b00      	cmp	r3, #0
 8008216:	f47f af16 	bne.w	8008046 <HAL_UART_IRQHandler+0x56>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800821a:	6822      	ldr	r2, [r4, #0]
 800821c:	68d3      	ldr	r3, [r2, #12]
 800821e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008222:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008224:	6822      	ldr	r2, [r4, #0]
 8008226:	68d3      	ldr	r3, [r2, #12]
 8008228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800822c:	60d3      	str	r3, [r2, #12]
 800822e:	e70a      	b.n	8008046 <HAL_UART_IRQHandler+0x56>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008230:	6923      	ldr	r3, [r4, #16]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1e5      	bne.n	8008202 <HAL_UART_IRQHandler+0x212>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008236:	6a23      	ldr	r3, [r4, #32]
 8008238:	881b      	ldrh	r3, [r3, #0]
 800823a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800823e:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8008240:	6a23      	ldr	r3, [r4, #32]
 8008242:	3302      	adds	r3, #2
 8008244:	6223      	str	r3, [r4, #32]
 8008246:	e7e1      	b.n	800820c <HAL_UART_IRQHandler+0x21c>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008248:	68d3      	ldr	r3, [r2, #12]
 800824a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800824e:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8008250:	2320      	movs	r3, #32
 8008252:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8008256:	4620      	mov	r0, r4
 8008258:	f7ff fe65 	bl	8007f26 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 800825c:	e6f3      	b.n	8008046 <HAL_UART_IRQHandler+0x56>
 800825e:	bf00      	nop
 8008260:	08007f2b 	.word	0x08007f2b

08008264 <UART_Start_Receive_IT>:
{
 8008264:	4603      	mov	r3, r0
  huart->pRxBuffPtr = pData;
 8008266:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8008268:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 800826a:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800826c:	2000      	movs	r0, #0
 800826e:	6418      	str	r0, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008270:	2222      	movs	r2, #34	; 0x22
 8008272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UNLOCK(huart);
 8008276:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800827a:	6819      	ldr	r1, [r3, #0]
 800827c:	68ca      	ldr	r2, [r1, #12]
 800827e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008282:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008284:	6819      	ldr	r1, [r3, #0]
 8008286:	694a      	ldr	r2, [r1, #20]
 8008288:	f042 0201 	orr.w	r2, r2, #1
 800828c:	614a      	str	r2, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	68d3      	ldr	r3, [r2, #12]
 8008292:	f043 0320 	orr.w	r3, r3, #32
 8008296:	60d3      	str	r3, [r2, #12]
}
 8008298:	4770      	bx	lr

0800829a <HAL_UART_Receive_IT>:
{
 800829a:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800829c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b20      	cmp	r3, #32
 80082a4:	d10d      	bne.n	80082c2 <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 80082a6:	b171      	cbz	r1, 80082c6 <HAL_UART_Receive_IT+0x2c>
 80082a8:	b17a      	cbz	r2, 80082ca <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 80082aa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d00d      	beq.n	80082ce <HAL_UART_Receive_IT+0x34>
 80082b2:	2301      	movs	r3, #1
 80082b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b8:	2300      	movs	r3, #0
 80082ba:	6303      	str	r3, [r0, #48]	; 0x30
    return(UART_Start_Receive_IT(huart, pData, Size));
 80082bc:	f7ff ffd2 	bl	8008264 <UART_Start_Receive_IT>
 80082c0:	e000      	b.n	80082c4 <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 80082c2:	2002      	movs	r0, #2
}
 80082c4:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 80082c6:	2001      	movs	r0, #1
 80082c8:	e7fc      	b.n	80082c4 <HAL_UART_Receive_IT+0x2a>
 80082ca:	2001      	movs	r0, #1
 80082cc:	e7fa      	b.n	80082c4 <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 80082ce:	2002      	movs	r0, #2
 80082d0:	e7f8      	b.n	80082c4 <HAL_UART_Receive_IT+0x2a>
	...

080082d4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80082d4:	4601      	mov	r1, r0
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80082d6:	4b16      	ldr	r3, [pc, #88]	; (8008330 <SDMMC_GetCmdResp2+0x5c>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a16      	ldr	r2, [pc, #88]	; (8008334 <SDMMC_GetCmdResp2+0x60>)
 80082dc:	fba2 2303 	umull	r2, r3, r2, r3
 80082e0:	0a5b      	lsrs	r3, r3, #9
 80082e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80082e6:	fb02 f203 	mul.w	r2, r2, r3
  
  do
  {
    if (count-- == 0U)
 80082ea:	1e53      	subs	r3, r2, #1
 80082ec:	b932      	cbnz	r2, 80082fc <SDMMC_GetCmdResp2+0x28>
    {
      return SDMMC_ERROR_TIMEOUT;
 80082ee:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80082f2:	4770      	bx	lr
    if (count-- == 0U)
 80082f4:	3b01      	subs	r3, #1
 80082f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082fa:	d015      	beq.n	8008328 <SDMMC_GetCmdResp2+0x54>
    }
    sta_reg = SDIOx->STA;
 80082fc:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80082fe:	f012 0f45 	tst.w	r2, #69	; 0x45
 8008302:	d0f7      	beq.n	80082f4 <SDMMC_GetCmdResp2+0x20>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008304:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008308:	d1f4      	bne.n	80082f4 <SDMMC_GetCmdResp2+0x20>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800830a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800830c:	f013 0f04 	tst.w	r3, #4
 8008310:	d107      	bne.n	8008322 <SDMMC_GetCmdResp2+0x4e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008312:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8008314:	f010 0001 	ands.w	r0, r0, #1
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008318:	bf14      	ite	ne
 800831a:	2301      	movne	r3, #1
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800831c:	23c5      	moveq	r3, #197	; 0xc5
 800831e:	638b      	str	r3, [r1, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008320:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008322:	2004      	movs	r0, #4
 8008324:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008326:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8008328:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	20000014 	.word	0x20000014
 8008334:	10624dd3 	.word	0x10624dd3

08008338 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008338:	4601      	mov	r1, r0
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800833a:	4b13      	ldr	r3, [pc, #76]	; (8008388 <SDMMC_GetCmdResp3+0x50>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a13      	ldr	r2, [pc, #76]	; (800838c <SDMMC_GetCmdResp3+0x54>)
 8008340:	fba2 2303 	umull	r2, r3, r2, r3
 8008344:	0a5b      	lsrs	r3, r3, #9
 8008346:	f241 3288 	movw	r2, #5000	; 0x1388
 800834a:	fb02 f203 	mul.w	r2, r2, r3
  
  do
  {
    if (count-- == 0U)
 800834e:	1e53      	subs	r3, r2, #1
 8008350:	b932      	cbnz	r2, 8008360 <SDMMC_GetCmdResp3+0x28>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008352:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008356:	4770      	bx	lr
    if (count-- == 0U)
 8008358:	3b01      	subs	r3, #1
 800835a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835e:	d00f      	beq.n	8008380 <SDMMC_GetCmdResp3+0x48>
    }
    sta_reg = SDIOx->STA;
 8008360:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008362:	f012 0f45 	tst.w	r2, #69	; 0x45
 8008366:	d0f7      	beq.n	8008358 <SDMMC_GetCmdResp3+0x20>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008368:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800836c:	d1f4      	bne.n	8008358 <SDMMC_GetCmdResp3+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800836e:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8008370:	f010 0004 	ands.w	r0, r0, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008374:	bf19      	ittee	ne
 8008376:	2004      	movne	r0, #4
 8008378:	6388      	strne	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800837a:	23c5      	moveq	r3, #197	; 0xc5
 800837c:	638b      	streq	r3, [r1, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800837e:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8008380:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	20000014 	.word	0x20000014
 800838c:	10624dd3 	.word	0x10624dd3

08008390 <SDMMC_GetCmdResp1>:
{
 8008390:	b410      	push	{r4}
 8008392:	4604      	mov	r4, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008394:	4b50      	ldr	r3, [pc, #320]	; (80084d8 <SDMMC_GetCmdResp1+0x148>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4850      	ldr	r0, [pc, #320]	; (80084dc <SDMMC_GetCmdResp1+0x14c>)
 800839a:	fba0 0303 	umull	r0, r3, r0, r3
 800839e:	0a5b      	lsrs	r3, r3, #9
 80083a0:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 80083a4:	1e53      	subs	r3, r2, #1
 80083a6:	b932      	cbnz	r2, 80083b6 <SDMMC_GetCmdResp1+0x26>
      return SDMMC_ERROR_TIMEOUT;
 80083a8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80083ac:	e060      	b.n	8008470 <SDMMC_GetCmdResp1+0xe0>
    if (count-- == 0U)
 80083ae:	3b01      	subs	r3, #1
 80083b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b4:	d05a      	beq.n	800846c <SDMMC_GetCmdResp1+0xdc>
    sta_reg = SDIOx->STA;
 80083b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80083b8:	f012 0f45 	tst.w	r2, #69	; 0x45
 80083bc:	d0f7      	beq.n	80083ae <SDMMC_GetCmdResp1+0x1e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80083be:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80083c2:	d1f4      	bne.n	80083ae <SDMMC_GetCmdResp1+0x1e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80083c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083c6:	f013 0f04 	tst.w	r3, #4
 80083ca:	d106      	bne.n	80083da <SDMMC_GetCmdResp1+0x4a>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80083cc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80083ce:	f010 0001 	ands.w	r0, r0, #1
 80083d2:	d005      	beq.n	80083e0 <SDMMC_GetCmdResp1+0x50>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80083d4:	2301      	movs	r3, #1
 80083d6:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083d8:	e04a      	b.n	8008470 <SDMMC_GetCmdResp1+0xe0>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80083da:	2004      	movs	r0, #4
 80083dc:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80083de:	e047      	b.n	8008470 <SDMMC_GetCmdResp1+0xe0>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80083e0:	23c5      	movs	r3, #197	; 0xc5
 80083e2:	63a3      	str	r3, [r4, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 80083e4:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	4299      	cmp	r1, r3
 80083ea:	d001      	beq.n	80083f0 <SDMMC_GetCmdResp1+0x60>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083ec:	2001      	movs	r0, #1
 80083ee:	e03f      	b.n	8008470 <SDMMC_GetCmdResp1+0xe0>
  return (*(__IO uint32_t *) tmp);
 80083f0:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80083f2:	483b      	ldr	r0, [pc, #236]	; (80084e0 <SDMMC_GetCmdResp1+0x150>)
 80083f4:	4018      	ands	r0, r3
 80083f6:	b3d8      	cbz	r0, 8008470 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	db3c      	blt.n	8008476 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80083fc:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008400:	d13c      	bne.n	800847c <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008402:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8008406:	d13b      	bne.n	8008480 <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008408:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800840c:	d13a      	bne.n	8008484 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800840e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8008412:	d13a      	bne.n	800848a <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008414:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8008418:	d13a      	bne.n	8008490 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800841a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800841e:	d13a      	bne.n	8008496 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008420:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8008424:	d13a      	bne.n	800849c <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008426:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800842a:	d13a      	bne.n	80084a2 <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800842c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8008430:	d13a      	bne.n	80084a8 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008432:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008436:	d13a      	bne.n	80084ae <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008438:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800843c:	d13a      	bne.n	80084b4 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800843e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008442:	d13a      	bne.n	80084ba <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008444:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008448:	d13a      	bne.n	80084c0 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800844a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800844e:	d13a      	bne.n	80084c6 <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008450:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008454:	d13a      	bne.n	80084cc <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008456:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800845a:	d13a      	bne.n	80084d2 <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800845c:	f013 0f08 	tst.w	r3, #8
 8008460:	bf14      	ite	ne
 8008462:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8008466:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800846a:	e001      	b.n	8008470 <SDMMC_GetCmdResp1+0xe0>
      return SDMMC_ERROR_TIMEOUT;
 800846c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8008470:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008474:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008476:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800847a:	e7f9      	b.n	8008470 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800847c:	2040      	movs	r0, #64	; 0x40
 800847e:	e7f7      	b.n	8008470 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008480:	2080      	movs	r0, #128	; 0x80
 8008482:	e7f5      	b.n	8008470 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008484:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008488:	e7f2      	b.n	8008470 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800848a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800848e:	e7ef      	b.n	8008470 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008490:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008494:	e7ec      	b.n	8008470 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008496:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800849a:	e7e9      	b.n	8008470 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800849c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80084a0:	e7e6      	b.n	8008470 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80084a2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80084a6:	e7e3      	b.n	8008470 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80084a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80084ac:	e7e0      	b.n	8008470 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CC_ERR;
 80084ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80084b2:	e7dd      	b.n	8008470 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80084b4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80084b8:	e7da      	b.n	8008470 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80084ba:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80084be:	e7d7      	b.n	8008470 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80084c0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80084c4:	e7d4      	b.n	8008470 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80084c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80084ca:	e7d1      	b.n	8008470 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80084cc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80084d0:	e7ce      	b.n	8008470 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_RESET;
 80084d2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80084d6:	e7cb      	b.n	8008470 <SDMMC_GetCmdResp1+0xe0>
 80084d8:	20000014 	.word	0x20000014
 80084dc:	10624dd3 	.word	0x10624dd3
 80084e0:	fdffe008 	.word	0xfdffe008

080084e4 <SDIO_Init>:
{
 80084e4:	b084      	sub	sp, #16
 80084e6:	b410      	push	{r4}
 80084e8:	ac02      	add	r4, sp, #8
 80084ea:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80084ee:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 80084f0:	460b      	mov	r3, r1
 80084f2:	9903      	ldr	r1, [sp, #12]
 80084f4:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 80084f6:	9904      	ldr	r1, [sp, #16]
 80084f8:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 80084fa:	9905      	ldr	r1, [sp, #20]
 80084fc:	430b      	orrs	r3, r1
             Init.BusWide             |\
 80084fe:	9906      	ldr	r1, [sp, #24]
 8008500:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8008502:	9907      	ldr	r1, [sp, #28]
 8008504:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008506:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 800850a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800850e:	4313      	orrs	r3, r2
 8008510:	6043      	str	r3, [r0, #4]
}
 8008512:	2000      	movs	r0, #0
 8008514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008518:	b004      	add	sp, #16
 800851a:	4770      	bx	lr

0800851c <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 800851c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8008520:	4770      	bx	lr

08008522 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8008522:	680b      	ldr	r3, [r1, #0]
 8008524:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8008528:	2000      	movs	r0, #0
 800852a:	4770      	bx	lr

0800852c <SDIO_PowerState_ON>:
{  
 800852c:	b508      	push	{r3, lr}
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800852e:	2303      	movs	r3, #3
 8008530:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 8008532:	2002      	movs	r0, #2
 8008534:	f7fb fb26 	bl	8003b84 <HAL_Delay>
}
 8008538:	2000      	movs	r0, #0
 800853a:	bd08      	pop	{r3, pc}

0800853c <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800853c:	6800      	ldr	r0, [r0, #0]
}
 800853e:	f000 0003 	and.w	r0, r0, #3
 8008542:	4770      	bx	lr

08008544 <SDIO_SendCommand>:
{
 8008544:	b410      	push	{r4}
  SDIOx->ARG = Command->Argument;
 8008546:	680b      	ldr	r3, [r1, #0]
 8008548:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800854a:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800854c:	684b      	ldr	r3, [r1, #4]
 800854e:	688c      	ldr	r4, [r1, #8]
 8008550:	4323      	orrs	r3, r4
                       Command->Response         |\
 8008552:	68cc      	ldr	r4, [r1, #12]
 8008554:	4323      	orrs	r3, r4
                       Command->WaitForInterrupt |\
 8008556:	6909      	ldr	r1, [r1, #16]
 8008558:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800855a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800855e:	f022 020f 	bic.w	r2, r2, #15
 8008562:	4313      	orrs	r3, r2
 8008564:	60c3      	str	r3, [r0, #12]
}
 8008566:	2000      	movs	r0, #0
 8008568:	f85d 4b04 	ldr.w	r4, [sp], #4
 800856c:	4770      	bx	lr

0800856e <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800856e:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8008570:	5840      	ldr	r0, [r0, r1]
}  
 8008572:	4770      	bx	lr

08008574 <SDIO_ConfigData>:
{
 8008574:	b410      	push	{r4}
  SDIOx->DTIMER = Data->DataTimeOut;
 8008576:	680b      	ldr	r3, [r1, #0]
 8008578:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 800857a:	684b      	ldr	r3, [r1, #4]
 800857c:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800857e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008580:	688b      	ldr	r3, [r1, #8]
 8008582:	68cc      	ldr	r4, [r1, #12]
 8008584:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8008586:	690c      	ldr	r4, [r1, #16]
 8008588:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 800858a:	6949      	ldr	r1, [r1, #20]
 800858c:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800858e:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8008592:	4313      	orrs	r3, r2
 8008594:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8008596:	2000      	movs	r0, #0
 8008598:	f85d 4b04 	ldr.w	r4, [sp], #4
 800859c:	4770      	bx	lr

0800859e <SDMMC_CmdBlockLength>:
{
 800859e:	b530      	push	{r4, r5, lr}
 80085a0:	b087      	sub	sp, #28
 80085a2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80085a4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80085a6:	2510      	movs	r5, #16
 80085a8:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085aa:	2340      	movs	r3, #64	; 0x40
 80085ac:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085ae:	2300      	movs	r3, #0
 80085b0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085b6:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085b8:	a901      	add	r1, sp, #4
 80085ba:	f7ff ffc3 	bl	8008544 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80085be:	f241 3288 	movw	r2, #5000	; 0x1388
 80085c2:	4629      	mov	r1, r5
 80085c4:	4620      	mov	r0, r4
 80085c6:	f7ff fee3 	bl	8008390 <SDMMC_GetCmdResp1>
}
 80085ca:	b007      	add	sp, #28
 80085cc:	bd30      	pop	{r4, r5, pc}

080085ce <SDMMC_CmdReadSingleBlock>:
{
 80085ce:	b530      	push	{r4, r5, lr}
 80085d0:	b087      	sub	sp, #28
 80085d2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80085d4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80085d6:	2511      	movs	r5, #17
 80085d8:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085da:	2340      	movs	r3, #64	; 0x40
 80085dc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085de:	2300      	movs	r3, #0
 80085e0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085e6:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085e8:	a901      	add	r1, sp, #4
 80085ea:	f7ff ffab 	bl	8008544 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80085ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80085f2:	4629      	mov	r1, r5
 80085f4:	4620      	mov	r0, r4
 80085f6:	f7ff fecb 	bl	8008390 <SDMMC_GetCmdResp1>
}
 80085fa:	b007      	add	sp, #28
 80085fc:	bd30      	pop	{r4, r5, pc}

080085fe <SDMMC_CmdReadMultiBlock>:
{
 80085fe:	b530      	push	{r4, r5, lr}
 8008600:	b087      	sub	sp, #28
 8008602:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008604:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008606:	2512      	movs	r5, #18
 8008608:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800860a:	2340      	movs	r3, #64	; 0x40
 800860c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800860e:	2300      	movs	r3, #0
 8008610:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008616:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008618:	a901      	add	r1, sp, #4
 800861a:	f7ff ff93 	bl	8008544 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800861e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008622:	4629      	mov	r1, r5
 8008624:	4620      	mov	r0, r4
 8008626:	f7ff feb3 	bl	8008390 <SDMMC_GetCmdResp1>
}
 800862a:	b007      	add	sp, #28
 800862c:	bd30      	pop	{r4, r5, pc}

0800862e <SDMMC_CmdWriteSingleBlock>:
{
 800862e:	b530      	push	{r4, r5, lr}
 8008630:	b087      	sub	sp, #28
 8008632:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008634:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008636:	2518      	movs	r5, #24
 8008638:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800863a:	2340      	movs	r3, #64	; 0x40
 800863c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800863e:	2300      	movs	r3, #0
 8008640:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008646:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008648:	a901      	add	r1, sp, #4
 800864a:	f7ff ff7b 	bl	8008544 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800864e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008652:	4629      	mov	r1, r5
 8008654:	4620      	mov	r0, r4
 8008656:	f7ff fe9b 	bl	8008390 <SDMMC_GetCmdResp1>
}
 800865a:	b007      	add	sp, #28
 800865c:	bd30      	pop	{r4, r5, pc}

0800865e <SDMMC_CmdWriteMultiBlock>:
{
 800865e:	b530      	push	{r4, r5, lr}
 8008660:	b087      	sub	sp, #28
 8008662:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008664:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008666:	2519      	movs	r5, #25
 8008668:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800866a:	2340      	movs	r3, #64	; 0x40
 800866c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800866e:	2300      	movs	r3, #0
 8008670:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008676:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008678:	a901      	add	r1, sp, #4
 800867a:	f7ff ff63 	bl	8008544 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800867e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008682:	4629      	mov	r1, r5
 8008684:	4620      	mov	r0, r4
 8008686:	f7ff fe83 	bl	8008390 <SDMMC_GetCmdResp1>
}
 800868a:	b007      	add	sp, #28
 800868c:	bd30      	pop	{r4, r5, pc}
	...

08008690 <SDMMC_CmdStopTransfer>:
{
 8008690:	b530      	push	{r4, r5, lr}
 8008692:	b087      	sub	sp, #28
 8008694:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8008696:	2300      	movs	r3, #0
 8008698:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800869a:	250c      	movs	r5, #12
 800869c:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800869e:	2240      	movs	r2, #64	; 0x40
 80086a0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80086a2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80086a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086a8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80086aa:	a901      	add	r1, sp, #4
 80086ac:	f7ff ff4a 	bl	8008544 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80086b0:	4a03      	ldr	r2, [pc, #12]	; (80086c0 <SDMMC_CmdStopTransfer+0x30>)
 80086b2:	4629      	mov	r1, r5
 80086b4:	4620      	mov	r0, r4
 80086b6:	f7ff fe6b 	bl	8008390 <SDMMC_GetCmdResp1>
}
 80086ba:	b007      	add	sp, #28
 80086bc:	bd30      	pop	{r4, r5, pc}
 80086be:	bf00      	nop
 80086c0:	05f5e100 	.word	0x05f5e100

080086c4 <SDMMC_CmdSelDesel>:
{
 80086c4:	b530      	push	{r4, r5, lr}
 80086c6:	b087      	sub	sp, #28
 80086c8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80086ca:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80086cc:	2507      	movs	r5, #7
 80086ce:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80086d0:	2340      	movs	r3, #64	; 0x40
 80086d2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80086d4:	2300      	movs	r3, #0
 80086d6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80086d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086dc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80086de:	a901      	add	r1, sp, #4
 80086e0:	f7ff ff30 	bl	8008544 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80086e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80086e8:	4629      	mov	r1, r5
 80086ea:	4620      	mov	r0, r4
 80086ec:	f7ff fe50 	bl	8008390 <SDMMC_GetCmdResp1>
}
 80086f0:	b007      	add	sp, #28
 80086f2:	bd30      	pop	{r4, r5, pc}

080086f4 <SDMMC_CmdGoIdleState>:
{
 80086f4:	b510      	push	{r4, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80086fa:	2300      	movs	r3, #0
 80086fc:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80086fe:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008700:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008702:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008708:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800870a:	a901      	add	r1, sp, #4
 800870c:	f7ff ff1a 	bl	8008544 <SDIO_SendCommand>
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008710:	4b0c      	ldr	r3, [pc, #48]	; (8008744 <SDMMC_CmdGoIdleState+0x50>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a0c      	ldr	r2, [pc, #48]	; (8008748 <SDMMC_CmdGoIdleState+0x54>)
 8008716:	fba2 2303 	umull	r2, r3, r2, r3
 800871a:	0a5a      	lsrs	r2, r3, #9
 800871c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008720:	fb03 f302 	mul.w	r3, r3, r2
    if (count-- == 0U)
 8008724:	3b01      	subs	r3, #1
 8008726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872a:	d007      	beq.n	800873c <SDMMC_CmdGoIdleState+0x48>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800872c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800872e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008732:	d0f7      	beq.n	8008724 <SDMMC_CmdGoIdleState+0x30>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008734:	23c5      	movs	r3, #197	; 0xc5
 8008736:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8008738:	2000      	movs	r0, #0
 800873a:	e001      	b.n	8008740 <SDMMC_CmdGoIdleState+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 800873c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8008740:	b006      	add	sp, #24
 8008742:	bd10      	pop	{r4, pc}
 8008744:	20000014 	.word	0x20000014
 8008748:	10624dd3 	.word	0x10624dd3

0800874c <SDMMC_CmdOperCond>:
{
 800874c:	b510      	push	{r4, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008752:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008756:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008758:	2308      	movs	r3, #8
 800875a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800875c:	2340      	movs	r3, #64	; 0x40
 800875e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008760:	2300      	movs	r3, #0
 8008762:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008768:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800876a:	a901      	add	r1, sp, #4
 800876c:	f7ff feea 	bl	8008544 <SDIO_SendCommand>
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008770:	4b1a      	ldr	r3, [pc, #104]	; (80087dc <SDMMC_CmdOperCond+0x90>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a1a      	ldr	r2, [pc, #104]	; (80087e0 <SDMMC_CmdOperCond+0x94>)
 8008776:	fba2 2303 	umull	r2, r3, r2, r3
 800877a:	0a5b      	lsrs	r3, r3, #9
 800877c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008780:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008784:	1e5a      	subs	r2, r3, #1
 8008786:	b933      	cbnz	r3, 8008796 <SDMMC_CmdOperCond+0x4a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008788:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800878c:	e021      	b.n	80087d2 <SDMMC_CmdOperCond+0x86>
    if (count-- == 0U)
 800878e:	3a01      	subs	r2, #1
 8008790:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008794:	d01b      	beq.n	80087ce <SDMMC_CmdOperCond+0x82>
    }
    sta_reg = SDIOx->STA;
 8008796:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008798:	f013 0f45 	tst.w	r3, #69	; 0x45
 800879c:	d0f7      	beq.n	800878e <SDMMC_CmdOperCond+0x42>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800879e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80087a2:	d1f4      	bne.n	800878e <SDMMC_CmdOperCond+0x42>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80087a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087a6:	f013 0f04 	tst.w	r3, #4
 80087aa:	d10a      	bne.n	80087c2 <SDMMC_CmdOperCond+0x76>
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80087ac:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80087ae:	f010 0001 	ands.w	r0, r0, #1
 80087b2:	d109      	bne.n	80087c8 <SDMMC_CmdOperCond+0x7c>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80087b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087b6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80087ba:	d00c      	beq.n	80087d6 <SDMMC_CmdOperCond+0x8a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80087bc:	2340      	movs	r3, #64	; 0x40
 80087be:	63a3      	str	r3, [r4, #56]	; 0x38
 80087c0:	e007      	b.n	80087d2 <SDMMC_CmdOperCond+0x86>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80087c2:	2004      	movs	r0, #4
 80087c4:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80087c6:	e004      	b.n	80087d2 <SDMMC_CmdOperCond+0x86>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80087c8:	2301      	movs	r3, #1
 80087ca:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80087cc:	e001      	b.n	80087d2 <SDMMC_CmdOperCond+0x86>
      return SDMMC_ERROR_TIMEOUT;
 80087ce:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80087d2:	b006      	add	sp, #24
 80087d4:	bd10      	pop	{r4, pc}
  }
  
  return SDMMC_ERROR_NONE;
 80087d6:	4618      	mov	r0, r3
  return errorstate;
 80087d8:	e7fb      	b.n	80087d2 <SDMMC_CmdOperCond+0x86>
 80087da:	bf00      	nop
 80087dc:	20000014 	.word	0x20000014
 80087e0:	10624dd3 	.word	0x10624dd3

080087e4 <SDMMC_CmdAppCommand>:
{
 80087e4:	b530      	push	{r4, r5, lr}
 80087e6:	b087      	sub	sp, #28
 80087e8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80087ea:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80087ec:	2537      	movs	r5, #55	; 0x37
 80087ee:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80087f0:	2340      	movs	r3, #64	; 0x40
 80087f2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087f4:	2300      	movs	r3, #0
 80087f6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087fc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087fe:	a901      	add	r1, sp, #4
 8008800:	f7ff fea0 	bl	8008544 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008804:	f241 3288 	movw	r2, #5000	; 0x1388
 8008808:	4629      	mov	r1, r5
 800880a:	4620      	mov	r0, r4
 800880c:	f7ff fdc0 	bl	8008390 <SDMMC_GetCmdResp1>
}
 8008810:	b007      	add	sp, #28
 8008812:	bd30      	pop	{r4, r5, pc}

08008814 <SDMMC_CmdAppOperCommand>:
{
 8008814:	b510      	push	{r4, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800881a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800881e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008822:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008824:	2329      	movs	r3, #41	; 0x29
 8008826:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008828:	2340      	movs	r3, #64	; 0x40
 800882a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800882c:	2300      	movs	r3, #0
 800882e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008834:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008836:	a901      	add	r1, sp, #4
 8008838:	f7ff fe84 	bl	8008544 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800883c:	4620      	mov	r0, r4
 800883e:	f7ff fd7b 	bl	8008338 <SDMMC_GetCmdResp3>
}
 8008842:	b006      	add	sp, #24
 8008844:	bd10      	pop	{r4, pc}

08008846 <SDMMC_CmdBusWidth>:
{
 8008846:	b530      	push	{r4, r5, lr}
 8008848:	b087      	sub	sp, #28
 800884a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800884c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800884e:	2506      	movs	r5, #6
 8008850:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008852:	2340      	movs	r3, #64	; 0x40
 8008854:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008856:	2300      	movs	r3, #0
 8008858:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800885a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800885e:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008860:	a901      	add	r1, sp, #4
 8008862:	f7ff fe6f 	bl	8008544 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008866:	f241 3288 	movw	r2, #5000	; 0x1388
 800886a:	4629      	mov	r1, r5
 800886c:	4620      	mov	r0, r4
 800886e:	f7ff fd8f 	bl	8008390 <SDMMC_GetCmdResp1>
}
 8008872:	b007      	add	sp, #28
 8008874:	bd30      	pop	{r4, r5, pc}

08008876 <SDMMC_CmdSendSCR>:
{
 8008876:	b530      	push	{r4, r5, lr}
 8008878:	b087      	sub	sp, #28
 800887a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800887c:	2300      	movs	r3, #0
 800887e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008880:	2533      	movs	r5, #51	; 0x33
 8008882:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008884:	2240      	movs	r2, #64	; 0x40
 8008886:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008888:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800888a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800888e:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008890:	a901      	add	r1, sp, #4
 8008892:	f7ff fe57 	bl	8008544 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008896:	f241 3288 	movw	r2, #5000	; 0x1388
 800889a:	4629      	mov	r1, r5
 800889c:	4620      	mov	r0, r4
 800889e:	f7ff fd77 	bl	8008390 <SDMMC_GetCmdResp1>
}
 80088a2:	b007      	add	sp, #28
 80088a4:	bd30      	pop	{r4, r5, pc}

080088a6 <SDMMC_CmdSendCID>:
{
 80088a6:	b510      	push	{r4, lr}
 80088a8:	b086      	sub	sp, #24
 80088aa:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80088b0:	2202      	movs	r2, #2
 80088b2:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80088b4:	22c0      	movs	r2, #192	; 0xc0
 80088b6:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80088b8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80088ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088be:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80088c0:	a901      	add	r1, sp, #4
 80088c2:	f7ff fe3f 	bl	8008544 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80088c6:	4620      	mov	r0, r4
 80088c8:	f7ff fd04 	bl	80082d4 <SDMMC_GetCmdResp2>
}
 80088cc:	b006      	add	sp, #24
 80088ce:	bd10      	pop	{r4, pc}

080088d0 <SDMMC_CmdSendCSD>:
{
 80088d0:	b510      	push	{r4, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80088d6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80088d8:	2309      	movs	r3, #9
 80088da:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80088dc:	23c0      	movs	r3, #192	; 0xc0
 80088de:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80088e0:	2300      	movs	r3, #0
 80088e2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80088e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088e8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80088ea:	a901      	add	r1, sp, #4
 80088ec:	f7ff fe2a 	bl	8008544 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80088f0:	4620      	mov	r0, r4
 80088f2:	f7ff fcef 	bl	80082d4 <SDMMC_GetCmdResp2>
}
 80088f6:	b006      	add	sp, #24
 80088f8:	bd10      	pop	{r4, pc}
	...

080088fc <SDMMC_CmdSetRelAdd>:
{
 80088fc:	b530      	push	{r4, r5, lr}
 80088fe:	b087      	sub	sp, #28
 8008900:	4604      	mov	r4, r0
 8008902:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 8008904:	2300      	movs	r3, #0
 8008906:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008908:	2203      	movs	r2, #3
 800890a:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800890c:	2240      	movs	r2, #64	; 0x40
 800890e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008910:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008916:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008918:	a901      	add	r1, sp, #4
 800891a:	f7ff fe13 	bl	8008544 <SDIO_SendCommand>
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800891e:	4b24      	ldr	r3, [pc, #144]	; (80089b0 <SDMMC_CmdSetRelAdd+0xb4>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a24      	ldr	r2, [pc, #144]	; (80089b4 <SDMMC_CmdSetRelAdd+0xb8>)
 8008924:	fba2 2303 	umull	r2, r3, r2, r3
 8008928:	0a5b      	lsrs	r3, r3, #9
 800892a:	f241 3288 	movw	r2, #5000	; 0x1388
 800892e:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8008932:	1e5a      	subs	r2, r3, #1
 8008934:	b933      	cbnz	r3, 8008944 <SDMMC_CmdSetRelAdd+0x48>
      return SDMMC_ERROR_TIMEOUT;
 8008936:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800893a:	e034      	b.n	80089a6 <SDMMC_CmdSetRelAdd+0xaa>
    if (count-- == 0U)
 800893c:	3a01      	subs	r2, #1
 800893e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008942:	d02e      	beq.n	80089a2 <SDMMC_CmdSetRelAdd+0xa6>
    sta_reg = SDIOx->STA;
 8008944:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008946:	f013 0f45 	tst.w	r3, #69	; 0x45
 800894a:	d0f7      	beq.n	800893c <SDMMC_CmdSetRelAdd+0x40>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800894c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8008950:	d1f4      	bne.n	800893c <SDMMC_CmdSetRelAdd+0x40>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008952:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008954:	f013 0f04 	tst.w	r3, #4
 8008958:	d106      	bne.n	8008968 <SDMMC_CmdSetRelAdd+0x6c>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800895a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800895c:	f010 0001 	ands.w	r0, r0, #1
 8008960:	d005      	beq.n	800896e <SDMMC_CmdSetRelAdd+0x72>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008962:	2301      	movs	r3, #1
 8008964:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008966:	e01e      	b.n	80089a6 <SDMMC_CmdSetRelAdd+0xaa>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008968:	2004      	movs	r0, #4
 800896a:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800896c:	e01b      	b.n	80089a6 <SDMMC_CmdSetRelAdd+0xaa>
  return (uint8_t)(SDIOx->RESPCMD);
 800896e:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b03      	cmp	r3, #3
 8008974:	d001      	beq.n	800897a <SDMMC_CmdSetRelAdd+0x7e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008976:	2001      	movs	r0, #1
 8008978:	e015      	b.n	80089a6 <SDMMC_CmdSetRelAdd+0xaa>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800897a:	23c5      	movs	r3, #197	; 0xc5
 800897c:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800897e:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008980:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8008984:	d00a      	beq.n	800899c <SDMMC_CmdSetRelAdd+0xa0>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008986:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800898a:	d10e      	bne.n	80089aa <SDMMC_CmdSetRelAdd+0xae>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800898c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8008990:	bf14      	ite	ne
 8008992:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8008996:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800899a:	e004      	b.n	80089a6 <SDMMC_CmdSetRelAdd+0xaa>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800899c:	0c1b      	lsrs	r3, r3, #16
 800899e:	802b      	strh	r3, [r5, #0]
    return SDMMC_ERROR_NONE;
 80089a0:	e001      	b.n	80089a6 <SDMMC_CmdSetRelAdd+0xaa>
      return SDMMC_ERROR_TIMEOUT;
 80089a2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80089a6:	b007      	add	sp, #28
 80089a8:	bd30      	pop	{r4, r5, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 80089aa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80089ae:	e7fa      	b.n	80089a6 <SDMMC_CmdSetRelAdd+0xaa>
 80089b0:	20000014 	.word	0x20000014
 80089b4:	10624dd3 	.word	0x10624dd3

080089b8 <SDMMC_CmdSendStatus>:
{
 80089b8:	b530      	push	{r4, r5, lr}
 80089ba:	b087      	sub	sp, #28
 80089bc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80089be:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80089c0:	250d      	movs	r5, #13
 80089c2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80089c4:	2340      	movs	r3, #64	; 0x40
 80089c6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80089c8:	2300      	movs	r3, #0
 80089ca:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80089cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089d0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80089d2:	a901      	add	r1, sp, #4
 80089d4:	f7ff fdb6 	bl	8008544 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80089d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80089dc:	4629      	mov	r1, r5
 80089de:	4620      	mov	r0, r4
 80089e0:	f7ff fcd6 	bl	8008390 <SDMMC_GetCmdResp1>
}
 80089e4:	b007      	add	sp, #28
 80089e6:	bd30      	pop	{r4, r5, pc}

080089e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80089e8:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80089ea:	4903      	ldr	r1, [pc, #12]	; (80089f8 <MX_FATFS_Init+0x10>)
 80089ec:	4803      	ldr	r0, [pc, #12]	; (80089fc <MX_FATFS_Init+0x14>)
 80089ee:	f001 feb5 	bl	800a75c <FATFS_LinkDriver>
 80089f2:	4b03      	ldr	r3, [pc, #12]	; (8008a00 <MX_FATFS_Init+0x18>)
 80089f4:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80089f6:	bd08      	pop	{r3, pc}
 80089f8:	20000cdc 	.word	0x20000cdc
 80089fc:	0801030c 	.word	0x0801030c
 8008a00:	20000cd8 	.word	0x20000cd8

08008a04 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8008a04:	2000      	movs	r0, #0
 8008a06:	4770      	bx	lr

08008a08 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008a08:	b500      	push	{lr}
 8008a0a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	460a      	mov	r2, r1
 8008a12:	4601      	mov	r1, r0
 8008a14:	4804      	ldr	r0, [pc, #16]	; (8008a28 <BSP_SD_ReadBlocks+0x20>)
 8008a16:	f7fd f99b 	bl	8005d50 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8008a1a:	3800      	subs	r0, #0
 8008a1c:	bf18      	it	ne
 8008a1e:	2001      	movne	r0, #1
 8008a20:	b003      	add	sp, #12
 8008a22:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a26:	bf00      	nop
 8008a28:	20000adc 	.word	0x20000adc

08008a2c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008a2c:	b500      	push	{lr}
 8008a2e:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	4613      	mov	r3, r2
 8008a34:	460a      	mov	r2, r1
 8008a36:	4601      	mov	r1, r0
 8008a38:	4804      	ldr	r0, [pc, #16]	; (8008a4c <BSP_SD_WriteBlocks+0x20>)
 8008a3a:	f7fd fab1 	bl	8005fa0 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8008a3e:	3800      	subs	r0, #0
 8008a40:	bf18      	it	ne
 8008a42:	2001      	movne	r0, #1
 8008a44:	b003      	add	sp, #12
 8008a46:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a4a:	bf00      	nop
 8008a4c:	20000adc 	.word	0x20000adc

08008a50 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008a50:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008a52:	4803      	ldr	r0, [pc, #12]	; (8008a60 <BSP_SD_GetCardState+0x10>)
 8008a54:	f7fd fe72 	bl	800673c <HAL_SD_GetCardState>
}
 8008a58:	3804      	subs	r0, #4
 8008a5a:	bf18      	it	ne
 8008a5c:	2001      	movne	r0, #1
 8008a5e:	bd08      	pop	{r3, pc}
 8008a60:	20000adc 	.word	0x20000adc

08008a64 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008a64:	b508      	push	{r3, lr}
 8008a66:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008a68:	4801      	ldr	r0, [pc, #4]	; (8008a70 <BSP_SD_GetCardInfo+0xc>)
 8008a6a:	f7fd fdb0 	bl	80065ce <HAL_SD_GetCardInfo>
}
 8008a6e:	bd08      	pop	{r3, pc}
 8008a70:	20000adc 	.word	0x20000adc

08008a74 <BSP_SD_AbortCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 8008a74:	4770      	bx	lr

08008a76 <HAL_SD_AbortCallback>:
{
 8008a76:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8008a78:	f7ff fffc 	bl	8008a74 <BSP_SD_AbortCallback>
}
 8008a7c:	bd08      	pop	{r3, pc}

08008a7e <BSP_SD_WriteCpltCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{

}
 8008a7e:	4770      	bx	lr

08008a80 <HAL_SD_TxCpltCallback>:
{
 8008a80:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8008a82:	f7ff fffc 	bl	8008a7e <BSP_SD_WriteCpltCallback>
}
 8008a86:	bd08      	pop	{r3, pc}

08008a88 <BSP_SD_ReadCpltCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{

}
 8008a88:	4770      	bx	lr

08008a8a <HAL_SD_RxCpltCallback>:
{
 8008a8a:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8008a8c:	f7ff fffc 	bl	8008a88 <BSP_SD_ReadCpltCallback>
}
 8008a90:	bd08      	pop	{r3, pc}

08008a92 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008a92:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 8008a94:	2301      	movs	r3, #1
 8008a96:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8008a9a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8008a9e:	b002      	add	sp, #8
 8008aa0:	4770      	bx	lr
	...

08008aa4 <BSP_SD_Init>:
{
 8008aa4:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008aa6:	f7ff fff4 	bl	8008a92 <BSP_SD_IsDetected>
 8008aaa:	2801      	cmp	r0, #1
 8008aac:	d001      	beq.n	8008ab2 <BSP_SD_Init+0xe>
    return MSD_ERROR;
 8008aae:	2001      	movs	r0, #1
}
 8008ab0:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd);
 8008ab2:	4807      	ldr	r0, [pc, #28]	; (8008ad0 <BSP_SD_Init+0x2c>)
 8008ab4:	f7fd fd70 	bl	8006598 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	d1f9      	bne.n	8008ab0 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8008abc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008ac0:	4803      	ldr	r0, [pc, #12]	; (8008ad0 <BSP_SD_Init+0x2c>)
 8008ac2:	f7fd fd97 	bl	80065f4 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR;
 8008ac6:	3800      	subs	r0, #0
 8008ac8:	bf18      	it	ne
 8008aca:	2001      	movne	r0, #1
 8008acc:	e7f0      	b.n	8008ab0 <BSP_SD_Init+0xc>
 8008ace:	bf00      	nop
 8008ad0:	20000adc 	.word	0x20000adc

08008ad4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008ad4:	b508      	push	{r3, lr}
Stat = STA_NOINIT;
 8008ad6:	4b0c      	ldr	r3, [pc, #48]	; (8008b08 <SD_initialize+0x34>)
 8008ad8:	2201      	movs	r2, #1
 8008ada:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008adc:	f7ff ffe2 	bl	8008aa4 <BSP_SD_Init>
 8008ae0:	b110      	cbz	r0, 8008ae8 <SD_initialize+0x14>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008ae2:	4b09      	ldr	r3, [pc, #36]	; (8008b08 <SD_initialize+0x34>)
 8008ae4:	7818      	ldrb	r0, [r3, #0]
}
 8008ae6:	bd08      	pop	{r3, pc}
  Stat = STA_NOINIT;
 8008ae8:	4b07      	ldr	r3, [pc, #28]	; (8008b08 <SD_initialize+0x34>)
 8008aea:	2201      	movs	r2, #1
 8008aec:	701a      	strb	r2, [r3, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8008aee:	f7ff ffaf 	bl	8008a50 <BSP_SD_GetCardState>
 8008af2:	b920      	cbnz	r0, 8008afe <SD_initialize+0x2a>
    Stat &= ~STA_NOINIT;
 8008af4:	4a04      	ldr	r2, [pc, #16]	; (8008b08 <SD_initialize+0x34>)
 8008af6:	7813      	ldrb	r3, [r2, #0]
 8008af8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008afc:	7013      	strb	r3, [r2, #0]
  return Stat;
 8008afe:	4a02      	ldr	r2, [pc, #8]	; (8008b08 <SD_initialize+0x34>)
 8008b00:	7813      	ldrb	r3, [r2, #0]
 8008b02:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 8008b04:	7013      	strb	r3, [r2, #0]
 8008b06:	e7ec      	b.n	8008ae2 <SD_initialize+0xe>
 8008b08:	20000020 	.word	0x20000020

08008b0c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008b0c:	b508      	push	{r3, lr}
 8008b0e:	4608      	mov	r0, r1
 8008b10:	4611      	mov	r1, r2
 8008b12:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008b14:	f04f 33ff 	mov.w	r3, #4294967295
 8008b18:	f7ff ff76 	bl	8008a08 <BSP_SD_ReadBlocks>
 8008b1c:	b930      	cbnz	r0, 8008b2c <SD_read+0x20>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008b1e:	f7ff ff97 	bl	8008a50 <BSP_SD_GetCardState>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2800      	cmp	r0, #0
 8008b26:	d1fa      	bne.n	8008b1e <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e7fb      	b.n	8008b28 <SD_read+0x1c>

08008b30 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008b30:	b508      	push	{r3, lr}
 8008b32:	4608      	mov	r0, r1
 8008b34:	4611      	mov	r1, r2
 8008b36:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8008b38:	f04f 33ff 	mov.w	r3, #4294967295
 8008b3c:	f7ff ff76 	bl	8008a2c <BSP_SD_WriteBlocks>
 8008b40:	b930      	cbnz	r0, 8008b50 <SD_write+0x20>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8008b42:	f7ff ff85 	bl	8008a50 <BSP_SD_GetCardState>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	d1fa      	bne.n	8008b42 <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e7fb      	b.n	8008b4c <SD_write+0x1c>

08008b54 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008b54:	b530      	push	{r4, r5, lr}
 8008b56:	b089      	sub	sp, #36	; 0x24
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008b58:	4b13      	ldr	r3, [pc, #76]	; (8008ba8 <SD_ioctl+0x54>)
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	f013 0401 	ands.w	r4, r3, #1
 8008b60:	d11f      	bne.n	8008ba2 <SD_ioctl+0x4e>
 8008b62:	4608      	mov	r0, r1
 8008b64:	4615      	mov	r5, r2

  switch (cmd)
 8008b66:	2903      	cmp	r1, #3
 8008b68:	d803      	bhi.n	8008b72 <SD_ioctl+0x1e>
 8008b6a:	e8df f001 	tbb	[pc, r1]
 8008b6e:	041b      	.short	0x041b
 8008b70:	120b      	.short	0x120b
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008b72:	2004      	movs	r0, #4
 8008b74:	e016      	b.n	8008ba4 <SD_ioctl+0x50>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008b76:	4668      	mov	r0, sp
 8008b78:	f7ff ff74 	bl	8008a64 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008b7c:	9b06      	ldr	r3, [sp, #24]
 8008b7e:	602b      	str	r3, [r5, #0]
    res = RES_OK;
 8008b80:	4620      	mov	r0, r4
    break;
 8008b82:	e00f      	b.n	8008ba4 <SD_ioctl+0x50>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008b84:	4668      	mov	r0, sp
 8008b86:	f7ff ff6d 	bl	8008a64 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008b8a:	9b07      	ldr	r3, [sp, #28]
 8008b8c:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
 8008b8e:	4620      	mov	r0, r4
    break;
 8008b90:	e008      	b.n	8008ba4 <SD_ioctl+0x50>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008b92:	4668      	mov	r0, sp
 8008b94:	f7ff ff66 	bl	8008a64 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008b98:	9b07      	ldr	r3, [sp, #28]
 8008b9a:	0a5b      	lsrs	r3, r3, #9
 8008b9c:	602b      	str	r3, [r5, #0]
    res = RES_OK;
 8008b9e:	4620      	mov	r0, r4
    break;
 8008ba0:	e000      	b.n	8008ba4 <SD_ioctl+0x50>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008ba2:	2003      	movs	r0, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8008ba4:	b009      	add	sp, #36	; 0x24
 8008ba6:	bd30      	pop	{r4, r5, pc}
 8008ba8:	20000020 	.word	0x20000020

08008bac <SD_status>:
{
 8008bac:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8008bae:	4b07      	ldr	r3, [pc, #28]	; (8008bcc <SD_status+0x20>)
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	701a      	strb	r2, [r3, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8008bb4:	f7ff ff4c 	bl	8008a50 <BSP_SD_GetCardState>
 8008bb8:	b920      	cbnz	r0, 8008bc4 <SD_status+0x18>
    Stat &= ~STA_NOINIT;
 8008bba:	4a04      	ldr	r2, [pc, #16]	; (8008bcc <SD_status+0x20>)
 8008bbc:	7813      	ldrb	r3, [r2, #0]
 8008bbe:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008bc2:	7013      	strb	r3, [r2, #0]
  return Stat;
 8008bc4:	4b01      	ldr	r3, [pc, #4]	; (8008bcc <SD_status+0x20>)
 8008bc6:	7818      	ldrb	r0, [r3, #0]
}
 8008bc8:	bd08      	pop	{r3, pc}
 8008bca:	bf00      	nop
 8008bcc:	20000020 	.word	0x20000020

08008bd0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008bd0:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008bd2:	4b04      	ldr	r3, [pc, #16]	; (8008be4 <disk_status+0x14>)
 8008bd4:	181a      	adds	r2, r3, r0
 8008bd6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	7a10      	ldrb	r0, [r2, #8]
 8008be0:	4798      	blx	r3
  return stat;
}
 8008be2:	bd08      	pop	{r3, pc}
 8008be4:	20000954 	.word	0x20000954

08008be8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008be8:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8008bea:	4b08      	ldr	r3, [pc, #32]	; (8008c0c <disk_initialize+0x24>)
 8008bec:	5c1b      	ldrb	r3, [r3, r0]
 8008bee:	b953      	cbnz	r3, 8008c06 <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8008bf0:	4b06      	ldr	r3, [pc, #24]	; (8008c0c <disk_initialize+0x24>)
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008bf6:	181a      	adds	r2, r3, r0
 8008bf8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008bfc:	6843      	ldr	r3, [r0, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	7a10      	ldrb	r0, [r2, #8]
 8008c02:	4798      	blx	r3
  }
  return stat;
}
 8008c04:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 8008c06:	2000      	movs	r0, #0
 8008c08:	e7fc      	b.n	8008c04 <disk_initialize+0x1c>
 8008c0a:	bf00      	nop
 8008c0c:	20000954 	.word	0x20000954

08008c10 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008c10:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008c12:	4c04      	ldr	r4, [pc, #16]	; (8008c24 <disk_read+0x14>)
 8008c14:	1825      	adds	r5, r4, r0
 8008c16:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8008c1a:	6860      	ldr	r0, [r4, #4]
 8008c1c:	6884      	ldr	r4, [r0, #8]
 8008c1e:	7a28      	ldrb	r0, [r5, #8]
 8008c20:	47a0      	blx	r4
  return res;
}
 8008c22:	bd38      	pop	{r3, r4, r5, pc}
 8008c24:	20000954 	.word	0x20000954

08008c28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008c28:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008c2a:	4c04      	ldr	r4, [pc, #16]	; (8008c3c <disk_write+0x14>)
 8008c2c:	1825      	adds	r5, r4, r0
 8008c2e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8008c32:	6860      	ldr	r0, [r4, #4]
 8008c34:	68c4      	ldr	r4, [r0, #12]
 8008c36:	7a28      	ldrb	r0, [r5, #8]
 8008c38:	47a0      	blx	r4
  return res;
}
 8008c3a:	bd38      	pop	{r3, r4, r5, pc}
 8008c3c:	20000954 	.word	0x20000954

08008c40 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008c40:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008c42:	4b04      	ldr	r3, [pc, #16]	; (8008c54 <disk_ioctl+0x14>)
 8008c44:	181c      	adds	r4, r3, r0
 8008c46:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	7a20      	ldrb	r0, [r4, #8]
 8008c50:	4798      	blx	r3
  return res;
}
 8008c52:	bd10      	pop	{r4, pc}
 8008c54:	20000954 	.word	0x20000954

08008c58 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 8008c58:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 8008c5a:	7883      	ldrb	r3, [r0, #2]
 8008c5c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 8008c60:	7843      	ldrb	r3, [r0, #1]
 8008c62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8008c66:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8008c68:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8008c6c:	4770      	bx	lr

08008c6e <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8008c6e:	7001      	strb	r1, [r0, #0]
 8008c70:	0a0b      	lsrs	r3, r1, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8008c72:	7043      	strb	r3, [r0, #1]
 8008c74:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008c76:	7083      	strb	r3, [r0, #2]
 8008c78:	0e09      	lsrs	r1, r1, #24
	*ptr++ = (BYTE)val;
 8008c7a:	70c1      	strb	r1, [r0, #3]
}
 8008c7c:	4770      	bx	lr

08008c7e <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 8008c7e:	b13a      	cbz	r2, 8008c90 <mem_cpy+0x12>
 8008c80:	3801      	subs	r0, #1
 8008c82:	188a      	adds	r2, r1, r2
		do {
			*d++ = *s++;
 8008c84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c88:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8008c8c:	4291      	cmp	r1, r2
 8008c8e:	d1f9      	bne.n	8008c84 <mem_cpy+0x6>
	}
}
 8008c90:	4770      	bx	lr

08008c92 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 8008c92:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 8008c94:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8008c98:	4290      	cmp	r0, r2
 8008c9a:	d1fb      	bne.n	8008c94 <mem_set+0x2>
}
 8008c9c:	4770      	bx	lr
	...

08008ca0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008ca0:	b410      	push	{r4}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8008ca2:	4b22      	ldr	r3, [pc, #136]	; (8008d2c <chk_lock+0x8c>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	b1f3      	cbz	r3, 8008ce6 <chk_lock+0x46>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008ca8:	6802      	ldr	r2, [r0, #0]
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d00d      	beq.n	8008cca <chk_lock+0x2a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008cae:	2200      	movs	r2, #0
		if (Files[i].fs) {	/* Existing entry */
 8008cb0:	4b1e      	ldr	r3, [pc, #120]	; (8008d2c <chk_lock+0x8c>)
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	b32b      	cbz	r3, 8008d02 <chk_lock+0x62>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008cb6:	6804      	ldr	r4, [r0, #0]
 8008cb8:	42a3      	cmp	r3, r4
 8008cba:	d016      	beq.n	8008cea <chk_lock+0x4a>
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008cbc:	2a00      	cmp	r2, #0
 8008cbe:	d130      	bne.n	8008d22 <chk_lock+0x82>
 8008cc0:	2902      	cmp	r1, #2
 8008cc2:	bf0c      	ite	eq
 8008cc4:	2000      	moveq	r0, #0
 8008cc6:	2012      	movne	r0, #18
 8008cc8:	e028      	b.n	8008d1c <chk_lock+0x7c>
				Files[i].clu == dp->obj.sclust &&
 8008cca:	4b18      	ldr	r3, [pc, #96]	; (8008d2c <chk_lock+0x8c>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	6883      	ldr	r3, [r0, #8]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d001      	beq.n	8008cd8 <chk_lock+0x38>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	e7eb      	b.n	8008cb0 <chk_lock+0x10>
				Files[i].ofs == dp->dptr) break;
 8008cd8:	4b14      	ldr	r3, [pc, #80]	; (8008d2c <chk_lock+0x8c>)
				Files[i].clu == dp->obj.sclust &&
 8008cda:	689a      	ldr	r2, [r3, #8]
 8008cdc:	6943      	ldr	r3, [r0, #20]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d011      	beq.n	8008d06 <chk_lock+0x66>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	e7e4      	b.n	8008cb0 <chk_lock+0x10>
			be = 1;
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	e7e2      	b.n	8008cb0 <chk_lock+0x10>
				Files[i].clu == dp->obj.sclust &&
 8008cea:	4b10      	ldr	r3, [pc, #64]	; (8008d2c <chk_lock+0x8c>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008cec:	695c      	ldr	r4, [r3, #20]
 8008cee:	6883      	ldr	r3, [r0, #8]
 8008cf0:	429c      	cmp	r4, r3
 8008cf2:	d1e3      	bne.n	8008cbc <chk_lock+0x1c>
				Files[i].ofs == dp->dptr) break;
 8008cf4:	4b0d      	ldr	r3, [pc, #52]	; (8008d2c <chk_lock+0x8c>)
				Files[i].clu == dp->obj.sclust &&
 8008cf6:	699c      	ldr	r4, [r3, #24]
 8008cf8:	6943      	ldr	r3, [r0, #20]
 8008cfa:	429c      	cmp	r4, r3
 8008cfc:	d1de      	bne.n	8008cbc <chk_lock+0x1c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008cfe:	2201      	movs	r2, #1
 8008d00:	e002      	b.n	8008d08 <chk_lock+0x68>
			be = 1;
 8008d02:	2201      	movs	r2, #1
 8008d04:	e7da      	b.n	8008cbc <chk_lock+0x1c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008d06:	2200      	movs	r2, #0
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008d08:	b969      	cbnz	r1, 8008d26 <chk_lock+0x86>
 8008d0a:	4b08      	ldr	r3, [pc, #32]	; (8008d2c <chk_lock+0x8c>)
 8008d0c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8008d10:	899b      	ldrh	r3, [r3, #12]
 8008d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d16:	bf0c      	ite	eq
 8008d18:	2010      	moveq	r0, #16
 8008d1a:	2000      	movne	r0, #0
}
 8008d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d20:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008d22:	2000      	movs	r0, #0
 8008d24:	e7fa      	b.n	8008d1c <chk_lock+0x7c>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008d26:	2010      	movs	r0, #16
 8008d28:	e7f8      	b.n	8008d1c <chk_lock+0x7c>
 8008d2a:	bf00      	nop
 8008d2c:	20000930 	.word	0x20000930

08008d30 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008d30:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8008d32:	6802      	ldr	r2, [r0, #0]
 8008d34:	4b26      	ldr	r3, [pc, #152]	; (8008dd0 <inc_lock+0xa0>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d00a      	beq.n	8008d52 <inc_lock+0x22>
 8008d3c:	4c24      	ldr	r4, [pc, #144]	; (8008dd0 <inc_lock+0xa0>)
 8008d3e:	6924      	ldr	r4, [r4, #16]
 8008d40:	4294      	cmp	r4, r2
 8008d42:	d01a      	beq.n	8008d7a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008d44:	2400      	movs	r4, #0
 8008d46:	b32b      	cbz	r3, 8008d94 <inc_lock+0x64>
 8008d48:	4b21      	ldr	r3, [pc, #132]	; (8008dd0 <inc_lock+0xa0>)
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	b30b      	cbz	r3, 8008d92 <inc_lock+0x62>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008d4e:	2000      	movs	r0, #0
 8008d50:	e037      	b.n	8008dc2 <inc_lock+0x92>
			Files[i].clu == dp->obj.sclust &&
 8008d52:	4c1f      	ldr	r4, [pc, #124]	; (8008dd0 <inc_lock+0xa0>)
		if (Files[i].fs == dp->obj.fs &&
 8008d54:	6865      	ldr	r5, [r4, #4]
 8008d56:	6884      	ldr	r4, [r0, #8]
 8008d58:	42a5      	cmp	r5, r4
 8008d5a:	d1ef      	bne.n	8008d3c <inc_lock+0xc>
			Files[i].ofs == dp->dptr) break;
 8008d5c:	4c1c      	ldr	r4, [pc, #112]	; (8008dd0 <inc_lock+0xa0>)
			Files[i].clu == dp->obj.sclust &&
 8008d5e:	68a5      	ldr	r5, [r4, #8]
 8008d60:	6944      	ldr	r4, [r0, #20]
 8008d62:	42a5      	cmp	r5, r4
 8008d64:	d1ea      	bne.n	8008d3c <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008d66:	2400      	movs	r4, #0
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008d68:	b301      	cbz	r1, 8008dac <inc_lock+0x7c>
 8008d6a:	4b19      	ldr	r3, [pc, #100]	; (8008dd0 <inc_lock+0xa0>)
 8008d6c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8008d70:	899b      	ldrh	r3, [r3, #12]
 8008d72:	bb5b      	cbnz	r3, 8008dcc <inc_lock+0x9c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008d74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d78:	e01e      	b.n	8008db8 <inc_lock+0x88>
			Files[i].clu == dp->obj.sclust &&
 8008d7a:	4c15      	ldr	r4, [pc, #84]	; (8008dd0 <inc_lock+0xa0>)
		if (Files[i].fs == dp->obj.fs &&
 8008d7c:	6965      	ldr	r5, [r4, #20]
 8008d7e:	6884      	ldr	r4, [r0, #8]
 8008d80:	42a5      	cmp	r5, r4
 8008d82:	d1df      	bne.n	8008d44 <inc_lock+0x14>
			Files[i].ofs == dp->dptr) break;
 8008d84:	4c12      	ldr	r4, [pc, #72]	; (8008dd0 <inc_lock+0xa0>)
			Files[i].clu == dp->obj.sclust &&
 8008d86:	69a5      	ldr	r5, [r4, #24]
 8008d88:	6944      	ldr	r4, [r0, #20]
 8008d8a:	42a5      	cmp	r5, r4
 8008d8c:	d1da      	bne.n	8008d44 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008d8e:	2401      	movs	r4, #1
 8008d90:	e7ea      	b.n	8008d68 <inc_lock+0x38>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008d92:	2401      	movs	r4, #1
		Files[i].fs = dp->obj.fs;
 8008d94:	4e0e      	ldr	r6, [pc, #56]	; (8008dd0 <inc_lock+0xa0>)
 8008d96:	0125      	lsls	r5, r4, #4
 8008d98:	eb06 1304 	add.w	r3, r6, r4, lsl #4
 8008d9c:	5172      	str	r2, [r6, r5]
		Files[i].clu = dp->obj.sclust;
 8008d9e:	6882      	ldr	r2, [r0, #8]
 8008da0:	605a      	str	r2, [r3, #4]
		Files[i].ofs = dp->dptr;
 8008da2:	6942      	ldr	r2, [r0, #20]
 8008da4:	609a      	str	r2, [r3, #8]
		Files[i].ctr = 0;
 8008da6:	2200      	movs	r2, #0
 8008da8:	819a      	strh	r2, [r3, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008daa:	b961      	cbnz	r1, 8008dc6 <inc_lock+0x96>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008dac:	4b08      	ldr	r3, [pc, #32]	; (8008dd0 <inc_lock+0xa0>)
 8008dae:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8008db2:	899a      	ldrh	r2, [r3, #12]
 8008db4:	3201      	adds	r2, #1
 8008db6:	b292      	uxth	r2, r2
 8008db8:	4b05      	ldr	r3, [pc, #20]	; (8008dd0 <inc_lock+0xa0>)
 8008dba:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8008dbe:	819a      	strh	r2, [r3, #12]

	return i + 1;
 8008dc0:	1c60      	adds	r0, r4, #1
}
 8008dc2:	bc70      	pop	{r4, r5, r6}
 8008dc4:	4770      	bx	lr
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008dc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008dca:	e7f5      	b.n	8008db8 <inc_lock+0x88>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008dcc:	2000      	movs	r0, #0
 8008dce:	e7f8      	b.n	8008dc2 <inc_lock+0x92>
 8008dd0:	20000930 	.word	0x20000930

08008dd4 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008dd4:	3801      	subs	r0, #1
 8008dd6:	2801      	cmp	r0, #1
 8008dd8:	d810      	bhi.n	8008dfc <dec_lock+0x28>
		n = Files[i].ctr;
 8008dda:	4b0e      	ldr	r3, [pc, #56]	; (8008e14 <dec_lock+0x40>)
 8008ddc:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8008de0:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 8008de2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008de6:	b292      	uxth	r2, r2
 8008de8:	b152      	cbz	r2, 8008e00 <dec_lock+0x2c>
 8008dea:	3b01      	subs	r3, #1
 8008dec:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8008dee:	4a09      	ldr	r2, [pc, #36]	; (8008e14 <dec_lock+0x40>)
 8008df0:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8008df4:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008df6:	b143      	cbz	r3, 8008e0a <dec_lock+0x36>
		res = FR_OK;
 8008df8:	2000      	movs	r0, #0
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
	}
	return res;
}
 8008dfa:	4770      	bx	lr
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008dfc:	2002      	movs	r0, #2
 8008dfe:	4770      	bx	lr
		Files[i].ctr = n;
 8008e00:	4b04      	ldr	r3, [pc, #16]	; (8008e14 <dec_lock+0x40>)
 8008e02:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8008e06:	2200      	movs	r2, #0
 8008e08:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008e0a:	0103      	lsls	r3, r0, #4
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	4a01      	ldr	r2, [pc, #4]	; (8008e14 <dec_lock+0x40>)
 8008e10:	50d0      	str	r0, [r2, r3]
 8008e12:	4770      	bx	lr
 8008e14:	20000930 	.word	0x20000930

08008e18 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8008e18:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008e1a:	6943      	ldr	r3, [r0, #20]
 8008e1c:	3b02      	subs	r3, #2
 8008e1e:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8008e20:	bf83      	ittte	hi
 8008e22:	8943      	ldrhhi	r3, [r0, #10]
 8008e24:	6a80      	ldrhi	r0, [r0, #40]	; 0x28
 8008e26:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008e2a:	2000      	movls	r0, #0
}
 8008e2c:	4770      	bx	lr

08008e2e <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008e2e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8008e30:	1d13      	adds	r3, r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008e32:	0a49      	lsrs	r1, r1, #9
 8008e34:	6800      	ldr	r0, [r0, #0]
 8008e36:	8940      	ldrh	r0, [r0, #10]
 8008e38:	fbb1 f1f0 	udiv	r1, r1, r0
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e3c:	6850      	ldr	r0, [r2, #4]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008e3e:	b148      	cbz	r0, 8008e54 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008e40:	4281      	cmp	r1, r0
 8008e42:	d305      	bcc.n	8008e50 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8008e44:	1a09      	subs	r1, r1, r0
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e46:	f853 0f08 	ldr.w	r0, [r3, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	d1f8      	bne.n	8008e40 <clmt_clust+0x12>
 8008e4e:	4770      	bx	lr
	}
	return cl + *tbl;	/* Return the cluster number */
 8008e50:	6858      	ldr	r0, [r3, #4]
 8008e52:	4408      	add	r0, r1
}
 8008e54:	4770      	bx	lr

08008e56 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008e56:	6801      	ldr	r1, [r0, #0]
 8008e58:	b301      	cbz	r1, 8008e9c <get_ldnumber+0x46>
{
 8008e5a:	b410      	push	{r4}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008e5c:	780c      	ldrb	r4, [r1, #0]
 8008e5e:	2c20      	cmp	r4, #32
 8008e60:	d90b      	bls.n	8008e7a <get_ldnumber+0x24>
 8008e62:	460a      	mov	r2, r1
 8008e64:	4623      	mov	r3, r4
 8008e66:	2b3a      	cmp	r3, #58	; 0x3a
 8008e68:	d00c      	beq.n	8008e84 <get_ldnumber+0x2e>
 8008e6a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8008e6e:	2b20      	cmp	r3, #32
 8008e70:	d8f9      	bhi.n	8008e66 <get_ldnumber+0x10>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008e72:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8008e74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e78:	4770      	bx	lr
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008e7a:	2c3a      	cmp	r4, #58	; 0x3a
		vol = 0;		/* Drive 0 */
 8008e7c:	bf18      	it	ne
 8008e7e:	2000      	movne	r0, #0
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008e80:	d1f8      	bne.n	8008e74 <get_ldnumber+0x1e>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008e82:	460a      	mov	r2, r1
			i = *tp++ - '0';
 8008e84:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008e86:	428a      	cmp	r2, r1
 8008e88:	d002      	beq.n	8008e90 <get_ldnumber+0x3a>
	int vol = -1;
 8008e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8e:	e7f1      	b.n	8008e74 <get_ldnumber+0x1e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008e90:	2c30      	cmp	r4, #48	; 0x30
 8008e92:	d106      	bne.n	8008ea2 <get_ldnumber+0x4c>
					*path = ++tt;
 8008e94:	3201      	adds	r2, #1
 8008e96:	6002      	str	r2, [r0, #0]
					vol = (int)i;
 8008e98:	2000      	movs	r0, #0
 8008e9a:	e7eb      	b.n	8008e74 <get_ldnumber+0x1e>
	int vol = -1;
 8008e9c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008ea0:	4770      	bx	lr
	int vol = -1;
 8008ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea6:	e7e5      	b.n	8008e74 <get_ldnumber+0x1e>

08008ea8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008eac:	4604      	mov	r4, r0
 8008eae:	b198      	cbz	r0, 8008ed8 <validate+0x30>
 8008eb0:	6803      	ldr	r3, [r0, #0]
 8008eb2:	b19b      	cbz	r3, 8008edc <validate+0x34>
 8008eb4:	781a      	ldrb	r2, [r3, #0]
 8008eb6:	b1a2      	cbz	r2, 8008ee2 <validate+0x3a>
 8008eb8:	8881      	ldrh	r1, [r0, #4]
 8008eba:	88da      	ldrh	r2, [r3, #6]
 8008ebc:	4291      	cmp	r1, r2
 8008ebe:	d003      	beq.n	8008ec8 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 8008ec0:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008ec2:	2400      	movs	r4, #0
 8008ec4:	602c      	str	r4, [r5, #0]
	return res;
}
 8008ec6:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008ec8:	7858      	ldrb	r0, [r3, #1]
 8008eca:	f7ff fe81 	bl	8008bd0 <disk_status>
 8008ece:	f010 0001 	ands.w	r0, r0, #1
 8008ed2:	d109      	bne.n	8008ee8 <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008ed4:	6824      	ldr	r4, [r4, #0]
 8008ed6:	e7f5      	b.n	8008ec4 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8008ed8:	2009      	movs	r0, #9
 8008eda:	e7f3      	b.n	8008ec4 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008edc:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 8008ede:	2009      	movs	r0, #9
 8008ee0:	e7f0      	b.n	8008ec4 <validate+0x1c>
 8008ee2:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008ee4:	2400      	movs	r4, #0
 8008ee6:	e7ed      	b.n	8008ec4 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8008ee8:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008eea:	2400      	movs	r4, #0
 8008eec:	e7ea      	b.n	8008ec4 <validate+0x1c>

08008eee <sync_window>:
{
 8008eee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008ef2:	78c5      	ldrb	r5, [r0, #3]
 8008ef4:	b915      	cbnz	r5, 8008efc <sync_window+0xe>
}
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008efc:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8008efe:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008f00:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008f04:	2301      	movs	r3, #1
 8008f06:	4632      	mov	r2, r6
 8008f08:	4641      	mov	r1, r8
 8008f0a:	7840      	ldrb	r0, [r0, #1]
 8008f0c:	f7ff fe8c 	bl	8008c28 <disk_write>
 8008f10:	4605      	mov	r5, r0
 8008f12:	b9b8      	cbnz	r0, 8008f44 <sync_window+0x56>
			fs->wflag = 0;
 8008f14:	2300      	movs	r3, #0
 8008f16:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008f18:	6a23      	ldr	r3, [r4, #32]
 8008f1a:	1af3      	subs	r3, r6, r3
 8008f1c:	69a2      	ldr	r2, [r4, #24]
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d2e9      	bcs.n	8008ef6 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008f22:	78a7      	ldrb	r7, [r4, #2]
 8008f24:	2f01      	cmp	r7, #1
 8008f26:	d9e6      	bls.n	8008ef6 <sync_window+0x8>
					disk_write(fs->drv, fs->win, wsect, 1);
 8008f28:	f04f 0901 	mov.w	r9, #1
					wsect += fs->fsize;
 8008f2c:	69a3      	ldr	r3, [r4, #24]
 8008f2e:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8008f30:	464b      	mov	r3, r9
 8008f32:	4632      	mov	r2, r6
 8008f34:	4641      	mov	r1, r8
 8008f36:	7860      	ldrb	r0, [r4, #1]
 8008f38:	f7ff fe76 	bl	8008c28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008f3c:	3f01      	subs	r7, #1
 8008f3e:	2f01      	cmp	r7, #1
 8008f40:	d1f4      	bne.n	8008f2c <sync_window+0x3e>
 8008f42:	e7d8      	b.n	8008ef6 <sync_window+0x8>
			res = FR_DISK_ERR;
 8008f44:	2501      	movs	r5, #1
 8008f46:	e7d6      	b.n	8008ef6 <sync_window+0x8>

08008f48 <move_window>:
{
 8008f48:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008f4a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008f4c:	428b      	cmp	r3, r1
 8008f4e:	d101      	bne.n	8008f54 <move_window+0xc>
	FRESULT res = FR_OK;
 8008f50:	2000      	movs	r0, #0
}
 8008f52:	bd38      	pop	{r3, r4, r5, pc}
 8008f54:	4604      	mov	r4, r0
 8008f56:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8008f58:	f7ff ffc9 	bl	8008eee <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d1f8      	bne.n	8008f52 <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008f60:	2301      	movs	r3, #1
 8008f62:	462a      	mov	r2, r5
 8008f64:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8008f68:	7860      	ldrb	r0, [r4, #1]
 8008f6a:	f7ff fe51 	bl	8008c10 <disk_read>
				res = FR_DISK_ERR;
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	bf1c      	itt	ne
 8008f72:	2001      	movne	r0, #1
 8008f74:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
 8008f78:	62e5      	str	r5, [r4, #44]	; 0x2c
 8008f7a:	e7ea      	b.n	8008f52 <move_window+0xa>

08008f7c <sync_fs>:
{
 8008f7c:	b538      	push	{r3, r4, r5, lr}
 8008f7e:	4604      	mov	r4, r0
	res = sync_window(fs);
 8008f80:	f7ff ffb5 	bl	8008eee <sync_window>
	if (res == FR_OK) {
 8008f84:	b950      	cbnz	r0, 8008f9c <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008f86:	7823      	ldrb	r3, [r4, #0]
 8008f88:	2b03      	cmp	r3, #3
 8008f8a:	d008      	beq.n	8008f9e <sync_fs+0x22>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	4611      	mov	r1, r2
 8008f90:	7860      	ldrb	r0, [r4, #1]
 8008f92:	f7ff fe55 	bl	8008c40 <disk_ioctl>
	res = sync_window(fs);
 8008f96:	3800      	subs	r0, #0
 8008f98:	bf18      	it	ne
 8008f9a:	2001      	movne	r0, #1
}
 8008f9c:	bd38      	pop	{r3, r4, r5, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008f9e:	7923      	ldrb	r3, [r4, #4]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d1f3      	bne.n	8008f8c <sync_fs+0x10>
			mem_set(fs->win, 0, SS(fs));
 8008fa4:	f104 0530 	add.w	r5, r4, #48	; 0x30
 8008fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fac:	2100      	movs	r1, #0
 8008fae:	4628      	mov	r0, r5
 8008fb0:	f7ff fe6f 	bl	8008c92 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8008fb4:	2355      	movs	r3, #85	; 0x55
 8008fb6:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
	*ptr++ = (BYTE)val;
 8008fba:	23aa      	movs	r3, #170	; 0xaa
 8008fbc:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008fc0:	490e      	ldr	r1, [pc, #56]	; (8008ffc <sync_fs+0x80>)
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f7ff fe53 	bl	8008c6e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008fc8:	490d      	ldr	r1, [pc, #52]	; (8009000 <sync_fs+0x84>)
 8008fca:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8008fce:	f7ff fe4e 	bl	8008c6e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008fd2:	6921      	ldr	r1, [r4, #16]
 8008fd4:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8008fd8:	f7ff fe49 	bl	8008c6e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008fdc:	68e1      	ldr	r1, [r4, #12]
 8008fde:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8008fe2:	f7ff fe44 	bl	8008c6e <st_dword>
			fs->winsect = fs->volbase + 1;
 8008fe6:	69e2      	ldr	r2, [r4, #28]
 8008fe8:	3201      	adds	r2, #1
 8008fea:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008fec:	2301      	movs	r3, #1
 8008fee:	4629      	mov	r1, r5
 8008ff0:	7860      	ldrb	r0, [r4, #1]
 8008ff2:	f7ff fe19 	bl	8008c28 <disk_write>
			fs->fsi_flag = 0;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	7123      	strb	r3, [r4, #4]
 8008ffa:	e7c7      	b.n	8008f8c <sync_fs+0x10>
 8008ffc:	41615252 	.word	0x41615252
 8009000:	61417272 	.word	0x61417272

08009004 <put_fat>:
{
 8009004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009008:	2901      	cmp	r1, #1
 800900a:	f240 8089 	bls.w	8009120 <put_fat+0x11c>
 800900e:	4606      	mov	r6, r0
 8009010:	460c      	mov	r4, r1
 8009012:	4615      	mov	r5, r2
 8009014:	6943      	ldr	r3, [r0, #20]
 8009016:	428b      	cmp	r3, r1
 8009018:	f240 8084 	bls.w	8009124 <put_fat+0x120>
		switch (fs->fs_type) {
 800901c:	7803      	ldrb	r3, [r0, #0]
 800901e:	2b02      	cmp	r3, #2
 8009020:	d04d      	beq.n	80090be <put_fat+0xba>
 8009022:	2b03      	cmp	r3, #3
 8009024:	d060      	beq.n	80090e8 <put_fat+0xe4>
 8009026:	2b01      	cmp	r3, #1
 8009028:	d003      	beq.n	8009032 <put_fat+0x2e>
 800902a:	2702      	movs	r7, #2
}
 800902c:	4638      	mov	r0, r7
 800902e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 8009032:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009036:	6a01      	ldr	r1, [r0, #32]
 8009038:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800903c:	f7ff ff84 	bl	8008f48 <move_window>
			if (res != FR_OK) break;
 8009040:	4607      	mov	r7, r0
 8009042:	2800      	cmp	r0, #0
 8009044:	d1f2      	bne.n	800902c <put_fat+0x28>
			p = fs->win + bc++ % SS(fs);
 8009046:	f106 0930 	add.w	r9, r6, #48	; 0x30
 800904a:	f108 0a01 	add.w	sl, r8, #1
 800904e:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009052:	f014 0f01 	tst.w	r4, #1
 8009056:	d01a      	beq.n	800908e <put_fat+0x8a>
 8009058:	f819 3008 	ldrb.w	r3, [r9, r8]
 800905c:	f003 030f 	and.w	r3, r3, #15
 8009060:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8009064:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 8009068:	2301      	movs	r3, #1
 800906a:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800906c:	6a31      	ldr	r1, [r6, #32]
 800906e:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8009072:	4630      	mov	r0, r6
 8009074:	f7ff ff68 	bl	8008f48 <move_window>
			if (res != FR_OK) break;
 8009078:	2800      	cmp	r0, #0
 800907a:	d155      	bne.n	8009128 <put_fat+0x124>
			p = fs->win + bc % SS(fs);
 800907c:	f3ca 0108 	ubfx	r1, sl, #0, #9
 8009080:	4449      	add	r1, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009082:	f3c5 1207 	ubfx	r2, r5, #4, #8
 8009086:	700a      	strb	r2, [r1, #0]
			fs->wflag = 1;
 8009088:	2301      	movs	r3, #1
 800908a:	70f3      	strb	r3, [r6, #3]
			break;
 800908c:	e7ce      	b.n	800902c <put_fat+0x28>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800908e:	f809 5008 	strb.w	r5, [r9, r8]
			fs->wflag = 1;
 8009092:	2301      	movs	r3, #1
 8009094:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009096:	6a31      	ldr	r1, [r6, #32]
 8009098:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800909c:	4630      	mov	r0, r6
 800909e:	f7ff ff53 	bl	8008f48 <move_window>
			if (res != FR_OK) break;
 80090a2:	2800      	cmp	r0, #0
 80090a4:	d142      	bne.n	800912c <put_fat+0x128>
			p = fs->win + bc % SS(fs);
 80090a6:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 80090aa:	eb09 010a 	add.w	r1, r9, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80090ae:	f819 300a 	ldrb.w	r3, [r9, sl]
 80090b2:	f023 030f 	bic.w	r3, r3, #15
 80090b6:	f3c5 2203 	ubfx	r2, r5, #8, #4
 80090ba:	431a      	orrs	r2, r3
 80090bc:	e7e3      	b.n	8009086 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80090be:	6a01      	ldr	r1, [r0, #32]
 80090c0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80090c4:	f7ff ff40 	bl	8008f48 <move_window>
			if (res != FR_OK) break;
 80090c8:	4607      	mov	r7, r0
 80090ca:	2800      	cmp	r0, #0
 80090cc:	d1ae      	bne.n	800902c <put_fat+0x28>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80090ce:	f106 0330 	add.w	r3, r6, #48	; 0x30
 80090d2:	0064      	lsls	r4, r4, #1
 80090d4:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80090d8:	1919      	adds	r1, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 80090da:	551d      	strb	r5, [r3, r4]
 80090dc:	f3c5 2207 	ubfx	r2, r5, #8, #8
	*ptr++ = (BYTE)val;
 80090e0:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
 80090e2:	2301      	movs	r3, #1
 80090e4:	70f3      	strb	r3, [r6, #3]
			break;
 80090e6:	e7a1      	b.n	800902c <put_fat+0x28>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80090e8:	6a01      	ldr	r1, [r0, #32]
 80090ea:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80090ee:	f7ff ff2b 	bl	8008f48 <move_window>
			if (res != FR_OK) break;
 80090f2:	4607      	mov	r7, r0
 80090f4:	2800      	cmp	r0, #0
 80090f6:	d199      	bne.n	800902c <put_fat+0x28>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80090f8:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
 80090fc:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8009100:	00a4      	lsls	r4, r4, #2
 8009102:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8009106:	441c      	add	r4, r3
 8009108:	4620      	mov	r0, r4
 800910a:	f7ff fda5 	bl	8008c58 <ld_dword>
 800910e:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009112:	4329      	orrs	r1, r5
 8009114:	4620      	mov	r0, r4
 8009116:	f7ff fdaa 	bl	8008c6e <st_dword>
			fs->wflag = 1;
 800911a:	2301      	movs	r3, #1
 800911c:	70f3      	strb	r3, [r6, #3]
			break;
 800911e:	e785      	b.n	800902c <put_fat+0x28>
	FRESULT res = FR_INT_ERR;
 8009120:	2702      	movs	r7, #2
 8009122:	e783      	b.n	800902c <put_fat+0x28>
 8009124:	2702      	movs	r7, #2
 8009126:	e781      	b.n	800902c <put_fat+0x28>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009128:	4607      	mov	r7, r0
 800912a:	e77f      	b.n	800902c <put_fat+0x28>
 800912c:	4607      	mov	r7, r0
	return res;
 800912e:	e77d      	b.n	800902c <put_fat+0x28>

08009130 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 8009130:	768a      	strb	r2, [r1, #26]
 8009132:	f3c2 2307 	ubfx	r3, r2, #8, #8
	*ptr++ = (BYTE)val;
 8009136:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8009138:	7803      	ldrb	r3, [r0, #0]
 800913a:	2b03      	cmp	r3, #3
 800913c:	d000      	beq.n	8009140 <st_clust+0x10>
}
 800913e:	4770      	bx	lr
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009140:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8009142:	750a      	strb	r2, [r1, #20]
 8009144:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 8009146:	754a      	strb	r2, [r1, #21]
}
 8009148:	e7f9      	b.n	800913e <st_clust+0xe>

0800914a <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800914a:	2901      	cmp	r1, #1
 800914c:	d958      	bls.n	8009200 <get_fat+0xb6>
{
 800914e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009150:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 8009152:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009154:	6973      	ldr	r3, [r6, #20]
 8009156:	428b      	cmp	r3, r1
 8009158:	d954      	bls.n	8009204 <get_fat+0xba>
		switch (fs->fs_type) {
 800915a:	7833      	ldrb	r3, [r6, #0]
 800915c:	2b02      	cmp	r3, #2
 800915e:	d02c      	beq.n	80091ba <get_fat+0x70>
 8009160:	2b03      	cmp	r3, #3
 8009162:	d03b      	beq.n	80091dc <get_fat+0x92>
 8009164:	2b01      	cmp	r3, #1
 8009166:	d001      	beq.n	800916c <get_fat+0x22>
 8009168:	2001      	movs	r0, #1
 800916a:	e04c      	b.n	8009206 <get_fat+0xbc>
			bc = (UINT)clst; bc += bc / 2;
 800916c:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009170:	6a31      	ldr	r1, [r6, #32]
 8009172:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 8009176:	4630      	mov	r0, r6
 8009178:	f7ff fee6 	bl	8008f48 <move_window>
 800917c:	b110      	cbz	r0, 8009184 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800917e:	f04f 30ff 	mov.w	r0, #4294967295
 8009182:	e040      	b.n	8009206 <get_fat+0xbc>
			wc = fs->win[bc++ % SS(fs)];
 8009184:	1c6f      	adds	r7, r5, #1
 8009186:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800918a:	4435      	add	r5, r6
 800918c:	f895 5030 	ldrb.w	r5, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009190:	6a31      	ldr	r1, [r6, #32]
 8009192:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8009196:	4630      	mov	r0, r6
 8009198:	f7ff fed6 	bl	8008f48 <move_window>
 800919c:	bba0      	cbnz	r0, 8009208 <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 800919e:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80091a2:	443e      	add	r6, r7
 80091a4:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 80091a8:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80091ac:	f014 0f01 	tst.w	r4, #1
 80091b0:	bf14      	ite	ne
 80091b2:	0900      	lsrne	r0, r0, #4
 80091b4:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
 80091b8:	e025      	b.n	8009206 <get_fat+0xbc>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80091ba:	6a31      	ldr	r1, [r6, #32]
 80091bc:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80091c0:	4630      	mov	r0, r6
 80091c2:	f7ff fec1 	bl	8008f48 <move_window>
 80091c6:	bb10      	cbnz	r0, 800920e <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80091c8:	3630      	adds	r6, #48	; 0x30
 80091ca:	0064      	lsls	r4, r4, #1
 80091cc:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80091d0:	1933      	adds	r3, r6, r4
	rv = rv << 8 | ptr[0];
 80091d2:	785b      	ldrb	r3, [r3, #1]
 80091d4:	5d30      	ldrb	r0, [r6, r4]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80091d6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
 80091da:	e014      	b.n	8009206 <get_fat+0xbc>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80091dc:	6a31      	ldr	r1, [r6, #32]
 80091de:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80091e2:	4630      	mov	r0, r6
 80091e4:	f7ff feb0 	bl	8008f48 <move_window>
 80091e8:	b9a0      	cbnz	r0, 8009214 <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80091ea:	f106 0030 	add.w	r0, r6, #48	; 0x30
 80091ee:	00a4      	lsls	r4, r4, #2
 80091f0:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80091f4:	4420      	add	r0, r4
 80091f6:	f7ff fd2f 	bl	8008c58 <ld_dword>
 80091fa:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 80091fe:	e002      	b.n	8009206 <get_fat+0xbc>
		val = 1;	/* Internal error */
 8009200:	2001      	movs	r0, #1
}
 8009202:	4770      	bx	lr
		val = 1;	/* Internal error */
 8009204:	2001      	movs	r0, #1
}
 8009206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009208:	f04f 30ff 	mov.w	r0, #4294967295
 800920c:	e7fb      	b.n	8009206 <get_fat+0xbc>
 800920e:	f04f 30ff 	mov.w	r0, #4294967295
 8009212:	e7f8      	b.n	8009206 <get_fat+0xbc>
 8009214:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 8009218:	e7f5      	b.n	8009206 <get_fat+0xbc>

0800921a <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800921a:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800921e:	d242      	bcs.n	80092a6 <dir_sdi+0x8c>
{
 8009220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009224:	4606      	mov	r6, r0
 8009226:	460d      	mov	r5, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009228:	f011 0f1f 	tst.w	r1, #31
 800922c:	d13d      	bne.n	80092aa <dir_sdi+0x90>
	FATFS *fs = dp->obj.fs;
 800922e:	6807      	ldr	r7, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8009230:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009232:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009234:	b9d4      	cbnz	r4, 800926c <dir_sdi+0x52>
 8009236:	783b      	ldrb	r3, [r7, #0]
 8009238:	2b02      	cmp	r3, #2
 800923a:	d901      	bls.n	8009240 <dir_sdi+0x26>
		clst = fs->dirbase;
 800923c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800923e:	b9a3      	cbnz	r3, 800926a <dir_sdi+0x50>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009240:	893b      	ldrh	r3, [r7, #8]
 8009242:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8009246:	d932      	bls.n	80092ae <dir_sdi+0x94>
		dp->sect = fs->dirbase;
 8009248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924a:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 800924c:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800924e:	69f3      	ldr	r3, [r6, #28]
 8009250:	b3ab      	cbz	r3, 80092be <dir_sdi+0xa4>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009252:	eb03 2355 	add.w	r3, r3, r5, lsr #9
 8009256:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009258:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800925c:	f3c5 0108 	ubfx	r1, r5, #0, #9
 8009260:	4419      	add	r1, r3
 8009262:	6231      	str	r1, [r6, #32]
	return FR_OK;
 8009264:	2000      	movs	r0, #0
}
 8009266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		clst = fs->dirbase;
 800926a:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800926c:	897b      	ldrh	r3, [r7, #10]
 800926e:	ea4f 2843 	mov.w	r8, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8009272:	ebb5 2f43 	cmp.w	r5, r3, lsl #9
 8009276:	d310      	bcc.n	800929a <dir_sdi+0x80>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009278:	4621      	mov	r1, r4
 800927a:	4630      	mov	r0, r6
 800927c:	f7ff ff65 	bl	800914a <get_fat>
 8009280:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009282:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009286:	d014      	beq.n	80092b2 <dir_sdi+0x98>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009288:	2801      	cmp	r0, #1
 800928a:	d914      	bls.n	80092b6 <dir_sdi+0x9c>
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	4283      	cmp	r3, r0
 8009290:	d913      	bls.n	80092ba <dir_sdi+0xa0>
			ofs -= csz;
 8009292:	eba5 0508 	sub.w	r5, r5, r8
		while (ofs >= csz) {				/* Follow cluster chain */
 8009296:	45a8      	cmp	r8, r5
 8009298:	d9ee      	bls.n	8009278 <dir_sdi+0x5e>
		dp->sect = clust2sect(fs, clst);
 800929a:	4621      	mov	r1, r4
 800929c:	4638      	mov	r0, r7
 800929e:	f7ff fdbb 	bl	8008e18 <clust2sect>
 80092a2:	61f0      	str	r0, [r6, #28]
 80092a4:	e7d2      	b.n	800924c <dir_sdi+0x32>
		return FR_INT_ERR;
 80092a6:	2002      	movs	r0, #2
}
 80092a8:	4770      	bx	lr
		return FR_INT_ERR;
 80092aa:	2002      	movs	r0, #2
 80092ac:	e7db      	b.n	8009266 <dir_sdi+0x4c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80092ae:	2002      	movs	r0, #2
 80092b0:	e7d9      	b.n	8009266 <dir_sdi+0x4c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80092b2:	2001      	movs	r0, #1
 80092b4:	e7d7      	b.n	8009266 <dir_sdi+0x4c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80092b6:	2002      	movs	r0, #2
 80092b8:	e7d5      	b.n	8009266 <dir_sdi+0x4c>
 80092ba:	2002      	movs	r0, #2
 80092bc:	e7d3      	b.n	8009266 <dir_sdi+0x4c>
	if (!dp->sect) return FR_INT_ERR;
 80092be:	2002      	movs	r0, #2
 80092c0:	e7d1      	b.n	8009266 <dir_sdi+0x4c>

080092c2 <create_chain>:
{
 80092c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092c6:	4606      	mov	r6, r0
	FATFS *fs = obj->fs;
 80092c8:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 80092ca:	4688      	mov	r8, r1
 80092cc:	b939      	cbnz	r1, 80092de <create_chain+0x1c>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80092ce:	68fd      	ldr	r5, [r7, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80092d0:	b195      	cbz	r5, 80092f8 <create_chain+0x36>
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	42ab      	cmp	r3, r5
 80092d6:	bf98      	it	ls
 80092d8:	2501      	movls	r5, #1
		ncl = scl;	/* Start cluster */
 80092da:	462c      	mov	r4, r5
 80092dc:	e01b      	b.n	8009316 <create_chain+0x54>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80092de:	f7ff ff34 	bl	800914a <get_fat>
 80092e2:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80092e4:	2801      	cmp	r0, #1
 80092e6:	d946      	bls.n	8009376 <create_chain+0xb4>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80092e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80092ec:	d048      	beq.n	8009380 <create_chain+0xbe>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	4282      	cmp	r2, r0
 80092f2:	d845      	bhi.n	8009380 <create_chain+0xbe>
		scl = clst;
 80092f4:	4645      	mov	r5, r8
 80092f6:	e7f0      	b.n	80092da <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80092f8:	2501      	movs	r5, #1
 80092fa:	e7ee      	b.n	80092da <create_chain+0x18>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80092fc:	4621      	mov	r1, r4
 80092fe:	4630      	mov	r0, r6
 8009300:	f7ff ff23 	bl	800914a <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8009304:	4603      	mov	r3, r0
 8009306:	b170      	cbz	r0, 8009326 <create_chain+0x64>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009308:	2801      	cmp	r0, #1
 800930a:	d039      	beq.n	8009380 <create_chain+0xbe>
 800930c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009310:	d036      	beq.n	8009380 <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 8009312:	42ac      	cmp	r4, r5
 8009314:	d033      	beq.n	800937e <create_chain+0xbc>
			ncl++;							/* Next cluster */
 8009316:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	42a3      	cmp	r3, r4
 800931c:	d8ee      	bhi.n	80092fc <create_chain+0x3a>
				if (ncl > scl) return 0;	/* No free cluster */
 800931e:	2d01      	cmp	r5, #1
 8009320:	d92b      	bls.n	800937a <create_chain+0xb8>
				ncl = 2;
 8009322:	2402      	movs	r4, #2
 8009324:	e7ea      	b.n	80092fc <create_chain+0x3a>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009326:	f04f 32ff 	mov.w	r2, #4294967295
 800932a:	4621      	mov	r1, r4
 800932c:	4638      	mov	r0, r7
 800932e:	f7ff fe69 	bl	8009004 <put_fat>
		if (res == FR_OK && clst != 0) {
 8009332:	4603      	mov	r3, r0
 8009334:	b9c8      	cbnz	r0, 800936a <create_chain+0xa8>
 8009336:	f1b8 0f00 	cmp.w	r8, #0
 800933a:	d10e      	bne.n	800935a <create_chain+0x98>
		fs->last_clst = ncl;
 800933c:	60fc      	str	r4, [r7, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	3b02      	subs	r3, #2
 8009344:	429a      	cmp	r2, r3
 8009346:	bf9c      	itt	ls
 8009348:	f102 32ff 	addls.w	r2, r2, #4294967295
 800934c:	613a      	strls	r2, [r7, #16]
		fs->fsi_flag |= 1;
 800934e:	793b      	ldrb	r3, [r7, #4]
 8009350:	f043 0301 	orr.w	r3, r3, #1
 8009354:	713b      	strb	r3, [r7, #4]
 8009356:	4623      	mov	r3, r4
 8009358:	e012      	b.n	8009380 <create_chain+0xbe>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800935a:	4622      	mov	r2, r4
 800935c:	4641      	mov	r1, r8
 800935e:	4638      	mov	r0, r7
 8009360:	f7ff fe50 	bl	8009004 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009364:	4603      	mov	r3, r0
 8009366:	2800      	cmp	r0, #0
 8009368:	d0e8      	beq.n	800933c <create_chain+0x7a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800936a:	2b01      	cmp	r3, #1
 800936c:	bf0c      	ite	eq
 800936e:	f04f 33ff 	moveq.w	r3, #4294967295
 8009372:	2301      	movne	r3, #1
 8009374:	e004      	b.n	8009380 <create_chain+0xbe>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009376:	2301      	movs	r3, #1
 8009378:	e002      	b.n	8009380 <create_chain+0xbe>
				if (ncl > scl) return 0;	/* No free cluster */
 800937a:	2300      	movs	r3, #0
 800937c:	e000      	b.n	8009380 <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009386 <remove_chain>:
{
 8009386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800938a:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800938c:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800938e:	2901      	cmp	r1, #1
 8009390:	d931      	bls.n	80093f6 <remove_chain+0x70>
 8009392:	4606      	mov	r6, r0
 8009394:	4611      	mov	r1, r2
 8009396:	696b      	ldr	r3, [r5, #20]
 8009398:	42a3      	cmp	r3, r4
 800939a:	d92f      	bls.n	80093fc <remove_chain+0x76>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800939c:	b90a      	cbnz	r2, 80093a2 <remove_chain+0x1c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800939e:	2700      	movs	r7, #0
 80093a0:	e00a      	b.n	80093b8 <remove_chain+0x32>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80093a2:	f04f 32ff 	mov.w	r2, #4294967295
 80093a6:	4628      	mov	r0, r5
 80093a8:	f7ff fe2c 	bl	8009004 <put_fat>
		if (res != FR_OK) return res;
 80093ac:	4684      	mov	ip, r0
 80093ae:	2800      	cmp	r0, #0
 80093b0:	d0f5      	beq.n	800939e <remove_chain+0x18>
 80093b2:	e025      	b.n	8009400 <remove_chain+0x7a>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80093b4:	42a2      	cmp	r2, r4
 80093b6:	d923      	bls.n	8009400 <remove_chain+0x7a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80093b8:	46a0      	mov	r8, r4
 80093ba:	4621      	mov	r1, r4
 80093bc:	4630      	mov	r0, r6
 80093be:	f7ff fec4 	bl	800914a <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 80093c2:	4604      	mov	r4, r0
 80093c4:	b1f8      	cbz	r0, 8009406 <remove_chain+0x80>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80093c6:	2801      	cmp	r0, #1
 80093c8:	d020      	beq.n	800940c <remove_chain+0x86>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80093ca:	f1b0 3fff 	cmp.w	r0, #4294967295
 80093ce:	d020      	beq.n	8009412 <remove_chain+0x8c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80093d0:	463a      	mov	r2, r7
 80093d2:	4641      	mov	r1, r8
 80093d4:	4628      	mov	r0, r5
 80093d6:	f7ff fe15 	bl	8009004 <put_fat>
			if (res != FR_OK) return res;
 80093da:	4684      	mov	ip, r0
 80093dc:	b980      	cbnz	r0, 8009400 <remove_chain+0x7a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80093de:	692b      	ldr	r3, [r5, #16]
 80093e0:	696a      	ldr	r2, [r5, #20]
 80093e2:	1e91      	subs	r1, r2, #2
 80093e4:	428b      	cmp	r3, r1
 80093e6:	d2e5      	bcs.n	80093b4 <remove_chain+0x2e>
			fs->free_clst++;
 80093e8:	3301      	adds	r3, #1
 80093ea:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 80093ec:	792b      	ldrb	r3, [r5, #4]
 80093ee:	f043 0301 	orr.w	r3, r3, #1
 80093f2:	712b      	strb	r3, [r5, #4]
 80093f4:	e7de      	b.n	80093b4 <remove_chain+0x2e>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80093f6:	f04f 0c02 	mov.w	ip, #2
 80093fa:	e001      	b.n	8009400 <remove_chain+0x7a>
 80093fc:	f04f 0c02 	mov.w	ip, #2
}
 8009400:	4660      	mov	r0, ip
 8009402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return FR_OK;
 8009406:	f04f 0c00 	mov.w	ip, #0
 800940a:	e7f9      	b.n	8009400 <remove_chain+0x7a>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800940c:	f04f 0c02 	mov.w	ip, #2
 8009410:	e7f6      	b.n	8009400 <remove_chain+0x7a>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009412:	f04f 0c01 	mov.w	ip, #1
 8009416:	e7f3      	b.n	8009400 <remove_chain+0x7a>

08009418 <dir_next>:
{
 8009418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800941c:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800941e:	69c3      	ldr	r3, [r0, #28]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d06d      	beq.n	8009500 <dir_next+0xe8>
 8009424:	4604      	mov	r4, r0
 8009426:	460f      	mov	r7, r1
 8009428:	3520      	adds	r5, #32
 800942a:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800942e:	d269      	bcs.n	8009504 <dir_next+0xec>
	FATFS *fs = dp->obj.fs;
 8009430:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009432:	f3c5 0808 	ubfx	r8, r5, #0, #9
 8009436:	f1b8 0f00 	cmp.w	r8, #0
 800943a:	d107      	bne.n	800944c <dir_next+0x34>
		dp->sect++;				/* Next sector */
 800943c:	3301      	adds	r3, #1
 800943e:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8009440:	6981      	ldr	r1, [r0, #24]
 8009442:	b971      	cbnz	r1, 8009462 <dir_next+0x4a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009444:	8933      	ldrh	r3, [r6, #8]
 8009446:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800944a:	d906      	bls.n	800945a <dir_next+0x42>
	dp->dptr = ofs;						/* Current entry */
 800944c:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800944e:	3630      	adds	r6, #48	; 0x30
 8009450:	4446      	add	r6, r8
 8009452:	6226      	str	r6, [r4, #32]
	return FR_OK;
 8009454:	2000      	movs	r0, #0
}
 8009456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
 800945a:	2300      	movs	r3, #0
 800945c:	61c3      	str	r3, [r0, #28]
 800945e:	2004      	movs	r0, #4
 8009460:	e7f9      	b.n	8009456 <dir_next+0x3e>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009462:	8973      	ldrh	r3, [r6, #10]
 8009464:	3b01      	subs	r3, #1
 8009466:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 800946a:	d1ef      	bne.n	800944c <dir_next+0x34>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800946c:	f7ff fe6d 	bl	800914a <get_fat>
 8009470:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009472:	2801      	cmp	r0, #1
 8009474:	d948      	bls.n	8009508 <dir_next+0xf0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009476:	f1b0 3fff 	cmp.w	r0, #4294967295
 800947a:	d047      	beq.n	800950c <dir_next+0xf4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800947c:	6973      	ldr	r3, [r6, #20]
 800947e:	4283      	cmp	r3, r0
 8009480:	d836      	bhi.n	80094f0 <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
 8009482:	b18f      	cbz	r7, 80094a8 <dir_next+0x90>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009484:	69a1      	ldr	r1, [r4, #24]
 8009486:	4620      	mov	r0, r4
 8009488:	f7ff ff1b 	bl	80092c2 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800948c:	4682      	mov	sl, r0
 800948e:	2800      	cmp	r0, #0
 8009490:	d03e      	beq.n	8009510 <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009492:	2801      	cmp	r0, #1
 8009494:	d03e      	beq.n	8009514 <dir_next+0xfc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009496:	f1b0 3fff 	cmp.w	r0, #4294967295
 800949a:	d03d      	beq.n	8009518 <dir_next+0x100>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800949c:	4630      	mov	r0, r6
 800949e:	f7ff fd26 	bl	8008eee <sync_window>
 80094a2:	b128      	cbz	r0, 80094b0 <dir_next+0x98>
 80094a4:	2001      	movs	r0, #1
 80094a6:	e7d6      	b.n	8009456 <dir_next+0x3e>
						dp->sect = 0; return FR_NO_FILE;
 80094a8:	2300      	movs	r3, #0
 80094aa:	61e3      	str	r3, [r4, #28]
 80094ac:	2004      	movs	r0, #4
 80094ae:	e7d2      	b.n	8009456 <dir_next+0x3e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80094b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094b4:	2100      	movs	r1, #0
 80094b6:	f106 0030 	add.w	r0, r6, #48	; 0x30
 80094ba:	f7ff fbea 	bl	8008c92 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80094be:	4651      	mov	r1, sl
 80094c0:	4630      	mov	r0, r6
 80094c2:	f7ff fca9 	bl	8008e18 <clust2sect>
 80094c6:	62f0      	str	r0, [r6, #44]	; 0x2c
 80094c8:	8973      	ldrh	r3, [r6, #10]
 80094ca:	b16b      	cbz	r3, 80094e8 <dir_next+0xd0>
						fs->wflag = 1;
 80094cc:	2701      	movs	r7, #1
 80094ce:	70f7      	strb	r7, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80094d0:	4630      	mov	r0, r6
 80094d2:	f7ff fd0c 	bl	8008eee <sync_window>
 80094d6:	bb08      	cbnz	r0, 800951c <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80094d8:	f109 0901 	add.w	r9, r9, #1
 80094dc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80094de:	3301      	adds	r3, #1
 80094e0:	62f3      	str	r3, [r6, #44]	; 0x2c
 80094e2:	8973      	ldrh	r3, [r6, #10]
 80094e4:	454b      	cmp	r3, r9
 80094e6:	d8f2      	bhi.n	80094ce <dir_next+0xb6>
					fs->winsect -= n;							/* Restore window offset */
 80094e8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80094ea:	eba3 0309 	sub.w	r3, r3, r9
 80094ee:	62f3      	str	r3, [r6, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 80094f0:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 80094f4:	4651      	mov	r1, sl
 80094f6:	4630      	mov	r0, r6
 80094f8:	f7ff fc8e 	bl	8008e18 <clust2sect>
 80094fc:	61e0      	str	r0, [r4, #28]
 80094fe:	e7a5      	b.n	800944c <dir_next+0x34>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009500:	2004      	movs	r0, #4
 8009502:	e7a8      	b.n	8009456 <dir_next+0x3e>
 8009504:	2004      	movs	r0, #4
 8009506:	e7a6      	b.n	8009456 <dir_next+0x3e>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009508:	2002      	movs	r0, #2
 800950a:	e7a4      	b.n	8009456 <dir_next+0x3e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800950c:	2001      	movs	r0, #1
 800950e:	e7a2      	b.n	8009456 <dir_next+0x3e>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009510:	2007      	movs	r0, #7
 8009512:	e7a0      	b.n	8009456 <dir_next+0x3e>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009514:	2002      	movs	r0, #2
 8009516:	e79e      	b.n	8009456 <dir_next+0x3e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009518:	2001      	movs	r0, #1
 800951a:	e79c      	b.n	8009456 <dir_next+0x3e>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800951c:	2001      	movs	r0, #1
 800951e:	e79a      	b.n	8009456 <dir_next+0x3e>

08009520 <dir_register>:
{
 8009520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009522:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8009524:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8009526:	2100      	movs	r1, #0
 8009528:	f7ff fe77 	bl	800921a <dir_sdi>
	if (res == FR_OK) {
 800952c:	bb48      	cbnz	r0, 8009582 <dir_register+0x62>
			res = dir_next(dp, 1);
 800952e:	2701      	movs	r7, #1
 8009530:	e005      	b.n	800953e <dir_register+0x1e>
 8009532:	4639      	mov	r1, r7
 8009534:	4620      	mov	r0, r4
 8009536:	f7ff ff6f 	bl	8009418 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800953a:	4605      	mov	r5, r0
 800953c:	bb30      	cbnz	r0, 800958c <dir_register+0x6c>
			res = move_window(fs, dp->sect);
 800953e:	69e1      	ldr	r1, [r4, #28]
 8009540:	4630      	mov	r0, r6
 8009542:	f7ff fd01 	bl	8008f48 <move_window>
			if (res != FR_OK) break;
 8009546:	4605      	mov	r5, r0
 8009548:	bb00      	cbnz	r0, 800958c <dir_register+0x6c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800954a:	6a23      	ldr	r3, [r4, #32]
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	2be5      	cmp	r3, #229	; 0xe5
 8009550:	d001      	beq.n	8009556 <dir_register+0x36>
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1ed      	bne.n	8009532 <dir_register+0x12>
		res = move_window(fs, dp->sect);
 8009556:	69e1      	ldr	r1, [r4, #28]
 8009558:	4630      	mov	r0, r6
 800955a:	f7ff fcf5 	bl	8008f48 <move_window>
		if (res == FR_OK) {
 800955e:	4605      	mov	r5, r0
 8009560:	b108      	cbz	r0, 8009566 <dir_register+0x46>
}
 8009562:	4628      	mov	r0, r5
 8009564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009566:	2220      	movs	r2, #32
 8009568:	2100      	movs	r1, #0
 800956a:	6a20      	ldr	r0, [r4, #32]
 800956c:	f7ff fb91 	bl	8008c92 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009570:	220b      	movs	r2, #11
 8009572:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8009576:	6a20      	ldr	r0, [r4, #32]
 8009578:	f7ff fb81 	bl	8008c7e <mem_cpy>
			fs->wflag = 1;
 800957c:	2301      	movs	r3, #1
 800957e:	70f3      	strb	r3, [r6, #3]
 8009580:	e7ef      	b.n	8009562 <dir_register+0x42>
 8009582:	4605      	mov	r5, r0
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009584:	2804      	cmp	r0, #4
 8009586:	d1ec      	bne.n	8009562 <dir_register+0x42>
 8009588:	2507      	movs	r5, #7
 800958a:	e7ea      	b.n	8009562 <dir_register+0x42>
 800958c:	2d04      	cmp	r5, #4
 800958e:	d0fb      	beq.n	8009588 <dir_register+0x68>
 8009590:	e7e7      	b.n	8009562 <dir_register+0x42>
	...

08009594 <check_fs>:
{
 8009594:	b538      	push	{r3, r4, r5, lr}
 8009596:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009598:	2300      	movs	r3, #0
 800959a:	70c3      	strb	r3, [r0, #3]
 800959c:	f04f 33ff 	mov.w	r3, #4294967295
 80095a0:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80095a2:	f7ff fcd1 	bl	8008f48 <move_window>
 80095a6:	bb40      	cbnz	r0, 80095fa <check_fs+0x66>
 80095a8:	4605      	mov	r5, r0
	rv = rv << 8 | ptr[0];
 80095aa:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 80095ae:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 80095b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80095b6:	b21b      	sxth	r3, r3
 80095b8:	4a12      	ldr	r2, [pc, #72]	; (8009604 <check_fs+0x70>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d11f      	bne.n	80095fe <check_fs+0x6a>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80095be:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80095c2:	2be9      	cmp	r3, #233	; 0xe9
 80095c4:	d007      	beq.n	80095d6 <check_fs+0x42>
 80095c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80095c8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80095cc:	4a0e      	ldr	r2, [pc, #56]	; (8009608 <check_fs+0x74>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d001      	beq.n	80095d6 <check_fs+0x42>
	return 2;
 80095d2:	2502      	movs	r5, #2
 80095d4:	e014      	b.n	8009600 <check_fs+0x6c>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80095d6:	f104 0066 	add.w	r0, r4, #102	; 0x66
 80095da:	f7ff fb3d 	bl	8008c58 <ld_dword>
 80095de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80095e2:	4b0a      	ldr	r3, [pc, #40]	; (800960c <check_fs+0x78>)
 80095e4:	4298      	cmp	r0, r3
 80095e6:	d00b      	beq.n	8009600 <check_fs+0x6c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80095e8:	f104 0082 	add.w	r0, r4, #130	; 0x82
 80095ec:	f7ff fb34 	bl	8008c58 <ld_dword>
	return 2;
 80095f0:	4b07      	ldr	r3, [pc, #28]	; (8009610 <check_fs+0x7c>)
 80095f2:	4298      	cmp	r0, r3
 80095f4:	bf18      	it	ne
 80095f6:	2502      	movne	r5, #2
 80095f8:	e002      	b.n	8009600 <check_fs+0x6c>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80095fa:	2504      	movs	r5, #4
 80095fc:	e000      	b.n	8009600 <check_fs+0x6c>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80095fe:	2503      	movs	r5, #3
}
 8009600:	4628      	mov	r0, r5
 8009602:	bd38      	pop	{r3, r4, r5, pc}
 8009604:	ffffaa55 	.word	0xffffaa55
 8009608:	009000eb 	.word	0x009000eb
 800960c:	00544146 	.word	0x00544146
 8009610:	33544146 	.word	0x33544146

08009614 <find_volume>:
{
 8009614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009618:	b085      	sub	sp, #20
 800961a:	460e      	mov	r6, r1
 800961c:	4615      	mov	r5, r2
	*rfs = 0;
 800961e:	2300      	movs	r3, #0
 8009620:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8009622:	f7ff fc18 	bl	8008e56 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8009626:	1e07      	subs	r7, r0, #0
 8009628:	f2c0 8179 	blt.w	800991e <find_volume+0x30a>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800962c:	4bcc      	ldr	r3, [pc, #816]	; (8009960 <find_volume+0x34c>)
 800962e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009632:	2c00      	cmp	r4, #0
 8009634:	f000 8178 	beq.w	8009928 <find_volume+0x314>
	*rfs = fs;							/* Return pointer to the file system object */
 8009638:	6034      	str	r4, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800963a:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800963e:	7823      	ldrb	r3, [r4, #0]
 8009640:	b16b      	cbz	r3, 800965e <find_volume+0x4a>
		stat = disk_status(fs->drv);
 8009642:	7860      	ldrb	r0, [r4, #1]
 8009644:	f7ff fac4 	bl	8008bd0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009648:	f010 0f01 	tst.w	r0, #1
 800964c:	d107      	bne.n	800965e <find_volume+0x4a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800964e:	2d00      	cmp	r5, #0
 8009650:	f000 8166 	beq.w	8009920 <find_volume+0x30c>
				return FR_WRITE_PROTECTED;
 8009654:	f010 0504 	ands.w	r5, r0, #4
 8009658:	bf18      	it	ne
 800965a:	250a      	movne	r5, #10
 800965c:	e160      	b.n	8009920 <find_volume+0x30c>
	fs->fs_type = 0;					/* Clear the file system object */
 800965e:	2300      	movs	r3, #0
 8009660:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009662:	b2f8      	uxtb	r0, r7
 8009664:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009666:	f7ff fabf 	bl	8008be8 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800966a:	f010 0601 	ands.w	r6, r0, #1
 800966e:	f040 815d 	bne.w	800992c <find_volume+0x318>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009672:	b11d      	cbz	r5, 800967c <find_volume+0x68>
 8009674:	f010 0f04 	tst.w	r0, #4
 8009678:	f040 815a 	bne.w	8009930 <find_volume+0x31c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800967c:	2100      	movs	r1, #0
 800967e:	4620      	mov	r0, r4
 8009680:	f7ff ff88 	bl	8009594 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009684:	2802      	cmp	r0, #2
 8009686:	f000 80a8 	beq.w	80097da <find_volume+0x1c6>
	bsect = 0;
 800968a:	2500      	movs	r5, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800968c:	2804      	cmp	r0, #4
 800968e:	f000 8151 	beq.w	8009934 <find_volume+0x320>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009692:	2801      	cmp	r0, #1
 8009694:	f200 8150 	bhi.w	8009938 <find_volume+0x324>
	rv = rv << 8 | ptr[0];
 8009698:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800969c:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 80096a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80096a4:	b21b      	sxth	r3, r3
 80096a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096aa:	f040 8147 	bne.w	800993c <find_volume+0x328>
	rv = rv << 8 | ptr[0];
 80096ae:	f894 8047 	ldrb.w	r8, [r4, #71]	; 0x47
 80096b2:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80096b6:	ea50 2808 	orrs.w	r8, r0, r8, lsl #8
 80096ba:	d104      	bne.n	80096c6 <find_volume+0xb2>
 80096bc:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80096c0:	f7ff faca 	bl	8008c58 <ld_dword>
 80096c4:	4680      	mov	r8, r0
		fs->fsize = fasize;
 80096c6:	f8c4 8018 	str.w	r8, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80096ca:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
 80096ce:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80096d2:	f109 33ff 	add.w	r3, r9, #4294967295
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b01      	cmp	r3, #1
 80096da:	f200 8131 	bhi.w	8009940 <find_volume+0x32c>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80096de:	f894 a03d 	ldrb.w	sl, [r4, #61]	; 0x3d
 80096e2:	fa1f f38a 	uxth.w	r3, sl
 80096e6:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f000 812b 	beq.w	8009944 <find_volume+0x330>
 80096ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80096f2:	ea13 0f0a 	tst.w	r3, sl
 80096f6:	f040 8127 	bne.w	8009948 <find_volume+0x334>
	rv = rv << 8 | ptr[0];
 80096fa:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80096fe:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
 8009702:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 8009706:	fa0f fb87 	sxth.w	fp, r7
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800970a:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800970c:	f017 0f0f 	tst.w	r7, #15
 8009710:	f040 811c 	bne.w	800994c <find_volume+0x338>
	rv = rv << 8 | ptr[0];
 8009714:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8009718:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800971c:	ea53 2000 	orrs.w	r0, r3, r0, lsl #8
 8009720:	d103      	bne.n	800972a <find_volume+0x116>
 8009722:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009726:	f7ff fa97 	bl	8008c58 <ld_dword>
	rv = rv << 8 | ptr[0];
 800972a:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 800972e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009732:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 8009736:	f000 810b 	beq.w	8009950 <find_volume+0x33c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800973a:	fb08 f109 	mul.w	r1, r8, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800973e:	eb02 1c17 	add.w	ip, r2, r7, lsr #4
 8009742:	448c      	add	ip, r1
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009744:	4560      	cmp	r0, ip
 8009746:	f0c0 8105 	bcc.w	8009954 <find_volume+0x340>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800974a:	eba0 030c 	sub.w	r3, r0, ip
 800974e:	fbb3 f0fa 	udiv	r0, r3, sl
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009752:	4553      	cmp	r3, sl
 8009754:	f0c0 8100 	bcc.w	8009958 <find_volume+0x344>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009758:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 800975c:	4298      	cmp	r0, r3
 800975e:	d868      	bhi.n	8009832 <find_volume+0x21e>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009760:	f640 73f5 	movw	r3, #4085	; 0xff5
 8009764:	4298      	cmp	r0, r3
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009766:	bf88      	it	hi
 8009768:	f04f 0902 	movhi.w	r9, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800976c:	d863      	bhi.n	8009836 <find_volume+0x222>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800976e:	f100 0a02 	add.w	sl, r0, #2
 8009772:	f8c4 a014 	str.w	sl, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009776:	61e5      	str	r5, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009778:	442a      	add	r2, r5
 800977a:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800977c:	4465      	add	r5, ip
 800977e:	62a5      	str	r5, [r4, #40]	; 0x28
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009780:	2f00      	cmp	r7, #0
 8009782:	f000 80ff 	beq.w	8009984 <find_volume+0x370>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009786:	440a      	add	r2, r1
 8009788:	6262      	str	r2, [r4, #36]	; 0x24
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800978a:	f04f 0901 	mov.w	r9, #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800978e:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
 8009792:	f00a 0301 	and.w	r3, sl, #1
 8009796:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800979a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800979e:	ebb8 2f53 	cmp.w	r8, r3, lsr #9
 80097a2:	f0c0 80ed 	bcc.w	8009980 <find_volume+0x36c>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80097a6:	f04f 33ff 	mov.w	r3, #4294967295
 80097aa:	6123      	str	r3, [r4, #16]
 80097ac:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
 80097ae:	2380      	movs	r3, #128	; 0x80
 80097b0:	7123      	strb	r3, [r4, #4]
	fs->fs_type = fmt;		/* FAT sub-type */
 80097b2:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 80097b6:	4a6b      	ldr	r2, [pc, #428]	; (8009964 <find_volume+0x350>)
 80097b8:	8813      	ldrh	r3, [r2, #0]
 80097ba:	3301      	adds	r3, #1
 80097bc:	b29b      	uxth	r3, r3
 80097be:	8013      	strh	r3, [r2, #0]
 80097c0:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80097c2:	4b69      	ldr	r3, [pc, #420]	; (8009968 <find_volume+0x354>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	42a3      	cmp	r3, r4
 80097c8:	f000 80a1 	beq.w	800990e <find_volume+0x2fa>
 80097cc:	4b66      	ldr	r3, [pc, #408]	; (8009968 <find_volume+0x354>)
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	429c      	cmp	r4, r3
 80097d2:	f000 80a0 	beq.w	8009916 <find_volume+0x302>
	return FR_OK;
 80097d6:	4635      	mov	r5, r6
 80097d8:	e0a2      	b.n	8009920 <find_volume+0x30c>
 80097da:	466f      	mov	r7, sp
 80097dc:	f504 75fb 	add.w	r5, r4, #502	; 0x1f6
 80097e0:	f204 2936 	addw	r9, r4, #566	; 0x236
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80097e4:	46b8      	mov	r8, r7
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80097e6:	f04f 0a00 	mov.w	sl, #0
 80097ea:	e005      	b.n	80097f8 <find_volume+0x1e4>
 80097ec:	4650      	mov	r0, sl
 80097ee:	f848 0b04 	str.w	r0, [r8], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80097f2:	3510      	adds	r5, #16
 80097f4:	454d      	cmp	r5, r9
 80097f6:	d007      	beq.n	8009808 <find_volume+0x1f4>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80097f8:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d0f5      	beq.n	80097ec <find_volume+0x1d8>
 8009800:	4628      	mov	r0, r5
 8009802:	f7ff fa29 	bl	8008c58 <ld_dword>
 8009806:	e7f2      	b.n	80097ee <find_volume+0x1da>
 8009808:	f107 0810 	add.w	r8, r7, #16
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800980c:	f04f 0903 	mov.w	r9, #3
 8009810:	e009      	b.n	8009826 <find_volume+0x212>
 8009812:	4629      	mov	r1, r5
 8009814:	4620      	mov	r0, r4
 8009816:	f7ff febd 	bl	8009594 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800981a:	2801      	cmp	r0, #1
 800981c:	f67f af3c 	bls.w	8009698 <find_volume+0x84>
 8009820:	4547      	cmp	r7, r8
 8009822:	f43f af33 	beq.w	800968c <find_volume+0x78>
			bsect = br[i];
 8009826:	f857 5b04 	ldr.w	r5, [r7], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800982a:	2d00      	cmp	r5, #0
 800982c:	d1f1      	bne.n	8009812 <find_volume+0x1fe>
 800982e:	4648      	mov	r0, r9
 8009830:	e7f6      	b.n	8009820 <find_volume+0x20c>
		fmt = FS_FAT32;
 8009832:	f04f 0903 	mov.w	r9, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009836:	f100 0a02 	add.w	sl, r0, #2
 800983a:	f8c4 a014 	str.w	sl, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800983e:	61e5      	str	r5, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009840:	442a      	add	r2, r5
 8009842:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009844:	eb0c 0305 	add.w	r3, ip, r5
 8009848:	62a3      	str	r3, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800984a:	f1b9 0f03 	cmp.w	r9, #3
 800984e:	d153      	bne.n	80098f8 <find_volume+0x2e4>
	rv = rv << 8 | ptr[0];
 8009850:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
 8009854:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8009858:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800985c:	fa1f fb8b 	uxth.w	fp, fp
 8009860:	ea5b 0303 	orrs.w	r3, fp, r3
 8009864:	d17a      	bne.n	800995c <find_volume+0x348>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009866:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800986a:	f7ff f9f5 	bl	8008c58 <ld_dword>
 800986e:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009870:	ea4f 038a 	mov.w	r3, sl, lsl #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009874:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009878:	ebb8 2f53 	cmp.w	r8, r3, lsr #9
 800987c:	d37c      	bcc.n	8009978 <find_volume+0x364>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800987e:	f04f 33ff 	mov.w	r3, #4294967295
 8009882:	6123      	str	r3, [r4, #16]
 8009884:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
 8009886:	2380      	movs	r3, #128	; 0x80
 8009888:	7123      	strb	r3, [r4, #4]
	rv = rv << 8 | ptr[0];
 800988a:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 800988e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8009892:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009896:	b21b      	sxth	r3, r3
 8009898:	2b01      	cmp	r3, #1
 800989a:	d18a      	bne.n	80097b2 <find_volume+0x19e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800989c:	1c69      	adds	r1, r5, #1
 800989e:	4620      	mov	r0, r4
 80098a0:	f7ff fb52 	bl	8008f48 <move_window>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	d184      	bne.n	80097b2 <find_volume+0x19e>
			fs->fsi_flag = 0;
 80098a8:	2300      	movs	r3, #0
 80098aa:	7123      	strb	r3, [r4, #4]
	rv = rv << 8 | ptr[0];
 80098ac:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 80098b0:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 80098b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80098b8:	b21b      	sxth	r3, r3
 80098ba:	4a2c      	ldr	r2, [pc, #176]	; (800996c <find_volume+0x358>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	f47f af78 	bne.w	80097b2 <find_volume+0x19e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80098c2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80098c6:	f7ff f9c7 	bl	8008c58 <ld_dword>
 80098ca:	4b29      	ldr	r3, [pc, #164]	; (8009970 <find_volume+0x35c>)
 80098cc:	4298      	cmp	r0, r3
 80098ce:	f47f af70 	bne.w	80097b2 <find_volume+0x19e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80098d2:	f504 7005 	add.w	r0, r4, #532	; 0x214
 80098d6:	f7ff f9bf 	bl	8008c58 <ld_dword>
 80098da:	4b26      	ldr	r3, [pc, #152]	; (8009974 <find_volume+0x360>)
 80098dc:	4298      	cmp	r0, r3
 80098de:	f47f af68 	bne.w	80097b2 <find_volume+0x19e>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80098e2:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80098e6:	f7ff f9b7 	bl	8008c58 <ld_dword>
 80098ea:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80098ec:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80098f0:	f7ff f9b2 	bl	8008c58 <ld_dword>
 80098f4:	60e0      	str	r0, [r4, #12]
 80098f6:	e75c      	b.n	80097b2 <find_volume+0x19e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80098f8:	2f00      	cmp	r7, #0
 80098fa:	d03f      	beq.n	800997c <find_volume+0x368>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80098fc:	440a      	add	r2, r1
 80098fe:	6262      	str	r2, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009900:	f1b9 0f02 	cmp.w	r9, #2
 8009904:	f47f af43 	bne.w	800978e <find_volume+0x17a>
 8009908:	ea4f 034a 	mov.w	r3, sl, lsl #1
 800990c:	e745      	b.n	800979a <find_volume+0x186>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800990e:	4b16      	ldr	r3, [pc, #88]	; (8009968 <find_volume+0x354>)
 8009910:	2200      	movs	r2, #0
 8009912:	601a      	str	r2, [r3, #0]
 8009914:	e75a      	b.n	80097cc <find_volume+0x1b8>
 8009916:	4b14      	ldr	r3, [pc, #80]	; (8009968 <find_volume+0x354>)
 8009918:	2200      	movs	r2, #0
 800991a:	611a      	str	r2, [r3, #16]
 800991c:	e75b      	b.n	80097d6 <find_volume+0x1c2>
	if (vol < 0) return FR_INVALID_DRIVE;
 800991e:	250b      	movs	r5, #11
}
 8009920:	4628      	mov	r0, r5
 8009922:	b005      	add	sp, #20
 8009924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009928:	250c      	movs	r5, #12
 800992a:	e7f9      	b.n	8009920 <find_volume+0x30c>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800992c:	2503      	movs	r5, #3
 800992e:	e7f7      	b.n	8009920 <find_volume+0x30c>
		return FR_WRITE_PROTECTED;
 8009930:	250a      	movs	r5, #10
 8009932:	e7f5      	b.n	8009920 <find_volume+0x30c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009934:	2501      	movs	r5, #1
 8009936:	e7f3      	b.n	8009920 <find_volume+0x30c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009938:	250d      	movs	r5, #13
 800993a:	e7f1      	b.n	8009920 <find_volume+0x30c>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800993c:	250d      	movs	r5, #13
 800993e:	e7ef      	b.n	8009920 <find_volume+0x30c>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009940:	250d      	movs	r5, #13
 8009942:	e7ed      	b.n	8009920 <find_volume+0x30c>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009944:	250d      	movs	r5, #13
 8009946:	e7eb      	b.n	8009920 <find_volume+0x30c>
 8009948:	250d      	movs	r5, #13
 800994a:	e7e9      	b.n	8009920 <find_volume+0x30c>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800994c:	250d      	movs	r5, #13
 800994e:	e7e7      	b.n	8009920 <find_volume+0x30c>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009950:	250d      	movs	r5, #13
 8009952:	e7e5      	b.n	8009920 <find_volume+0x30c>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009954:	250d      	movs	r5, #13
 8009956:	e7e3      	b.n	8009920 <find_volume+0x30c>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009958:	250d      	movs	r5, #13
 800995a:	e7e1      	b.n	8009920 <find_volume+0x30c>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800995c:	250d      	movs	r5, #13
 800995e:	e7df      	b.n	8009920 <find_volume+0x30c>
 8009960:	2000092c 	.word	0x2000092c
 8009964:	20000950 	.word	0x20000950
 8009968:	20000930 	.word	0x20000930
 800996c:	ffffaa55 	.word	0xffffaa55
 8009970:	41615252 	.word	0x41615252
 8009974:	61417272 	.word	0x61417272
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009978:	250d      	movs	r5, #13
 800997a:	e7d1      	b.n	8009920 <find_volume+0x30c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800997c:	250d      	movs	r5, #13
 800997e:	e7cf      	b.n	8009920 <find_volume+0x30c>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009980:	250d      	movs	r5, #13
 8009982:	e7cd      	b.n	8009920 <find_volume+0x30c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009984:	250d      	movs	r5, #13
 8009986:	e7cb      	b.n	8009920 <find_volume+0x30c>

08009988 <ld_clust>:
	rv = rv << 8 | ptr[0];
 8009988:	7eca      	ldrb	r2, [r1, #27]
 800998a:	7e8b      	ldrb	r3, [r1, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 800998c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8009990:	7802      	ldrb	r2, [r0, #0]
 8009992:	2a03      	cmp	r2, #3
 8009994:	d001      	beq.n	800999a <ld_clust+0x12>
}
 8009996:	4618      	mov	r0, r3
 8009998:	4770      	bx	lr
	rv = rv << 8 | ptr[0];
 800999a:	7d48      	ldrb	r0, [r1, #21]
 800999c:	7d0a      	ldrb	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800999e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80099a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return cl;
 80099a6:	e7f6      	b.n	8009996 <ld_clust+0xe>

080099a8 <follow_path>:
{
 80099a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ac:	b083      	sub	sp, #12
 80099ae:	4604      	mov	r4, r0
	FATFS *fs = obj->fs;
 80099b0:	6807      	ldr	r7, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80099b2:	460d      	mov	r5, r1
 80099b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099b8:	2b2f      	cmp	r3, #47	; 0x2f
 80099ba:	d0fa      	beq.n	80099b2 <follow_path+0xa>
 80099bc:	2b5c      	cmp	r3, #92	; 0x5c
 80099be:	d0f8      	beq.n	80099b2 <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
 80099c0:	2300      	movs	r3, #0
 80099c2:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80099c4:	782b      	ldrb	r3, [r5, #0]
 80099c6:	2b1f      	cmp	r3, #31
 80099c8:	d902      	bls.n	80099d0 <follow_path+0x28>
	p = *path; sfn = dp->fn;
 80099ca:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 80099ce:	e0a7      	b.n	8009b20 <follow_path+0x178>
		dp->fn[NSFLAG] = NS_NONAME;
 80099d0:	2380      	movs	r3, #128	; 0x80
 80099d2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80099d6:	2100      	movs	r1, #0
 80099d8:	4620      	mov	r0, r4
 80099da:	f7ff fc1e 	bl	800921a <dir_sdi>
 80099de:	4602      	mov	r2, r0
}
 80099e0:	4610      	mov	r0, r2
 80099e2:	b003      	add	sp, #12
 80099e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e8:	3a01      	subs	r2, #1
 80099ea:	442a      	add	r2, r5
 80099ec:	9901      	ldr	r1, [sp, #4]
 80099ee:	f1c1 0601 	rsb	r6, r1, #1
 80099f2:	eb06 0c02 	add.w	ip, r6, r2
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80099f6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80099fa:	292f      	cmp	r1, #47	; 0x2f
 80099fc:	d0f9      	beq.n	80099f2 <follow_path+0x4a>
 80099fe:	295c      	cmp	r1, #92	; 0x5c
 8009a00:	d0f7      	beq.n	80099f2 <follow_path+0x4a>
	*path = p + si;						/* Return pointer to the next segment */
 8009a02:	4465      	add	r5, ip
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009a04:	2800      	cmp	r0, #0
 8009a06:	f000 80af 	beq.w	8009b68 <follow_path+0x1c0>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009a0a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8009a0e:	2ae5      	cmp	r2, #229	; 0xe5
 8009a10:	d03b      	beq.n	8009a8a <follow_path+0xe2>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009a12:	2300      	movs	r3, #0
 8009a14:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	FATFS *fs = dp->obj.fs;
 8009a18:	6826      	ldr	r6, [r4, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	f7ff fbfc 	bl	800921a <dir_sdi>
	if (res != FR_OK) return res;
 8009a22:	4602      	mov	r2, r0
 8009a24:	2800      	cmp	r0, #0
 8009a26:	f040 8099 	bne.w	8009b5c <follow_path+0x1b4>
		res = dir_next(dp, 0);	/* Next entry */
 8009a2a:	f04f 0800 	mov.w	r8, #0
 8009a2e:	e03b      	b.n	8009aa8 <follow_path+0x100>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009a30:	3b80      	subs	r3, #128	; 0x80
 8009a32:	4955      	ldr	r1, [pc, #340]	; (8009b88 <follow_path+0x1e0>)
 8009a34:	5ccb      	ldrb	r3, [r1, r3]
 8009a36:	e018      	b.n	8009a6a <follow_path+0xc2>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	f040 8095 	bne.w	8009b68 <follow_path+0x1c0>
			sfn[i++] = c;
 8009a3e:	f80a 3000 	strb.w	r3, [sl, r0]
 8009a42:	3001      	adds	r0, #1
		c = (BYTE)p[si++];
 8009a44:	3201      	adds	r2, #1
 8009a46:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009a4a:	2b20      	cmp	r3, #32
 8009a4c:	f240 808e 	bls.w	8009b6c <follow_path+0x1c4>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009a50:	2b2f      	cmp	r3, #47	; 0x2f
 8009a52:	d0c9      	beq.n	80099e8 <follow_path+0x40>
 8009a54:	2b5c      	cmp	r3, #92	; 0x5c
 8009a56:	d0c7      	beq.n	80099e8 <follow_path+0x40>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009a58:	2b2e      	cmp	r3, #46	; 0x2e
 8009a5a:	f000 808e 	beq.w	8009b7a <follow_path+0x1d2>
 8009a5e:	4560      	cmp	r0, ip
 8009a60:	f080 8082 	bcs.w	8009b68 <follow_path+0x1c0>
		if (c >= 0x80) {				/* Extended character? */
 8009a64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009a68:	d1e2      	bne.n	8009a30 <follow_path+0x88>
	while (*str && *str != chr) str++;
 8009a6a:	4641      	mov	r1, r8
 8009a6c:	4e47      	ldr	r6, [pc, #284]	; (8009b8c <follow_path+0x1e4>)
 8009a6e:	4299      	cmp	r1, r3
 8009a70:	d0e2      	beq.n	8009a38 <follow_path+0x90>
 8009a72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a76:	2900      	cmp	r1, #0
 8009a78:	d1f9      	bne.n	8009a6e <follow_path+0xc6>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009a7a:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8009a7e:	b2c9      	uxtb	r1, r1
 8009a80:	2919      	cmp	r1, #25
 8009a82:	bf9c      	itt	ls
 8009a84:	3b20      	subls	r3, #32
 8009a86:	b2db      	uxtbls	r3, r3
 8009a88:	e7d9      	b.n	8009a3e <follow_path+0x96>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009a8a:	2205      	movs	r2, #5
 8009a8c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009a90:	2b21      	cmp	r3, #33	; 0x21
 8009a92:	bf34      	ite	cc
 8009a94:	2304      	movcc	r3, #4
 8009a96:	2300      	movcs	r3, #0
 8009a98:	e7bc      	b.n	8009a14 <follow_path+0x6c>
		res = dir_next(dp, 0);	/* Next entry */
 8009a9a:	4641      	mov	r1, r8
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	f7ff fcbb 	bl	8009418 <dir_next>
	} while (res == FR_OK);
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d159      	bne.n	8009b5c <follow_path+0x1b4>
		res = move_window(fs, dp->sect);
 8009aa8:	69e1      	ldr	r1, [r4, #28]
 8009aaa:	4630      	mov	r0, r6
 8009aac:	f7ff fa4c 	bl	8008f48 <move_window>
		if (res != FR_OK) break;
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	d152      	bne.n	8009b5c <follow_path+0x1b4>
		c = dp->dir[DIR_Name];
 8009ab6:	6a21      	ldr	r1, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009ab8:	780a      	ldrb	r2, [r1, #0]
 8009aba:	2a00      	cmp	r2, #0
 8009abc:	d044      	beq.n	8009b48 <follow_path+0x1a0>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009abe:	7aca      	ldrb	r2, [r1, #11]
 8009ac0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8009ac4:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009ac6:	7aca      	ldrb	r2, [r1, #11]
 8009ac8:	f012 0208 	ands.w	r2, r2, #8
 8009acc:	d1e5      	bne.n	8009a9a <follow_path+0xf2>
		r = *d++ - *s++;
 8009ace:	1c48      	adds	r0, r1, #1
 8009ad0:	f104 0c25 	add.w	ip, r4, #37	; 0x25
 8009ad4:	f811 3b0b 	ldrb.w	r3, [r1], #11
 8009ad8:	f894 e024 	ldrb.w	lr, [r4, #36]	; 0x24
 8009adc:	eba3 030e 	sub.w	r3, r3, lr
	} while (--cnt && r == 0);
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1da      	bne.n	8009a9a <follow_path+0xf2>
		r = *d++ - *s++;
 8009ae4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009ae8:	f81c eb01 	ldrb.w	lr, [ip], #1
 8009aec:	eba3 030e 	sub.w	r3, r3, lr
	} while (--cnt && r == 0);
 8009af0:	4281      	cmp	r1, r0
 8009af2:	d1f5      	bne.n	8009ae0 <follow_path+0x138>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d1d0      	bne.n	8009a9a <follow_path+0xf2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009af8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8009afc:	f013 0f04 	tst.w	r3, #4
 8009b00:	f47f af6e 	bne.w	80099e0 <follow_path+0x38>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009b04:	79a3      	ldrb	r3, [r4, #6]
 8009b06:	f013 0f10 	tst.w	r3, #16
 8009b0a:	d025      	beq.n	8009b58 <follow_path+0x1b0>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009b0c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8009b10:	6963      	ldr	r3, [r4, #20]
 8009b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b16:	4419      	add	r1, r3
 8009b18:	4638      	mov	r0, r7
 8009b1a:	f7ff ff35 	bl	8009988 <ld_clust>
 8009b1e:	60a0      	str	r0, [r4, #8]
	mem_set(sfn, ' ', 11);
 8009b20:	220b      	movs	r2, #11
 8009b22:	2120      	movs	r1, #32
 8009b24:	4650      	mov	r0, sl
 8009b26:	f7ff f8b4 	bl	8008c92 <mem_set>
		c = (BYTE)p[si++];
 8009b2a:	782b      	ldrb	r3, [r5, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009b2c:	2b20      	cmp	r3, #32
 8009b2e:	d91b      	bls.n	8009b68 <follow_path+0x1c0>
 8009b30:	9501      	str	r5, [sp, #4]
 8009b32:	46ae      	mov	lr, r5
	si = i = 0; ni = 8;
 8009b34:	2000      	movs	r0, #0
 8009b36:	f04f 0c08 	mov.w	ip, #8
		c = (BYTE)p[si++];
 8009b3a:	2201      	movs	r2, #1
			i = 8; ni = 11;				/* Goto extension */
 8009b3c:	46e3      	mov	fp, ip
 8009b3e:	f04f 090b 	mov.w	r9, #11
	while (*str && *str != chr) str++;
 8009b42:	f04f 0822 	mov.w	r8, #34	; 0x22
 8009b46:	e783      	b.n	8009a50 <follow_path+0xa8>
			ns = dp->fn[NSFLAG];
 8009b48:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8009b4c:	f013 0f04 	tst.w	r3, #4
 8009b50:	bf0c      	ite	eq
 8009b52:	2205      	moveq	r2, #5
 8009b54:	2204      	movne	r2, #4
 8009b56:	e743      	b.n	80099e0 <follow_path+0x38>
				res = FR_NO_PATH; break;
 8009b58:	2205      	movs	r2, #5
 8009b5a:	e741      	b.n	80099e0 <follow_path+0x38>
			ns = dp->fn[NSFLAG];
 8009b5c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009b60:	2a04      	cmp	r2, #4
 8009b62:	f47f af3d 	bne.w	80099e0 <follow_path+0x38>
 8009b66:	e7f1      	b.n	8009b4c <follow_path+0x1a4>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009b68:	2206      	movs	r2, #6
	return res;
 8009b6a:	e739      	b.n	80099e0 <follow_path+0x38>
	*path = p + si;						/* Return pointer to the next segment */
 8009b6c:	4415      	add	r5, r2
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009b6e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8009b72:	2ae5      	cmp	r2, #229	; 0xe5
 8009b74:	d089      	beq.n	8009a8a <follow_path+0xe2>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009b76:	2304      	movs	r3, #4
 8009b78:	e74c      	b.n	8009a14 <follow_path+0x6c>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009b7a:	f1bc 0f0b 	cmp.w	ip, #11
 8009b7e:	d0f3      	beq.n	8009b68 <follow_path+0x1c0>
			i = 8; ni = 11;				/* Goto extension */
 8009b80:	4658      	mov	r0, fp
 8009b82:	46cc      	mov	ip, r9
 8009b84:	e75e      	b.n	8009a44 <follow_path+0x9c>
 8009b86:	bf00      	nop
 8009b88:	08010330 	.word	0x08010330
 8009b8c:	08010320 	.word	0x08010320

08009b90 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009b90:	b510      	push	{r4, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	9001      	str	r0, [sp, #4]
 8009b96:	9100      	str	r1, [sp, #0]
 8009b98:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009b9a:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009b9c:	a803      	add	r0, sp, #12
 8009b9e:	f7ff f95a 	bl	8008e56 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	db29      	blt.n	8009bfa <f_mount+0x6a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009ba6:	4b1a      	ldr	r3, [pc, #104]	; (8009c10 <f_mount+0x80>)
 8009ba8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
 8009bac:	b14b      	cbz	r3, 8009bc2 <f_mount+0x32>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009bae:	4a19      	ldr	r2, [pc, #100]	; (8009c14 <f_mount+0x84>)
 8009bb0:	6812      	ldr	r2, [r2, #0]
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d013      	beq.n	8009bde <f_mount+0x4e>
 8009bb6:	4a17      	ldr	r2, [pc, #92]	; (8009c14 <f_mount+0x84>)
 8009bb8:	6912      	ldr	r2, [r2, #16]
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d013      	beq.n	8009be6 <f_mount+0x56>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009bc2:	9b01      	ldr	r3, [sp, #4]
 8009bc4:	b1eb      	cbz	r3, 8009c02 <f_mount+0x72>
		fs->fs_type = 0;				/* Clear new fs object */
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009bca:	9b01      	ldr	r3, [sp, #4]
 8009bcc:	4a10      	ldr	r2, [pc, #64]	; (8009c10 <f_mount+0x80>)
 8009bce:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009bd2:	b1a3      	cbz	r3, 8009bfe <f_mount+0x6e>
 8009bd4:	2c01      	cmp	r4, #1
 8009bd6:	d00a      	beq.n	8009bee <f_mount+0x5e>
 8009bd8:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8009bda:	b004      	add	sp, #16
 8009bdc:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009bde:	4a0d      	ldr	r2, [pc, #52]	; (8009c14 <f_mount+0x84>)
 8009be0:	2100      	movs	r1, #0
 8009be2:	6011      	str	r1, [r2, #0]
 8009be4:	e7e7      	b.n	8009bb6 <f_mount+0x26>
 8009be6:	4a0b      	ldr	r2, [pc, #44]	; (8009c14 <f_mount+0x84>)
 8009be8:	2100      	movs	r1, #0
 8009bea:	6111      	str	r1, [r2, #16]
 8009bec:	e7e7      	b.n	8009bbe <f_mount+0x2e>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009bee:	2200      	movs	r2, #0
 8009bf0:	a901      	add	r1, sp, #4
 8009bf2:	4668      	mov	r0, sp
 8009bf4:	f7ff fd0e 	bl	8009614 <find_volume>
	LEAVE_FF(fs, res);
 8009bf8:	e7ef      	b.n	8009bda <f_mount+0x4a>
	if (vol < 0) return FR_INVALID_DRIVE;
 8009bfa:	200b      	movs	r0, #11
 8009bfc:	e7ed      	b.n	8009bda <f_mount+0x4a>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009bfe:	2000      	movs	r0, #0
 8009c00:	e7eb      	b.n	8009bda <f_mount+0x4a>
	FatFs[vol] = fs;					/* Register new fs object */
 8009c02:	2300      	movs	r3, #0
 8009c04:	4a02      	ldr	r2, [pc, #8]	; (8009c10 <f_mount+0x80>)
 8009c06:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	e7e5      	b.n	8009bda <f_mount+0x4a>
 8009c0e:	bf00      	nop
 8009c10:	2000092c 	.word	0x2000092c
 8009c14:	20000930 	.word	0x20000930

08009c18 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c1c:	b091      	sub	sp, #68	; 0x44
 8009c1e:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009c20:	2800      	cmp	r0, #0
 8009c22:	f000 8098 	beq.w	8009d56 <f_open+0x13e>
 8009c26:	4614      	mov	r4, r2
 8009c28:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009c2a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8009c2e:	462a      	mov	r2, r5
 8009c30:	a903      	add	r1, sp, #12
 8009c32:	a801      	add	r0, sp, #4
 8009c34:	f7ff fcee 	bl	8009614 <find_volume>
	if (res == FR_OK) {
 8009c38:	4607      	mov	r7, r0
 8009c3a:	b128      	cbz	r0, 8009c48 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 8009c40:	4638      	mov	r0, r7
 8009c42:	b011      	add	sp, #68	; 0x44
 8009c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 8009c48:	9b03      	ldr	r3, [sp, #12]
 8009c4a:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8009c4c:	9901      	ldr	r1, [sp, #4]
 8009c4e:	a804      	add	r0, sp, #16
 8009c50:	f7ff feaa 	bl	80099a8 <follow_path>
		if (res == FR_OK) {
 8009c54:	4603      	mov	r3, r0
 8009c56:	2800      	cmp	r0, #0
 8009c58:	f040 80a0 	bne.w	8009d9c <f_open+0x184>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009c5c:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f2c0 8089 	blt.w	8009d78 <f_open+0x160>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009c66:	f035 0301 	bics.w	r3, r5, #1
 8009c6a:	bf14      	ite	ne
 8009c6c:	2101      	movne	r1, #1
 8009c6e:	2100      	moveq	r1, #0
 8009c70:	a804      	add	r0, sp, #16
 8009c72:	f7ff f815 	bl	8008ca0 <chk_lock>
 8009c76:	4603      	mov	r3, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009c78:	f014 0f1c 	tst.w	r4, #28
 8009c7c:	f000 8092 	beq.w	8009da4 <f_open+0x18c>
			if (res != FR_OK) {					/* No file, create new */
 8009c80:	b948      	cbnz	r0, 8009c96 <f_open+0x7e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009c82:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009c86:	f013 0f11 	tst.w	r3, #17
 8009c8a:	d171      	bne.n	8009d70 <f_open+0x158>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009c8c:	f014 0f04 	tst.w	r4, #4
 8009c90:	d012      	beq.n	8009cb8 <f_open+0xa0>
 8009c92:	2708      	movs	r7, #8
 8009c94:	e7d2      	b.n	8009c3c <f_open+0x24>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009c96:	2b04      	cmp	r3, #4
 8009c98:	d17e      	bne.n	8009d98 <f_open+0x180>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009c9a:	4b71      	ldr	r3, [pc, #452]	; (8009e60 <f_open+0x248>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	b123      	cbz	r3, 8009caa <f_open+0x92>
 8009ca0:	4b6f      	ldr	r3, [pc, #444]	; (8009e60 <f_open+0x248>)
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	b10b      	cbz	r3, 8009caa <f_open+0x92>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009ca6:	2712      	movs	r7, #18
 8009ca8:	e7c8      	b.n	8009c3c <f_open+0x24>
 8009caa:	a804      	add	r0, sp, #16
 8009cac:	f7ff fc38 	bl	8009520 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	d15b      	bne.n	8009d6c <f_open+0x154>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009cb4:	f045 0508 	orr.w	r5, r5, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009cb8:	f015 0f08 	tst.w	r5, #8
 8009cbc:	f000 8084 	beq.w	8009dc8 <f_open+0x1b0>
				dw = GET_FATTIME();
 8009cc0:	f7fe fea0 	bl	8008a04 <get_fattime>
 8009cc4:	4604      	mov	r4, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009cc6:	4601      	mov	r1, r0
 8009cc8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009cca:	300e      	adds	r0, #14
 8009ccc:	f7fe ffcf 	bl	8008c6e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009cd0:	4621      	mov	r1, r4
 8009cd2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009cd4:	3016      	adds	r0, #22
 8009cd6:	f7fe ffca 	bl	8008c6e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009cda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cdc:	2220      	movs	r2, #32
 8009cde:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009ce0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009ce4:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8009ce8:	4649      	mov	r1, r9
 8009cea:	4640      	mov	r0, r8
 8009cec:	f7ff fe4c 	bl	8009988 <ld_clust>
 8009cf0:	4604      	mov	r4, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	4649      	mov	r1, r9
 8009cf6:	4640      	mov	r0, r8
 8009cf8:	f7ff fa1a 	bl	8009130 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009d00:	301c      	adds	r0, #28
 8009d02:	f7fe ffb4 	bl	8008c6e <st_dword>
					fs->wflag = 1;
 8009d06:	9b03      	ldr	r3, [sp, #12]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8009d0c:	2c00      	cmp	r4, #0
 8009d0e:	d059      	beq.n	8009dc4 <f_open+0x1ac>
						dw = fs->winsect;
 8009d10:	9b03      	ldr	r3, [sp, #12]
 8009d12:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 8009d16:	2200      	movs	r2, #0
 8009d18:	4621      	mov	r1, r4
 8009d1a:	a804      	add	r0, sp, #16
 8009d1c:	f7ff fb33 	bl	8009386 <remove_chain>
						if (res == FR_OK) {
 8009d20:	b108      	cbz	r0, 8009d26 <f_open+0x10e>
						res = remove_chain(&dj.obj, cl, 0);
 8009d22:	4607      	mov	r7, r0
 8009d24:	e78a      	b.n	8009c3c <f_open+0x24>
							res = move_window(fs, dw);
 8009d26:	4641      	mov	r1, r8
 8009d28:	9803      	ldr	r0, [sp, #12]
 8009d2a:	f7ff f90d 	bl	8008f48 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009d2e:	3c01      	subs	r4, #1
 8009d30:	9b03      	ldr	r3, [sp, #12]
 8009d32:	60dc      	str	r4, [r3, #12]
		if (res == FR_OK) {
 8009d34:	2800      	cmp	r0, #0
 8009d36:	d045      	beq.n	8009dc4 <f_open+0x1ac>
							res = move_window(fs, dw);
 8009d38:	4607      	mov	r7, r0
 8009d3a:	e77f      	b.n	8009c3c <f_open+0x24>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009d3c:	eb00 2254 	add.w	r2, r0, r4, lsr #9
 8009d40:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	4641      	mov	r1, r8
 8009d46:	7868      	ldrb	r0, [r5, #1]
 8009d48:	f7fe ff62 	bl	8008c10 <disk_read>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	f43f af77 	beq.w	8009c40 <f_open+0x28>
 8009d52:	2701      	movs	r7, #1
 8009d54:	e772      	b.n	8009c3c <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8009d56:	2709      	movs	r7, #9
 8009d58:	e772      	b.n	8009c40 <f_open+0x28>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009d5a:	2702      	movs	r7, #2
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009d5c:	e76e      	b.n	8009c3c <f_open+0x24>
					if (clst <= 1) res = FR_INT_ERR;
 8009d5e:	2702      	movs	r7, #2
				fp->clust = clst;
 8009d60:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009d62:	e76b      	b.n	8009c3c <f_open+0x24>
					res = FR_NO_FILE;
 8009d64:	2704      	movs	r7, #4
 8009d66:	e769      	b.n	8009c3c <f_open+0x24>
						res = FR_DENIED;
 8009d68:	2707      	movs	r7, #7
		if (res == FR_OK) {
 8009d6a:	e767      	b.n	8009c3c <f_open+0x24>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009d6c:	4607      	mov	r7, r0
 8009d6e:	e765      	b.n	8009c3c <f_open+0x24>
					res = FR_DENIED;
 8009d70:	2707      	movs	r7, #7
 8009d72:	e763      	b.n	8009c3c <f_open+0x24>
 8009d74:	461f      	mov	r7, r3
		if (res == FR_OK) {
 8009d76:	e761      	b.n	8009c3c <f_open+0x24>
				res = FR_INVALID_NAME;
 8009d78:	2706      	movs	r7, #6
 8009d7a:	e75f      	b.n	8009c3c <f_open+0x24>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009d7c:	1b64      	subs	r4, r4, r5
 8009d7e:	42ac      	cmp	r4, r5
 8009d80:	d95f      	bls.n	8009e42 <f_open+0x22a>
					clst = get_fat(&fp->obj, clst);
 8009d82:	4630      	mov	r0, r6
 8009d84:	f7ff f9e1 	bl	800914a <get_fat>
 8009d88:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8009d8a:	2801      	cmp	r0, #1
 8009d8c:	d9e7      	bls.n	8009d5e <f_open+0x146>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009d8e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009d92:	d1f3      	bne.n	8009d7c <f_open+0x164>
 8009d94:	2701      	movs	r7, #1
 8009d96:	e7e3      	b.n	8009d60 <f_open+0x148>
 8009d98:	461f      	mov	r7, r3
 8009d9a:	e74f      	b.n	8009c3c <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009d9c:	f014 0f1c 	tst.w	r4, #28
 8009da0:	f47f af79 	bne.w	8009c96 <f_open+0x7e>
			if (res == FR_OK) {					/* Following succeeded */
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d1e5      	bne.n	8009d74 <f_open+0x15c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009da8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009dac:	f013 0f10 	tst.w	r3, #16
 8009db0:	d1d8      	bne.n	8009d64 <f_open+0x14c>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009db2:	f014 0f02 	tst.w	r4, #2
 8009db6:	d002      	beq.n	8009dbe <f_open+0x1a6>
 8009db8:	f013 0f01 	tst.w	r3, #1
 8009dbc:	d1d4      	bne.n	8009d68 <f_open+0x150>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009dbe:	f014 0f08 	tst.w	r4, #8
 8009dc2:	d001      	beq.n	8009dc8 <f_open+0x1b0>
				mode |= FA_MODIFIED;
 8009dc4:	f045 0540 	orr.w	r5, r5, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009dc8:	9b03      	ldr	r3, [sp, #12]
 8009dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dcc:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dd0:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009dd2:	f035 0301 	bics.w	r3, r5, #1
 8009dd6:	bf14      	ite	ne
 8009dd8:	2101      	movne	r1, #1
 8009dda:	2100      	moveq	r1, #0
 8009ddc:	a804      	add	r0, sp, #16
 8009dde:	f7fe ffa7 	bl	8008d30 <inc_lock>
 8009de2:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009de4:	2800      	cmp	r0, #0
 8009de6:	d0b8      	beq.n	8009d5a <f_open+0x142>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009de8:	9c03      	ldr	r4, [sp, #12]
 8009dea:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8009dee:	4641      	mov	r1, r8
 8009df0:	4620      	mov	r0, r4
 8009df2:	f7ff fdc9 	bl	8009988 <ld_clust>
 8009df6:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009df8:	f108 001c 	add.w	r0, r8, #28
 8009dfc:	f7fe ff2c 	bl	8008c58 <ld_dword>
 8009e00:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009e02:	2100      	movs	r1, #0
 8009e04:	62f1      	str	r1, [r6, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009e06:	6034      	str	r4, [r6, #0]
			fp->obj.id = fs->id;
 8009e08:	88e3      	ldrh	r3, [r4, #6]
 8009e0a:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 8009e0c:	7535      	strb	r5, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 8009e0e:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009e10:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009e12:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009e14:	f106 0830 	add.w	r8, r6, #48	; 0x30
 8009e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	f7fe ff38 	bl	8008c92 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009e22:	f015 0f20 	tst.w	r5, #32
 8009e26:	f43f af0b 	beq.w	8009c40 <f_open+0x28>
 8009e2a:	68f4      	ldr	r4, [r6, #12]
 8009e2c:	2c00      	cmp	r4, #0
 8009e2e:	f43f af07 	beq.w	8009c40 <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009e32:	61b4      	str	r4, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009e34:	9b03      	ldr	r3, [sp, #12]
 8009e36:	895b      	ldrh	r3, [r3, #10]
 8009e38:	025d      	lsls	r5, r3, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009e3a:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009e3c:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
 8009e40:	d89f      	bhi.n	8009d82 <f_open+0x16a>
				fp->clust = clst;
 8009e42:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009e44:	f3c4 0308 	ubfx	r3, r4, #0, #9
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f43f aef9 	beq.w	8009c40 <f_open+0x28>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009e4e:	9d03      	ldr	r5, [sp, #12]
 8009e50:	4628      	mov	r0, r5
 8009e52:	f7fe ffe1 	bl	8008e18 <clust2sect>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	f47f af70 	bne.w	8009d3c <f_open+0x124>
						res = FR_INT_ERR;
 8009e5c:	2702      	movs	r7, #2
 8009e5e:	e6ed      	b.n	8009c3c <f_open+0x24>
 8009e60:	20000930 	.word	0x20000930

08009e64 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e68:	b087      	sub	sp, #28
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	4688      	mov	r8, r1
 8009e6e:	4616      	mov	r6, r2
 8009e70:	4699      	mov	r9, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8009e72:	2300      	movs	r3, #0
 8009e74:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009e78:	9003      	str	r0, [sp, #12]
 8009e7a:	a905      	add	r1, sp, #20
 8009e7c:	f7ff f814 	bl	8008ea8 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009e80:	9001      	str	r0, [sp, #4]
 8009e82:	2800      	cmp	r0, #0
 8009e84:	d149      	bne.n	8009f1a <f_write+0xb6>
 8009e86:	7d63      	ldrb	r3, [r4, #21]
 8009e88:	9301      	str	r3, [sp, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d145      	bne.n	8009f1a <f_write+0xb6>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009e8e:	7d23      	ldrb	r3, [r4, #20]
 8009e90:	f013 0f02 	tst.w	r3, #2
 8009e94:	f000 80ce 	beq.w	800a034 <f_write+0x1d0>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009e98:	69a3      	ldr	r3, [r4, #24]
 8009e9a:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009e9c:	bf28      	it	cs
 8009e9e:	43de      	mvncs	r6, r3
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009ea0:	2e00      	cmp	r6, #0
 8009ea2:	f000 80c2 	beq.w	800a02a <f_write+0x1c6>
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009ea6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8009eaa:	9302      	str	r3, [sp, #8]
 8009eac:	e099      	b.n	8009fe2 <f_write+0x17e>
					if (fp->cltbl) {
 8009eae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d036      	beq.n	8009f22 <f_write+0xbe>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f7fe ffba 	bl	8008e2e <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	f000 80b5 	beq.w	800a02a <f_write+0x1c6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009ec0:	2801      	cmp	r0, #1
 8009ec2:	d033      	beq.n	8009f2c <f_write+0xc8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009ec4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009ec8:	d034      	beq.n	8009f34 <f_write+0xd0>
				fp->clust = clst;			/* Update current cluster */
 8009eca:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009ecc:	68a3      	ldr	r3, [r4, #8]
 8009ece:	b903      	cbnz	r3, 8009ed2 <f_write+0x6e>
 8009ed0:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009ed2:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	db30      	blt.n	8009f3c <f_write+0xd8>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009eda:	f8dd b014 	ldr.w	fp, [sp, #20]
 8009ede:	69e1      	ldr	r1, [r4, #28]
 8009ee0:	4658      	mov	r0, fp
 8009ee2:	f7fe ff99 	bl	8008e18 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009ee6:	4682      	mov	sl, r0
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	d038      	beq.n	8009f5e <f_write+0xfa>
			sect += csect;
 8009eec:	44ba      	add	sl, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009eee:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8009ef2:	d34b      	bcc.n	8009f8c <f_write+0x128>
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009ef4:	0a75      	lsrs	r5, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009ef6:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8009efa:	eb07 2256 	add.w	r2, r7, r6, lsr #9
 8009efe:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 8009f00:	bf88      	it	hi
 8009f02:	1bdd      	subhi	r5, r3, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009f04:	462b      	mov	r3, r5
 8009f06:	4652      	mov	r2, sl
 8009f08:	4641      	mov	r1, r8
 8009f0a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8009f0e:	f7fe fe8b 	bl	8008c28 <disk_write>
 8009f12:	b340      	cbz	r0, 8009f66 <f_write+0x102>
 8009f14:	2301      	movs	r3, #1
 8009f16:	7563      	strb	r3, [r4, #21]
 8009f18:	9301      	str	r3, [sp, #4]
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 8009f1a:	9801      	ldr	r0, [sp, #4]
 8009f1c:	b007      	add	sp, #28
 8009f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009f22:	69e1      	ldr	r1, [r4, #28]
 8009f24:	9803      	ldr	r0, [sp, #12]
 8009f26:	f7ff f9cc 	bl	80092c2 <create_chain>
 8009f2a:	e7c6      	b.n	8009eba <f_write+0x56>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	7563      	strb	r3, [r4, #21]
 8009f30:	9301      	str	r3, [sp, #4]
 8009f32:	e7f2      	b.n	8009f1a <f_write+0xb6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009f34:	2301      	movs	r3, #1
 8009f36:	7563      	strb	r3, [r4, #21]
 8009f38:	9301      	str	r3, [sp, #4]
 8009f3a:	e7ee      	b.n	8009f1a <f_write+0xb6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	6a22      	ldr	r2, [r4, #32]
 8009f40:	9902      	ldr	r1, [sp, #8]
 8009f42:	9805      	ldr	r0, [sp, #20]
 8009f44:	7840      	ldrb	r0, [r0, #1]
 8009f46:	f7fe fe6f 	bl	8008c28 <disk_write>
 8009f4a:	b920      	cbnz	r0, 8009f56 <f_write+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009f4c:	7d23      	ldrb	r3, [r4, #20]
 8009f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f52:	7523      	strb	r3, [r4, #20]
 8009f54:	e7c1      	b.n	8009eda <f_write+0x76>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009f56:	2301      	movs	r3, #1
 8009f58:	7563      	strb	r3, [r4, #21]
 8009f5a:	9301      	str	r3, [sp, #4]
 8009f5c:	e7dd      	b.n	8009f1a <f_write+0xb6>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009f5e:	2302      	movs	r3, #2
 8009f60:	7563      	strb	r3, [r4, #21]
 8009f62:	9301      	str	r3, [sp, #4]
 8009f64:	e7d9      	b.n	8009f1a <f_write+0xb6>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009f66:	6a21      	ldr	r1, [r4, #32]
 8009f68:	eba1 010a 	sub.w	r1, r1, sl
 8009f6c:	42a9      	cmp	r1, r5
 8009f6e:	d301      	bcc.n	8009f74 <f_write+0x110>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009f70:	026d      	lsls	r5, r5, #9
				continue;
 8009f72:	e026      	b.n	8009fc2 <f_write+0x15e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f78:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 8009f7c:	9802      	ldr	r0, [sp, #8]
 8009f7e:	f7fe fe7e 	bl	8008c7e <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009f82:	7d23      	ldrb	r3, [r4, #20]
 8009f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f88:	7523      	strb	r3, [r4, #20]
 8009f8a:	e7f1      	b.n	8009f70 <f_write+0x10c>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009f8c:	6a23      	ldr	r3, [r4, #32]
 8009f8e:	4553      	cmp	r3, sl
 8009f90:	d003      	beq.n	8009f9a <f_write+0x136>
 8009f92:	69a2      	ldr	r2, [r4, #24]
 8009f94:	68e3      	ldr	r3, [r4, #12]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d33a      	bcc.n	800a010 <f_write+0x1ac>
			fp->sect = sect;
 8009f9a:	f8c4 a020 	str.w	sl, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009f9e:	69a0      	ldr	r0, [r4, #24]
 8009fa0:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8009fa4:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009fa8:	42b5      	cmp	r5, r6
 8009faa:	bf28      	it	cs
 8009fac:	4635      	movcs	r5, r6
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009fae:	462a      	mov	r2, r5
 8009fb0:	4641      	mov	r1, r8
 8009fb2:	9b02      	ldr	r3, [sp, #8]
 8009fb4:	4418      	add	r0, r3
 8009fb6:	f7fe fe62 	bl	8008c7e <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009fba:	7d23      	ldrb	r3, [r4, #20]
 8009fbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009fc0:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009fc2:	44a8      	add	r8, r5
 8009fc4:	69a3      	ldr	r3, [r4, #24]
 8009fc6:	442b      	add	r3, r5
 8009fc8:	61a3      	str	r3, [r4, #24]
 8009fca:	68e2      	ldr	r2, [r4, #12]
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	bf38      	it	cc
 8009fd0:	4613      	movcc	r3, r2
 8009fd2:	60e3      	str	r3, [r4, #12]
 8009fd4:	f8d9 3000 	ldr.w	r3, [r9]
 8009fd8:	442b      	add	r3, r5
 8009fda:	f8c9 3000 	str.w	r3, [r9]
	for ( ;  btw;							/* Repeat until all data written */
 8009fde:	1b76      	subs	r6, r6, r5
 8009fe0:	d023      	beq.n	800a02a <f_write+0x1c6>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009fe2:	69a1      	ldr	r1, [r4, #24]
 8009fe4:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d1d8      	bne.n	8009f9e <f_write+0x13a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009fec:	9b05      	ldr	r3, [sp, #20]
 8009fee:	895f      	ldrh	r7, [r3, #10]
 8009ff0:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8009ff2:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 8009ff6:	f47f af6c 	bne.w	8009ed2 <f_write+0x6e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009ffa:	2900      	cmp	r1, #0
 8009ffc:	f47f af57 	bne.w	8009eae <f_write+0x4a>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a000:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800a002:	2800      	cmp	r0, #0
 800a004:	f47f af5c 	bne.w	8009ec0 <f_write+0x5c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a008:	9803      	ldr	r0, [sp, #12]
 800a00a:	f7ff f95a 	bl	80092c2 <create_chain>
 800a00e:	e754      	b.n	8009eba <f_write+0x56>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a010:	2301      	movs	r3, #1
 800a012:	4652      	mov	r2, sl
 800a014:	9902      	ldr	r1, [sp, #8]
 800a016:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800a01a:	f7fe fdf9 	bl	8008c10 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800a01e:	2800      	cmp	r0, #0
 800a020:	d0bb      	beq.n	8009f9a <f_write+0x136>
					ABORT(fs, FR_DISK_ERR);
 800a022:	2301      	movs	r3, #1
 800a024:	7563      	strb	r3, [r4, #21]
 800a026:	9301      	str	r3, [sp, #4]
 800a028:	e777      	b.n	8009f1a <f_write+0xb6>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a02a:	7d23      	ldrb	r3, [r4, #20]
 800a02c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a030:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800a032:	e772      	b.n	8009f1a <f_write+0xb6>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a034:	2307      	movs	r3, #7
 800a036:	9301      	str	r3, [sp, #4]
 800a038:	e76f      	b.n	8009f1a <f_write+0xb6>

0800a03a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a03a:	b570      	push	{r4, r5, r6, lr}
 800a03c:	b082      	sub	sp, #8
 800a03e:	4604      	mov	r4, r0
 800a040:	460d      	mov	r5, r1
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a042:	290a      	cmp	r1, #10
 800a044:	d00d      	beq.n	800a062 <putc_bfd+0x28>
		putc_bfd(pb, '\r');
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a046:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 800a048:	2b00      	cmp	r3, #0
 800a04a:	db08      	blt.n	800a05e <putc_bfd+0x24>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a04c:	1c5e      	adds	r6, r3, #1
 800a04e:	4423      	add	r3, r4
 800a050:	731d      	strb	r5, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a052:	2e3c      	cmp	r6, #60	; 0x3c
 800a054:	dc09      	bgt.n	800a06a <putc_bfd+0x30>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
		i = (bw == (UINT)i) ? 0 : -1;
	}
	pb->idx = i;
 800a056:	6066      	str	r6, [r4, #4]
	pb->nchr++;
 800a058:	68a3      	ldr	r3, [r4, #8]
 800a05a:	3301      	adds	r3, #1
 800a05c:	60a3      	str	r3, [r4, #8]
}
 800a05e:	b002      	add	sp, #8
 800a060:	bd70      	pop	{r4, r5, r6, pc}
		putc_bfd(pb, '\r');
 800a062:	210d      	movs	r1, #13
 800a064:	f7ff ffe9 	bl	800a03a <putc_bfd>
 800a068:	e7ed      	b.n	800a046 <putc_bfd+0xc>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a06a:	4621      	mov	r1, r4
 800a06c:	f851 0b0c 	ldr.w	r0, [r1], #12
 800a070:	ab01      	add	r3, sp, #4
 800a072:	4632      	mov	r2, r6
 800a074:	f7ff fef6 	bl	8009e64 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a078:	9b01      	ldr	r3, [sp, #4]
 800a07a:	1b9e      	subs	r6, r3, r6
 800a07c:	bf18      	it	ne
 800a07e:	f04f 36ff 	movne.w	r6, #4294967295
 800a082:	e7e8      	b.n	800a056 <putc_bfd+0x1c>

0800a084 <putc_flush>:
	putbuff* pb
)
{
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a084:	6842      	ldr	r2, [r0, #4]
 800a086:	2a00      	cmp	r2, #0
 800a088:	db10      	blt.n	800a0ac <putc_flush+0x28>
{
 800a08a:	b510      	push	{r4, lr}
 800a08c:	b082      	sub	sp, #8
 800a08e:	4604      	mov	r4, r0
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a090:	4601      	mov	r1, r0
 800a092:	f851 0b0c 	ldr.w	r0, [r1], #12
 800a096:	ab01      	add	r3, sp, #4
 800a098:	f7ff fee4 	bl	8009e64 <f_write>
 800a09c:	b948      	cbnz	r0, 800a0b2 <putc_flush+0x2e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a09e:	6862      	ldr	r2, [r4, #4]
 800a0a0:	9b01      	ldr	r3, [sp, #4]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d108      	bne.n	800a0b8 <putc_flush+0x34>
 800a0a6:	68a0      	ldr	r0, [r4, #8]
	return EOF;
}
 800a0a8:	b002      	add	sp, #8
 800a0aa:	bd10      	pop	{r4, pc}
	return EOF;
 800a0ac:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a0b0:	4770      	bx	lr
	return EOF;
 800a0b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b6:	e7f7      	b.n	800a0a8 <putc_flush+0x24>
 800a0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0bc:	e7f4      	b.n	800a0a8 <putc_flush+0x24>

0800a0be <f_sync>:
{
 800a0be:	b570      	push	{r4, r5, r6, lr}
 800a0c0:	b082      	sub	sp, #8
 800a0c2:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a0c4:	a901      	add	r1, sp, #4
 800a0c6:	f7fe feef 	bl	8008ea8 <validate>
	if (res == FR_OK) {
 800a0ca:	b970      	cbnz	r0, 800a0ea <f_sync+0x2c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a0cc:	7d23      	ldrb	r3, [r4, #20]
 800a0ce:	f013 0040 	ands.w	r0, r3, #64	; 0x40
 800a0d2:	d00a      	beq.n	800a0ea <f_sync+0x2c>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a0d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a0d8:	d109      	bne.n	800a0ee <f_sync+0x30>
			tm = GET_FATTIME();				/* Modified time */
 800a0da:	f7fe fc93 	bl	8008a04 <get_fattime>
 800a0de:	4605      	mov	r5, r0
				res = move_window(fs, fp->dir_sect);
 800a0e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a0e2:	9801      	ldr	r0, [sp, #4]
 800a0e4:	f7fe ff30 	bl	8008f48 <move_window>
				if (res == FR_OK) {
 800a0e8:	b178      	cbz	r0, 800a10a <f_sync+0x4c>
}
 800a0ea:	b002      	add	sp, #8
 800a0ec:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	6a22      	ldr	r2, [r4, #32]
 800a0f2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800a0f6:	9801      	ldr	r0, [sp, #4]
 800a0f8:	7840      	ldrb	r0, [r0, #1]
 800a0fa:	f7fe fd95 	bl	8008c28 <disk_write>
 800a0fe:	bb30      	cbnz	r0, 800a14e <f_sync+0x90>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a100:	7d23      	ldrb	r3, [r4, #20]
 800a102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a106:	7523      	strb	r3, [r4, #20]
 800a108:	e7e7      	b.n	800a0da <f_sync+0x1c>
					dir = fp->dir_ptr;
 800a10a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a10c:	7af3      	ldrb	r3, [r6, #11]
 800a10e:	f043 0320 	orr.w	r3, r3, #32
 800a112:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a114:	68a2      	ldr	r2, [r4, #8]
 800a116:	4631      	mov	r1, r6
 800a118:	6820      	ldr	r0, [r4, #0]
 800a11a:	f7ff f809 	bl	8009130 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a11e:	68e1      	ldr	r1, [r4, #12]
 800a120:	f106 001c 	add.w	r0, r6, #28
 800a124:	f7fe fda3 	bl	8008c6e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a128:	4629      	mov	r1, r5
 800a12a:	f106 0016 	add.w	r0, r6, #22
 800a12e:	f7fe fd9e 	bl	8008c6e <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800a132:	2300      	movs	r3, #0
 800a134:	74b3      	strb	r3, [r6, #18]
	*ptr++ = (BYTE)val;
 800a136:	74f3      	strb	r3, [r6, #19]
					fs->wflag = 1;
 800a138:	9b01      	ldr	r3, [sp, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a13e:	9801      	ldr	r0, [sp, #4]
 800a140:	f7fe ff1c 	bl	8008f7c <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a144:	7d23      	ldrb	r3, [r4, #20]
 800a146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a14a:	7523      	strb	r3, [r4, #20]
 800a14c:	e7cd      	b.n	800a0ea <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a14e:	2001      	movs	r0, #1
 800a150:	e7cb      	b.n	800a0ea <f_sync+0x2c>

0800a152 <f_close>:
{
 800a152:	b510      	push	{r4, lr}
 800a154:	b082      	sub	sp, #8
 800a156:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 800a158:	f7ff ffb1 	bl	800a0be <f_sync>
	if (res == FR_OK)
 800a15c:	b108      	cbz	r0, 800a162 <f_close+0x10>
}
 800a15e:	b002      	add	sp, #8
 800a160:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a162:	a901      	add	r1, sp, #4
 800a164:	4620      	mov	r0, r4
 800a166:	f7fe fe9f 	bl	8008ea8 <validate>
		if (res == FR_OK) {
 800a16a:	2800      	cmp	r0, #0
 800a16c:	d1f7      	bne.n	800a15e <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a16e:	6920      	ldr	r0, [r4, #16]
 800a170:	f7fe fe30 	bl	8008dd4 <dec_lock>
			if (res == FR_OK)
 800a174:	2800      	cmp	r0, #0
 800a176:	d1f2      	bne.n	800a15e <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 800a178:	6020      	str	r0, [r4, #0]
 800a17a:	e7f0      	b.n	800a15e <f_close+0xc>

0800a17c <f_lseek>:
{
 800a17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a180:	b085      	sub	sp, #20
 800a182:	4604      	mov	r4, r0
 800a184:	460e      	mov	r6, r1
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a186:	4607      	mov	r7, r0
 800a188:	a903      	add	r1, sp, #12
 800a18a:	f7fe fe8d 	bl	8008ea8 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a18e:	4605      	mov	r5, r0
 800a190:	b978      	cbnz	r0, 800a1b2 <f_lseek+0x36>
 800a192:	7d65      	ldrb	r5, [r4, #21]
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a194:	b96d      	cbnz	r5, 800a1b2 <f_lseek+0x36>
	if (fp->cltbl) {	/* Fast seek */
 800a196:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f000 808d 	beq.w	800a2b8 <f_lseek+0x13c>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a19e:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a1a2:	d00a      	beq.n	800a1ba <f_lseek+0x3e>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a1a4:	68e1      	ldr	r1, [r4, #12]
 800a1a6:	428e      	cmp	r6, r1
 800a1a8:	bf28      	it	cs
 800a1aa:	460e      	movcs	r6, r1
			fp->fptr = ofs;				/* Set file pointer */
 800a1ac:	61a6      	str	r6, [r4, #24]
			if (ofs) {
 800a1ae:	2e00      	cmp	r6, #0
 800a1b0:	d144      	bne.n	800a23c <f_lseek+0xc0>
}
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	b005      	add	sp, #20
 800a1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a1ba:	4699      	mov	r9, r3
 800a1bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800a1c0:	9301      	str	r3, [sp, #4]
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a1c2:	f8d4 a008 	ldr.w	sl, [r4, #8]
			if (cl) {
 800a1c6:	f1ba 0f00 	cmp.w	sl, #0
 800a1ca:	d02a      	beq.n	800a222 <f_lseek+0xa6>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a1cc:	f04f 0b02 	mov.w	fp, #2
						cl = get_fat(&fp->obj, cl);
 800a1d0:	4651      	mov	r1, sl
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a1d2:	f04f 0800 	mov.w	r8, #0
						pcl = cl; ncl++;
 800a1d6:	f108 0801 	add.w	r8, r8, #1
						cl = get_fat(&fp->obj, cl);
 800a1da:	460e      	mov	r6, r1
 800a1dc:	4638      	mov	r0, r7
 800a1de:	f7fe ffb4 	bl	800914a <get_fat>
 800a1e2:	4601      	mov	r1, r0
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a1e4:	2801      	cmp	r0, #1
 800a1e6:	d916      	bls.n	800a216 <f_lseek+0x9a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a1e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a1ec:	d016      	beq.n	800a21c <f_lseek+0xa0>
					} while (cl == pcl + 1);
 800a1ee:	3601      	adds	r6, #1
 800a1f0:	4286      	cmp	r6, r0
 800a1f2:	d0f0      	beq.n	800a1d6 <f_lseek+0x5a>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a1f4:	f10b 0b02 	add.w	fp, fp, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a1f8:	9b01      	ldr	r3, [sp, #4]
 800a1fa:	455b      	cmp	r3, fp
 800a1fc:	d305      	bcc.n	800a20a <f_lseek+0x8e>
						*tbl++ = ncl; *tbl++ = tcl;
 800a1fe:	464b      	mov	r3, r9
 800a200:	f843 8b08 	str.w	r8, [r3], #8
 800a204:	f8c9 a004 	str.w	sl, [r9, #4]
 800a208:	4699      	mov	r9, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a20a:	9b03      	ldr	r3, [sp, #12]
 800a20c:	695b      	ldr	r3, [r3, #20]
 800a20e:	428b      	cmp	r3, r1
 800a210:	d909      	bls.n	800a226 <f_lseek+0xaa>
						cl = get_fat(&fp->obj, cl);
 800a212:	468a      	mov	sl, r1
 800a214:	e7dc      	b.n	800a1d0 <f_lseek+0x54>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a216:	2502      	movs	r5, #2
 800a218:	7565      	strb	r5, [r4, #21]
 800a21a:	e7ca      	b.n	800a1b2 <f_lseek+0x36>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a21c:	2501      	movs	r5, #1
 800a21e:	7565      	strb	r5, [r4, #21]
 800a220:	e7c7      	b.n	800a1b2 <f_lseek+0x36>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a222:	f04f 0b02 	mov.w	fp, #2
			*fp->cltbl = ulen;	/* Number of items used */
 800a226:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a228:	f8c3 b000 	str.w	fp, [r3]
			if (ulen <= tlen) {
 800a22c:	9b01      	ldr	r3, [sp, #4]
 800a22e:	459b      	cmp	fp, r3
 800a230:	f200 80f9 	bhi.w	800a426 <f_lseek+0x2aa>
				*tbl = 0;		/* Terminate table */
 800a234:	2300      	movs	r3, #0
 800a236:	f8c9 3000 	str.w	r3, [r9]
 800a23a:	e7ba      	b.n	800a1b2 <f_lseek+0x36>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a23c:	f106 38ff 	add.w	r8, r6, #4294967295
 800a240:	4641      	mov	r1, r8
 800a242:	4620      	mov	r0, r4
 800a244:	f7fe fdf3 	bl	8008e2e <clmt_clust>
 800a248:	4601      	mov	r1, r0
 800a24a:	61e0      	str	r0, [r4, #28]
				dsc = clust2sect(fs, fp->clust);
 800a24c:	9f03      	ldr	r7, [sp, #12]
 800a24e:	4638      	mov	r0, r7
 800a250:	f7fe fde2 	bl	8008e18 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a254:	b1d8      	cbz	r0, 800a28e <f_lseek+0x112>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a256:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800a25a:	2e00      	cmp	r6, #0
 800a25c:	d0a9      	beq.n	800a1b2 <f_lseek+0x36>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a25e:	897e      	ldrh	r6, [r7, #10]
 800a260:	3e01      	subs	r6, #1
 800a262:	ea06 2658 	and.w	r6, r6, r8, lsr #9
 800a266:	4406      	add	r6, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a268:	6a22      	ldr	r2, [r4, #32]
 800a26a:	42b2      	cmp	r2, r6
 800a26c:	d0a1      	beq.n	800a1b2 <f_lseek+0x36>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a26e:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800a272:	2b00      	cmp	r3, #0
 800a274:	db0e      	blt.n	800a294 <f_lseek+0x118>
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a276:	2301      	movs	r3, #1
 800a278:	4632      	mov	r2, r6
 800a27a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800a27e:	9803      	ldr	r0, [sp, #12]
 800a280:	7840      	ldrb	r0, [r0, #1]
 800a282:	f7fe fcc5 	bl	8008c10 <disk_read>
 800a286:	4605      	mov	r5, r0
 800a288:	b998      	cbnz	r0, 800a2b2 <f_lseek+0x136>
					fp->sect = dsc;
 800a28a:	6226      	str	r6, [r4, #32]
 800a28c:	e791      	b.n	800a1b2 <f_lseek+0x36>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a28e:	2502      	movs	r5, #2
 800a290:	7565      	strb	r5, [r4, #21]
 800a292:	e78e      	b.n	800a1b2 <f_lseek+0x36>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a294:	2301      	movs	r3, #1
 800a296:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800a29a:	7878      	ldrb	r0, [r7, #1]
 800a29c:	f7fe fcc4 	bl	8008c28 <disk_write>
 800a2a0:	b920      	cbnz	r0, 800a2ac <f_lseek+0x130>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a2a2:	7d23      	ldrb	r3, [r4, #20]
 800a2a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2a8:	7523      	strb	r3, [r4, #20]
 800a2aa:	e7e4      	b.n	800a276 <f_lseek+0xfa>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a2ac:	2501      	movs	r5, #1
 800a2ae:	7565      	strb	r5, [r4, #21]
 800a2b0:	e77f      	b.n	800a1b2 <f_lseek+0x36>
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a2b2:	2501      	movs	r5, #1
 800a2b4:	7565      	strb	r5, [r4, #21]
 800a2b6:	e77c      	b.n	800a1b2 <f_lseek+0x36>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a2b8:	68e3      	ldr	r3, [r4, #12]
 800a2ba:	42b3      	cmp	r3, r6
 800a2bc:	d204      	bcs.n	800a2c8 <f_lseek+0x14c>
 800a2be:	7d22      	ldrb	r2, [r4, #20]
			ofs = fp->obj.objsize;
 800a2c0:	f012 0f02 	tst.w	r2, #2
 800a2c4:	bf08      	it	eq
 800a2c6:	461e      	moveq	r6, r3
		ifptr = fp->fptr;
 800a2c8:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 800a2ce:	2e00      	cmp	r6, #0
 800a2d0:	f43f af6f 	beq.w	800a1b2 <f_lseek+0x36>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a2d4:	9a03      	ldr	r2, [sp, #12]
 800a2d6:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 800a2da:	ea4f 2949 	mov.w	r9, r9, lsl #9
			if (ifptr > 0 &&
 800a2de:	b17b      	cbz	r3, 800a300 <f_lseek+0x184>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	1e72      	subs	r2, r6, #1
 800a2e4:	fbb2 f2f9 	udiv	r2, r2, r9
 800a2e8:	fbb3 f1f9 	udiv	r1, r3, r9
			if (ifptr > 0 &&
 800a2ec:	428a      	cmp	r2, r1
 800a2ee:	d307      	bcc.n	800a300 <f_lseek+0x184>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a2f0:	f1c9 0200 	rsb	r2, r9, #0
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	61a3      	str	r3, [r4, #24]
				ofs -= fp->fptr;
 800a2f8:	1af6      	subs	r6, r6, r3
				clst = fp->clust;
 800a2fa:	f8d4 801c 	ldr.w	r8, [r4, #28]
 800a2fe:	e006      	b.n	800a30e <f_lseek+0x192>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a300:	f8d4 8008 	ldr.w	r8, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a304:	f1b8 0f00 	cmp.w	r8, #0
 800a308:	d039      	beq.n	800a37e <f_lseek+0x202>
				fp->clust = clst;
 800a30a:	f8c4 801c 	str.w	r8, [r4, #28]
			if (clst != 0) {
 800a30e:	f1b8 0f00 	cmp.w	r8, #0
 800a312:	d010      	beq.n	800a336 <f_lseek+0x1ba>
				while (ofs > bcs) {						/* Cluster following loop */
 800a314:	454e      	cmp	r6, r9
 800a316:	d857      	bhi.n	800a3c8 <f_lseek+0x24c>
				fp->fptr += ofs;
 800a318:	69a3      	ldr	r3, [r4, #24]
 800a31a:	4433      	add	r3, r6
 800a31c:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 800a31e:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800a322:	2b00      	cmp	r3, #0
 800a324:	d06a      	beq.n	800a3fc <f_lseek+0x280>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a326:	4641      	mov	r1, r8
 800a328:	9803      	ldr	r0, [sp, #12]
 800a32a:	f7fe fd75 	bl	8008e18 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a32e:	2800      	cmp	r0, #0
 800a330:	d061      	beq.n	800a3f6 <f_lseek+0x27a>
					nsect += (DWORD)(ofs / SS(fs));
 800a332:	eb00 2856 	add.w	r8, r0, r6, lsr #9
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a336:	69a3      	ldr	r3, [r4, #24]
 800a338:	68e2      	ldr	r2, [r4, #12]
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d904      	bls.n	800a348 <f_lseek+0x1cc>
			fp->obj.objsize = fp->fptr;
 800a33e:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 800a340:	7d22      	ldrb	r2, [r4, #20]
 800a342:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a346:	7522      	strb	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f43f af30 	beq.w	800a1b2 <f_lseek+0x36>
 800a352:	6a22      	ldr	r2, [r4, #32]
 800a354:	4542      	cmp	r2, r8
 800a356:	f43f af2c 	beq.w	800a1b2 <f_lseek+0x36>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a35a:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	db4e      	blt.n	800a400 <f_lseek+0x284>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a362:	2301      	movs	r3, #1
 800a364:	4642      	mov	r2, r8
 800a366:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800a36a:	9803      	ldr	r0, [sp, #12]
 800a36c:	7840      	ldrb	r0, [r0, #1]
 800a36e:	f7fe fc4f 	bl	8008c10 <disk_read>
 800a372:	4605      	mov	r5, r0
 800a374:	2800      	cmp	r0, #0
 800a376:	d153      	bne.n	800a420 <f_lseek+0x2a4>
			fp->sect = nsect;
 800a378:	f8c4 8020 	str.w	r8, [r4, #32]
 800a37c:	e719      	b.n	800a1b2 <f_lseek+0x36>
					clst = create_chain(&fp->obj, 0);
 800a37e:	2100      	movs	r1, #0
 800a380:	4620      	mov	r0, r4
 800a382:	f7fe ff9e 	bl	80092c2 <create_chain>
 800a386:	4680      	mov	r8, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a388:	2801      	cmp	r0, #1
 800a38a:	d004      	beq.n	800a396 <f_lseek+0x21a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a38c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a390:	d004      	beq.n	800a39c <f_lseek+0x220>
					fp->obj.sclust = clst;
 800a392:	60a0      	str	r0, [r4, #8]
 800a394:	e7b9      	b.n	800a30a <f_lseek+0x18e>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a396:	2502      	movs	r5, #2
 800a398:	7565      	strb	r5, [r4, #21]
 800a39a:	e70a      	b.n	800a1b2 <f_lseek+0x36>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a39c:	2501      	movs	r5, #1
 800a39e:	7565      	strb	r5, [r4, #21]
 800a3a0:	e707      	b.n	800a1b2 <f_lseek+0x36>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a3a2:	4641      	mov	r1, r8
 800a3a4:	4638      	mov	r0, r7
 800a3a6:	f7fe fed0 	bl	800914a <get_fat>
 800a3aa:	4680      	mov	r8, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a3ac:	f1b8 3fff 	cmp.w	r8, #4294967295
 800a3b0:	d01b      	beq.n	800a3ea <f_lseek+0x26e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a3b2:	f1b8 0f01 	cmp.w	r8, #1
 800a3b6:	d91b      	bls.n	800a3f0 <f_lseek+0x274>
 800a3b8:	9b03      	ldr	r3, [sp, #12]
 800a3ba:	695b      	ldr	r3, [r3, #20]
 800a3bc:	4543      	cmp	r3, r8
 800a3be:	d917      	bls.n	800a3f0 <f_lseek+0x274>
					fp->clust = clst;
 800a3c0:	f8c4 801c 	str.w	r8, [r4, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a3c4:	45b1      	cmp	r9, r6
 800a3c6:	d2a7      	bcs.n	800a318 <f_lseek+0x19c>
					ofs -= bcs; fp->fptr += bcs;
 800a3c8:	eba6 0609 	sub.w	r6, r6, r9
 800a3cc:	69a3      	ldr	r3, [r4, #24]
 800a3ce:	444b      	add	r3, r9
 800a3d0:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a3d2:	7d23      	ldrb	r3, [r4, #20]
 800a3d4:	f013 0f02 	tst.w	r3, #2
 800a3d8:	d0e3      	beq.n	800a3a2 <f_lseek+0x226>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a3da:	4641      	mov	r1, r8
 800a3dc:	4638      	mov	r0, r7
 800a3de:	f7fe ff70 	bl	80092c2 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a3e2:	4680      	mov	r8, r0
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	d1e1      	bne.n	800a3ac <f_lseek+0x230>
 800a3e8:	e7a5      	b.n	800a336 <f_lseek+0x1ba>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a3ea:	2501      	movs	r5, #1
 800a3ec:	7565      	strb	r5, [r4, #21]
 800a3ee:	e6e0      	b.n	800a1b2 <f_lseek+0x36>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a3f0:	2502      	movs	r5, #2
 800a3f2:	7565      	strb	r5, [r4, #21]
 800a3f4:	e6dd      	b.n	800a1b2 <f_lseek+0x36>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a3f6:	2502      	movs	r5, #2
 800a3f8:	7565      	strb	r5, [r4, #21]
 800a3fa:	e6da      	b.n	800a1b2 <f_lseek+0x36>
		fp->fptr = nsect = 0;
 800a3fc:	4698      	mov	r8, r3
 800a3fe:	e79a      	b.n	800a336 <f_lseek+0x1ba>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a400:	2301      	movs	r3, #1
 800a402:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800a406:	9803      	ldr	r0, [sp, #12]
 800a408:	7840      	ldrb	r0, [r0, #1]
 800a40a:	f7fe fc0d 	bl	8008c28 <disk_write>
 800a40e:	b920      	cbnz	r0, 800a41a <f_lseek+0x29e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a410:	7d23      	ldrb	r3, [r4, #20]
 800a412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a416:	7523      	strb	r3, [r4, #20]
 800a418:	e7a3      	b.n	800a362 <f_lseek+0x1e6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a41a:	2501      	movs	r5, #1
 800a41c:	7565      	strb	r5, [r4, #21]
 800a41e:	e6c8      	b.n	800a1b2 <f_lseek+0x36>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a420:	2501      	movs	r5, #1
 800a422:	7565      	strb	r5, [r4, #21]
 800a424:	e6c5      	b.n	800a1b2 <f_lseek+0x36>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a426:	2511      	movs	r5, #17
 800a428:	e6c3      	b.n	800a1b2 <f_lseek+0x36>

0800a42a <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800a42a:	b40e      	push	{r1, r2, r3}
 800a42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a430:	b09c      	sub	sp, #112	; 0x70
 800a432:	ab25      	add	r3, sp, #148	; 0x94
 800a434:	f853 6b04 	ldr.w	r6, [r3], #4
	pb->fp = fp;
 800a438:	9008      	str	r0, [sp, #32]
	pb->nchr = pb->idx = 0;
 800a43a:	2200      	movs	r2, #0
 800a43c:	9209      	str	r2, [sp, #36]	; 0x24
 800a43e:	920a      	str	r2, [sp, #40]	; 0x28
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);

	va_start(arp, fmt);
 800a440:	931b      	str	r3, [sp, #108]	; 0x6c

	for (;;) {
		c = *fmt++;
 800a442:	4634      	mov	r4, r6
 800a444:	f814 1b01 	ldrb.w	r1, [r4], #1
		if (c == 0) break;			/* End of string */
 800a448:	2900      	cmp	r1, #0
 800a44a:	f000 8113 	beq.w	800a674 <f_printf+0x24a>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;

		case 'B' :					/* Binary */
			r = 2; break;
 800a44e:	f04f 0802 	mov.w	r8, #2
 800a452:	e009      	b.n	800a468 <f_printf+0x3e>
			putc_bfd(&pb, c);
 800a454:	a808      	add	r0, sp, #32
 800a456:	f7ff fdf0 	bl	800a03a <putc_bfd>
			continue;
 800a45a:	4626      	mov	r6, r4
		c = *fmt++;
 800a45c:	4634      	mov	r4, r6
 800a45e:	f814 1b01 	ldrb.w	r1, [r4], #1
		if (c == 0) break;			/* End of string */
 800a462:	2900      	cmp	r1, #0
 800a464:	f000 8106 	beq.w	800a674 <f_printf+0x24a>
		if (c != '%') {				/* Non escape character */
 800a468:	2925      	cmp	r1, #37	; 0x25
 800a46a:	d1f3      	bne.n	800a454 <f_printf+0x2a>
		c = *fmt++;
 800a46c:	7871      	ldrb	r1, [r6, #1]
		if (c == '0') {				/* Flag: '0' padding */
 800a46e:	2930      	cmp	r1, #48	; 0x30
 800a470:	d047      	beq.n	800a502 <f_printf+0xd8>
			if (c == '-') {			/* Flag: left justified */
 800a472:	292d      	cmp	r1, #45	; 0x2d
 800a474:	d04a      	beq.n	800a50c <f_printf+0xe2>
		c = *fmt++;
 800a476:	3602      	adds	r6, #2
		w = f = 0;
 800a478:	f04f 0c00 	mov.w	ip, #0
		while (IsDigit(c)) {		/* Precision */
 800a47c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a480:	b2db      	uxtb	r3, r3
 800a482:	2b09      	cmp	r3, #9
 800a484:	d846      	bhi.n	800a514 <f_printf+0xea>
 800a486:	2500      	movs	r5, #0
			w = w * 10 + c - '0';
 800a488:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800a48c:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 800a490:	3d30      	subs	r5, #48	; 0x30
			c = *fmt++;
 800a492:	f816 1b01 	ldrb.w	r1, [r6], #1
		while (IsDigit(c)) {		/* Precision */
 800a496:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	2b09      	cmp	r3, #9
 800a49e:	d9f3      	bls.n	800a488 <f_printf+0x5e>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800a4a0:	f001 03df 	and.w	r3, r1, #223	; 0xdf
 800a4a4:	2b4c      	cmp	r3, #76	; 0x4c
			f |= 4; c = *fmt++;
 800a4a6:	bf04      	itt	eq
 800a4a8:	f04c 0c04 	orreq.w	ip, ip, #4
 800a4ac:	f816 1b01 	ldrbeq.w	r1, [r6], #1
		if (!c) break;
 800a4b0:	2900      	cmp	r1, #0
 800a4b2:	f000 80df 	beq.w	800a674 <f_printf+0x24a>
		if (IsLower(d)) d -= 0x20;
 800a4b6:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	2b19      	cmp	r3, #25
 800a4be:	bf9a      	itte	ls
 800a4c0:	f1a1 0320 	subls.w	r3, r1, #32
 800a4c4:	b2db      	uxtbls	r3, r3
		d = c;
 800a4c6:	460b      	movhi	r3, r1
		switch (d) {				/* Type is... */
 800a4c8:	f1a3 0242 	sub.w	r2, r3, #66	; 0x42
 800a4cc:	2a16      	cmp	r2, #22
 800a4ce:	d853      	bhi.n	800a578 <f_printf+0x14e>
 800a4d0:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a4d4:	004a00ed 	.word	0x004a00ed
 800a4d8:	00520056 	.word	0x00520056
 800a4dc:	00520052 	.word	0x00520052
 800a4e0:	00520052 	.word	0x00520052
 800a4e4:	00520052 	.word	0x00520052
 800a4e8:	00520052 	.word	0x00520052
 800a4ec:	00f80052 	.word	0x00f80052
 800a4f0:	00520052 	.word	0x00520052
 800a4f4:	00220052 	.word	0x00220052
 800a4f8:	00560052 	.word	0x00560052
 800a4fc:	00520052 	.word	0x00520052
 800a500:	00d8      	.short	0x00d8
			f = 1; c = *fmt++;
 800a502:	78b1      	ldrb	r1, [r6, #2]
 800a504:	3603      	adds	r6, #3
 800a506:	f04f 0c01 	mov.w	ip, #1
 800a50a:	e7b7      	b.n	800a47c <f_printf+0x52>
				f = 2; c = *fmt++;
 800a50c:	78b1      	ldrb	r1, [r6, #2]
 800a50e:	3603      	adds	r6, #3
 800a510:	46c4      	mov	ip, r8
 800a512:	e7b3      	b.n	800a47c <f_printf+0x52>
		while (IsDigit(c)) {		/* Precision */
 800a514:	2500      	movs	r5, #0
 800a516:	e7c3      	b.n	800a4a0 <f_printf+0x76>
			p = va_arg(arp, TCHAR*);
 800a518:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a51a:	1d1a      	adds	r2, r3, #4
 800a51c:	921b      	str	r2, [sp, #108]	; 0x6c
 800a51e:	681c      	ldr	r4, [r3, #0]
			for (j = 0; p[j]; j++) ;
 800a520:	7821      	ldrb	r1, [r4, #0]
 800a522:	2900      	cmp	r1, #0
 800a524:	f000 80b8 	beq.w	800a698 <f_printf+0x26e>
 800a528:	4623      	mov	r3, r4
 800a52a:	f1c4 0001 	rsb	r0, r4, #1
 800a52e:	18c7      	adds	r7, r0, r3
 800a530:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800a534:	2a00      	cmp	r2, #0
 800a536:	d1fa      	bne.n	800a52e <f_printf+0x104>
			if (!(f & 2)) {
 800a538:	f01c 0f02 	tst.w	ip, #2
 800a53c:	f000 80ca 	beq.w	800a6d4 <f_printf+0x2aa>
			while (*p) putc_bfd(&pb, *p++);
 800a540:	a808      	add	r0, sp, #32
 800a542:	f7ff fd7a 	bl	800a03a <putc_bfd>
 800a546:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800a54a:	2900      	cmp	r1, #0
 800a54c:	d1f8      	bne.n	800a540 <f_printf+0x116>
			while (j++ < w) putc_bfd(&pb, ' ');
 800a54e:	1c7c      	adds	r4, r7, #1
 800a550:	42af      	cmp	r7, r5
 800a552:	d283      	bcs.n	800a45c <f_printf+0x32>
 800a554:	2720      	movs	r7, #32
 800a556:	4639      	mov	r1, r7
 800a558:	a808      	add	r0, sp, #32
 800a55a:	f7ff fd6e 	bl	800a03a <putc_bfd>
 800a55e:	42a5      	cmp	r5, r4
 800a560:	f104 0401 	add.w	r4, r4, #1
 800a564:	d1f7      	bne.n	800a556 <f_printf+0x12c>
 800a566:	e779      	b.n	800a45c <f_printf+0x32>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800a568:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a56a:	1d1a      	adds	r2, r3, #4
 800a56c:	921b      	str	r2, [sp, #108]	; 0x6c
 800a56e:	7819      	ldrb	r1, [r3, #0]
 800a570:	a808      	add	r0, sp, #32
 800a572:	f7ff fd62 	bl	800a03a <putc_bfd>
 800a576:	e771      	b.n	800a45c <f_printf+0x32>

		case 'X' :					/* Hexdecimal */
			r = 16; break;

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800a578:	a808      	add	r0, sp, #32
 800a57a:	f7ff fd5e 	bl	800a03a <putc_bfd>
 800a57e:	e76d      	b.n	800a45c <f_printf+0x32>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800a580:	f01c 0f04 	tst.w	ip, #4
 800a584:	d019      	beq.n	800a5ba <f_printf+0x190>
 800a586:	200a      	movs	r0, #10
 800a588:	e000      	b.n	800a58c <f_printf+0x162>
 800a58a:	2010      	movs	r0, #16
 800a58c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a58e:	1d14      	adds	r4, r2, #4
 800a590:	941b      	str	r4, [sp, #108]	; 0x6c
 800a592:	6812      	ldr	r2, [r2, #0]
		if (d == 'D' && (v & 0x80000000)) {
 800a594:	2b44      	cmp	r3, #68	; 0x44
 800a596:	d104      	bne.n	800a5a2 <f_printf+0x178>
 800a598:	2a00      	cmp	r2, #0
			v = 0 - v;
 800a59a:	bfbc      	itt	lt
 800a59c:	4252      	neglt	r2, r2
			f |= 8;
 800a59e:	f04c 0c08 	orrlt.w	ip, ip, #8
		}
		i = 0;
 800a5a2:	2978      	cmp	r1, #120	; 0x78
 800a5a4:	bf0c      	ite	eq
 800a5a6:	f04f 0b27 	moveq.w	fp, #39	; 0x27
 800a5aa:	f04f 0b07 	movne.w	fp, #7
 800a5ae:	466f      	mov	r7, sp
			r = 2; break;
 800a5b0:	4639      	mov	r1, r7
		i = 0;
 800a5b2:	f04f 0e00 	mov.w	lr, #0
		do {
			d = (TCHAR)(v % r); v /= r;
 800a5b6:	4682      	mov	sl, r0
 800a5b8:	e008      	b.n	800a5cc <f_printf+0x1a2>
 800a5ba:	200a      	movs	r0, #10
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800a5bc:	2b44      	cmp	r3, #68	; 0x44
 800a5be:	d166      	bne.n	800a68e <f_printf+0x264>
 800a5c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5c2:	1d1a      	adds	r2, r3, #4
 800a5c4:	921b      	str	r2, [sp, #108]	; 0x6c
 800a5c6:	681a      	ldr	r2, [r3, #0]
		if (d == 'D' && (v & 0x80000000)) {
 800a5c8:	e7e6      	b.n	800a598 <f_printf+0x16e>
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
 800a5ca:	46a6      	mov	lr, r4
			d = (TCHAR)(v % r); v /= r;
 800a5cc:	fbb2 f4f0 	udiv	r4, r2, r0
 800a5d0:	fb00 2314 	mls	r3, r0, r4, r2
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	4691      	mov	r9, r2
 800a5d8:	4622      	mov	r2, r4
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800a5da:	2b09      	cmp	r3, #9
 800a5dc:	bf84      	itt	hi
 800a5de:	445b      	addhi	r3, fp
 800a5e0:	b2db      	uxtbhi	r3, r3
			str[i++] = d + '0';
 800a5e2:	f10e 0401 	add.w	r4, lr, #1
 800a5e6:	3330      	adds	r3, #48	; 0x30
 800a5e8:	f801 3b01 	strb.w	r3, [r1], #1
		} while (v && i < sizeof str / sizeof str[0]);
 800a5ec:	45ca      	cmp	sl, r9
 800a5ee:	d803      	bhi.n	800a5f8 <f_printf+0x1ce>
 800a5f0:	2c20      	cmp	r4, #32
 800a5f2:	d1ea      	bne.n	800a5ca <f_printf+0x1a0>
 800a5f4:	f04f 0e1f 	mov.w	lr, #31
		if (f & 8) str[i++] = '-';
 800a5f8:	f01c 0f08 	tst.w	ip, #8
 800a5fc:	d006      	beq.n	800a60c <f_printf+0x1e2>
 800a5fe:	ab1c      	add	r3, sp, #112	; 0x70
 800a600:	441c      	add	r4, r3
 800a602:	232d      	movs	r3, #45	; 0x2d
 800a604:	f804 3c70 	strb.w	r3, [r4, #-112]
 800a608:	f10e 0402 	add.w	r4, lr, #2
		j = i; d = (f & 1) ? '0' : ' ';
 800a60c:	f01c 0f01 	tst.w	ip, #1
 800a610:	bf14      	ite	ne
 800a612:	f04f 0930 	movne.w	r9, #48	; 0x30
 800a616:	f04f 0920 	moveq.w	r9, #32
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800a61a:	f01c 0f02 	tst.w	ip, #2
 800a61e:	d127      	bne.n	800a670 <f_printf+0x246>
 800a620:	f104 0a01 	add.w	sl, r4, #1
 800a624:	42ac      	cmp	r4, r5
 800a626:	d209      	bcs.n	800a63c <f_printf+0x212>
 800a628:	4649      	mov	r1, r9
 800a62a:	a808      	add	r0, sp, #32
 800a62c:	f7ff fd05 	bl	800a03a <putc_bfd>
 800a630:	4555      	cmp	r5, sl
 800a632:	f10a 0a01 	add.w	sl, sl, #1
 800a636:	d1f7      	bne.n	800a628 <f_printf+0x1fe>
 800a638:	f105 0a01 	add.w	sl, r5, #1
 800a63c:	ab1c      	add	r3, sp, #112	; 0x70
 800a63e:	441c      	add	r4, r3
 800a640:	3c71      	subs	r4, #113	; 0x71
		do {
			putc_bfd(&pb, str[--i]);
 800a642:	7821      	ldrb	r1, [r4, #0]
 800a644:	46a3      	mov	fp, r4
 800a646:	a808      	add	r0, sp, #32
 800a648:	f7ff fcf7 	bl	800a03a <putc_bfd>
		} while (i);
 800a64c:	42bc      	cmp	r4, r7
 800a64e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a652:	d1f6      	bne.n	800a642 <f_printf+0x218>
		while (j++ < w) putc_bfd(&pb, d);
 800a654:	f10a 0401 	add.w	r4, sl, #1
 800a658:	45aa      	cmp	sl, r5
 800a65a:	f4bf aeff 	bcs.w	800a45c <f_printf+0x32>
 800a65e:	4649      	mov	r1, r9
 800a660:	a808      	add	r0, sp, #32
 800a662:	f7ff fcea 	bl	800a03a <putc_bfd>
 800a666:	42a5      	cmp	r5, r4
 800a668:	f104 0401 	add.w	r4, r4, #1
 800a66c:	d1f7      	bne.n	800a65e <f_printf+0x234>
 800a66e:	e6f5      	b.n	800a45c <f_printf+0x32>
		j = i; d = (f & 1) ? '0' : ' ';
 800a670:	46a2      	mov	sl, r4
 800a672:	e7e3      	b.n	800a63c <f_printf+0x212>
	}

	va_end(arp);

	return putc_flush(&pb);
 800a674:	a808      	add	r0, sp, #32
 800a676:	f7ff fd05 	bl	800a084 <putc_flush>
}
 800a67a:	b01c      	add	sp, #112	; 0x70
 800a67c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a680:	b003      	add	sp, #12
 800a682:	4770      	bx	lr
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800a684:	f01c 0f04 	tst.w	ip, #4
 800a688:	f47f af7f 	bne.w	800a58a <f_printf+0x160>
 800a68c:	2010      	movs	r0, #16
 800a68e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a690:	1d1a      	adds	r2, r3, #4
 800a692:	921b      	str	r2, [sp, #108]	; 0x6c
 800a694:	681a      	ldr	r2, [r3, #0]
		if (d == 'D' && (v & 0x80000000)) {
 800a696:	e784      	b.n	800a5a2 <f_printf+0x178>
			if (!(f & 2)) {
 800a698:	f01c 0f02 	tst.w	ip, #2
 800a69c:	d031      	beq.n	800a702 <f_printf+0x2d8>
			for (j = 0; p[j]; j++) ;
 800a69e:	2700      	movs	r7, #0
 800a6a0:	e755      	b.n	800a54e <f_printf+0x124>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800a6a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6a4:	1d1a      	adds	r2, r3, #4
 800a6a6:	921b      	str	r2, [sp, #108]	; 0x6c
 800a6a8:	681a      	ldr	r2, [r3, #0]
			r = 2; break;
 800a6aa:	4640      	mov	r0, r8
 800a6ac:	e779      	b.n	800a5a2 <f_printf+0x178>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800a6ae:	f01c 0f04 	tst.w	ip, #4
 800a6b2:	d1f6      	bne.n	800a6a2 <f_printf+0x278>
			r = 2; break;
 800a6b4:	4640      	mov	r0, r8
 800a6b6:	e781      	b.n	800a5bc <f_printf+0x192>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800a6b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6ba:	1d1a      	adds	r2, r3, #4
 800a6bc:	921b      	str	r2, [sp, #108]	; 0x6c
 800a6be:	681a      	ldr	r2, [r3, #0]
			r = 8; break;
 800a6c0:	2008      	movs	r0, #8
 800a6c2:	e76e      	b.n	800a5a2 <f_printf+0x178>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800a6c4:	f01c 0f04 	tst.w	ip, #4
 800a6c8:	d1f6      	bne.n	800a6b8 <f_printf+0x28e>
			r = 8; break;
 800a6ca:	2008      	movs	r0, #8
 800a6cc:	e7df      	b.n	800a68e <f_printf+0x264>
			while (*p) putc_bfd(&pb, *p++);
 800a6ce:	7821      	ldrb	r1, [r4, #0]
				while (j++ < w) putc_bfd(&pb, ' ');
 800a6d0:	4657      	mov	r7, sl
 800a6d2:	e735      	b.n	800a540 <f_printf+0x116>
 800a6d4:	f107 0a01 	add.w	sl, r7, #1
 800a6d8:	42bd      	cmp	r5, r7
 800a6da:	d9f8      	bls.n	800a6ce <f_printf+0x2a4>
 800a6dc:	46d1      	mov	r9, sl
 800a6de:	f04f 0b20 	mov.w	fp, #32
 800a6e2:	4659      	mov	r1, fp
 800a6e4:	a808      	add	r0, sp, #32
 800a6e6:	f7ff fca8 	bl	800a03a <putc_bfd>
 800a6ea:	454d      	cmp	r5, r9
 800a6ec:	f109 0901 	add.w	r9, r9, #1
 800a6f0:	d1f7      	bne.n	800a6e2 <f_printf+0x2b8>
 800a6f2:	ebaa 0707 	sub.w	r7, sl, r7
 800a6f6:	442f      	add	r7, r5
			while (*p) putc_bfd(&pb, *p++);
 800a6f8:	7821      	ldrb	r1, [r4, #0]
 800a6fa:	2900      	cmp	r1, #0
 800a6fc:	f47f af20 	bne.w	800a540 <f_printf+0x116>
 800a700:	e725      	b.n	800a54e <f_printf+0x124>
				while (j++ < w) putc_bfd(&pb, ' ');
 800a702:	2701      	movs	r7, #1
 800a704:	2d00      	cmp	r5, #0
 800a706:	f43f af22 	beq.w	800a54e <f_printf+0x124>
			for (j = 0; p[j]; j++) ;
 800a70a:	2700      	movs	r7, #0
				while (j++ < w) putc_bfd(&pb, ' ');
 800a70c:	f04f 0a01 	mov.w	sl, #1
 800a710:	e7e4      	b.n	800a6dc <f_printf+0x2b2>
	...

0800a714 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800a714:	4b10      	ldr	r3, [pc, #64]	; (800a758 <FATFS_LinkDriverEx+0x44>)
 800a716:	7a5b      	ldrb	r3, [r3, #9]
 800a718:	b9e3      	cbnz	r3, 800a754 <FATFS_LinkDriverEx+0x40>
{
 800a71a:	b470      	push	{r4, r5, r6}
 800a71c:	4604      	mov	r4, r0
 800a71e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 800a722:	4b0d      	ldr	r3, [pc, #52]	; (800a758 <FATFS_LinkDriverEx+0x44>)
 800a724:	7a5d      	ldrb	r5, [r3, #9]
 800a726:	b2ed      	uxtb	r5, r5
 800a728:	2600      	movs	r6, #0
 800a72a:	555e      	strb	r6, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800a72c:	7a5d      	ldrb	r5, [r3, #9]
 800a72e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a732:	606c      	str	r4, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800a734:	7a5c      	ldrb	r4, [r3, #9]
 800a736:	441c      	add	r4, r3
 800a738:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800a73a:	7a5a      	ldrb	r2, [r3, #9]
 800a73c:	1c54      	adds	r4, r2, #1
 800a73e:	b2e4      	uxtb	r4, r4
 800a740:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800a742:	3230      	adds	r2, #48	; 0x30
 800a744:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800a746:	233a      	movs	r3, #58	; 0x3a
 800a748:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800a74a:	232f      	movs	r3, #47	; 0x2f
 800a74c:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800a74e:	70ce      	strb	r6, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800a750:	bc70      	pop	{r4, r5, r6}
 800a752:	4770      	bx	lr
  uint8_t ret = 1;
 800a754:	2001      	movs	r0, #1
}
 800a756:	4770      	bx	lr
 800a758:	20000954 	.word	0x20000954

0800a75c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a75c:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800a75e:	2200      	movs	r2, #0
 800a760:	f7ff ffd8 	bl	800a714 <FATFS_LinkDriverEx>
}
 800a764:	bd08      	pop	{r3, pc}
	...

0800a768 <__errno>:
 800a768:	4b01      	ldr	r3, [pc, #4]	; (800a770 <__errno+0x8>)
 800a76a:	6818      	ldr	r0, [r3, #0]
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop
 800a770:	20000024 	.word	0x20000024

0800a774 <__libc_init_array>:
 800a774:	b570      	push	{r4, r5, r6, lr}
 800a776:	4d0d      	ldr	r5, [pc, #52]	; (800a7ac <__libc_init_array+0x38>)
 800a778:	4c0d      	ldr	r4, [pc, #52]	; (800a7b0 <__libc_init_array+0x3c>)
 800a77a:	1b64      	subs	r4, r4, r5
 800a77c:	10a4      	asrs	r4, r4, #2
 800a77e:	2600      	movs	r6, #0
 800a780:	42a6      	cmp	r6, r4
 800a782:	d109      	bne.n	800a798 <__libc_init_array+0x24>
 800a784:	4d0b      	ldr	r5, [pc, #44]	; (800a7b4 <__libc_init_array+0x40>)
 800a786:	4c0c      	ldr	r4, [pc, #48]	; (800a7b8 <__libc_init_array+0x44>)
 800a788:	f005 fcc0 	bl	801010c <_init>
 800a78c:	1b64      	subs	r4, r4, r5
 800a78e:	10a4      	asrs	r4, r4, #2
 800a790:	2600      	movs	r6, #0
 800a792:	42a6      	cmp	r6, r4
 800a794:	d105      	bne.n	800a7a2 <__libc_init_array+0x2e>
 800a796:	bd70      	pop	{r4, r5, r6, pc}
 800a798:	f855 3b04 	ldr.w	r3, [r5], #4
 800a79c:	4798      	blx	r3
 800a79e:	3601      	adds	r6, #1
 800a7a0:	e7ee      	b.n	800a780 <__libc_init_array+0xc>
 800a7a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7a6:	4798      	blx	r3
 800a7a8:	3601      	adds	r6, #1
 800a7aa:	e7f2      	b.n	800a792 <__libc_init_array+0x1e>
 800a7ac:	080108a4 	.word	0x080108a4
 800a7b0:	080108a4 	.word	0x080108a4
 800a7b4:	080108a4 	.word	0x080108a4
 800a7b8:	080108a8 	.word	0x080108a8

0800a7bc <memset>:
 800a7bc:	4402      	add	r2, r0
 800a7be:	4603      	mov	r3, r0
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d100      	bne.n	800a7c6 <memset+0xa>
 800a7c4:	4770      	bx	lr
 800a7c6:	f803 1b01 	strb.w	r1, [r3], #1
 800a7ca:	e7f9      	b.n	800a7c0 <memset+0x4>

0800a7cc <__cvt>:
 800a7cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d0:	ec55 4b10 	vmov	r4, r5, d0
 800a7d4:	2d00      	cmp	r5, #0
 800a7d6:	460e      	mov	r6, r1
 800a7d8:	4619      	mov	r1, r3
 800a7da:	462b      	mov	r3, r5
 800a7dc:	bfbb      	ittet	lt
 800a7de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a7e2:	461d      	movlt	r5, r3
 800a7e4:	2300      	movge	r3, #0
 800a7e6:	232d      	movlt	r3, #45	; 0x2d
 800a7e8:	700b      	strb	r3, [r1, #0]
 800a7ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a7f0:	4691      	mov	r9, r2
 800a7f2:	f023 0820 	bic.w	r8, r3, #32
 800a7f6:	bfbc      	itt	lt
 800a7f8:	4622      	movlt	r2, r4
 800a7fa:	4614      	movlt	r4, r2
 800a7fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a800:	d005      	beq.n	800a80e <__cvt+0x42>
 800a802:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a806:	d100      	bne.n	800a80a <__cvt+0x3e>
 800a808:	3601      	adds	r6, #1
 800a80a:	2102      	movs	r1, #2
 800a80c:	e000      	b.n	800a810 <__cvt+0x44>
 800a80e:	2103      	movs	r1, #3
 800a810:	ab03      	add	r3, sp, #12
 800a812:	9301      	str	r3, [sp, #4]
 800a814:	ab02      	add	r3, sp, #8
 800a816:	9300      	str	r3, [sp, #0]
 800a818:	ec45 4b10 	vmov	d0, r4, r5
 800a81c:	4653      	mov	r3, sl
 800a81e:	4632      	mov	r2, r6
 800a820:	f001 fe46 	bl	800c4b0 <_dtoa_r>
 800a824:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a828:	4607      	mov	r7, r0
 800a82a:	d102      	bne.n	800a832 <__cvt+0x66>
 800a82c:	f019 0f01 	tst.w	r9, #1
 800a830:	d022      	beq.n	800a878 <__cvt+0xac>
 800a832:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a836:	eb07 0906 	add.w	r9, r7, r6
 800a83a:	d110      	bne.n	800a85e <__cvt+0x92>
 800a83c:	783b      	ldrb	r3, [r7, #0]
 800a83e:	2b30      	cmp	r3, #48	; 0x30
 800a840:	d10a      	bne.n	800a858 <__cvt+0x8c>
 800a842:	2200      	movs	r2, #0
 800a844:	2300      	movs	r3, #0
 800a846:	4620      	mov	r0, r4
 800a848:	4629      	mov	r1, r5
 800a84a:	f7f6 f94d 	bl	8000ae8 <__aeabi_dcmpeq>
 800a84e:	b918      	cbnz	r0, 800a858 <__cvt+0x8c>
 800a850:	f1c6 0601 	rsb	r6, r6, #1
 800a854:	f8ca 6000 	str.w	r6, [sl]
 800a858:	f8da 3000 	ldr.w	r3, [sl]
 800a85c:	4499      	add	r9, r3
 800a85e:	2200      	movs	r2, #0
 800a860:	2300      	movs	r3, #0
 800a862:	4620      	mov	r0, r4
 800a864:	4629      	mov	r1, r5
 800a866:	f7f6 f93f 	bl	8000ae8 <__aeabi_dcmpeq>
 800a86a:	b108      	cbz	r0, 800a870 <__cvt+0xa4>
 800a86c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a870:	2230      	movs	r2, #48	; 0x30
 800a872:	9b03      	ldr	r3, [sp, #12]
 800a874:	454b      	cmp	r3, r9
 800a876:	d307      	bcc.n	800a888 <__cvt+0xbc>
 800a878:	9b03      	ldr	r3, [sp, #12]
 800a87a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a87c:	1bdb      	subs	r3, r3, r7
 800a87e:	4638      	mov	r0, r7
 800a880:	6013      	str	r3, [r2, #0]
 800a882:	b004      	add	sp, #16
 800a884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a888:	1c59      	adds	r1, r3, #1
 800a88a:	9103      	str	r1, [sp, #12]
 800a88c:	701a      	strb	r2, [r3, #0]
 800a88e:	e7f0      	b.n	800a872 <__cvt+0xa6>

0800a890 <__exponent>:
 800a890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a892:	4603      	mov	r3, r0
 800a894:	2900      	cmp	r1, #0
 800a896:	bfb8      	it	lt
 800a898:	4249      	neglt	r1, r1
 800a89a:	f803 2b02 	strb.w	r2, [r3], #2
 800a89e:	bfb4      	ite	lt
 800a8a0:	222d      	movlt	r2, #45	; 0x2d
 800a8a2:	222b      	movge	r2, #43	; 0x2b
 800a8a4:	2909      	cmp	r1, #9
 800a8a6:	7042      	strb	r2, [r0, #1]
 800a8a8:	dd2a      	ble.n	800a900 <__exponent+0x70>
 800a8aa:	f10d 0407 	add.w	r4, sp, #7
 800a8ae:	46a4      	mov	ip, r4
 800a8b0:	270a      	movs	r7, #10
 800a8b2:	46a6      	mov	lr, r4
 800a8b4:	460a      	mov	r2, r1
 800a8b6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a8ba:	fb07 1516 	mls	r5, r7, r6, r1
 800a8be:	3530      	adds	r5, #48	; 0x30
 800a8c0:	2a63      	cmp	r2, #99	; 0x63
 800a8c2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a8c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a8ca:	4631      	mov	r1, r6
 800a8cc:	dcf1      	bgt.n	800a8b2 <__exponent+0x22>
 800a8ce:	3130      	adds	r1, #48	; 0x30
 800a8d0:	f1ae 0502 	sub.w	r5, lr, #2
 800a8d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a8d8:	1c44      	adds	r4, r0, #1
 800a8da:	4629      	mov	r1, r5
 800a8dc:	4561      	cmp	r1, ip
 800a8de:	d30a      	bcc.n	800a8f6 <__exponent+0x66>
 800a8e0:	f10d 0209 	add.w	r2, sp, #9
 800a8e4:	eba2 020e 	sub.w	r2, r2, lr
 800a8e8:	4565      	cmp	r5, ip
 800a8ea:	bf88      	it	hi
 800a8ec:	2200      	movhi	r2, #0
 800a8ee:	4413      	add	r3, r2
 800a8f0:	1a18      	subs	r0, r3, r0
 800a8f2:	b003      	add	sp, #12
 800a8f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a8fe:	e7ed      	b.n	800a8dc <__exponent+0x4c>
 800a900:	2330      	movs	r3, #48	; 0x30
 800a902:	3130      	adds	r1, #48	; 0x30
 800a904:	7083      	strb	r3, [r0, #2]
 800a906:	70c1      	strb	r1, [r0, #3]
 800a908:	1d03      	adds	r3, r0, #4
 800a90a:	e7f1      	b.n	800a8f0 <__exponent+0x60>

0800a90c <_printf_float>:
 800a90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a910:	ed2d 8b02 	vpush	{d8}
 800a914:	b08d      	sub	sp, #52	; 0x34
 800a916:	460c      	mov	r4, r1
 800a918:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a91c:	4616      	mov	r6, r2
 800a91e:	461f      	mov	r7, r3
 800a920:	4605      	mov	r5, r0
 800a922:	f002 ff21 	bl	800d768 <_localeconv_r>
 800a926:	f8d0 a000 	ldr.w	sl, [r0]
 800a92a:	4650      	mov	r0, sl
 800a92c:	f7f5 fc5a 	bl	80001e4 <strlen>
 800a930:	2300      	movs	r3, #0
 800a932:	930a      	str	r3, [sp, #40]	; 0x28
 800a934:	6823      	ldr	r3, [r4, #0]
 800a936:	9305      	str	r3, [sp, #20]
 800a938:	f8d8 3000 	ldr.w	r3, [r8]
 800a93c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a940:	3307      	adds	r3, #7
 800a942:	f023 0307 	bic.w	r3, r3, #7
 800a946:	f103 0208 	add.w	r2, r3, #8
 800a94a:	f8c8 2000 	str.w	r2, [r8]
 800a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a952:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a956:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a95a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a95e:	9307      	str	r3, [sp, #28]
 800a960:	f8cd 8018 	str.w	r8, [sp, #24]
 800a964:	ee08 0a10 	vmov	s16, r0
 800a968:	4b9f      	ldr	r3, [pc, #636]	; (800abe8 <_printf_float+0x2dc>)
 800a96a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a96e:	f04f 32ff 	mov.w	r2, #4294967295
 800a972:	f7f6 f8eb 	bl	8000b4c <__aeabi_dcmpun>
 800a976:	bb88      	cbnz	r0, 800a9dc <_printf_float+0xd0>
 800a978:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a97c:	4b9a      	ldr	r3, [pc, #616]	; (800abe8 <_printf_float+0x2dc>)
 800a97e:	f04f 32ff 	mov.w	r2, #4294967295
 800a982:	f7f6 f8c5 	bl	8000b10 <__aeabi_dcmple>
 800a986:	bb48      	cbnz	r0, 800a9dc <_printf_float+0xd0>
 800a988:	2200      	movs	r2, #0
 800a98a:	2300      	movs	r3, #0
 800a98c:	4640      	mov	r0, r8
 800a98e:	4649      	mov	r1, r9
 800a990:	f7f6 f8b4 	bl	8000afc <__aeabi_dcmplt>
 800a994:	b110      	cbz	r0, 800a99c <_printf_float+0x90>
 800a996:	232d      	movs	r3, #45	; 0x2d
 800a998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a99c:	4b93      	ldr	r3, [pc, #588]	; (800abec <_printf_float+0x2e0>)
 800a99e:	4894      	ldr	r0, [pc, #592]	; (800abf0 <_printf_float+0x2e4>)
 800a9a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a9a4:	bf94      	ite	ls
 800a9a6:	4698      	movls	r8, r3
 800a9a8:	4680      	movhi	r8, r0
 800a9aa:	2303      	movs	r3, #3
 800a9ac:	6123      	str	r3, [r4, #16]
 800a9ae:	9b05      	ldr	r3, [sp, #20]
 800a9b0:	f023 0204 	bic.w	r2, r3, #4
 800a9b4:	6022      	str	r2, [r4, #0]
 800a9b6:	f04f 0900 	mov.w	r9, #0
 800a9ba:	9700      	str	r7, [sp, #0]
 800a9bc:	4633      	mov	r3, r6
 800a9be:	aa0b      	add	r2, sp, #44	; 0x2c
 800a9c0:	4621      	mov	r1, r4
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	f000 f9d8 	bl	800ad78 <_printf_common>
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	f040 8090 	bne.w	800aaee <_printf_float+0x1e2>
 800a9ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d2:	b00d      	add	sp, #52	; 0x34
 800a9d4:	ecbd 8b02 	vpop	{d8}
 800a9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9dc:	4642      	mov	r2, r8
 800a9de:	464b      	mov	r3, r9
 800a9e0:	4640      	mov	r0, r8
 800a9e2:	4649      	mov	r1, r9
 800a9e4:	f7f6 f8b2 	bl	8000b4c <__aeabi_dcmpun>
 800a9e8:	b140      	cbz	r0, 800a9fc <_printf_float+0xf0>
 800a9ea:	464b      	mov	r3, r9
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	bfbc      	itt	lt
 800a9f0:	232d      	movlt	r3, #45	; 0x2d
 800a9f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a9f6:	487f      	ldr	r0, [pc, #508]	; (800abf4 <_printf_float+0x2e8>)
 800a9f8:	4b7f      	ldr	r3, [pc, #508]	; (800abf8 <_printf_float+0x2ec>)
 800a9fa:	e7d1      	b.n	800a9a0 <_printf_float+0x94>
 800a9fc:	6863      	ldr	r3, [r4, #4]
 800a9fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aa02:	9206      	str	r2, [sp, #24]
 800aa04:	1c5a      	adds	r2, r3, #1
 800aa06:	d13f      	bne.n	800aa88 <_printf_float+0x17c>
 800aa08:	2306      	movs	r3, #6
 800aa0a:	6063      	str	r3, [r4, #4]
 800aa0c:	9b05      	ldr	r3, [sp, #20]
 800aa0e:	6861      	ldr	r1, [r4, #4]
 800aa10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aa14:	2300      	movs	r3, #0
 800aa16:	9303      	str	r3, [sp, #12]
 800aa18:	ab0a      	add	r3, sp, #40	; 0x28
 800aa1a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aa1e:	ab09      	add	r3, sp, #36	; 0x24
 800aa20:	ec49 8b10 	vmov	d0, r8, r9
 800aa24:	9300      	str	r3, [sp, #0]
 800aa26:	6022      	str	r2, [r4, #0]
 800aa28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	f7ff fecd 	bl	800a7cc <__cvt>
 800aa32:	9b06      	ldr	r3, [sp, #24]
 800aa34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa36:	2b47      	cmp	r3, #71	; 0x47
 800aa38:	4680      	mov	r8, r0
 800aa3a:	d108      	bne.n	800aa4e <_printf_float+0x142>
 800aa3c:	1cc8      	adds	r0, r1, #3
 800aa3e:	db02      	blt.n	800aa46 <_printf_float+0x13a>
 800aa40:	6863      	ldr	r3, [r4, #4]
 800aa42:	4299      	cmp	r1, r3
 800aa44:	dd41      	ble.n	800aaca <_printf_float+0x1be>
 800aa46:	f1ab 0b02 	sub.w	fp, fp, #2
 800aa4a:	fa5f fb8b 	uxtb.w	fp, fp
 800aa4e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aa52:	d820      	bhi.n	800aa96 <_printf_float+0x18a>
 800aa54:	3901      	subs	r1, #1
 800aa56:	465a      	mov	r2, fp
 800aa58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aa5c:	9109      	str	r1, [sp, #36]	; 0x24
 800aa5e:	f7ff ff17 	bl	800a890 <__exponent>
 800aa62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa64:	1813      	adds	r3, r2, r0
 800aa66:	2a01      	cmp	r2, #1
 800aa68:	4681      	mov	r9, r0
 800aa6a:	6123      	str	r3, [r4, #16]
 800aa6c:	dc02      	bgt.n	800aa74 <_printf_float+0x168>
 800aa6e:	6822      	ldr	r2, [r4, #0]
 800aa70:	07d2      	lsls	r2, r2, #31
 800aa72:	d501      	bpl.n	800aa78 <_printf_float+0x16c>
 800aa74:	3301      	adds	r3, #1
 800aa76:	6123      	str	r3, [r4, #16]
 800aa78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d09c      	beq.n	800a9ba <_printf_float+0xae>
 800aa80:	232d      	movs	r3, #45	; 0x2d
 800aa82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa86:	e798      	b.n	800a9ba <_printf_float+0xae>
 800aa88:	9a06      	ldr	r2, [sp, #24]
 800aa8a:	2a47      	cmp	r2, #71	; 0x47
 800aa8c:	d1be      	bne.n	800aa0c <_printf_float+0x100>
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1bc      	bne.n	800aa0c <_printf_float+0x100>
 800aa92:	2301      	movs	r3, #1
 800aa94:	e7b9      	b.n	800aa0a <_printf_float+0xfe>
 800aa96:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800aa9a:	d118      	bne.n	800aace <_printf_float+0x1c2>
 800aa9c:	2900      	cmp	r1, #0
 800aa9e:	6863      	ldr	r3, [r4, #4]
 800aaa0:	dd0b      	ble.n	800aaba <_printf_float+0x1ae>
 800aaa2:	6121      	str	r1, [r4, #16]
 800aaa4:	b913      	cbnz	r3, 800aaac <_printf_float+0x1a0>
 800aaa6:	6822      	ldr	r2, [r4, #0]
 800aaa8:	07d0      	lsls	r0, r2, #31
 800aaaa:	d502      	bpl.n	800aab2 <_printf_float+0x1a6>
 800aaac:	3301      	adds	r3, #1
 800aaae:	440b      	add	r3, r1
 800aab0:	6123      	str	r3, [r4, #16]
 800aab2:	65a1      	str	r1, [r4, #88]	; 0x58
 800aab4:	f04f 0900 	mov.w	r9, #0
 800aab8:	e7de      	b.n	800aa78 <_printf_float+0x16c>
 800aaba:	b913      	cbnz	r3, 800aac2 <_printf_float+0x1b6>
 800aabc:	6822      	ldr	r2, [r4, #0]
 800aabe:	07d2      	lsls	r2, r2, #31
 800aac0:	d501      	bpl.n	800aac6 <_printf_float+0x1ba>
 800aac2:	3302      	adds	r3, #2
 800aac4:	e7f4      	b.n	800aab0 <_printf_float+0x1a4>
 800aac6:	2301      	movs	r3, #1
 800aac8:	e7f2      	b.n	800aab0 <_printf_float+0x1a4>
 800aaca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800aace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aad0:	4299      	cmp	r1, r3
 800aad2:	db05      	blt.n	800aae0 <_printf_float+0x1d4>
 800aad4:	6823      	ldr	r3, [r4, #0]
 800aad6:	6121      	str	r1, [r4, #16]
 800aad8:	07d8      	lsls	r0, r3, #31
 800aada:	d5ea      	bpl.n	800aab2 <_printf_float+0x1a6>
 800aadc:	1c4b      	adds	r3, r1, #1
 800aade:	e7e7      	b.n	800aab0 <_printf_float+0x1a4>
 800aae0:	2900      	cmp	r1, #0
 800aae2:	bfd4      	ite	le
 800aae4:	f1c1 0202 	rsble	r2, r1, #2
 800aae8:	2201      	movgt	r2, #1
 800aaea:	4413      	add	r3, r2
 800aaec:	e7e0      	b.n	800aab0 <_printf_float+0x1a4>
 800aaee:	6823      	ldr	r3, [r4, #0]
 800aaf0:	055a      	lsls	r2, r3, #21
 800aaf2:	d407      	bmi.n	800ab04 <_printf_float+0x1f8>
 800aaf4:	6923      	ldr	r3, [r4, #16]
 800aaf6:	4642      	mov	r2, r8
 800aaf8:	4631      	mov	r1, r6
 800aafa:	4628      	mov	r0, r5
 800aafc:	47b8      	blx	r7
 800aafe:	3001      	adds	r0, #1
 800ab00:	d12c      	bne.n	800ab5c <_printf_float+0x250>
 800ab02:	e764      	b.n	800a9ce <_printf_float+0xc2>
 800ab04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab08:	f240 80e0 	bls.w	800accc <_printf_float+0x3c0>
 800ab0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab10:	2200      	movs	r2, #0
 800ab12:	2300      	movs	r3, #0
 800ab14:	f7f5 ffe8 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	d034      	beq.n	800ab86 <_printf_float+0x27a>
 800ab1c:	4a37      	ldr	r2, [pc, #220]	; (800abfc <_printf_float+0x2f0>)
 800ab1e:	2301      	movs	r3, #1
 800ab20:	4631      	mov	r1, r6
 800ab22:	4628      	mov	r0, r5
 800ab24:	47b8      	blx	r7
 800ab26:	3001      	adds	r0, #1
 800ab28:	f43f af51 	beq.w	800a9ce <_printf_float+0xc2>
 800ab2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab30:	429a      	cmp	r2, r3
 800ab32:	db02      	blt.n	800ab3a <_printf_float+0x22e>
 800ab34:	6823      	ldr	r3, [r4, #0]
 800ab36:	07d8      	lsls	r0, r3, #31
 800ab38:	d510      	bpl.n	800ab5c <_printf_float+0x250>
 800ab3a:	ee18 3a10 	vmov	r3, s16
 800ab3e:	4652      	mov	r2, sl
 800ab40:	4631      	mov	r1, r6
 800ab42:	4628      	mov	r0, r5
 800ab44:	47b8      	blx	r7
 800ab46:	3001      	adds	r0, #1
 800ab48:	f43f af41 	beq.w	800a9ce <_printf_float+0xc2>
 800ab4c:	f04f 0800 	mov.w	r8, #0
 800ab50:	f104 091a 	add.w	r9, r4, #26
 800ab54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab56:	3b01      	subs	r3, #1
 800ab58:	4543      	cmp	r3, r8
 800ab5a:	dc09      	bgt.n	800ab70 <_printf_float+0x264>
 800ab5c:	6823      	ldr	r3, [r4, #0]
 800ab5e:	079b      	lsls	r3, r3, #30
 800ab60:	f100 8105 	bmi.w	800ad6e <_printf_float+0x462>
 800ab64:	68e0      	ldr	r0, [r4, #12]
 800ab66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab68:	4298      	cmp	r0, r3
 800ab6a:	bfb8      	it	lt
 800ab6c:	4618      	movlt	r0, r3
 800ab6e:	e730      	b.n	800a9d2 <_printf_float+0xc6>
 800ab70:	2301      	movs	r3, #1
 800ab72:	464a      	mov	r2, r9
 800ab74:	4631      	mov	r1, r6
 800ab76:	4628      	mov	r0, r5
 800ab78:	47b8      	blx	r7
 800ab7a:	3001      	adds	r0, #1
 800ab7c:	f43f af27 	beq.w	800a9ce <_printf_float+0xc2>
 800ab80:	f108 0801 	add.w	r8, r8, #1
 800ab84:	e7e6      	b.n	800ab54 <_printf_float+0x248>
 800ab86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	dc39      	bgt.n	800ac00 <_printf_float+0x2f4>
 800ab8c:	4a1b      	ldr	r2, [pc, #108]	; (800abfc <_printf_float+0x2f0>)
 800ab8e:	2301      	movs	r3, #1
 800ab90:	4631      	mov	r1, r6
 800ab92:	4628      	mov	r0, r5
 800ab94:	47b8      	blx	r7
 800ab96:	3001      	adds	r0, #1
 800ab98:	f43f af19 	beq.w	800a9ce <_printf_float+0xc2>
 800ab9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aba0:	4313      	orrs	r3, r2
 800aba2:	d102      	bne.n	800abaa <_printf_float+0x29e>
 800aba4:	6823      	ldr	r3, [r4, #0]
 800aba6:	07d9      	lsls	r1, r3, #31
 800aba8:	d5d8      	bpl.n	800ab5c <_printf_float+0x250>
 800abaa:	ee18 3a10 	vmov	r3, s16
 800abae:	4652      	mov	r2, sl
 800abb0:	4631      	mov	r1, r6
 800abb2:	4628      	mov	r0, r5
 800abb4:	47b8      	blx	r7
 800abb6:	3001      	adds	r0, #1
 800abb8:	f43f af09 	beq.w	800a9ce <_printf_float+0xc2>
 800abbc:	f04f 0900 	mov.w	r9, #0
 800abc0:	f104 0a1a 	add.w	sl, r4, #26
 800abc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abc6:	425b      	negs	r3, r3
 800abc8:	454b      	cmp	r3, r9
 800abca:	dc01      	bgt.n	800abd0 <_printf_float+0x2c4>
 800abcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abce:	e792      	b.n	800aaf6 <_printf_float+0x1ea>
 800abd0:	2301      	movs	r3, #1
 800abd2:	4652      	mov	r2, sl
 800abd4:	4631      	mov	r1, r6
 800abd6:	4628      	mov	r0, r5
 800abd8:	47b8      	blx	r7
 800abda:	3001      	adds	r0, #1
 800abdc:	f43f aef7 	beq.w	800a9ce <_printf_float+0xc2>
 800abe0:	f109 0901 	add.w	r9, r9, #1
 800abe4:	e7ee      	b.n	800abc4 <_printf_float+0x2b8>
 800abe6:	bf00      	nop
 800abe8:	7fefffff 	.word	0x7fefffff
 800abec:	080103b4 	.word	0x080103b4
 800abf0:	080103b8 	.word	0x080103b8
 800abf4:	080103c0 	.word	0x080103c0
 800abf8:	080103bc 	.word	0x080103bc
 800abfc:	080107c9 	.word	0x080107c9
 800ac00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac04:	429a      	cmp	r2, r3
 800ac06:	bfa8      	it	ge
 800ac08:	461a      	movge	r2, r3
 800ac0a:	2a00      	cmp	r2, #0
 800ac0c:	4691      	mov	r9, r2
 800ac0e:	dc37      	bgt.n	800ac80 <_printf_float+0x374>
 800ac10:	f04f 0b00 	mov.w	fp, #0
 800ac14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac18:	f104 021a 	add.w	r2, r4, #26
 800ac1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac1e:	9305      	str	r3, [sp, #20]
 800ac20:	eba3 0309 	sub.w	r3, r3, r9
 800ac24:	455b      	cmp	r3, fp
 800ac26:	dc33      	bgt.n	800ac90 <_printf_float+0x384>
 800ac28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	db3b      	blt.n	800aca8 <_printf_float+0x39c>
 800ac30:	6823      	ldr	r3, [r4, #0]
 800ac32:	07da      	lsls	r2, r3, #31
 800ac34:	d438      	bmi.n	800aca8 <_printf_float+0x39c>
 800ac36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac38:	9b05      	ldr	r3, [sp, #20]
 800ac3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac3c:	1ad3      	subs	r3, r2, r3
 800ac3e:	eba2 0901 	sub.w	r9, r2, r1
 800ac42:	4599      	cmp	r9, r3
 800ac44:	bfa8      	it	ge
 800ac46:	4699      	movge	r9, r3
 800ac48:	f1b9 0f00 	cmp.w	r9, #0
 800ac4c:	dc35      	bgt.n	800acba <_printf_float+0x3ae>
 800ac4e:	f04f 0800 	mov.w	r8, #0
 800ac52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac56:	f104 0a1a 	add.w	sl, r4, #26
 800ac5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac5e:	1a9b      	subs	r3, r3, r2
 800ac60:	eba3 0309 	sub.w	r3, r3, r9
 800ac64:	4543      	cmp	r3, r8
 800ac66:	f77f af79 	ble.w	800ab5c <_printf_float+0x250>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	4652      	mov	r2, sl
 800ac6e:	4631      	mov	r1, r6
 800ac70:	4628      	mov	r0, r5
 800ac72:	47b8      	blx	r7
 800ac74:	3001      	adds	r0, #1
 800ac76:	f43f aeaa 	beq.w	800a9ce <_printf_float+0xc2>
 800ac7a:	f108 0801 	add.w	r8, r8, #1
 800ac7e:	e7ec      	b.n	800ac5a <_printf_float+0x34e>
 800ac80:	4613      	mov	r3, r2
 800ac82:	4631      	mov	r1, r6
 800ac84:	4642      	mov	r2, r8
 800ac86:	4628      	mov	r0, r5
 800ac88:	47b8      	blx	r7
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	d1c0      	bne.n	800ac10 <_printf_float+0x304>
 800ac8e:	e69e      	b.n	800a9ce <_printf_float+0xc2>
 800ac90:	2301      	movs	r3, #1
 800ac92:	4631      	mov	r1, r6
 800ac94:	4628      	mov	r0, r5
 800ac96:	9205      	str	r2, [sp, #20]
 800ac98:	47b8      	blx	r7
 800ac9a:	3001      	adds	r0, #1
 800ac9c:	f43f ae97 	beq.w	800a9ce <_printf_float+0xc2>
 800aca0:	9a05      	ldr	r2, [sp, #20]
 800aca2:	f10b 0b01 	add.w	fp, fp, #1
 800aca6:	e7b9      	b.n	800ac1c <_printf_float+0x310>
 800aca8:	ee18 3a10 	vmov	r3, s16
 800acac:	4652      	mov	r2, sl
 800acae:	4631      	mov	r1, r6
 800acb0:	4628      	mov	r0, r5
 800acb2:	47b8      	blx	r7
 800acb4:	3001      	adds	r0, #1
 800acb6:	d1be      	bne.n	800ac36 <_printf_float+0x32a>
 800acb8:	e689      	b.n	800a9ce <_printf_float+0xc2>
 800acba:	9a05      	ldr	r2, [sp, #20]
 800acbc:	464b      	mov	r3, r9
 800acbe:	4442      	add	r2, r8
 800acc0:	4631      	mov	r1, r6
 800acc2:	4628      	mov	r0, r5
 800acc4:	47b8      	blx	r7
 800acc6:	3001      	adds	r0, #1
 800acc8:	d1c1      	bne.n	800ac4e <_printf_float+0x342>
 800acca:	e680      	b.n	800a9ce <_printf_float+0xc2>
 800accc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acce:	2a01      	cmp	r2, #1
 800acd0:	dc01      	bgt.n	800acd6 <_printf_float+0x3ca>
 800acd2:	07db      	lsls	r3, r3, #31
 800acd4:	d538      	bpl.n	800ad48 <_printf_float+0x43c>
 800acd6:	2301      	movs	r3, #1
 800acd8:	4642      	mov	r2, r8
 800acda:	4631      	mov	r1, r6
 800acdc:	4628      	mov	r0, r5
 800acde:	47b8      	blx	r7
 800ace0:	3001      	adds	r0, #1
 800ace2:	f43f ae74 	beq.w	800a9ce <_printf_float+0xc2>
 800ace6:	ee18 3a10 	vmov	r3, s16
 800acea:	4652      	mov	r2, sl
 800acec:	4631      	mov	r1, r6
 800acee:	4628      	mov	r0, r5
 800acf0:	47b8      	blx	r7
 800acf2:	3001      	adds	r0, #1
 800acf4:	f43f ae6b 	beq.w	800a9ce <_printf_float+0xc2>
 800acf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800acfc:	2200      	movs	r2, #0
 800acfe:	2300      	movs	r3, #0
 800ad00:	f7f5 fef2 	bl	8000ae8 <__aeabi_dcmpeq>
 800ad04:	b9d8      	cbnz	r0, 800ad3e <_printf_float+0x432>
 800ad06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad08:	f108 0201 	add.w	r2, r8, #1
 800ad0c:	3b01      	subs	r3, #1
 800ad0e:	4631      	mov	r1, r6
 800ad10:	4628      	mov	r0, r5
 800ad12:	47b8      	blx	r7
 800ad14:	3001      	adds	r0, #1
 800ad16:	d10e      	bne.n	800ad36 <_printf_float+0x42a>
 800ad18:	e659      	b.n	800a9ce <_printf_float+0xc2>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	4652      	mov	r2, sl
 800ad1e:	4631      	mov	r1, r6
 800ad20:	4628      	mov	r0, r5
 800ad22:	47b8      	blx	r7
 800ad24:	3001      	adds	r0, #1
 800ad26:	f43f ae52 	beq.w	800a9ce <_printf_float+0xc2>
 800ad2a:	f108 0801 	add.w	r8, r8, #1
 800ad2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad30:	3b01      	subs	r3, #1
 800ad32:	4543      	cmp	r3, r8
 800ad34:	dcf1      	bgt.n	800ad1a <_printf_float+0x40e>
 800ad36:	464b      	mov	r3, r9
 800ad38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ad3c:	e6dc      	b.n	800aaf8 <_printf_float+0x1ec>
 800ad3e:	f04f 0800 	mov.w	r8, #0
 800ad42:	f104 0a1a 	add.w	sl, r4, #26
 800ad46:	e7f2      	b.n	800ad2e <_printf_float+0x422>
 800ad48:	2301      	movs	r3, #1
 800ad4a:	4642      	mov	r2, r8
 800ad4c:	e7df      	b.n	800ad0e <_printf_float+0x402>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	464a      	mov	r2, r9
 800ad52:	4631      	mov	r1, r6
 800ad54:	4628      	mov	r0, r5
 800ad56:	47b8      	blx	r7
 800ad58:	3001      	adds	r0, #1
 800ad5a:	f43f ae38 	beq.w	800a9ce <_printf_float+0xc2>
 800ad5e:	f108 0801 	add.w	r8, r8, #1
 800ad62:	68e3      	ldr	r3, [r4, #12]
 800ad64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad66:	1a5b      	subs	r3, r3, r1
 800ad68:	4543      	cmp	r3, r8
 800ad6a:	dcf0      	bgt.n	800ad4e <_printf_float+0x442>
 800ad6c:	e6fa      	b.n	800ab64 <_printf_float+0x258>
 800ad6e:	f04f 0800 	mov.w	r8, #0
 800ad72:	f104 0919 	add.w	r9, r4, #25
 800ad76:	e7f4      	b.n	800ad62 <_printf_float+0x456>

0800ad78 <_printf_common>:
 800ad78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad7c:	4616      	mov	r6, r2
 800ad7e:	4699      	mov	r9, r3
 800ad80:	688a      	ldr	r2, [r1, #8]
 800ad82:	690b      	ldr	r3, [r1, #16]
 800ad84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	bfb8      	it	lt
 800ad8c:	4613      	movlt	r3, r2
 800ad8e:	6033      	str	r3, [r6, #0]
 800ad90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ad94:	4607      	mov	r7, r0
 800ad96:	460c      	mov	r4, r1
 800ad98:	b10a      	cbz	r2, 800ad9e <_printf_common+0x26>
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	6033      	str	r3, [r6, #0]
 800ad9e:	6823      	ldr	r3, [r4, #0]
 800ada0:	0699      	lsls	r1, r3, #26
 800ada2:	bf42      	ittt	mi
 800ada4:	6833      	ldrmi	r3, [r6, #0]
 800ada6:	3302      	addmi	r3, #2
 800ada8:	6033      	strmi	r3, [r6, #0]
 800adaa:	6825      	ldr	r5, [r4, #0]
 800adac:	f015 0506 	ands.w	r5, r5, #6
 800adb0:	d106      	bne.n	800adc0 <_printf_common+0x48>
 800adb2:	f104 0a19 	add.w	sl, r4, #25
 800adb6:	68e3      	ldr	r3, [r4, #12]
 800adb8:	6832      	ldr	r2, [r6, #0]
 800adba:	1a9b      	subs	r3, r3, r2
 800adbc:	42ab      	cmp	r3, r5
 800adbe:	dc26      	bgt.n	800ae0e <_printf_common+0x96>
 800adc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800adc4:	1e13      	subs	r3, r2, #0
 800adc6:	6822      	ldr	r2, [r4, #0]
 800adc8:	bf18      	it	ne
 800adca:	2301      	movne	r3, #1
 800adcc:	0692      	lsls	r2, r2, #26
 800adce:	d42b      	bmi.n	800ae28 <_printf_common+0xb0>
 800add0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800add4:	4649      	mov	r1, r9
 800add6:	4638      	mov	r0, r7
 800add8:	47c0      	blx	r8
 800adda:	3001      	adds	r0, #1
 800addc:	d01e      	beq.n	800ae1c <_printf_common+0xa4>
 800adde:	6823      	ldr	r3, [r4, #0]
 800ade0:	68e5      	ldr	r5, [r4, #12]
 800ade2:	6832      	ldr	r2, [r6, #0]
 800ade4:	f003 0306 	and.w	r3, r3, #6
 800ade8:	2b04      	cmp	r3, #4
 800adea:	bf08      	it	eq
 800adec:	1aad      	subeq	r5, r5, r2
 800adee:	68a3      	ldr	r3, [r4, #8]
 800adf0:	6922      	ldr	r2, [r4, #16]
 800adf2:	bf0c      	ite	eq
 800adf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800adf8:	2500      	movne	r5, #0
 800adfa:	4293      	cmp	r3, r2
 800adfc:	bfc4      	itt	gt
 800adfe:	1a9b      	subgt	r3, r3, r2
 800ae00:	18ed      	addgt	r5, r5, r3
 800ae02:	2600      	movs	r6, #0
 800ae04:	341a      	adds	r4, #26
 800ae06:	42b5      	cmp	r5, r6
 800ae08:	d11a      	bne.n	800ae40 <_printf_common+0xc8>
 800ae0a:	2000      	movs	r0, #0
 800ae0c:	e008      	b.n	800ae20 <_printf_common+0xa8>
 800ae0e:	2301      	movs	r3, #1
 800ae10:	4652      	mov	r2, sl
 800ae12:	4649      	mov	r1, r9
 800ae14:	4638      	mov	r0, r7
 800ae16:	47c0      	blx	r8
 800ae18:	3001      	adds	r0, #1
 800ae1a:	d103      	bne.n	800ae24 <_printf_common+0xac>
 800ae1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae24:	3501      	adds	r5, #1
 800ae26:	e7c6      	b.n	800adb6 <_printf_common+0x3e>
 800ae28:	18e1      	adds	r1, r4, r3
 800ae2a:	1c5a      	adds	r2, r3, #1
 800ae2c:	2030      	movs	r0, #48	; 0x30
 800ae2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae32:	4422      	add	r2, r4
 800ae34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ae38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ae3c:	3302      	adds	r3, #2
 800ae3e:	e7c7      	b.n	800add0 <_printf_common+0x58>
 800ae40:	2301      	movs	r3, #1
 800ae42:	4622      	mov	r2, r4
 800ae44:	4649      	mov	r1, r9
 800ae46:	4638      	mov	r0, r7
 800ae48:	47c0      	blx	r8
 800ae4a:	3001      	adds	r0, #1
 800ae4c:	d0e6      	beq.n	800ae1c <_printf_common+0xa4>
 800ae4e:	3601      	adds	r6, #1
 800ae50:	e7d9      	b.n	800ae06 <_printf_common+0x8e>
	...

0800ae54 <_printf_i>:
 800ae54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae58:	460c      	mov	r4, r1
 800ae5a:	4691      	mov	r9, r2
 800ae5c:	7e27      	ldrb	r7, [r4, #24]
 800ae5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ae60:	2f78      	cmp	r7, #120	; 0x78
 800ae62:	4680      	mov	r8, r0
 800ae64:	469a      	mov	sl, r3
 800ae66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae6a:	d807      	bhi.n	800ae7c <_printf_i+0x28>
 800ae6c:	2f62      	cmp	r7, #98	; 0x62
 800ae6e:	d80a      	bhi.n	800ae86 <_printf_i+0x32>
 800ae70:	2f00      	cmp	r7, #0
 800ae72:	f000 80d8 	beq.w	800b026 <_printf_i+0x1d2>
 800ae76:	2f58      	cmp	r7, #88	; 0x58
 800ae78:	f000 80a3 	beq.w	800afc2 <_printf_i+0x16e>
 800ae7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ae80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ae84:	e03a      	b.n	800aefc <_printf_i+0xa8>
 800ae86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ae8a:	2b15      	cmp	r3, #21
 800ae8c:	d8f6      	bhi.n	800ae7c <_printf_i+0x28>
 800ae8e:	a001      	add	r0, pc, #4	; (adr r0, 800ae94 <_printf_i+0x40>)
 800ae90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ae94:	0800aeed 	.word	0x0800aeed
 800ae98:	0800af01 	.word	0x0800af01
 800ae9c:	0800ae7d 	.word	0x0800ae7d
 800aea0:	0800ae7d 	.word	0x0800ae7d
 800aea4:	0800ae7d 	.word	0x0800ae7d
 800aea8:	0800ae7d 	.word	0x0800ae7d
 800aeac:	0800af01 	.word	0x0800af01
 800aeb0:	0800ae7d 	.word	0x0800ae7d
 800aeb4:	0800ae7d 	.word	0x0800ae7d
 800aeb8:	0800ae7d 	.word	0x0800ae7d
 800aebc:	0800ae7d 	.word	0x0800ae7d
 800aec0:	0800b00d 	.word	0x0800b00d
 800aec4:	0800af31 	.word	0x0800af31
 800aec8:	0800afef 	.word	0x0800afef
 800aecc:	0800ae7d 	.word	0x0800ae7d
 800aed0:	0800ae7d 	.word	0x0800ae7d
 800aed4:	0800b02f 	.word	0x0800b02f
 800aed8:	0800ae7d 	.word	0x0800ae7d
 800aedc:	0800af31 	.word	0x0800af31
 800aee0:	0800ae7d 	.word	0x0800ae7d
 800aee4:	0800ae7d 	.word	0x0800ae7d
 800aee8:	0800aff7 	.word	0x0800aff7
 800aeec:	680b      	ldr	r3, [r1, #0]
 800aeee:	1d1a      	adds	r2, r3, #4
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	600a      	str	r2, [r1, #0]
 800aef4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aef8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aefc:	2301      	movs	r3, #1
 800aefe:	e0a3      	b.n	800b048 <_printf_i+0x1f4>
 800af00:	6825      	ldr	r5, [r4, #0]
 800af02:	6808      	ldr	r0, [r1, #0]
 800af04:	062e      	lsls	r6, r5, #24
 800af06:	f100 0304 	add.w	r3, r0, #4
 800af0a:	d50a      	bpl.n	800af22 <_printf_i+0xce>
 800af0c:	6805      	ldr	r5, [r0, #0]
 800af0e:	600b      	str	r3, [r1, #0]
 800af10:	2d00      	cmp	r5, #0
 800af12:	da03      	bge.n	800af1c <_printf_i+0xc8>
 800af14:	232d      	movs	r3, #45	; 0x2d
 800af16:	426d      	negs	r5, r5
 800af18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af1c:	485e      	ldr	r0, [pc, #376]	; (800b098 <_printf_i+0x244>)
 800af1e:	230a      	movs	r3, #10
 800af20:	e019      	b.n	800af56 <_printf_i+0x102>
 800af22:	f015 0f40 	tst.w	r5, #64	; 0x40
 800af26:	6805      	ldr	r5, [r0, #0]
 800af28:	600b      	str	r3, [r1, #0]
 800af2a:	bf18      	it	ne
 800af2c:	b22d      	sxthne	r5, r5
 800af2e:	e7ef      	b.n	800af10 <_printf_i+0xbc>
 800af30:	680b      	ldr	r3, [r1, #0]
 800af32:	6825      	ldr	r5, [r4, #0]
 800af34:	1d18      	adds	r0, r3, #4
 800af36:	6008      	str	r0, [r1, #0]
 800af38:	0628      	lsls	r0, r5, #24
 800af3a:	d501      	bpl.n	800af40 <_printf_i+0xec>
 800af3c:	681d      	ldr	r5, [r3, #0]
 800af3e:	e002      	b.n	800af46 <_printf_i+0xf2>
 800af40:	0669      	lsls	r1, r5, #25
 800af42:	d5fb      	bpl.n	800af3c <_printf_i+0xe8>
 800af44:	881d      	ldrh	r5, [r3, #0]
 800af46:	4854      	ldr	r0, [pc, #336]	; (800b098 <_printf_i+0x244>)
 800af48:	2f6f      	cmp	r7, #111	; 0x6f
 800af4a:	bf0c      	ite	eq
 800af4c:	2308      	moveq	r3, #8
 800af4e:	230a      	movne	r3, #10
 800af50:	2100      	movs	r1, #0
 800af52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af56:	6866      	ldr	r6, [r4, #4]
 800af58:	60a6      	str	r6, [r4, #8]
 800af5a:	2e00      	cmp	r6, #0
 800af5c:	bfa2      	ittt	ge
 800af5e:	6821      	ldrge	r1, [r4, #0]
 800af60:	f021 0104 	bicge.w	r1, r1, #4
 800af64:	6021      	strge	r1, [r4, #0]
 800af66:	b90d      	cbnz	r5, 800af6c <_printf_i+0x118>
 800af68:	2e00      	cmp	r6, #0
 800af6a:	d04d      	beq.n	800b008 <_printf_i+0x1b4>
 800af6c:	4616      	mov	r6, r2
 800af6e:	fbb5 f1f3 	udiv	r1, r5, r3
 800af72:	fb03 5711 	mls	r7, r3, r1, r5
 800af76:	5dc7      	ldrb	r7, [r0, r7]
 800af78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af7c:	462f      	mov	r7, r5
 800af7e:	42bb      	cmp	r3, r7
 800af80:	460d      	mov	r5, r1
 800af82:	d9f4      	bls.n	800af6e <_printf_i+0x11a>
 800af84:	2b08      	cmp	r3, #8
 800af86:	d10b      	bne.n	800afa0 <_printf_i+0x14c>
 800af88:	6823      	ldr	r3, [r4, #0]
 800af8a:	07df      	lsls	r7, r3, #31
 800af8c:	d508      	bpl.n	800afa0 <_printf_i+0x14c>
 800af8e:	6923      	ldr	r3, [r4, #16]
 800af90:	6861      	ldr	r1, [r4, #4]
 800af92:	4299      	cmp	r1, r3
 800af94:	bfde      	ittt	le
 800af96:	2330      	movle	r3, #48	; 0x30
 800af98:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800afa0:	1b92      	subs	r2, r2, r6
 800afa2:	6122      	str	r2, [r4, #16]
 800afa4:	f8cd a000 	str.w	sl, [sp]
 800afa8:	464b      	mov	r3, r9
 800afaa:	aa03      	add	r2, sp, #12
 800afac:	4621      	mov	r1, r4
 800afae:	4640      	mov	r0, r8
 800afb0:	f7ff fee2 	bl	800ad78 <_printf_common>
 800afb4:	3001      	adds	r0, #1
 800afb6:	d14c      	bne.n	800b052 <_printf_i+0x1fe>
 800afb8:	f04f 30ff 	mov.w	r0, #4294967295
 800afbc:	b004      	add	sp, #16
 800afbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc2:	4835      	ldr	r0, [pc, #212]	; (800b098 <_printf_i+0x244>)
 800afc4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800afc8:	6823      	ldr	r3, [r4, #0]
 800afca:	680e      	ldr	r6, [r1, #0]
 800afcc:	061f      	lsls	r7, r3, #24
 800afce:	f856 5b04 	ldr.w	r5, [r6], #4
 800afd2:	600e      	str	r6, [r1, #0]
 800afd4:	d514      	bpl.n	800b000 <_printf_i+0x1ac>
 800afd6:	07d9      	lsls	r1, r3, #31
 800afd8:	bf44      	itt	mi
 800afda:	f043 0320 	orrmi.w	r3, r3, #32
 800afde:	6023      	strmi	r3, [r4, #0]
 800afe0:	b91d      	cbnz	r5, 800afea <_printf_i+0x196>
 800afe2:	6823      	ldr	r3, [r4, #0]
 800afe4:	f023 0320 	bic.w	r3, r3, #32
 800afe8:	6023      	str	r3, [r4, #0]
 800afea:	2310      	movs	r3, #16
 800afec:	e7b0      	b.n	800af50 <_printf_i+0xfc>
 800afee:	6823      	ldr	r3, [r4, #0]
 800aff0:	f043 0320 	orr.w	r3, r3, #32
 800aff4:	6023      	str	r3, [r4, #0]
 800aff6:	2378      	movs	r3, #120	; 0x78
 800aff8:	4828      	ldr	r0, [pc, #160]	; (800b09c <_printf_i+0x248>)
 800affa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800affe:	e7e3      	b.n	800afc8 <_printf_i+0x174>
 800b000:	065e      	lsls	r6, r3, #25
 800b002:	bf48      	it	mi
 800b004:	b2ad      	uxthmi	r5, r5
 800b006:	e7e6      	b.n	800afd6 <_printf_i+0x182>
 800b008:	4616      	mov	r6, r2
 800b00a:	e7bb      	b.n	800af84 <_printf_i+0x130>
 800b00c:	680b      	ldr	r3, [r1, #0]
 800b00e:	6826      	ldr	r6, [r4, #0]
 800b010:	6960      	ldr	r0, [r4, #20]
 800b012:	1d1d      	adds	r5, r3, #4
 800b014:	600d      	str	r5, [r1, #0]
 800b016:	0635      	lsls	r5, r6, #24
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	d501      	bpl.n	800b020 <_printf_i+0x1cc>
 800b01c:	6018      	str	r0, [r3, #0]
 800b01e:	e002      	b.n	800b026 <_printf_i+0x1d2>
 800b020:	0671      	lsls	r1, r6, #25
 800b022:	d5fb      	bpl.n	800b01c <_printf_i+0x1c8>
 800b024:	8018      	strh	r0, [r3, #0]
 800b026:	2300      	movs	r3, #0
 800b028:	6123      	str	r3, [r4, #16]
 800b02a:	4616      	mov	r6, r2
 800b02c:	e7ba      	b.n	800afa4 <_printf_i+0x150>
 800b02e:	680b      	ldr	r3, [r1, #0]
 800b030:	1d1a      	adds	r2, r3, #4
 800b032:	600a      	str	r2, [r1, #0]
 800b034:	681e      	ldr	r6, [r3, #0]
 800b036:	6862      	ldr	r2, [r4, #4]
 800b038:	2100      	movs	r1, #0
 800b03a:	4630      	mov	r0, r6
 800b03c:	f7f5 f8e0 	bl	8000200 <memchr>
 800b040:	b108      	cbz	r0, 800b046 <_printf_i+0x1f2>
 800b042:	1b80      	subs	r0, r0, r6
 800b044:	6060      	str	r0, [r4, #4]
 800b046:	6863      	ldr	r3, [r4, #4]
 800b048:	6123      	str	r3, [r4, #16]
 800b04a:	2300      	movs	r3, #0
 800b04c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b050:	e7a8      	b.n	800afa4 <_printf_i+0x150>
 800b052:	6923      	ldr	r3, [r4, #16]
 800b054:	4632      	mov	r2, r6
 800b056:	4649      	mov	r1, r9
 800b058:	4640      	mov	r0, r8
 800b05a:	47d0      	blx	sl
 800b05c:	3001      	adds	r0, #1
 800b05e:	d0ab      	beq.n	800afb8 <_printf_i+0x164>
 800b060:	6823      	ldr	r3, [r4, #0]
 800b062:	079b      	lsls	r3, r3, #30
 800b064:	d413      	bmi.n	800b08e <_printf_i+0x23a>
 800b066:	68e0      	ldr	r0, [r4, #12]
 800b068:	9b03      	ldr	r3, [sp, #12]
 800b06a:	4298      	cmp	r0, r3
 800b06c:	bfb8      	it	lt
 800b06e:	4618      	movlt	r0, r3
 800b070:	e7a4      	b.n	800afbc <_printf_i+0x168>
 800b072:	2301      	movs	r3, #1
 800b074:	4632      	mov	r2, r6
 800b076:	4649      	mov	r1, r9
 800b078:	4640      	mov	r0, r8
 800b07a:	47d0      	blx	sl
 800b07c:	3001      	adds	r0, #1
 800b07e:	d09b      	beq.n	800afb8 <_printf_i+0x164>
 800b080:	3501      	adds	r5, #1
 800b082:	68e3      	ldr	r3, [r4, #12]
 800b084:	9903      	ldr	r1, [sp, #12]
 800b086:	1a5b      	subs	r3, r3, r1
 800b088:	42ab      	cmp	r3, r5
 800b08a:	dcf2      	bgt.n	800b072 <_printf_i+0x21e>
 800b08c:	e7eb      	b.n	800b066 <_printf_i+0x212>
 800b08e:	2500      	movs	r5, #0
 800b090:	f104 0619 	add.w	r6, r4, #25
 800b094:	e7f5      	b.n	800b082 <_printf_i+0x22e>
 800b096:	bf00      	nop
 800b098:	080103c4 	.word	0x080103c4
 800b09c:	080103d5 	.word	0x080103d5

0800b0a0 <_scanf_float>:
 800b0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a4:	b087      	sub	sp, #28
 800b0a6:	4617      	mov	r7, r2
 800b0a8:	9303      	str	r3, [sp, #12]
 800b0aa:	688b      	ldr	r3, [r1, #8]
 800b0ac:	1e5a      	subs	r2, r3, #1
 800b0ae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b0b2:	bf83      	ittte	hi
 800b0b4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b0b8:	195b      	addhi	r3, r3, r5
 800b0ba:	9302      	strhi	r3, [sp, #8]
 800b0bc:	2300      	movls	r3, #0
 800b0be:	bf86      	itte	hi
 800b0c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b0c4:	608b      	strhi	r3, [r1, #8]
 800b0c6:	9302      	strls	r3, [sp, #8]
 800b0c8:	680b      	ldr	r3, [r1, #0]
 800b0ca:	468b      	mov	fp, r1
 800b0cc:	2500      	movs	r5, #0
 800b0ce:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b0d2:	f84b 3b1c 	str.w	r3, [fp], #28
 800b0d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b0da:	4680      	mov	r8, r0
 800b0dc:	460c      	mov	r4, r1
 800b0de:	465e      	mov	r6, fp
 800b0e0:	46aa      	mov	sl, r5
 800b0e2:	46a9      	mov	r9, r5
 800b0e4:	9501      	str	r5, [sp, #4]
 800b0e6:	68a2      	ldr	r2, [r4, #8]
 800b0e8:	b152      	cbz	r2, 800b100 <_scanf_float+0x60>
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	2b4e      	cmp	r3, #78	; 0x4e
 800b0f0:	d864      	bhi.n	800b1bc <_scanf_float+0x11c>
 800b0f2:	2b40      	cmp	r3, #64	; 0x40
 800b0f4:	d83c      	bhi.n	800b170 <_scanf_float+0xd0>
 800b0f6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b0fa:	b2c8      	uxtb	r0, r1
 800b0fc:	280e      	cmp	r0, #14
 800b0fe:	d93a      	bls.n	800b176 <_scanf_float+0xd6>
 800b100:	f1b9 0f00 	cmp.w	r9, #0
 800b104:	d003      	beq.n	800b10e <_scanf_float+0x6e>
 800b106:	6823      	ldr	r3, [r4, #0]
 800b108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b10c:	6023      	str	r3, [r4, #0]
 800b10e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b112:	f1ba 0f01 	cmp.w	sl, #1
 800b116:	f200 8113 	bhi.w	800b340 <_scanf_float+0x2a0>
 800b11a:	455e      	cmp	r6, fp
 800b11c:	f200 8105 	bhi.w	800b32a <_scanf_float+0x28a>
 800b120:	2501      	movs	r5, #1
 800b122:	4628      	mov	r0, r5
 800b124:	b007      	add	sp, #28
 800b126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b12a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b12e:	2a0d      	cmp	r2, #13
 800b130:	d8e6      	bhi.n	800b100 <_scanf_float+0x60>
 800b132:	a101      	add	r1, pc, #4	; (adr r1, 800b138 <_scanf_float+0x98>)
 800b134:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b138:	0800b277 	.word	0x0800b277
 800b13c:	0800b101 	.word	0x0800b101
 800b140:	0800b101 	.word	0x0800b101
 800b144:	0800b101 	.word	0x0800b101
 800b148:	0800b2d7 	.word	0x0800b2d7
 800b14c:	0800b2af 	.word	0x0800b2af
 800b150:	0800b101 	.word	0x0800b101
 800b154:	0800b101 	.word	0x0800b101
 800b158:	0800b285 	.word	0x0800b285
 800b15c:	0800b101 	.word	0x0800b101
 800b160:	0800b101 	.word	0x0800b101
 800b164:	0800b101 	.word	0x0800b101
 800b168:	0800b101 	.word	0x0800b101
 800b16c:	0800b23d 	.word	0x0800b23d
 800b170:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b174:	e7db      	b.n	800b12e <_scanf_float+0x8e>
 800b176:	290e      	cmp	r1, #14
 800b178:	d8c2      	bhi.n	800b100 <_scanf_float+0x60>
 800b17a:	a001      	add	r0, pc, #4	; (adr r0, 800b180 <_scanf_float+0xe0>)
 800b17c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b180:	0800b22f 	.word	0x0800b22f
 800b184:	0800b101 	.word	0x0800b101
 800b188:	0800b22f 	.word	0x0800b22f
 800b18c:	0800b2c3 	.word	0x0800b2c3
 800b190:	0800b101 	.word	0x0800b101
 800b194:	0800b1dd 	.word	0x0800b1dd
 800b198:	0800b219 	.word	0x0800b219
 800b19c:	0800b219 	.word	0x0800b219
 800b1a0:	0800b219 	.word	0x0800b219
 800b1a4:	0800b219 	.word	0x0800b219
 800b1a8:	0800b219 	.word	0x0800b219
 800b1ac:	0800b219 	.word	0x0800b219
 800b1b0:	0800b219 	.word	0x0800b219
 800b1b4:	0800b219 	.word	0x0800b219
 800b1b8:	0800b219 	.word	0x0800b219
 800b1bc:	2b6e      	cmp	r3, #110	; 0x6e
 800b1be:	d809      	bhi.n	800b1d4 <_scanf_float+0x134>
 800b1c0:	2b60      	cmp	r3, #96	; 0x60
 800b1c2:	d8b2      	bhi.n	800b12a <_scanf_float+0x8a>
 800b1c4:	2b54      	cmp	r3, #84	; 0x54
 800b1c6:	d077      	beq.n	800b2b8 <_scanf_float+0x218>
 800b1c8:	2b59      	cmp	r3, #89	; 0x59
 800b1ca:	d199      	bne.n	800b100 <_scanf_float+0x60>
 800b1cc:	2d07      	cmp	r5, #7
 800b1ce:	d197      	bne.n	800b100 <_scanf_float+0x60>
 800b1d0:	2508      	movs	r5, #8
 800b1d2:	e029      	b.n	800b228 <_scanf_float+0x188>
 800b1d4:	2b74      	cmp	r3, #116	; 0x74
 800b1d6:	d06f      	beq.n	800b2b8 <_scanf_float+0x218>
 800b1d8:	2b79      	cmp	r3, #121	; 0x79
 800b1da:	e7f6      	b.n	800b1ca <_scanf_float+0x12a>
 800b1dc:	6821      	ldr	r1, [r4, #0]
 800b1de:	05c8      	lsls	r0, r1, #23
 800b1e0:	d51a      	bpl.n	800b218 <_scanf_float+0x178>
 800b1e2:	9b02      	ldr	r3, [sp, #8]
 800b1e4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b1e8:	6021      	str	r1, [r4, #0]
 800b1ea:	f109 0901 	add.w	r9, r9, #1
 800b1ee:	b11b      	cbz	r3, 800b1f8 <_scanf_float+0x158>
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	3201      	adds	r2, #1
 800b1f4:	9302      	str	r3, [sp, #8]
 800b1f6:	60a2      	str	r2, [r4, #8]
 800b1f8:	68a3      	ldr	r3, [r4, #8]
 800b1fa:	3b01      	subs	r3, #1
 800b1fc:	60a3      	str	r3, [r4, #8]
 800b1fe:	6923      	ldr	r3, [r4, #16]
 800b200:	3301      	adds	r3, #1
 800b202:	6123      	str	r3, [r4, #16]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	3b01      	subs	r3, #1
 800b208:	2b00      	cmp	r3, #0
 800b20a:	607b      	str	r3, [r7, #4]
 800b20c:	f340 8084 	ble.w	800b318 <_scanf_float+0x278>
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	3301      	adds	r3, #1
 800b214:	603b      	str	r3, [r7, #0]
 800b216:	e766      	b.n	800b0e6 <_scanf_float+0x46>
 800b218:	eb1a 0f05 	cmn.w	sl, r5
 800b21c:	f47f af70 	bne.w	800b100 <_scanf_float+0x60>
 800b220:	6822      	ldr	r2, [r4, #0]
 800b222:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b226:	6022      	str	r2, [r4, #0]
 800b228:	f806 3b01 	strb.w	r3, [r6], #1
 800b22c:	e7e4      	b.n	800b1f8 <_scanf_float+0x158>
 800b22e:	6822      	ldr	r2, [r4, #0]
 800b230:	0610      	lsls	r0, r2, #24
 800b232:	f57f af65 	bpl.w	800b100 <_scanf_float+0x60>
 800b236:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b23a:	e7f4      	b.n	800b226 <_scanf_float+0x186>
 800b23c:	f1ba 0f00 	cmp.w	sl, #0
 800b240:	d10e      	bne.n	800b260 <_scanf_float+0x1c0>
 800b242:	f1b9 0f00 	cmp.w	r9, #0
 800b246:	d10e      	bne.n	800b266 <_scanf_float+0x1c6>
 800b248:	6822      	ldr	r2, [r4, #0]
 800b24a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b24e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b252:	d108      	bne.n	800b266 <_scanf_float+0x1c6>
 800b254:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b258:	6022      	str	r2, [r4, #0]
 800b25a:	f04f 0a01 	mov.w	sl, #1
 800b25e:	e7e3      	b.n	800b228 <_scanf_float+0x188>
 800b260:	f1ba 0f02 	cmp.w	sl, #2
 800b264:	d055      	beq.n	800b312 <_scanf_float+0x272>
 800b266:	2d01      	cmp	r5, #1
 800b268:	d002      	beq.n	800b270 <_scanf_float+0x1d0>
 800b26a:	2d04      	cmp	r5, #4
 800b26c:	f47f af48 	bne.w	800b100 <_scanf_float+0x60>
 800b270:	3501      	adds	r5, #1
 800b272:	b2ed      	uxtb	r5, r5
 800b274:	e7d8      	b.n	800b228 <_scanf_float+0x188>
 800b276:	f1ba 0f01 	cmp.w	sl, #1
 800b27a:	f47f af41 	bne.w	800b100 <_scanf_float+0x60>
 800b27e:	f04f 0a02 	mov.w	sl, #2
 800b282:	e7d1      	b.n	800b228 <_scanf_float+0x188>
 800b284:	b97d      	cbnz	r5, 800b2a6 <_scanf_float+0x206>
 800b286:	f1b9 0f00 	cmp.w	r9, #0
 800b28a:	f47f af3c 	bne.w	800b106 <_scanf_float+0x66>
 800b28e:	6822      	ldr	r2, [r4, #0]
 800b290:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b294:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b298:	f47f af39 	bne.w	800b10e <_scanf_float+0x6e>
 800b29c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b2a0:	6022      	str	r2, [r4, #0]
 800b2a2:	2501      	movs	r5, #1
 800b2a4:	e7c0      	b.n	800b228 <_scanf_float+0x188>
 800b2a6:	2d03      	cmp	r5, #3
 800b2a8:	d0e2      	beq.n	800b270 <_scanf_float+0x1d0>
 800b2aa:	2d05      	cmp	r5, #5
 800b2ac:	e7de      	b.n	800b26c <_scanf_float+0x1cc>
 800b2ae:	2d02      	cmp	r5, #2
 800b2b0:	f47f af26 	bne.w	800b100 <_scanf_float+0x60>
 800b2b4:	2503      	movs	r5, #3
 800b2b6:	e7b7      	b.n	800b228 <_scanf_float+0x188>
 800b2b8:	2d06      	cmp	r5, #6
 800b2ba:	f47f af21 	bne.w	800b100 <_scanf_float+0x60>
 800b2be:	2507      	movs	r5, #7
 800b2c0:	e7b2      	b.n	800b228 <_scanf_float+0x188>
 800b2c2:	6822      	ldr	r2, [r4, #0]
 800b2c4:	0591      	lsls	r1, r2, #22
 800b2c6:	f57f af1b 	bpl.w	800b100 <_scanf_float+0x60>
 800b2ca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b2ce:	6022      	str	r2, [r4, #0]
 800b2d0:	f8cd 9004 	str.w	r9, [sp, #4]
 800b2d4:	e7a8      	b.n	800b228 <_scanf_float+0x188>
 800b2d6:	6822      	ldr	r2, [r4, #0]
 800b2d8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b2dc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b2e0:	d006      	beq.n	800b2f0 <_scanf_float+0x250>
 800b2e2:	0550      	lsls	r0, r2, #21
 800b2e4:	f57f af0c 	bpl.w	800b100 <_scanf_float+0x60>
 800b2e8:	f1b9 0f00 	cmp.w	r9, #0
 800b2ec:	f43f af0f 	beq.w	800b10e <_scanf_float+0x6e>
 800b2f0:	0591      	lsls	r1, r2, #22
 800b2f2:	bf58      	it	pl
 800b2f4:	9901      	ldrpl	r1, [sp, #4]
 800b2f6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b2fa:	bf58      	it	pl
 800b2fc:	eba9 0101 	subpl.w	r1, r9, r1
 800b300:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b304:	bf58      	it	pl
 800b306:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b30a:	6022      	str	r2, [r4, #0]
 800b30c:	f04f 0900 	mov.w	r9, #0
 800b310:	e78a      	b.n	800b228 <_scanf_float+0x188>
 800b312:	f04f 0a03 	mov.w	sl, #3
 800b316:	e787      	b.n	800b228 <_scanf_float+0x188>
 800b318:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b31c:	4639      	mov	r1, r7
 800b31e:	4640      	mov	r0, r8
 800b320:	4798      	blx	r3
 800b322:	2800      	cmp	r0, #0
 800b324:	f43f aedf 	beq.w	800b0e6 <_scanf_float+0x46>
 800b328:	e6ea      	b.n	800b100 <_scanf_float+0x60>
 800b32a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b32e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b332:	463a      	mov	r2, r7
 800b334:	4640      	mov	r0, r8
 800b336:	4798      	blx	r3
 800b338:	6923      	ldr	r3, [r4, #16]
 800b33a:	3b01      	subs	r3, #1
 800b33c:	6123      	str	r3, [r4, #16]
 800b33e:	e6ec      	b.n	800b11a <_scanf_float+0x7a>
 800b340:	1e6b      	subs	r3, r5, #1
 800b342:	2b06      	cmp	r3, #6
 800b344:	d825      	bhi.n	800b392 <_scanf_float+0x2f2>
 800b346:	2d02      	cmp	r5, #2
 800b348:	d836      	bhi.n	800b3b8 <_scanf_float+0x318>
 800b34a:	455e      	cmp	r6, fp
 800b34c:	f67f aee8 	bls.w	800b120 <_scanf_float+0x80>
 800b350:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b354:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b358:	463a      	mov	r2, r7
 800b35a:	4640      	mov	r0, r8
 800b35c:	4798      	blx	r3
 800b35e:	6923      	ldr	r3, [r4, #16]
 800b360:	3b01      	subs	r3, #1
 800b362:	6123      	str	r3, [r4, #16]
 800b364:	e7f1      	b.n	800b34a <_scanf_float+0x2aa>
 800b366:	9802      	ldr	r0, [sp, #8]
 800b368:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b36c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b370:	9002      	str	r0, [sp, #8]
 800b372:	463a      	mov	r2, r7
 800b374:	4640      	mov	r0, r8
 800b376:	4798      	blx	r3
 800b378:	6923      	ldr	r3, [r4, #16]
 800b37a:	3b01      	subs	r3, #1
 800b37c:	6123      	str	r3, [r4, #16]
 800b37e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b382:	fa5f fa8a 	uxtb.w	sl, sl
 800b386:	f1ba 0f02 	cmp.w	sl, #2
 800b38a:	d1ec      	bne.n	800b366 <_scanf_float+0x2c6>
 800b38c:	3d03      	subs	r5, #3
 800b38e:	b2ed      	uxtb	r5, r5
 800b390:	1b76      	subs	r6, r6, r5
 800b392:	6823      	ldr	r3, [r4, #0]
 800b394:	05da      	lsls	r2, r3, #23
 800b396:	d52f      	bpl.n	800b3f8 <_scanf_float+0x358>
 800b398:	055b      	lsls	r3, r3, #21
 800b39a:	d510      	bpl.n	800b3be <_scanf_float+0x31e>
 800b39c:	455e      	cmp	r6, fp
 800b39e:	f67f aebf 	bls.w	800b120 <_scanf_float+0x80>
 800b3a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b3a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b3aa:	463a      	mov	r2, r7
 800b3ac:	4640      	mov	r0, r8
 800b3ae:	4798      	blx	r3
 800b3b0:	6923      	ldr	r3, [r4, #16]
 800b3b2:	3b01      	subs	r3, #1
 800b3b4:	6123      	str	r3, [r4, #16]
 800b3b6:	e7f1      	b.n	800b39c <_scanf_float+0x2fc>
 800b3b8:	46aa      	mov	sl, r5
 800b3ba:	9602      	str	r6, [sp, #8]
 800b3bc:	e7df      	b.n	800b37e <_scanf_float+0x2de>
 800b3be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b3c2:	6923      	ldr	r3, [r4, #16]
 800b3c4:	2965      	cmp	r1, #101	; 0x65
 800b3c6:	f103 33ff 	add.w	r3, r3, #4294967295
 800b3ca:	f106 35ff 	add.w	r5, r6, #4294967295
 800b3ce:	6123      	str	r3, [r4, #16]
 800b3d0:	d00c      	beq.n	800b3ec <_scanf_float+0x34c>
 800b3d2:	2945      	cmp	r1, #69	; 0x45
 800b3d4:	d00a      	beq.n	800b3ec <_scanf_float+0x34c>
 800b3d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b3da:	463a      	mov	r2, r7
 800b3dc:	4640      	mov	r0, r8
 800b3de:	4798      	blx	r3
 800b3e0:	6923      	ldr	r3, [r4, #16]
 800b3e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	1eb5      	subs	r5, r6, #2
 800b3ea:	6123      	str	r3, [r4, #16]
 800b3ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b3f0:	463a      	mov	r2, r7
 800b3f2:	4640      	mov	r0, r8
 800b3f4:	4798      	blx	r3
 800b3f6:	462e      	mov	r6, r5
 800b3f8:	6825      	ldr	r5, [r4, #0]
 800b3fa:	f015 0510 	ands.w	r5, r5, #16
 800b3fe:	d158      	bne.n	800b4b2 <_scanf_float+0x412>
 800b400:	7035      	strb	r5, [r6, #0]
 800b402:	6823      	ldr	r3, [r4, #0]
 800b404:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b40c:	d11c      	bne.n	800b448 <_scanf_float+0x3a8>
 800b40e:	9b01      	ldr	r3, [sp, #4]
 800b410:	454b      	cmp	r3, r9
 800b412:	eba3 0209 	sub.w	r2, r3, r9
 800b416:	d124      	bne.n	800b462 <_scanf_float+0x3c2>
 800b418:	2200      	movs	r2, #0
 800b41a:	4659      	mov	r1, fp
 800b41c:	4640      	mov	r0, r8
 800b41e:	f000 ff0d 	bl	800c23c <_strtod_r>
 800b422:	9b03      	ldr	r3, [sp, #12]
 800b424:	6821      	ldr	r1, [r4, #0]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f011 0f02 	tst.w	r1, #2
 800b42c:	ec57 6b10 	vmov	r6, r7, d0
 800b430:	f103 0204 	add.w	r2, r3, #4
 800b434:	d020      	beq.n	800b478 <_scanf_float+0x3d8>
 800b436:	9903      	ldr	r1, [sp, #12]
 800b438:	600a      	str	r2, [r1, #0]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	e9c3 6700 	strd	r6, r7, [r3]
 800b440:	68e3      	ldr	r3, [r4, #12]
 800b442:	3301      	adds	r3, #1
 800b444:	60e3      	str	r3, [r4, #12]
 800b446:	e66c      	b.n	800b122 <_scanf_float+0x82>
 800b448:	9b04      	ldr	r3, [sp, #16]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d0e4      	beq.n	800b418 <_scanf_float+0x378>
 800b44e:	9905      	ldr	r1, [sp, #20]
 800b450:	230a      	movs	r3, #10
 800b452:	462a      	mov	r2, r5
 800b454:	3101      	adds	r1, #1
 800b456:	4640      	mov	r0, r8
 800b458:	f000 ff7a 	bl	800c350 <_strtol_r>
 800b45c:	9b04      	ldr	r3, [sp, #16]
 800b45e:	9e05      	ldr	r6, [sp, #20]
 800b460:	1ac2      	subs	r2, r0, r3
 800b462:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b466:	429e      	cmp	r6, r3
 800b468:	bf28      	it	cs
 800b46a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b46e:	4912      	ldr	r1, [pc, #72]	; (800b4b8 <_scanf_float+0x418>)
 800b470:	4630      	mov	r0, r6
 800b472:	f000 f82b 	bl	800b4cc <siprintf>
 800b476:	e7cf      	b.n	800b418 <_scanf_float+0x378>
 800b478:	f011 0f04 	tst.w	r1, #4
 800b47c:	9903      	ldr	r1, [sp, #12]
 800b47e:	600a      	str	r2, [r1, #0]
 800b480:	d1db      	bne.n	800b43a <_scanf_float+0x39a>
 800b482:	f8d3 8000 	ldr.w	r8, [r3]
 800b486:	ee10 2a10 	vmov	r2, s0
 800b48a:	ee10 0a10 	vmov	r0, s0
 800b48e:	463b      	mov	r3, r7
 800b490:	4639      	mov	r1, r7
 800b492:	f7f5 fb5b 	bl	8000b4c <__aeabi_dcmpun>
 800b496:	b128      	cbz	r0, 800b4a4 <_scanf_float+0x404>
 800b498:	4808      	ldr	r0, [pc, #32]	; (800b4bc <_scanf_float+0x41c>)
 800b49a:	f000 f811 	bl	800b4c0 <nanf>
 800b49e:	ed88 0a00 	vstr	s0, [r8]
 800b4a2:	e7cd      	b.n	800b440 <_scanf_float+0x3a0>
 800b4a4:	4630      	mov	r0, r6
 800b4a6:	4639      	mov	r1, r7
 800b4a8:	f7f5 fbae 	bl	8000c08 <__aeabi_d2f>
 800b4ac:	f8c8 0000 	str.w	r0, [r8]
 800b4b0:	e7c6      	b.n	800b440 <_scanf_float+0x3a0>
 800b4b2:	2500      	movs	r5, #0
 800b4b4:	e635      	b.n	800b122 <_scanf_float+0x82>
 800b4b6:	bf00      	nop
 800b4b8:	080103e6 	.word	0x080103e6
 800b4bc:	0801081b 	.word	0x0801081b

0800b4c0 <nanf>:
 800b4c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b4c8 <nanf+0x8>
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	7fc00000 	.word	0x7fc00000

0800b4cc <siprintf>:
 800b4cc:	b40e      	push	{r1, r2, r3}
 800b4ce:	b500      	push	{lr}
 800b4d0:	b09c      	sub	sp, #112	; 0x70
 800b4d2:	ab1d      	add	r3, sp, #116	; 0x74
 800b4d4:	9002      	str	r0, [sp, #8]
 800b4d6:	9006      	str	r0, [sp, #24]
 800b4d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b4dc:	4809      	ldr	r0, [pc, #36]	; (800b504 <siprintf+0x38>)
 800b4de:	9107      	str	r1, [sp, #28]
 800b4e0:	9104      	str	r1, [sp, #16]
 800b4e2:	4909      	ldr	r1, [pc, #36]	; (800b508 <siprintf+0x3c>)
 800b4e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4e8:	9105      	str	r1, [sp, #20]
 800b4ea:	6800      	ldr	r0, [r0, #0]
 800b4ec:	9301      	str	r3, [sp, #4]
 800b4ee:	a902      	add	r1, sp, #8
 800b4f0:	f002 ff48 	bl	800e384 <_svfiprintf_r>
 800b4f4:	9b02      	ldr	r3, [sp, #8]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	701a      	strb	r2, [r3, #0]
 800b4fa:	b01c      	add	sp, #112	; 0x70
 800b4fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b500:	b003      	add	sp, #12
 800b502:	4770      	bx	lr
 800b504:	20000024 	.word	0x20000024
 800b508:	ffff0208 	.word	0xffff0208

0800b50c <siscanf>:
 800b50c:	b40e      	push	{r1, r2, r3}
 800b50e:	b510      	push	{r4, lr}
 800b510:	b09f      	sub	sp, #124	; 0x7c
 800b512:	ac21      	add	r4, sp, #132	; 0x84
 800b514:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b518:	f854 2b04 	ldr.w	r2, [r4], #4
 800b51c:	9201      	str	r2, [sp, #4]
 800b51e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b522:	9004      	str	r0, [sp, #16]
 800b524:	9008      	str	r0, [sp, #32]
 800b526:	f7f4 fe5d 	bl	80001e4 <strlen>
 800b52a:	4b0c      	ldr	r3, [pc, #48]	; (800b55c <siscanf+0x50>)
 800b52c:	9005      	str	r0, [sp, #20]
 800b52e:	9009      	str	r0, [sp, #36]	; 0x24
 800b530:	930d      	str	r3, [sp, #52]	; 0x34
 800b532:	480b      	ldr	r0, [pc, #44]	; (800b560 <siscanf+0x54>)
 800b534:	9a01      	ldr	r2, [sp, #4]
 800b536:	6800      	ldr	r0, [r0, #0]
 800b538:	9403      	str	r4, [sp, #12]
 800b53a:	2300      	movs	r3, #0
 800b53c:	9311      	str	r3, [sp, #68]	; 0x44
 800b53e:	9316      	str	r3, [sp, #88]	; 0x58
 800b540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b544:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b548:	a904      	add	r1, sp, #16
 800b54a:	4623      	mov	r3, r4
 800b54c:	f003 f874 	bl	800e638 <__ssvfiscanf_r>
 800b550:	b01f      	add	sp, #124	; 0x7c
 800b552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b556:	b003      	add	sp, #12
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop
 800b55c:	0800b587 	.word	0x0800b587
 800b560:	20000024 	.word	0x20000024

0800b564 <__sread>:
 800b564:	b510      	push	{r4, lr}
 800b566:	460c      	mov	r4, r1
 800b568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b56c:	f003 fb28 	bl	800ebc0 <_read_r>
 800b570:	2800      	cmp	r0, #0
 800b572:	bfab      	itete	ge
 800b574:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b576:	89a3      	ldrhlt	r3, [r4, #12]
 800b578:	181b      	addge	r3, r3, r0
 800b57a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b57e:	bfac      	ite	ge
 800b580:	6563      	strge	r3, [r4, #84]	; 0x54
 800b582:	81a3      	strhlt	r3, [r4, #12]
 800b584:	bd10      	pop	{r4, pc}

0800b586 <__seofread>:
 800b586:	2000      	movs	r0, #0
 800b588:	4770      	bx	lr

0800b58a <__swrite>:
 800b58a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b58e:	461f      	mov	r7, r3
 800b590:	898b      	ldrh	r3, [r1, #12]
 800b592:	05db      	lsls	r3, r3, #23
 800b594:	4605      	mov	r5, r0
 800b596:	460c      	mov	r4, r1
 800b598:	4616      	mov	r6, r2
 800b59a:	d505      	bpl.n	800b5a8 <__swrite+0x1e>
 800b59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5a0:	2302      	movs	r3, #2
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f002 f8e4 	bl	800d770 <_lseek_r>
 800b5a8:	89a3      	ldrh	r3, [r4, #12]
 800b5aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5b2:	81a3      	strh	r3, [r4, #12]
 800b5b4:	4632      	mov	r2, r6
 800b5b6:	463b      	mov	r3, r7
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5be:	f000 bec9 	b.w	800c354 <_write_r>

0800b5c2 <__sseek>:
 800b5c2:	b510      	push	{r4, lr}
 800b5c4:	460c      	mov	r4, r1
 800b5c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ca:	f002 f8d1 	bl	800d770 <_lseek_r>
 800b5ce:	1c43      	adds	r3, r0, #1
 800b5d0:	89a3      	ldrh	r3, [r4, #12]
 800b5d2:	bf15      	itete	ne
 800b5d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b5d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b5de:	81a3      	strheq	r3, [r4, #12]
 800b5e0:	bf18      	it	ne
 800b5e2:	81a3      	strhne	r3, [r4, #12]
 800b5e4:	bd10      	pop	{r4, pc}

0800b5e6 <__sclose>:
 800b5e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ea:	f000 bec5 	b.w	800c378 <_close_r>

0800b5ee <sulp>:
 800b5ee:	b570      	push	{r4, r5, r6, lr}
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	460d      	mov	r5, r1
 800b5f4:	ec45 4b10 	vmov	d0, r4, r5
 800b5f8:	4616      	mov	r6, r2
 800b5fa:	f002 fc5f 	bl	800debc <__ulp>
 800b5fe:	ec51 0b10 	vmov	r0, r1, d0
 800b602:	b17e      	cbz	r6, 800b624 <sulp+0x36>
 800b604:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b608:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	dd09      	ble.n	800b624 <sulp+0x36>
 800b610:	051b      	lsls	r3, r3, #20
 800b612:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b616:	2400      	movs	r4, #0
 800b618:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b61c:	4622      	mov	r2, r4
 800b61e:	462b      	mov	r3, r5
 800b620:	f7f4 fffa 	bl	8000618 <__aeabi_dmul>
 800b624:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b628 <_strtod_l>:
 800b628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b62c:	b0a3      	sub	sp, #140	; 0x8c
 800b62e:	461f      	mov	r7, r3
 800b630:	2300      	movs	r3, #0
 800b632:	931e      	str	r3, [sp, #120]	; 0x78
 800b634:	4ba4      	ldr	r3, [pc, #656]	; (800b8c8 <_strtod_l+0x2a0>)
 800b636:	9219      	str	r2, [sp, #100]	; 0x64
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	9307      	str	r3, [sp, #28]
 800b63c:	4604      	mov	r4, r0
 800b63e:	4618      	mov	r0, r3
 800b640:	4688      	mov	r8, r1
 800b642:	f7f4 fdcf 	bl	80001e4 <strlen>
 800b646:	f04f 0a00 	mov.w	sl, #0
 800b64a:	4605      	mov	r5, r0
 800b64c:	f04f 0b00 	mov.w	fp, #0
 800b650:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b654:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b656:	781a      	ldrb	r2, [r3, #0]
 800b658:	2a2b      	cmp	r2, #43	; 0x2b
 800b65a:	d04c      	beq.n	800b6f6 <_strtod_l+0xce>
 800b65c:	d839      	bhi.n	800b6d2 <_strtod_l+0xaa>
 800b65e:	2a0d      	cmp	r2, #13
 800b660:	d832      	bhi.n	800b6c8 <_strtod_l+0xa0>
 800b662:	2a08      	cmp	r2, #8
 800b664:	d832      	bhi.n	800b6cc <_strtod_l+0xa4>
 800b666:	2a00      	cmp	r2, #0
 800b668:	d03c      	beq.n	800b6e4 <_strtod_l+0xbc>
 800b66a:	2300      	movs	r3, #0
 800b66c:	930e      	str	r3, [sp, #56]	; 0x38
 800b66e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b670:	7833      	ldrb	r3, [r6, #0]
 800b672:	2b30      	cmp	r3, #48	; 0x30
 800b674:	f040 80b4 	bne.w	800b7e0 <_strtod_l+0x1b8>
 800b678:	7873      	ldrb	r3, [r6, #1]
 800b67a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b67e:	2b58      	cmp	r3, #88	; 0x58
 800b680:	d16c      	bne.n	800b75c <_strtod_l+0x134>
 800b682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b684:	9301      	str	r3, [sp, #4]
 800b686:	ab1e      	add	r3, sp, #120	; 0x78
 800b688:	9702      	str	r7, [sp, #8]
 800b68a:	9300      	str	r3, [sp, #0]
 800b68c:	4a8f      	ldr	r2, [pc, #572]	; (800b8cc <_strtod_l+0x2a4>)
 800b68e:	ab1f      	add	r3, sp, #124	; 0x7c
 800b690:	a91d      	add	r1, sp, #116	; 0x74
 800b692:	4620      	mov	r0, r4
 800b694:	f001 fd60 	bl	800d158 <__gethex>
 800b698:	f010 0707 	ands.w	r7, r0, #7
 800b69c:	4605      	mov	r5, r0
 800b69e:	d005      	beq.n	800b6ac <_strtod_l+0x84>
 800b6a0:	2f06      	cmp	r7, #6
 800b6a2:	d12a      	bne.n	800b6fa <_strtod_l+0xd2>
 800b6a4:	3601      	adds	r6, #1
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	961d      	str	r6, [sp, #116]	; 0x74
 800b6aa:	930e      	str	r3, [sp, #56]	; 0x38
 800b6ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	f040 8596 	bne.w	800c1e0 <_strtod_l+0xbb8>
 800b6b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6b6:	b1db      	cbz	r3, 800b6f0 <_strtod_l+0xc8>
 800b6b8:	4652      	mov	r2, sl
 800b6ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b6be:	ec43 2b10 	vmov	d0, r2, r3
 800b6c2:	b023      	add	sp, #140	; 0x8c
 800b6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c8:	2a20      	cmp	r2, #32
 800b6ca:	d1ce      	bne.n	800b66a <_strtod_l+0x42>
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	931d      	str	r3, [sp, #116]	; 0x74
 800b6d0:	e7c0      	b.n	800b654 <_strtod_l+0x2c>
 800b6d2:	2a2d      	cmp	r2, #45	; 0x2d
 800b6d4:	d1c9      	bne.n	800b66a <_strtod_l+0x42>
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	920e      	str	r2, [sp, #56]	; 0x38
 800b6da:	1c5a      	adds	r2, r3, #1
 800b6dc:	921d      	str	r2, [sp, #116]	; 0x74
 800b6de:	785b      	ldrb	r3, [r3, #1]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d1c4      	bne.n	800b66e <_strtod_l+0x46>
 800b6e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b6e6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	f040 8576 	bne.w	800c1dc <_strtod_l+0xbb4>
 800b6f0:	4652      	mov	r2, sl
 800b6f2:	465b      	mov	r3, fp
 800b6f4:	e7e3      	b.n	800b6be <_strtod_l+0x96>
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	e7ee      	b.n	800b6d8 <_strtod_l+0xb0>
 800b6fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b6fc:	b13a      	cbz	r2, 800b70e <_strtod_l+0xe6>
 800b6fe:	2135      	movs	r1, #53	; 0x35
 800b700:	a820      	add	r0, sp, #128	; 0x80
 800b702:	f002 fce6 	bl	800e0d2 <__copybits>
 800b706:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b708:	4620      	mov	r0, r4
 800b70a:	f002 f8ab 	bl	800d864 <_Bfree>
 800b70e:	3f01      	subs	r7, #1
 800b710:	2f05      	cmp	r7, #5
 800b712:	d807      	bhi.n	800b724 <_strtod_l+0xfc>
 800b714:	e8df f007 	tbb	[pc, r7]
 800b718:	1d180b0e 	.word	0x1d180b0e
 800b71c:	030e      	.short	0x030e
 800b71e:	f04f 0b00 	mov.w	fp, #0
 800b722:	46da      	mov	sl, fp
 800b724:	0728      	lsls	r0, r5, #28
 800b726:	d5c1      	bpl.n	800b6ac <_strtod_l+0x84>
 800b728:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b72c:	e7be      	b.n	800b6ac <_strtod_l+0x84>
 800b72e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800b732:	e7f7      	b.n	800b724 <_strtod_l+0xfc>
 800b734:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800b738:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b73a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b73e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b742:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b746:	e7ed      	b.n	800b724 <_strtod_l+0xfc>
 800b748:	f8df b184 	ldr.w	fp, [pc, #388]	; 800b8d0 <_strtod_l+0x2a8>
 800b74c:	f04f 0a00 	mov.w	sl, #0
 800b750:	e7e8      	b.n	800b724 <_strtod_l+0xfc>
 800b752:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b756:	f04f 3aff 	mov.w	sl, #4294967295
 800b75a:	e7e3      	b.n	800b724 <_strtod_l+0xfc>
 800b75c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b75e:	1c5a      	adds	r2, r3, #1
 800b760:	921d      	str	r2, [sp, #116]	; 0x74
 800b762:	785b      	ldrb	r3, [r3, #1]
 800b764:	2b30      	cmp	r3, #48	; 0x30
 800b766:	d0f9      	beq.n	800b75c <_strtod_l+0x134>
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d09f      	beq.n	800b6ac <_strtod_l+0x84>
 800b76c:	2301      	movs	r3, #1
 800b76e:	f04f 0900 	mov.w	r9, #0
 800b772:	9304      	str	r3, [sp, #16]
 800b774:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b776:	930a      	str	r3, [sp, #40]	; 0x28
 800b778:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b77c:	464f      	mov	r7, r9
 800b77e:	220a      	movs	r2, #10
 800b780:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b782:	7806      	ldrb	r6, [r0, #0]
 800b784:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b788:	b2d9      	uxtb	r1, r3
 800b78a:	2909      	cmp	r1, #9
 800b78c:	d92a      	bls.n	800b7e4 <_strtod_l+0x1bc>
 800b78e:	9907      	ldr	r1, [sp, #28]
 800b790:	462a      	mov	r2, r5
 800b792:	f003 fa7b 	bl	800ec8c <strncmp>
 800b796:	b398      	cbz	r0, 800b800 <_strtod_l+0x1d8>
 800b798:	2000      	movs	r0, #0
 800b79a:	4633      	mov	r3, r6
 800b79c:	463d      	mov	r5, r7
 800b79e:	9007      	str	r0, [sp, #28]
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	2b65      	cmp	r3, #101	; 0x65
 800b7a4:	d001      	beq.n	800b7aa <_strtod_l+0x182>
 800b7a6:	2b45      	cmp	r3, #69	; 0x45
 800b7a8:	d118      	bne.n	800b7dc <_strtod_l+0x1b4>
 800b7aa:	b91d      	cbnz	r5, 800b7b4 <_strtod_l+0x18c>
 800b7ac:	9b04      	ldr	r3, [sp, #16]
 800b7ae:	4303      	orrs	r3, r0
 800b7b0:	d098      	beq.n	800b6e4 <_strtod_l+0xbc>
 800b7b2:	2500      	movs	r5, #0
 800b7b4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800b7b8:	f108 0301 	add.w	r3, r8, #1
 800b7bc:	931d      	str	r3, [sp, #116]	; 0x74
 800b7be:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b7c2:	2b2b      	cmp	r3, #43	; 0x2b
 800b7c4:	d075      	beq.n	800b8b2 <_strtod_l+0x28a>
 800b7c6:	2b2d      	cmp	r3, #45	; 0x2d
 800b7c8:	d07b      	beq.n	800b8c2 <_strtod_l+0x29a>
 800b7ca:	f04f 0c00 	mov.w	ip, #0
 800b7ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b7d2:	2909      	cmp	r1, #9
 800b7d4:	f240 8082 	bls.w	800b8dc <_strtod_l+0x2b4>
 800b7d8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b7dc:	2600      	movs	r6, #0
 800b7de:	e09d      	b.n	800b91c <_strtod_l+0x2f4>
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	e7c4      	b.n	800b76e <_strtod_l+0x146>
 800b7e4:	2f08      	cmp	r7, #8
 800b7e6:	bfd8      	it	le
 800b7e8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b7ea:	f100 0001 	add.w	r0, r0, #1
 800b7ee:	bfda      	itte	le
 800b7f0:	fb02 3301 	mlale	r3, r2, r1, r3
 800b7f4:	9309      	strle	r3, [sp, #36]	; 0x24
 800b7f6:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b7fa:	3701      	adds	r7, #1
 800b7fc:	901d      	str	r0, [sp, #116]	; 0x74
 800b7fe:	e7bf      	b.n	800b780 <_strtod_l+0x158>
 800b800:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b802:	195a      	adds	r2, r3, r5
 800b804:	921d      	str	r2, [sp, #116]	; 0x74
 800b806:	5d5b      	ldrb	r3, [r3, r5]
 800b808:	2f00      	cmp	r7, #0
 800b80a:	d037      	beq.n	800b87c <_strtod_l+0x254>
 800b80c:	9007      	str	r0, [sp, #28]
 800b80e:	463d      	mov	r5, r7
 800b810:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b814:	2a09      	cmp	r2, #9
 800b816:	d912      	bls.n	800b83e <_strtod_l+0x216>
 800b818:	2201      	movs	r2, #1
 800b81a:	e7c2      	b.n	800b7a2 <_strtod_l+0x17a>
 800b81c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b81e:	1c5a      	adds	r2, r3, #1
 800b820:	921d      	str	r2, [sp, #116]	; 0x74
 800b822:	785b      	ldrb	r3, [r3, #1]
 800b824:	3001      	adds	r0, #1
 800b826:	2b30      	cmp	r3, #48	; 0x30
 800b828:	d0f8      	beq.n	800b81c <_strtod_l+0x1f4>
 800b82a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b82e:	2a08      	cmp	r2, #8
 800b830:	f200 84db 	bhi.w	800c1ea <_strtod_l+0xbc2>
 800b834:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b836:	9007      	str	r0, [sp, #28]
 800b838:	2000      	movs	r0, #0
 800b83a:	920a      	str	r2, [sp, #40]	; 0x28
 800b83c:	4605      	mov	r5, r0
 800b83e:	3b30      	subs	r3, #48	; 0x30
 800b840:	f100 0201 	add.w	r2, r0, #1
 800b844:	d014      	beq.n	800b870 <_strtod_l+0x248>
 800b846:	9907      	ldr	r1, [sp, #28]
 800b848:	4411      	add	r1, r2
 800b84a:	9107      	str	r1, [sp, #28]
 800b84c:	462a      	mov	r2, r5
 800b84e:	eb00 0e05 	add.w	lr, r0, r5
 800b852:	210a      	movs	r1, #10
 800b854:	4572      	cmp	r2, lr
 800b856:	d113      	bne.n	800b880 <_strtod_l+0x258>
 800b858:	182a      	adds	r2, r5, r0
 800b85a:	2a08      	cmp	r2, #8
 800b85c:	f105 0501 	add.w	r5, r5, #1
 800b860:	4405      	add	r5, r0
 800b862:	dc1c      	bgt.n	800b89e <_strtod_l+0x276>
 800b864:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b866:	220a      	movs	r2, #10
 800b868:	fb02 3301 	mla	r3, r2, r1, r3
 800b86c:	9309      	str	r3, [sp, #36]	; 0x24
 800b86e:	2200      	movs	r2, #0
 800b870:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b872:	1c59      	adds	r1, r3, #1
 800b874:	911d      	str	r1, [sp, #116]	; 0x74
 800b876:	785b      	ldrb	r3, [r3, #1]
 800b878:	4610      	mov	r0, r2
 800b87a:	e7c9      	b.n	800b810 <_strtod_l+0x1e8>
 800b87c:	4638      	mov	r0, r7
 800b87e:	e7d2      	b.n	800b826 <_strtod_l+0x1fe>
 800b880:	2a08      	cmp	r2, #8
 800b882:	dc04      	bgt.n	800b88e <_strtod_l+0x266>
 800b884:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b886:	434e      	muls	r6, r1
 800b888:	9609      	str	r6, [sp, #36]	; 0x24
 800b88a:	3201      	adds	r2, #1
 800b88c:	e7e2      	b.n	800b854 <_strtod_l+0x22c>
 800b88e:	f102 0c01 	add.w	ip, r2, #1
 800b892:	f1bc 0f10 	cmp.w	ip, #16
 800b896:	bfd8      	it	le
 800b898:	fb01 f909 	mulle.w	r9, r1, r9
 800b89c:	e7f5      	b.n	800b88a <_strtod_l+0x262>
 800b89e:	2d10      	cmp	r5, #16
 800b8a0:	bfdc      	itt	le
 800b8a2:	220a      	movle	r2, #10
 800b8a4:	fb02 3909 	mlale	r9, r2, r9, r3
 800b8a8:	e7e1      	b.n	800b86e <_strtod_l+0x246>
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	9307      	str	r3, [sp, #28]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	e77c      	b.n	800b7ac <_strtod_l+0x184>
 800b8b2:	f04f 0c00 	mov.w	ip, #0
 800b8b6:	f108 0302 	add.w	r3, r8, #2
 800b8ba:	931d      	str	r3, [sp, #116]	; 0x74
 800b8bc:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b8c0:	e785      	b.n	800b7ce <_strtod_l+0x1a6>
 800b8c2:	f04f 0c01 	mov.w	ip, #1
 800b8c6:	e7f6      	b.n	800b8b6 <_strtod_l+0x28e>
 800b8c8:	08010640 	.word	0x08010640
 800b8cc:	080103ec 	.word	0x080103ec
 800b8d0:	7ff00000 	.word	0x7ff00000
 800b8d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b8d6:	1c59      	adds	r1, r3, #1
 800b8d8:	911d      	str	r1, [sp, #116]	; 0x74
 800b8da:	785b      	ldrb	r3, [r3, #1]
 800b8dc:	2b30      	cmp	r3, #48	; 0x30
 800b8de:	d0f9      	beq.n	800b8d4 <_strtod_l+0x2ac>
 800b8e0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800b8e4:	2908      	cmp	r1, #8
 800b8e6:	f63f af79 	bhi.w	800b7dc <_strtod_l+0x1b4>
 800b8ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b8ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b8f0:	9308      	str	r3, [sp, #32]
 800b8f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b8f4:	1c59      	adds	r1, r3, #1
 800b8f6:	911d      	str	r1, [sp, #116]	; 0x74
 800b8f8:	785b      	ldrb	r3, [r3, #1]
 800b8fa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800b8fe:	2e09      	cmp	r6, #9
 800b900:	d937      	bls.n	800b972 <_strtod_l+0x34a>
 800b902:	9e08      	ldr	r6, [sp, #32]
 800b904:	1b89      	subs	r1, r1, r6
 800b906:	2908      	cmp	r1, #8
 800b908:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b90c:	dc02      	bgt.n	800b914 <_strtod_l+0x2ec>
 800b90e:	4576      	cmp	r6, lr
 800b910:	bfa8      	it	ge
 800b912:	4676      	movge	r6, lr
 800b914:	f1bc 0f00 	cmp.w	ip, #0
 800b918:	d000      	beq.n	800b91c <_strtod_l+0x2f4>
 800b91a:	4276      	negs	r6, r6
 800b91c:	2d00      	cmp	r5, #0
 800b91e:	d14f      	bne.n	800b9c0 <_strtod_l+0x398>
 800b920:	9904      	ldr	r1, [sp, #16]
 800b922:	4301      	orrs	r1, r0
 800b924:	f47f aec2 	bne.w	800b6ac <_strtod_l+0x84>
 800b928:	2a00      	cmp	r2, #0
 800b92a:	f47f aedb 	bne.w	800b6e4 <_strtod_l+0xbc>
 800b92e:	2b69      	cmp	r3, #105	; 0x69
 800b930:	d027      	beq.n	800b982 <_strtod_l+0x35a>
 800b932:	dc24      	bgt.n	800b97e <_strtod_l+0x356>
 800b934:	2b49      	cmp	r3, #73	; 0x49
 800b936:	d024      	beq.n	800b982 <_strtod_l+0x35a>
 800b938:	2b4e      	cmp	r3, #78	; 0x4e
 800b93a:	f47f aed3 	bne.w	800b6e4 <_strtod_l+0xbc>
 800b93e:	499e      	ldr	r1, [pc, #632]	; (800bbb8 <_strtod_l+0x590>)
 800b940:	a81d      	add	r0, sp, #116	; 0x74
 800b942:	f001 fe61 	bl	800d608 <__match>
 800b946:	2800      	cmp	r0, #0
 800b948:	f43f aecc 	beq.w	800b6e4 <_strtod_l+0xbc>
 800b94c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	2b28      	cmp	r3, #40	; 0x28
 800b952:	d12d      	bne.n	800b9b0 <_strtod_l+0x388>
 800b954:	4999      	ldr	r1, [pc, #612]	; (800bbbc <_strtod_l+0x594>)
 800b956:	aa20      	add	r2, sp, #128	; 0x80
 800b958:	a81d      	add	r0, sp, #116	; 0x74
 800b95a:	f001 fe69 	bl	800d630 <__hexnan>
 800b95e:	2805      	cmp	r0, #5
 800b960:	d126      	bne.n	800b9b0 <_strtod_l+0x388>
 800b962:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b964:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800b968:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b96c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b970:	e69c      	b.n	800b6ac <_strtod_l+0x84>
 800b972:	210a      	movs	r1, #10
 800b974:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b978:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b97c:	e7b9      	b.n	800b8f2 <_strtod_l+0x2ca>
 800b97e:	2b6e      	cmp	r3, #110	; 0x6e
 800b980:	e7db      	b.n	800b93a <_strtod_l+0x312>
 800b982:	498f      	ldr	r1, [pc, #572]	; (800bbc0 <_strtod_l+0x598>)
 800b984:	a81d      	add	r0, sp, #116	; 0x74
 800b986:	f001 fe3f 	bl	800d608 <__match>
 800b98a:	2800      	cmp	r0, #0
 800b98c:	f43f aeaa 	beq.w	800b6e4 <_strtod_l+0xbc>
 800b990:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b992:	498c      	ldr	r1, [pc, #560]	; (800bbc4 <_strtod_l+0x59c>)
 800b994:	3b01      	subs	r3, #1
 800b996:	a81d      	add	r0, sp, #116	; 0x74
 800b998:	931d      	str	r3, [sp, #116]	; 0x74
 800b99a:	f001 fe35 	bl	800d608 <__match>
 800b99e:	b910      	cbnz	r0, 800b9a6 <_strtod_l+0x37e>
 800b9a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	931d      	str	r3, [sp, #116]	; 0x74
 800b9a6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800bbd4 <_strtod_l+0x5ac>
 800b9aa:	f04f 0a00 	mov.w	sl, #0
 800b9ae:	e67d      	b.n	800b6ac <_strtod_l+0x84>
 800b9b0:	4885      	ldr	r0, [pc, #532]	; (800bbc8 <_strtod_l+0x5a0>)
 800b9b2:	f003 f919 	bl	800ebe8 <nan>
 800b9b6:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b9ba:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b9be:	e675      	b.n	800b6ac <_strtod_l+0x84>
 800b9c0:	9b07      	ldr	r3, [sp, #28]
 800b9c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9c4:	1af3      	subs	r3, r6, r3
 800b9c6:	2f00      	cmp	r7, #0
 800b9c8:	bf08      	it	eq
 800b9ca:	462f      	moveq	r7, r5
 800b9cc:	2d10      	cmp	r5, #16
 800b9ce:	9308      	str	r3, [sp, #32]
 800b9d0:	46a8      	mov	r8, r5
 800b9d2:	bfa8      	it	ge
 800b9d4:	f04f 0810 	movge.w	r8, #16
 800b9d8:	f7f4 fda4 	bl	8000524 <__aeabi_ui2d>
 800b9dc:	2d09      	cmp	r5, #9
 800b9de:	4682      	mov	sl, r0
 800b9e0:	468b      	mov	fp, r1
 800b9e2:	dd13      	ble.n	800ba0c <_strtod_l+0x3e4>
 800b9e4:	4b79      	ldr	r3, [pc, #484]	; (800bbcc <_strtod_l+0x5a4>)
 800b9e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b9ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b9ee:	f7f4 fe13 	bl	8000618 <__aeabi_dmul>
 800b9f2:	4682      	mov	sl, r0
 800b9f4:	4648      	mov	r0, r9
 800b9f6:	468b      	mov	fp, r1
 800b9f8:	f7f4 fd94 	bl	8000524 <__aeabi_ui2d>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	460b      	mov	r3, r1
 800ba00:	4650      	mov	r0, sl
 800ba02:	4659      	mov	r1, fp
 800ba04:	f7f4 fc52 	bl	80002ac <__adddf3>
 800ba08:	4682      	mov	sl, r0
 800ba0a:	468b      	mov	fp, r1
 800ba0c:	2d0f      	cmp	r5, #15
 800ba0e:	dc38      	bgt.n	800ba82 <_strtod_l+0x45a>
 800ba10:	9b08      	ldr	r3, [sp, #32]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f43f ae4a 	beq.w	800b6ac <_strtod_l+0x84>
 800ba18:	dd24      	ble.n	800ba64 <_strtod_l+0x43c>
 800ba1a:	2b16      	cmp	r3, #22
 800ba1c:	dc0b      	bgt.n	800ba36 <_strtod_l+0x40e>
 800ba1e:	4d6b      	ldr	r5, [pc, #428]	; (800bbcc <_strtod_l+0x5a4>)
 800ba20:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800ba24:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ba28:	4652      	mov	r2, sl
 800ba2a:	465b      	mov	r3, fp
 800ba2c:	f7f4 fdf4 	bl	8000618 <__aeabi_dmul>
 800ba30:	4682      	mov	sl, r0
 800ba32:	468b      	mov	fp, r1
 800ba34:	e63a      	b.n	800b6ac <_strtod_l+0x84>
 800ba36:	9a08      	ldr	r2, [sp, #32]
 800ba38:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	db20      	blt.n	800ba82 <_strtod_l+0x45a>
 800ba40:	4c62      	ldr	r4, [pc, #392]	; (800bbcc <_strtod_l+0x5a4>)
 800ba42:	f1c5 050f 	rsb	r5, r5, #15
 800ba46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ba4a:	4652      	mov	r2, sl
 800ba4c:	465b      	mov	r3, fp
 800ba4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba52:	f7f4 fde1 	bl	8000618 <__aeabi_dmul>
 800ba56:	9b08      	ldr	r3, [sp, #32]
 800ba58:	1b5d      	subs	r5, r3, r5
 800ba5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ba5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ba62:	e7e3      	b.n	800ba2c <_strtod_l+0x404>
 800ba64:	9b08      	ldr	r3, [sp, #32]
 800ba66:	3316      	adds	r3, #22
 800ba68:	db0b      	blt.n	800ba82 <_strtod_l+0x45a>
 800ba6a:	9b07      	ldr	r3, [sp, #28]
 800ba6c:	4a57      	ldr	r2, [pc, #348]	; (800bbcc <_strtod_l+0x5a4>)
 800ba6e:	1b9e      	subs	r6, r3, r6
 800ba70:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ba74:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba78:	4650      	mov	r0, sl
 800ba7a:	4659      	mov	r1, fp
 800ba7c:	f7f4 fef6 	bl	800086c <__aeabi_ddiv>
 800ba80:	e7d6      	b.n	800ba30 <_strtod_l+0x408>
 800ba82:	9b08      	ldr	r3, [sp, #32]
 800ba84:	eba5 0808 	sub.w	r8, r5, r8
 800ba88:	4498      	add	r8, r3
 800ba8a:	f1b8 0f00 	cmp.w	r8, #0
 800ba8e:	dd71      	ble.n	800bb74 <_strtod_l+0x54c>
 800ba90:	f018 030f 	ands.w	r3, r8, #15
 800ba94:	d00a      	beq.n	800baac <_strtod_l+0x484>
 800ba96:	494d      	ldr	r1, [pc, #308]	; (800bbcc <_strtod_l+0x5a4>)
 800ba98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba9c:	4652      	mov	r2, sl
 800ba9e:	465b      	mov	r3, fp
 800baa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baa4:	f7f4 fdb8 	bl	8000618 <__aeabi_dmul>
 800baa8:	4682      	mov	sl, r0
 800baaa:	468b      	mov	fp, r1
 800baac:	f038 080f 	bics.w	r8, r8, #15
 800bab0:	d04d      	beq.n	800bb4e <_strtod_l+0x526>
 800bab2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bab6:	dd22      	ble.n	800bafe <_strtod_l+0x4d6>
 800bab8:	2500      	movs	r5, #0
 800baba:	462e      	mov	r6, r5
 800babc:	9509      	str	r5, [sp, #36]	; 0x24
 800babe:	9507      	str	r5, [sp, #28]
 800bac0:	2322      	movs	r3, #34	; 0x22
 800bac2:	f8df b110 	ldr.w	fp, [pc, #272]	; 800bbd4 <_strtod_l+0x5ac>
 800bac6:	6023      	str	r3, [r4, #0]
 800bac8:	f04f 0a00 	mov.w	sl, #0
 800bacc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bace:	2b00      	cmp	r3, #0
 800bad0:	f43f adec 	beq.w	800b6ac <_strtod_l+0x84>
 800bad4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bad6:	4620      	mov	r0, r4
 800bad8:	f001 fec4 	bl	800d864 <_Bfree>
 800badc:	9907      	ldr	r1, [sp, #28]
 800bade:	4620      	mov	r0, r4
 800bae0:	f001 fec0 	bl	800d864 <_Bfree>
 800bae4:	4631      	mov	r1, r6
 800bae6:	4620      	mov	r0, r4
 800bae8:	f001 febc 	bl	800d864 <_Bfree>
 800baec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800baee:	4620      	mov	r0, r4
 800baf0:	f001 feb8 	bl	800d864 <_Bfree>
 800baf4:	4629      	mov	r1, r5
 800baf6:	4620      	mov	r0, r4
 800baf8:	f001 feb4 	bl	800d864 <_Bfree>
 800bafc:	e5d6      	b.n	800b6ac <_strtod_l+0x84>
 800bafe:	2300      	movs	r3, #0
 800bb00:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bb04:	4650      	mov	r0, sl
 800bb06:	4659      	mov	r1, fp
 800bb08:	4699      	mov	r9, r3
 800bb0a:	f1b8 0f01 	cmp.w	r8, #1
 800bb0e:	dc21      	bgt.n	800bb54 <_strtod_l+0x52c>
 800bb10:	b10b      	cbz	r3, 800bb16 <_strtod_l+0x4ee>
 800bb12:	4682      	mov	sl, r0
 800bb14:	468b      	mov	fp, r1
 800bb16:	4b2e      	ldr	r3, [pc, #184]	; (800bbd0 <_strtod_l+0x5a8>)
 800bb18:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bb1c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800bb20:	4652      	mov	r2, sl
 800bb22:	465b      	mov	r3, fp
 800bb24:	e9d9 0100 	ldrd	r0, r1, [r9]
 800bb28:	f7f4 fd76 	bl	8000618 <__aeabi_dmul>
 800bb2c:	4b29      	ldr	r3, [pc, #164]	; (800bbd4 <_strtod_l+0x5ac>)
 800bb2e:	460a      	mov	r2, r1
 800bb30:	400b      	ands	r3, r1
 800bb32:	4929      	ldr	r1, [pc, #164]	; (800bbd8 <_strtod_l+0x5b0>)
 800bb34:	428b      	cmp	r3, r1
 800bb36:	4682      	mov	sl, r0
 800bb38:	d8be      	bhi.n	800bab8 <_strtod_l+0x490>
 800bb3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bb3e:	428b      	cmp	r3, r1
 800bb40:	bf86      	itte	hi
 800bb42:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800bbdc <_strtod_l+0x5b4>
 800bb46:	f04f 3aff 	movhi.w	sl, #4294967295
 800bb4a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bb4e:	2300      	movs	r3, #0
 800bb50:	9304      	str	r3, [sp, #16]
 800bb52:	e081      	b.n	800bc58 <_strtod_l+0x630>
 800bb54:	f018 0f01 	tst.w	r8, #1
 800bb58:	d007      	beq.n	800bb6a <_strtod_l+0x542>
 800bb5a:	4b1d      	ldr	r3, [pc, #116]	; (800bbd0 <_strtod_l+0x5a8>)
 800bb5c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800bb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb64:	f7f4 fd58 	bl	8000618 <__aeabi_dmul>
 800bb68:	2301      	movs	r3, #1
 800bb6a:	f109 0901 	add.w	r9, r9, #1
 800bb6e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bb72:	e7ca      	b.n	800bb0a <_strtod_l+0x4e2>
 800bb74:	d0eb      	beq.n	800bb4e <_strtod_l+0x526>
 800bb76:	f1c8 0800 	rsb	r8, r8, #0
 800bb7a:	f018 020f 	ands.w	r2, r8, #15
 800bb7e:	d00a      	beq.n	800bb96 <_strtod_l+0x56e>
 800bb80:	4b12      	ldr	r3, [pc, #72]	; (800bbcc <_strtod_l+0x5a4>)
 800bb82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb86:	4650      	mov	r0, sl
 800bb88:	4659      	mov	r1, fp
 800bb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8e:	f7f4 fe6d 	bl	800086c <__aeabi_ddiv>
 800bb92:	4682      	mov	sl, r0
 800bb94:	468b      	mov	fp, r1
 800bb96:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bb9a:	d0d8      	beq.n	800bb4e <_strtod_l+0x526>
 800bb9c:	f1b8 0f1f 	cmp.w	r8, #31
 800bba0:	dd1e      	ble.n	800bbe0 <_strtod_l+0x5b8>
 800bba2:	2500      	movs	r5, #0
 800bba4:	462e      	mov	r6, r5
 800bba6:	9509      	str	r5, [sp, #36]	; 0x24
 800bba8:	9507      	str	r5, [sp, #28]
 800bbaa:	2322      	movs	r3, #34	; 0x22
 800bbac:	f04f 0a00 	mov.w	sl, #0
 800bbb0:	f04f 0b00 	mov.w	fp, #0
 800bbb4:	6023      	str	r3, [r4, #0]
 800bbb6:	e789      	b.n	800bacc <_strtod_l+0x4a4>
 800bbb8:	080103c1 	.word	0x080103c1
 800bbbc:	08010400 	.word	0x08010400
 800bbc0:	080103b9 	.word	0x080103b9
 800bbc4:	08010544 	.word	0x08010544
 800bbc8:	0801081b 	.word	0x0801081b
 800bbcc:	080106e0 	.word	0x080106e0
 800bbd0:	080106b8 	.word	0x080106b8
 800bbd4:	7ff00000 	.word	0x7ff00000
 800bbd8:	7ca00000 	.word	0x7ca00000
 800bbdc:	7fefffff 	.word	0x7fefffff
 800bbe0:	f018 0310 	ands.w	r3, r8, #16
 800bbe4:	bf18      	it	ne
 800bbe6:	236a      	movne	r3, #106	; 0x6a
 800bbe8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800bfa0 <_strtod_l+0x978>
 800bbec:	9304      	str	r3, [sp, #16]
 800bbee:	4650      	mov	r0, sl
 800bbf0:	4659      	mov	r1, fp
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	f018 0f01 	tst.w	r8, #1
 800bbf8:	d004      	beq.n	800bc04 <_strtod_l+0x5dc>
 800bbfa:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bbfe:	f7f4 fd0b 	bl	8000618 <__aeabi_dmul>
 800bc02:	2301      	movs	r3, #1
 800bc04:	ea5f 0868 	movs.w	r8, r8, asr #1
 800bc08:	f109 0908 	add.w	r9, r9, #8
 800bc0c:	d1f2      	bne.n	800bbf4 <_strtod_l+0x5cc>
 800bc0e:	b10b      	cbz	r3, 800bc14 <_strtod_l+0x5ec>
 800bc10:	4682      	mov	sl, r0
 800bc12:	468b      	mov	fp, r1
 800bc14:	9b04      	ldr	r3, [sp, #16]
 800bc16:	b1bb      	cbz	r3, 800bc48 <_strtod_l+0x620>
 800bc18:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800bc1c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	4659      	mov	r1, fp
 800bc24:	dd10      	ble.n	800bc48 <_strtod_l+0x620>
 800bc26:	2b1f      	cmp	r3, #31
 800bc28:	f340 8128 	ble.w	800be7c <_strtod_l+0x854>
 800bc2c:	2b34      	cmp	r3, #52	; 0x34
 800bc2e:	bfde      	ittt	le
 800bc30:	3b20      	suble	r3, #32
 800bc32:	f04f 32ff 	movle.w	r2, #4294967295
 800bc36:	fa02 f303 	lslle.w	r3, r2, r3
 800bc3a:	f04f 0a00 	mov.w	sl, #0
 800bc3e:	bfcc      	ite	gt
 800bc40:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bc44:	ea03 0b01 	andle.w	fp, r3, r1
 800bc48:	2200      	movs	r2, #0
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	4650      	mov	r0, sl
 800bc4e:	4659      	mov	r1, fp
 800bc50:	f7f4 ff4a 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	d1a4      	bne.n	800bba2 <_strtod_l+0x57a>
 800bc58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc5a:	9300      	str	r3, [sp, #0]
 800bc5c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bc5e:	462b      	mov	r3, r5
 800bc60:	463a      	mov	r2, r7
 800bc62:	4620      	mov	r0, r4
 800bc64:	f001 fe6a 	bl	800d93c <__s2b>
 800bc68:	9009      	str	r0, [sp, #36]	; 0x24
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	f43f af24 	beq.w	800bab8 <_strtod_l+0x490>
 800bc70:	9b07      	ldr	r3, [sp, #28]
 800bc72:	1b9e      	subs	r6, r3, r6
 800bc74:	9b08      	ldr	r3, [sp, #32]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	bfb4      	ite	lt
 800bc7a:	4633      	movlt	r3, r6
 800bc7c:	2300      	movge	r3, #0
 800bc7e:	9310      	str	r3, [sp, #64]	; 0x40
 800bc80:	9b08      	ldr	r3, [sp, #32]
 800bc82:	2500      	movs	r5, #0
 800bc84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bc88:	9318      	str	r3, [sp, #96]	; 0x60
 800bc8a:	462e      	mov	r6, r5
 800bc8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc8e:	4620      	mov	r0, r4
 800bc90:	6859      	ldr	r1, [r3, #4]
 800bc92:	f001 fda7 	bl	800d7e4 <_Balloc>
 800bc96:	9007      	str	r0, [sp, #28]
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	f43f af11 	beq.w	800bac0 <_strtod_l+0x498>
 800bc9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bca0:	691a      	ldr	r2, [r3, #16]
 800bca2:	3202      	adds	r2, #2
 800bca4:	f103 010c 	add.w	r1, r3, #12
 800bca8:	0092      	lsls	r2, r2, #2
 800bcaa:	300c      	adds	r0, #12
 800bcac:	f001 fd8c 	bl	800d7c8 <memcpy>
 800bcb0:	ec4b ab10 	vmov	d0, sl, fp
 800bcb4:	aa20      	add	r2, sp, #128	; 0x80
 800bcb6:	a91f      	add	r1, sp, #124	; 0x7c
 800bcb8:	4620      	mov	r0, r4
 800bcba:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800bcbe:	f002 f979 	bl	800dfb4 <__d2b>
 800bcc2:	901e      	str	r0, [sp, #120]	; 0x78
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	f43f aefb 	beq.w	800bac0 <_strtod_l+0x498>
 800bcca:	2101      	movs	r1, #1
 800bccc:	4620      	mov	r0, r4
 800bcce:	f001 fecf 	bl	800da70 <__i2b>
 800bcd2:	4606      	mov	r6, r0
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	f43f aef3 	beq.w	800bac0 <_strtod_l+0x498>
 800bcda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bcdc:	9904      	ldr	r1, [sp, #16]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	bfab      	itete	ge
 800bce2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800bce4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800bce6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800bce8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800bcec:	bfac      	ite	ge
 800bcee:	eb03 0902 	addge.w	r9, r3, r2
 800bcf2:	1ad7      	sublt	r7, r2, r3
 800bcf4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bcf6:	eba3 0801 	sub.w	r8, r3, r1
 800bcfa:	4490      	add	r8, r2
 800bcfc:	4ba3      	ldr	r3, [pc, #652]	; (800bf8c <_strtod_l+0x964>)
 800bcfe:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd02:	4598      	cmp	r8, r3
 800bd04:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bd08:	f280 80cc 	bge.w	800bea4 <_strtod_l+0x87c>
 800bd0c:	eba3 0308 	sub.w	r3, r3, r8
 800bd10:	2b1f      	cmp	r3, #31
 800bd12:	eba2 0203 	sub.w	r2, r2, r3
 800bd16:	f04f 0101 	mov.w	r1, #1
 800bd1a:	f300 80b6 	bgt.w	800be8a <_strtod_l+0x862>
 800bd1e:	fa01 f303 	lsl.w	r3, r1, r3
 800bd22:	9311      	str	r3, [sp, #68]	; 0x44
 800bd24:	2300      	movs	r3, #0
 800bd26:	930c      	str	r3, [sp, #48]	; 0x30
 800bd28:	eb09 0802 	add.w	r8, r9, r2
 800bd2c:	9b04      	ldr	r3, [sp, #16]
 800bd2e:	45c1      	cmp	r9, r8
 800bd30:	4417      	add	r7, r2
 800bd32:	441f      	add	r7, r3
 800bd34:	464b      	mov	r3, r9
 800bd36:	bfa8      	it	ge
 800bd38:	4643      	movge	r3, r8
 800bd3a:	42bb      	cmp	r3, r7
 800bd3c:	bfa8      	it	ge
 800bd3e:	463b      	movge	r3, r7
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	bfc2      	ittt	gt
 800bd44:	eba8 0803 	subgt.w	r8, r8, r3
 800bd48:	1aff      	subgt	r7, r7, r3
 800bd4a:	eba9 0903 	subgt.w	r9, r9, r3
 800bd4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	dd17      	ble.n	800bd84 <_strtod_l+0x75c>
 800bd54:	4631      	mov	r1, r6
 800bd56:	461a      	mov	r2, r3
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f001 ff45 	bl	800dbe8 <__pow5mult>
 800bd5e:	4606      	mov	r6, r0
 800bd60:	2800      	cmp	r0, #0
 800bd62:	f43f aead 	beq.w	800bac0 <_strtod_l+0x498>
 800bd66:	4601      	mov	r1, r0
 800bd68:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f001 fe96 	bl	800da9c <__multiply>
 800bd70:	900f      	str	r0, [sp, #60]	; 0x3c
 800bd72:	2800      	cmp	r0, #0
 800bd74:	f43f aea4 	beq.w	800bac0 <_strtod_l+0x498>
 800bd78:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f001 fd72 	bl	800d864 <_Bfree>
 800bd80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd82:	931e      	str	r3, [sp, #120]	; 0x78
 800bd84:	f1b8 0f00 	cmp.w	r8, #0
 800bd88:	f300 8091 	bgt.w	800beae <_strtod_l+0x886>
 800bd8c:	9b08      	ldr	r3, [sp, #32]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	dd08      	ble.n	800bda4 <_strtod_l+0x77c>
 800bd92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bd94:	9907      	ldr	r1, [sp, #28]
 800bd96:	4620      	mov	r0, r4
 800bd98:	f001 ff26 	bl	800dbe8 <__pow5mult>
 800bd9c:	9007      	str	r0, [sp, #28]
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	f43f ae8e 	beq.w	800bac0 <_strtod_l+0x498>
 800bda4:	2f00      	cmp	r7, #0
 800bda6:	dd08      	ble.n	800bdba <_strtod_l+0x792>
 800bda8:	9907      	ldr	r1, [sp, #28]
 800bdaa:	463a      	mov	r2, r7
 800bdac:	4620      	mov	r0, r4
 800bdae:	f001 ff75 	bl	800dc9c <__lshift>
 800bdb2:	9007      	str	r0, [sp, #28]
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	f43f ae83 	beq.w	800bac0 <_strtod_l+0x498>
 800bdba:	f1b9 0f00 	cmp.w	r9, #0
 800bdbe:	dd08      	ble.n	800bdd2 <_strtod_l+0x7aa>
 800bdc0:	4631      	mov	r1, r6
 800bdc2:	464a      	mov	r2, r9
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	f001 ff69 	bl	800dc9c <__lshift>
 800bdca:	4606      	mov	r6, r0
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	f43f ae77 	beq.w	800bac0 <_strtod_l+0x498>
 800bdd2:	9a07      	ldr	r2, [sp, #28]
 800bdd4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f001 ffe8 	bl	800ddac <__mdiff>
 800bddc:	4605      	mov	r5, r0
 800bdde:	2800      	cmp	r0, #0
 800bde0:	f43f ae6e 	beq.w	800bac0 <_strtod_l+0x498>
 800bde4:	68c3      	ldr	r3, [r0, #12]
 800bde6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bde8:	2300      	movs	r3, #0
 800bdea:	60c3      	str	r3, [r0, #12]
 800bdec:	4631      	mov	r1, r6
 800bdee:	f001 ffc1 	bl	800dd74 <__mcmp>
 800bdf2:	2800      	cmp	r0, #0
 800bdf4:	da65      	bge.n	800bec2 <_strtod_l+0x89a>
 800bdf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bdf8:	ea53 030a 	orrs.w	r3, r3, sl
 800bdfc:	f040 8087 	bne.w	800bf0e <_strtod_l+0x8e6>
 800be00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be04:	2b00      	cmp	r3, #0
 800be06:	f040 8082 	bne.w	800bf0e <_strtod_l+0x8e6>
 800be0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800be0e:	0d1b      	lsrs	r3, r3, #20
 800be10:	051b      	lsls	r3, r3, #20
 800be12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800be16:	d97a      	bls.n	800bf0e <_strtod_l+0x8e6>
 800be18:	696b      	ldr	r3, [r5, #20]
 800be1a:	b913      	cbnz	r3, 800be22 <_strtod_l+0x7fa>
 800be1c:	692b      	ldr	r3, [r5, #16]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	dd75      	ble.n	800bf0e <_strtod_l+0x8e6>
 800be22:	4629      	mov	r1, r5
 800be24:	2201      	movs	r2, #1
 800be26:	4620      	mov	r0, r4
 800be28:	f001 ff38 	bl	800dc9c <__lshift>
 800be2c:	4631      	mov	r1, r6
 800be2e:	4605      	mov	r5, r0
 800be30:	f001 ffa0 	bl	800dd74 <__mcmp>
 800be34:	2800      	cmp	r0, #0
 800be36:	dd6a      	ble.n	800bf0e <_strtod_l+0x8e6>
 800be38:	9904      	ldr	r1, [sp, #16]
 800be3a:	4a55      	ldr	r2, [pc, #340]	; (800bf90 <_strtod_l+0x968>)
 800be3c:	465b      	mov	r3, fp
 800be3e:	2900      	cmp	r1, #0
 800be40:	f000 8085 	beq.w	800bf4e <_strtod_l+0x926>
 800be44:	ea02 010b 	and.w	r1, r2, fp
 800be48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800be4c:	dc7f      	bgt.n	800bf4e <_strtod_l+0x926>
 800be4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800be52:	f77f aeaa 	ble.w	800bbaa <_strtod_l+0x582>
 800be56:	4a4f      	ldr	r2, [pc, #316]	; (800bf94 <_strtod_l+0x96c>)
 800be58:	2300      	movs	r3, #0
 800be5a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800be5e:	4650      	mov	r0, sl
 800be60:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800be64:	4659      	mov	r1, fp
 800be66:	f7f4 fbd7 	bl	8000618 <__aeabi_dmul>
 800be6a:	460b      	mov	r3, r1
 800be6c:	4303      	orrs	r3, r0
 800be6e:	bf08      	it	eq
 800be70:	2322      	moveq	r3, #34	; 0x22
 800be72:	4682      	mov	sl, r0
 800be74:	468b      	mov	fp, r1
 800be76:	bf08      	it	eq
 800be78:	6023      	streq	r3, [r4, #0]
 800be7a:	e62b      	b.n	800bad4 <_strtod_l+0x4ac>
 800be7c:	f04f 32ff 	mov.w	r2, #4294967295
 800be80:	fa02 f303 	lsl.w	r3, r2, r3
 800be84:	ea03 0a0a 	and.w	sl, r3, sl
 800be88:	e6de      	b.n	800bc48 <_strtod_l+0x620>
 800be8a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800be8e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800be92:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800be96:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800be9a:	fa01 f308 	lsl.w	r3, r1, r8
 800be9e:	930c      	str	r3, [sp, #48]	; 0x30
 800bea0:	9111      	str	r1, [sp, #68]	; 0x44
 800bea2:	e741      	b.n	800bd28 <_strtod_l+0x700>
 800bea4:	2300      	movs	r3, #0
 800bea6:	930c      	str	r3, [sp, #48]	; 0x30
 800bea8:	2301      	movs	r3, #1
 800beaa:	9311      	str	r3, [sp, #68]	; 0x44
 800beac:	e73c      	b.n	800bd28 <_strtod_l+0x700>
 800beae:	991e      	ldr	r1, [sp, #120]	; 0x78
 800beb0:	4642      	mov	r2, r8
 800beb2:	4620      	mov	r0, r4
 800beb4:	f001 fef2 	bl	800dc9c <__lshift>
 800beb8:	901e      	str	r0, [sp, #120]	; 0x78
 800beba:	2800      	cmp	r0, #0
 800bebc:	f47f af66 	bne.w	800bd8c <_strtod_l+0x764>
 800bec0:	e5fe      	b.n	800bac0 <_strtod_l+0x498>
 800bec2:	465f      	mov	r7, fp
 800bec4:	d16e      	bne.n	800bfa4 <_strtod_l+0x97c>
 800bec6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bec8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800becc:	b342      	cbz	r2, 800bf20 <_strtod_l+0x8f8>
 800bece:	4a32      	ldr	r2, [pc, #200]	; (800bf98 <_strtod_l+0x970>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d128      	bne.n	800bf26 <_strtod_l+0x8fe>
 800bed4:	9b04      	ldr	r3, [sp, #16]
 800bed6:	4650      	mov	r0, sl
 800bed8:	b1eb      	cbz	r3, 800bf16 <_strtod_l+0x8ee>
 800beda:	4a2d      	ldr	r2, [pc, #180]	; (800bf90 <_strtod_l+0x968>)
 800bedc:	403a      	ands	r2, r7
 800bede:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800bee2:	f04f 31ff 	mov.w	r1, #4294967295
 800bee6:	d819      	bhi.n	800bf1c <_strtod_l+0x8f4>
 800bee8:	0d12      	lsrs	r2, r2, #20
 800beea:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800beee:	fa01 f303 	lsl.w	r3, r1, r3
 800bef2:	4298      	cmp	r0, r3
 800bef4:	d117      	bne.n	800bf26 <_strtod_l+0x8fe>
 800bef6:	4b29      	ldr	r3, [pc, #164]	; (800bf9c <_strtod_l+0x974>)
 800bef8:	429f      	cmp	r7, r3
 800befa:	d102      	bne.n	800bf02 <_strtod_l+0x8da>
 800befc:	3001      	adds	r0, #1
 800befe:	f43f addf 	beq.w	800bac0 <_strtod_l+0x498>
 800bf02:	4b23      	ldr	r3, [pc, #140]	; (800bf90 <_strtod_l+0x968>)
 800bf04:	403b      	ands	r3, r7
 800bf06:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bf0a:	f04f 0a00 	mov.w	sl, #0
 800bf0e:	9b04      	ldr	r3, [sp, #16]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d1a0      	bne.n	800be56 <_strtod_l+0x82e>
 800bf14:	e5de      	b.n	800bad4 <_strtod_l+0x4ac>
 800bf16:	f04f 33ff 	mov.w	r3, #4294967295
 800bf1a:	e7ea      	b.n	800bef2 <_strtod_l+0x8ca>
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	e7e8      	b.n	800bef2 <_strtod_l+0x8ca>
 800bf20:	ea53 030a 	orrs.w	r3, r3, sl
 800bf24:	d088      	beq.n	800be38 <_strtod_l+0x810>
 800bf26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf28:	b1db      	cbz	r3, 800bf62 <_strtod_l+0x93a>
 800bf2a:	423b      	tst	r3, r7
 800bf2c:	d0ef      	beq.n	800bf0e <_strtod_l+0x8e6>
 800bf2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf30:	9a04      	ldr	r2, [sp, #16]
 800bf32:	4650      	mov	r0, sl
 800bf34:	4659      	mov	r1, fp
 800bf36:	b1c3      	cbz	r3, 800bf6a <_strtod_l+0x942>
 800bf38:	f7ff fb59 	bl	800b5ee <sulp>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	460b      	mov	r3, r1
 800bf40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bf44:	f7f4 f9b2 	bl	80002ac <__adddf3>
 800bf48:	4682      	mov	sl, r0
 800bf4a:	468b      	mov	fp, r1
 800bf4c:	e7df      	b.n	800bf0e <_strtod_l+0x8e6>
 800bf4e:	4013      	ands	r3, r2
 800bf50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bf54:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bf58:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bf5c:	f04f 3aff 	mov.w	sl, #4294967295
 800bf60:	e7d5      	b.n	800bf0e <_strtod_l+0x8e6>
 800bf62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf64:	ea13 0f0a 	tst.w	r3, sl
 800bf68:	e7e0      	b.n	800bf2c <_strtod_l+0x904>
 800bf6a:	f7ff fb40 	bl	800b5ee <sulp>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	460b      	mov	r3, r1
 800bf72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bf76:	f7f4 f997 	bl	80002a8 <__aeabi_dsub>
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	4682      	mov	sl, r0
 800bf80:	468b      	mov	fp, r1
 800bf82:	f7f4 fdb1 	bl	8000ae8 <__aeabi_dcmpeq>
 800bf86:	2800      	cmp	r0, #0
 800bf88:	d0c1      	beq.n	800bf0e <_strtod_l+0x8e6>
 800bf8a:	e60e      	b.n	800bbaa <_strtod_l+0x582>
 800bf8c:	fffffc02 	.word	0xfffffc02
 800bf90:	7ff00000 	.word	0x7ff00000
 800bf94:	39500000 	.word	0x39500000
 800bf98:	000fffff 	.word	0x000fffff
 800bf9c:	7fefffff 	.word	0x7fefffff
 800bfa0:	08010418 	.word	0x08010418
 800bfa4:	4631      	mov	r1, r6
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	f002 f860 	bl	800e06c <__ratio>
 800bfac:	ec59 8b10 	vmov	r8, r9, d0
 800bfb0:	ee10 0a10 	vmov	r0, s0
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bfba:	4649      	mov	r1, r9
 800bfbc:	f7f4 fda8 	bl	8000b10 <__aeabi_dcmple>
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	d07c      	beq.n	800c0be <_strtod_l+0xa96>
 800bfc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d04c      	beq.n	800c064 <_strtod_l+0xa3c>
 800bfca:	4b95      	ldr	r3, [pc, #596]	; (800c220 <_strtod_l+0xbf8>)
 800bfcc:	2200      	movs	r2, #0
 800bfce:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bfd2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c220 <_strtod_l+0xbf8>
 800bfd6:	f04f 0800 	mov.w	r8, #0
 800bfda:	4b92      	ldr	r3, [pc, #584]	; (800c224 <_strtod_l+0xbfc>)
 800bfdc:	403b      	ands	r3, r7
 800bfde:	9311      	str	r3, [sp, #68]	; 0x44
 800bfe0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bfe2:	4b91      	ldr	r3, [pc, #580]	; (800c228 <_strtod_l+0xc00>)
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	f040 80b2 	bne.w	800c14e <_strtod_l+0xb26>
 800bfea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bfee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bff2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bff6:	ec4b ab10 	vmov	d0, sl, fp
 800bffa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800bffe:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c002:	f001 ff5b 	bl	800debc <__ulp>
 800c006:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c00a:	ec53 2b10 	vmov	r2, r3, d0
 800c00e:	f7f4 fb03 	bl	8000618 <__aeabi_dmul>
 800c012:	4652      	mov	r2, sl
 800c014:	465b      	mov	r3, fp
 800c016:	f7f4 f949 	bl	80002ac <__adddf3>
 800c01a:	460b      	mov	r3, r1
 800c01c:	4981      	ldr	r1, [pc, #516]	; (800c224 <_strtod_l+0xbfc>)
 800c01e:	4a83      	ldr	r2, [pc, #524]	; (800c22c <_strtod_l+0xc04>)
 800c020:	4019      	ands	r1, r3
 800c022:	4291      	cmp	r1, r2
 800c024:	4682      	mov	sl, r0
 800c026:	d95e      	bls.n	800c0e6 <_strtod_l+0xabe>
 800c028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c02a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c02e:	4293      	cmp	r3, r2
 800c030:	d103      	bne.n	800c03a <_strtod_l+0xa12>
 800c032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c034:	3301      	adds	r3, #1
 800c036:	f43f ad43 	beq.w	800bac0 <_strtod_l+0x498>
 800c03a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800c238 <_strtod_l+0xc10>
 800c03e:	f04f 3aff 	mov.w	sl, #4294967295
 800c042:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c044:	4620      	mov	r0, r4
 800c046:	f001 fc0d 	bl	800d864 <_Bfree>
 800c04a:	9907      	ldr	r1, [sp, #28]
 800c04c:	4620      	mov	r0, r4
 800c04e:	f001 fc09 	bl	800d864 <_Bfree>
 800c052:	4631      	mov	r1, r6
 800c054:	4620      	mov	r0, r4
 800c056:	f001 fc05 	bl	800d864 <_Bfree>
 800c05a:	4629      	mov	r1, r5
 800c05c:	4620      	mov	r0, r4
 800c05e:	f001 fc01 	bl	800d864 <_Bfree>
 800c062:	e613      	b.n	800bc8c <_strtod_l+0x664>
 800c064:	f1ba 0f00 	cmp.w	sl, #0
 800c068:	d11b      	bne.n	800c0a2 <_strtod_l+0xa7a>
 800c06a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c06e:	b9f3      	cbnz	r3, 800c0ae <_strtod_l+0xa86>
 800c070:	4b6b      	ldr	r3, [pc, #428]	; (800c220 <_strtod_l+0xbf8>)
 800c072:	2200      	movs	r2, #0
 800c074:	4640      	mov	r0, r8
 800c076:	4649      	mov	r1, r9
 800c078:	f7f4 fd40 	bl	8000afc <__aeabi_dcmplt>
 800c07c:	b9d0      	cbnz	r0, 800c0b4 <_strtod_l+0xa8c>
 800c07e:	4640      	mov	r0, r8
 800c080:	4649      	mov	r1, r9
 800c082:	4b6b      	ldr	r3, [pc, #428]	; (800c230 <_strtod_l+0xc08>)
 800c084:	2200      	movs	r2, #0
 800c086:	f7f4 fac7 	bl	8000618 <__aeabi_dmul>
 800c08a:	4680      	mov	r8, r0
 800c08c:	4689      	mov	r9, r1
 800c08e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c092:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800c096:	931b      	str	r3, [sp, #108]	; 0x6c
 800c098:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800c09c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c0a0:	e79b      	b.n	800bfda <_strtod_l+0x9b2>
 800c0a2:	f1ba 0f01 	cmp.w	sl, #1
 800c0a6:	d102      	bne.n	800c0ae <_strtod_l+0xa86>
 800c0a8:	2f00      	cmp	r7, #0
 800c0aa:	f43f ad7e 	beq.w	800bbaa <_strtod_l+0x582>
 800c0ae:	4b61      	ldr	r3, [pc, #388]	; (800c234 <_strtod_l+0xc0c>)
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	e78c      	b.n	800bfce <_strtod_l+0x9a6>
 800c0b4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c230 <_strtod_l+0xc08>
 800c0b8:	f04f 0800 	mov.w	r8, #0
 800c0bc:	e7e7      	b.n	800c08e <_strtod_l+0xa66>
 800c0be:	4b5c      	ldr	r3, [pc, #368]	; (800c230 <_strtod_l+0xc08>)
 800c0c0:	4640      	mov	r0, r8
 800c0c2:	4649      	mov	r1, r9
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	f7f4 faa7 	bl	8000618 <__aeabi_dmul>
 800c0ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0cc:	4680      	mov	r8, r0
 800c0ce:	4689      	mov	r9, r1
 800c0d0:	b933      	cbnz	r3, 800c0e0 <_strtod_l+0xab8>
 800c0d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0d6:	9012      	str	r0, [sp, #72]	; 0x48
 800c0d8:	9313      	str	r3, [sp, #76]	; 0x4c
 800c0da:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c0de:	e7dd      	b.n	800c09c <_strtod_l+0xa74>
 800c0e0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800c0e4:	e7f9      	b.n	800c0da <_strtod_l+0xab2>
 800c0e6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c0ea:	9b04      	ldr	r3, [sp, #16]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d1a8      	bne.n	800c042 <_strtod_l+0xa1a>
 800c0f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c0f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c0f6:	0d1b      	lsrs	r3, r3, #20
 800c0f8:	051b      	lsls	r3, r3, #20
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d1a1      	bne.n	800c042 <_strtod_l+0xa1a>
 800c0fe:	4640      	mov	r0, r8
 800c100:	4649      	mov	r1, r9
 800c102:	f7f4 fe39 	bl	8000d78 <__aeabi_d2lz>
 800c106:	f7f4 fa59 	bl	80005bc <__aeabi_l2d>
 800c10a:	4602      	mov	r2, r0
 800c10c:	460b      	mov	r3, r1
 800c10e:	4640      	mov	r0, r8
 800c110:	4649      	mov	r1, r9
 800c112:	f7f4 f8c9 	bl	80002a8 <__aeabi_dsub>
 800c116:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c118:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c11c:	ea43 030a 	orr.w	r3, r3, sl
 800c120:	4313      	orrs	r3, r2
 800c122:	4680      	mov	r8, r0
 800c124:	4689      	mov	r9, r1
 800c126:	d053      	beq.n	800c1d0 <_strtod_l+0xba8>
 800c128:	a335      	add	r3, pc, #212	; (adr r3, 800c200 <_strtod_l+0xbd8>)
 800c12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12e:	f7f4 fce5 	bl	8000afc <__aeabi_dcmplt>
 800c132:	2800      	cmp	r0, #0
 800c134:	f47f acce 	bne.w	800bad4 <_strtod_l+0x4ac>
 800c138:	a333      	add	r3, pc, #204	; (adr r3, 800c208 <_strtod_l+0xbe0>)
 800c13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13e:	4640      	mov	r0, r8
 800c140:	4649      	mov	r1, r9
 800c142:	f7f4 fcf9 	bl	8000b38 <__aeabi_dcmpgt>
 800c146:	2800      	cmp	r0, #0
 800c148:	f43f af7b 	beq.w	800c042 <_strtod_l+0xa1a>
 800c14c:	e4c2      	b.n	800bad4 <_strtod_l+0x4ac>
 800c14e:	9b04      	ldr	r3, [sp, #16]
 800c150:	b333      	cbz	r3, 800c1a0 <_strtod_l+0xb78>
 800c152:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c154:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c158:	d822      	bhi.n	800c1a0 <_strtod_l+0xb78>
 800c15a:	a32d      	add	r3, pc, #180	; (adr r3, 800c210 <_strtod_l+0xbe8>)
 800c15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c160:	4640      	mov	r0, r8
 800c162:	4649      	mov	r1, r9
 800c164:	f7f4 fcd4 	bl	8000b10 <__aeabi_dcmple>
 800c168:	b1a0      	cbz	r0, 800c194 <_strtod_l+0xb6c>
 800c16a:	4649      	mov	r1, r9
 800c16c:	4640      	mov	r0, r8
 800c16e:	f7f4 fd2b 	bl	8000bc8 <__aeabi_d2uiz>
 800c172:	2801      	cmp	r0, #1
 800c174:	bf38      	it	cc
 800c176:	2001      	movcc	r0, #1
 800c178:	f7f4 f9d4 	bl	8000524 <__aeabi_ui2d>
 800c17c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c17e:	4680      	mov	r8, r0
 800c180:	4689      	mov	r9, r1
 800c182:	bb13      	cbnz	r3, 800c1ca <_strtod_l+0xba2>
 800c184:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c188:	9014      	str	r0, [sp, #80]	; 0x50
 800c18a:	9315      	str	r3, [sp, #84]	; 0x54
 800c18c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c190:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c196:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c198:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c19c:	1a9b      	subs	r3, r3, r2
 800c19e:	930d      	str	r3, [sp, #52]	; 0x34
 800c1a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c1a4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c1a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c1ac:	f001 fe86 	bl	800debc <__ulp>
 800c1b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c1b4:	ec53 2b10 	vmov	r2, r3, d0
 800c1b8:	f7f4 fa2e 	bl	8000618 <__aeabi_dmul>
 800c1bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c1c0:	f7f4 f874 	bl	80002ac <__adddf3>
 800c1c4:	4682      	mov	sl, r0
 800c1c6:	468b      	mov	fp, r1
 800c1c8:	e78f      	b.n	800c0ea <_strtod_l+0xac2>
 800c1ca:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800c1ce:	e7dd      	b.n	800c18c <_strtod_l+0xb64>
 800c1d0:	a311      	add	r3, pc, #68	; (adr r3, 800c218 <_strtod_l+0xbf0>)
 800c1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d6:	f7f4 fc91 	bl	8000afc <__aeabi_dcmplt>
 800c1da:	e7b4      	b.n	800c146 <_strtod_l+0xb1e>
 800c1dc:	2300      	movs	r3, #0
 800c1de:	930e      	str	r3, [sp, #56]	; 0x38
 800c1e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c1e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c1e4:	6013      	str	r3, [r2, #0]
 800c1e6:	f7ff ba65 	b.w	800b6b4 <_strtod_l+0x8c>
 800c1ea:	2b65      	cmp	r3, #101	; 0x65
 800c1ec:	f43f ab5d 	beq.w	800b8aa <_strtod_l+0x282>
 800c1f0:	2b45      	cmp	r3, #69	; 0x45
 800c1f2:	f43f ab5a 	beq.w	800b8aa <_strtod_l+0x282>
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	f7ff bb92 	b.w	800b920 <_strtod_l+0x2f8>
 800c1fc:	f3af 8000 	nop.w
 800c200:	94a03595 	.word	0x94a03595
 800c204:	3fdfffff 	.word	0x3fdfffff
 800c208:	35afe535 	.word	0x35afe535
 800c20c:	3fe00000 	.word	0x3fe00000
 800c210:	ffc00000 	.word	0xffc00000
 800c214:	41dfffff 	.word	0x41dfffff
 800c218:	94a03595 	.word	0x94a03595
 800c21c:	3fcfffff 	.word	0x3fcfffff
 800c220:	3ff00000 	.word	0x3ff00000
 800c224:	7ff00000 	.word	0x7ff00000
 800c228:	7fe00000 	.word	0x7fe00000
 800c22c:	7c9fffff 	.word	0x7c9fffff
 800c230:	3fe00000 	.word	0x3fe00000
 800c234:	bff00000 	.word	0xbff00000
 800c238:	7fefffff 	.word	0x7fefffff

0800c23c <_strtod_r>:
 800c23c:	4b01      	ldr	r3, [pc, #4]	; (800c244 <_strtod_r+0x8>)
 800c23e:	f7ff b9f3 	b.w	800b628 <_strtod_l>
 800c242:	bf00      	nop
 800c244:	2000008c 	.word	0x2000008c

0800c248 <_strtol_l.isra.0>:
 800c248:	2b01      	cmp	r3, #1
 800c24a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c24e:	d001      	beq.n	800c254 <_strtol_l.isra.0+0xc>
 800c250:	2b24      	cmp	r3, #36	; 0x24
 800c252:	d906      	bls.n	800c262 <_strtol_l.isra.0+0x1a>
 800c254:	f7fe fa88 	bl	800a768 <__errno>
 800c258:	2316      	movs	r3, #22
 800c25a:	6003      	str	r3, [r0, #0]
 800c25c:	2000      	movs	r0, #0
 800c25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c262:	4f3a      	ldr	r7, [pc, #232]	; (800c34c <_strtol_l.isra.0+0x104>)
 800c264:	468e      	mov	lr, r1
 800c266:	4676      	mov	r6, lr
 800c268:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c26c:	5de5      	ldrb	r5, [r4, r7]
 800c26e:	f015 0508 	ands.w	r5, r5, #8
 800c272:	d1f8      	bne.n	800c266 <_strtol_l.isra.0+0x1e>
 800c274:	2c2d      	cmp	r4, #45	; 0x2d
 800c276:	d134      	bne.n	800c2e2 <_strtol_l.isra.0+0x9a>
 800c278:	f89e 4000 	ldrb.w	r4, [lr]
 800c27c:	f04f 0801 	mov.w	r8, #1
 800c280:	f106 0e02 	add.w	lr, r6, #2
 800c284:	2b00      	cmp	r3, #0
 800c286:	d05c      	beq.n	800c342 <_strtol_l.isra.0+0xfa>
 800c288:	2b10      	cmp	r3, #16
 800c28a:	d10c      	bne.n	800c2a6 <_strtol_l.isra.0+0x5e>
 800c28c:	2c30      	cmp	r4, #48	; 0x30
 800c28e:	d10a      	bne.n	800c2a6 <_strtol_l.isra.0+0x5e>
 800c290:	f89e 4000 	ldrb.w	r4, [lr]
 800c294:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c298:	2c58      	cmp	r4, #88	; 0x58
 800c29a:	d14d      	bne.n	800c338 <_strtol_l.isra.0+0xf0>
 800c29c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800c2a0:	2310      	movs	r3, #16
 800c2a2:	f10e 0e02 	add.w	lr, lr, #2
 800c2a6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800c2aa:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c2ae:	2600      	movs	r6, #0
 800c2b0:	fbbc f9f3 	udiv	r9, ip, r3
 800c2b4:	4635      	mov	r5, r6
 800c2b6:	fb03 ca19 	mls	sl, r3, r9, ip
 800c2ba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c2be:	2f09      	cmp	r7, #9
 800c2c0:	d818      	bhi.n	800c2f4 <_strtol_l.isra.0+0xac>
 800c2c2:	463c      	mov	r4, r7
 800c2c4:	42a3      	cmp	r3, r4
 800c2c6:	dd24      	ble.n	800c312 <_strtol_l.isra.0+0xca>
 800c2c8:	2e00      	cmp	r6, #0
 800c2ca:	db1f      	blt.n	800c30c <_strtol_l.isra.0+0xc4>
 800c2cc:	45a9      	cmp	r9, r5
 800c2ce:	d31d      	bcc.n	800c30c <_strtol_l.isra.0+0xc4>
 800c2d0:	d101      	bne.n	800c2d6 <_strtol_l.isra.0+0x8e>
 800c2d2:	45a2      	cmp	sl, r4
 800c2d4:	db1a      	blt.n	800c30c <_strtol_l.isra.0+0xc4>
 800c2d6:	fb05 4503 	mla	r5, r5, r3, r4
 800c2da:	2601      	movs	r6, #1
 800c2dc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c2e0:	e7eb      	b.n	800c2ba <_strtol_l.isra.0+0x72>
 800c2e2:	2c2b      	cmp	r4, #43	; 0x2b
 800c2e4:	bf08      	it	eq
 800c2e6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800c2ea:	46a8      	mov	r8, r5
 800c2ec:	bf08      	it	eq
 800c2ee:	f106 0e02 	addeq.w	lr, r6, #2
 800c2f2:	e7c7      	b.n	800c284 <_strtol_l.isra.0+0x3c>
 800c2f4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c2f8:	2f19      	cmp	r7, #25
 800c2fa:	d801      	bhi.n	800c300 <_strtol_l.isra.0+0xb8>
 800c2fc:	3c37      	subs	r4, #55	; 0x37
 800c2fe:	e7e1      	b.n	800c2c4 <_strtol_l.isra.0+0x7c>
 800c300:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c304:	2f19      	cmp	r7, #25
 800c306:	d804      	bhi.n	800c312 <_strtol_l.isra.0+0xca>
 800c308:	3c57      	subs	r4, #87	; 0x57
 800c30a:	e7db      	b.n	800c2c4 <_strtol_l.isra.0+0x7c>
 800c30c:	f04f 36ff 	mov.w	r6, #4294967295
 800c310:	e7e4      	b.n	800c2dc <_strtol_l.isra.0+0x94>
 800c312:	2e00      	cmp	r6, #0
 800c314:	da05      	bge.n	800c322 <_strtol_l.isra.0+0xda>
 800c316:	2322      	movs	r3, #34	; 0x22
 800c318:	6003      	str	r3, [r0, #0]
 800c31a:	4665      	mov	r5, ip
 800c31c:	b942      	cbnz	r2, 800c330 <_strtol_l.isra.0+0xe8>
 800c31e:	4628      	mov	r0, r5
 800c320:	e79d      	b.n	800c25e <_strtol_l.isra.0+0x16>
 800c322:	f1b8 0f00 	cmp.w	r8, #0
 800c326:	d000      	beq.n	800c32a <_strtol_l.isra.0+0xe2>
 800c328:	426d      	negs	r5, r5
 800c32a:	2a00      	cmp	r2, #0
 800c32c:	d0f7      	beq.n	800c31e <_strtol_l.isra.0+0xd6>
 800c32e:	b10e      	cbz	r6, 800c334 <_strtol_l.isra.0+0xec>
 800c330:	f10e 31ff 	add.w	r1, lr, #4294967295
 800c334:	6011      	str	r1, [r2, #0]
 800c336:	e7f2      	b.n	800c31e <_strtol_l.isra.0+0xd6>
 800c338:	2430      	movs	r4, #48	; 0x30
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d1b3      	bne.n	800c2a6 <_strtol_l.isra.0+0x5e>
 800c33e:	2308      	movs	r3, #8
 800c340:	e7b1      	b.n	800c2a6 <_strtol_l.isra.0+0x5e>
 800c342:	2c30      	cmp	r4, #48	; 0x30
 800c344:	d0a4      	beq.n	800c290 <_strtol_l.isra.0+0x48>
 800c346:	230a      	movs	r3, #10
 800c348:	e7ad      	b.n	800c2a6 <_strtol_l.isra.0+0x5e>
 800c34a:	bf00      	nop
 800c34c:	08010441 	.word	0x08010441

0800c350 <_strtol_r>:
 800c350:	f7ff bf7a 	b.w	800c248 <_strtol_l.isra.0>

0800c354 <_write_r>:
 800c354:	b538      	push	{r3, r4, r5, lr}
 800c356:	4d07      	ldr	r5, [pc, #28]	; (800c374 <_write_r+0x20>)
 800c358:	4604      	mov	r4, r0
 800c35a:	4608      	mov	r0, r1
 800c35c:	4611      	mov	r1, r2
 800c35e:	2200      	movs	r2, #0
 800c360:	602a      	str	r2, [r5, #0]
 800c362:	461a      	mov	r2, r3
 800c364:	f7f7 f91f 	bl	80035a6 <_write>
 800c368:	1c43      	adds	r3, r0, #1
 800c36a:	d102      	bne.n	800c372 <_write_r+0x1e>
 800c36c:	682b      	ldr	r3, [r5, #0]
 800c36e:	b103      	cbz	r3, 800c372 <_write_r+0x1e>
 800c370:	6023      	str	r3, [r4, #0]
 800c372:	bd38      	pop	{r3, r4, r5, pc}
 800c374:	20001140 	.word	0x20001140

0800c378 <_close_r>:
 800c378:	b538      	push	{r3, r4, r5, lr}
 800c37a:	4d06      	ldr	r5, [pc, #24]	; (800c394 <_close_r+0x1c>)
 800c37c:	2300      	movs	r3, #0
 800c37e:	4604      	mov	r4, r0
 800c380:	4608      	mov	r0, r1
 800c382:	602b      	str	r3, [r5, #0]
 800c384:	f7f7 f91c 	bl	80035c0 <_close>
 800c388:	1c43      	adds	r3, r0, #1
 800c38a:	d102      	bne.n	800c392 <_close_r+0x1a>
 800c38c:	682b      	ldr	r3, [r5, #0]
 800c38e:	b103      	cbz	r3, 800c392 <_close_r+0x1a>
 800c390:	6023      	str	r3, [r4, #0]
 800c392:	bd38      	pop	{r3, r4, r5, pc}
 800c394:	20001140 	.word	0x20001140

0800c398 <quorem>:
 800c398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c39c:	6903      	ldr	r3, [r0, #16]
 800c39e:	690c      	ldr	r4, [r1, #16]
 800c3a0:	42a3      	cmp	r3, r4
 800c3a2:	4607      	mov	r7, r0
 800c3a4:	f2c0 8081 	blt.w	800c4aa <quorem+0x112>
 800c3a8:	3c01      	subs	r4, #1
 800c3aa:	f101 0814 	add.w	r8, r1, #20
 800c3ae:	f100 0514 	add.w	r5, r0, #20
 800c3b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3b6:	9301      	str	r3, [sp, #4]
 800c3b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c3bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c3c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c3cc:	fbb2 f6f3 	udiv	r6, r2, r3
 800c3d0:	d331      	bcc.n	800c436 <quorem+0x9e>
 800c3d2:	f04f 0e00 	mov.w	lr, #0
 800c3d6:	4640      	mov	r0, r8
 800c3d8:	46ac      	mov	ip, r5
 800c3da:	46f2      	mov	sl, lr
 800c3dc:	f850 2b04 	ldr.w	r2, [r0], #4
 800c3e0:	b293      	uxth	r3, r2
 800c3e2:	fb06 e303 	mla	r3, r6, r3, lr
 800c3e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	ebaa 0303 	sub.w	r3, sl, r3
 800c3f0:	0c12      	lsrs	r2, r2, #16
 800c3f2:	f8dc a000 	ldr.w	sl, [ip]
 800c3f6:	fb06 e202 	mla	r2, r6, r2, lr
 800c3fa:	fa13 f38a 	uxtah	r3, r3, sl
 800c3fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c402:	fa1f fa82 	uxth.w	sl, r2
 800c406:	f8dc 2000 	ldr.w	r2, [ip]
 800c40a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c40e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c412:	b29b      	uxth	r3, r3
 800c414:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c418:	4581      	cmp	r9, r0
 800c41a:	f84c 3b04 	str.w	r3, [ip], #4
 800c41e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c422:	d2db      	bcs.n	800c3dc <quorem+0x44>
 800c424:	f855 300b 	ldr.w	r3, [r5, fp]
 800c428:	b92b      	cbnz	r3, 800c436 <quorem+0x9e>
 800c42a:	9b01      	ldr	r3, [sp, #4]
 800c42c:	3b04      	subs	r3, #4
 800c42e:	429d      	cmp	r5, r3
 800c430:	461a      	mov	r2, r3
 800c432:	d32e      	bcc.n	800c492 <quorem+0xfa>
 800c434:	613c      	str	r4, [r7, #16]
 800c436:	4638      	mov	r0, r7
 800c438:	f001 fc9c 	bl	800dd74 <__mcmp>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	db24      	blt.n	800c48a <quorem+0xf2>
 800c440:	3601      	adds	r6, #1
 800c442:	4628      	mov	r0, r5
 800c444:	f04f 0c00 	mov.w	ip, #0
 800c448:	f858 2b04 	ldr.w	r2, [r8], #4
 800c44c:	f8d0 e000 	ldr.w	lr, [r0]
 800c450:	b293      	uxth	r3, r2
 800c452:	ebac 0303 	sub.w	r3, ip, r3
 800c456:	0c12      	lsrs	r2, r2, #16
 800c458:	fa13 f38e 	uxtah	r3, r3, lr
 800c45c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c460:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c464:	b29b      	uxth	r3, r3
 800c466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c46a:	45c1      	cmp	r9, r8
 800c46c:	f840 3b04 	str.w	r3, [r0], #4
 800c470:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c474:	d2e8      	bcs.n	800c448 <quorem+0xb0>
 800c476:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c47a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c47e:	b922      	cbnz	r2, 800c48a <quorem+0xf2>
 800c480:	3b04      	subs	r3, #4
 800c482:	429d      	cmp	r5, r3
 800c484:	461a      	mov	r2, r3
 800c486:	d30a      	bcc.n	800c49e <quorem+0x106>
 800c488:	613c      	str	r4, [r7, #16]
 800c48a:	4630      	mov	r0, r6
 800c48c:	b003      	add	sp, #12
 800c48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c492:	6812      	ldr	r2, [r2, #0]
 800c494:	3b04      	subs	r3, #4
 800c496:	2a00      	cmp	r2, #0
 800c498:	d1cc      	bne.n	800c434 <quorem+0x9c>
 800c49a:	3c01      	subs	r4, #1
 800c49c:	e7c7      	b.n	800c42e <quorem+0x96>
 800c49e:	6812      	ldr	r2, [r2, #0]
 800c4a0:	3b04      	subs	r3, #4
 800c4a2:	2a00      	cmp	r2, #0
 800c4a4:	d1f0      	bne.n	800c488 <quorem+0xf0>
 800c4a6:	3c01      	subs	r4, #1
 800c4a8:	e7eb      	b.n	800c482 <quorem+0xea>
 800c4aa:	2000      	movs	r0, #0
 800c4ac:	e7ee      	b.n	800c48c <quorem+0xf4>
	...

0800c4b0 <_dtoa_r>:
 800c4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b4:	ed2d 8b02 	vpush	{d8}
 800c4b8:	ec57 6b10 	vmov	r6, r7, d0
 800c4bc:	b095      	sub	sp, #84	; 0x54
 800c4be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c4c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c4c4:	9105      	str	r1, [sp, #20]
 800c4c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	9209      	str	r2, [sp, #36]	; 0x24
 800c4ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800c4d0:	b975      	cbnz	r5, 800c4f0 <_dtoa_r+0x40>
 800c4d2:	2010      	movs	r0, #16
 800c4d4:	f001 f95e 	bl	800d794 <malloc>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	6260      	str	r0, [r4, #36]	; 0x24
 800c4dc:	b920      	cbnz	r0, 800c4e8 <_dtoa_r+0x38>
 800c4de:	4bb2      	ldr	r3, [pc, #712]	; (800c7a8 <_dtoa_r+0x2f8>)
 800c4e0:	21ea      	movs	r1, #234	; 0xea
 800c4e2:	48b2      	ldr	r0, [pc, #712]	; (800c7ac <_dtoa_r+0x2fc>)
 800c4e4:	f002 fcaa 	bl	800ee3c <__assert_func>
 800c4e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c4ec:	6005      	str	r5, [r0, #0]
 800c4ee:	60c5      	str	r5, [r0, #12]
 800c4f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4f2:	6819      	ldr	r1, [r3, #0]
 800c4f4:	b151      	cbz	r1, 800c50c <_dtoa_r+0x5c>
 800c4f6:	685a      	ldr	r2, [r3, #4]
 800c4f8:	604a      	str	r2, [r1, #4]
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	4093      	lsls	r3, r2
 800c4fe:	608b      	str	r3, [r1, #8]
 800c500:	4620      	mov	r0, r4
 800c502:	f001 f9af 	bl	800d864 <_Bfree>
 800c506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c508:	2200      	movs	r2, #0
 800c50a:	601a      	str	r2, [r3, #0]
 800c50c:	1e3b      	subs	r3, r7, #0
 800c50e:	bfb9      	ittee	lt
 800c510:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c514:	9303      	strlt	r3, [sp, #12]
 800c516:	2300      	movge	r3, #0
 800c518:	f8c8 3000 	strge.w	r3, [r8]
 800c51c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c520:	4ba3      	ldr	r3, [pc, #652]	; (800c7b0 <_dtoa_r+0x300>)
 800c522:	bfbc      	itt	lt
 800c524:	2201      	movlt	r2, #1
 800c526:	f8c8 2000 	strlt.w	r2, [r8]
 800c52a:	ea33 0309 	bics.w	r3, r3, r9
 800c52e:	d11b      	bne.n	800c568 <_dtoa_r+0xb8>
 800c530:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c532:	f242 730f 	movw	r3, #9999	; 0x270f
 800c536:	6013      	str	r3, [r2, #0]
 800c538:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c53c:	4333      	orrs	r3, r6
 800c53e:	f000 857a 	beq.w	800d036 <_dtoa_r+0xb86>
 800c542:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c544:	b963      	cbnz	r3, 800c560 <_dtoa_r+0xb0>
 800c546:	4b9b      	ldr	r3, [pc, #620]	; (800c7b4 <_dtoa_r+0x304>)
 800c548:	e024      	b.n	800c594 <_dtoa_r+0xe4>
 800c54a:	4b9b      	ldr	r3, [pc, #620]	; (800c7b8 <_dtoa_r+0x308>)
 800c54c:	9300      	str	r3, [sp, #0]
 800c54e:	3308      	adds	r3, #8
 800c550:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c552:	6013      	str	r3, [r2, #0]
 800c554:	9800      	ldr	r0, [sp, #0]
 800c556:	b015      	add	sp, #84	; 0x54
 800c558:	ecbd 8b02 	vpop	{d8}
 800c55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c560:	4b94      	ldr	r3, [pc, #592]	; (800c7b4 <_dtoa_r+0x304>)
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	3303      	adds	r3, #3
 800c566:	e7f3      	b.n	800c550 <_dtoa_r+0xa0>
 800c568:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c56c:	2200      	movs	r2, #0
 800c56e:	ec51 0b17 	vmov	r0, r1, d7
 800c572:	2300      	movs	r3, #0
 800c574:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c578:	f7f4 fab6 	bl	8000ae8 <__aeabi_dcmpeq>
 800c57c:	4680      	mov	r8, r0
 800c57e:	b158      	cbz	r0, 800c598 <_dtoa_r+0xe8>
 800c580:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c582:	2301      	movs	r3, #1
 800c584:	6013      	str	r3, [r2, #0]
 800c586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c588:	2b00      	cmp	r3, #0
 800c58a:	f000 8551 	beq.w	800d030 <_dtoa_r+0xb80>
 800c58e:	488b      	ldr	r0, [pc, #556]	; (800c7bc <_dtoa_r+0x30c>)
 800c590:	6018      	str	r0, [r3, #0]
 800c592:	1e43      	subs	r3, r0, #1
 800c594:	9300      	str	r3, [sp, #0]
 800c596:	e7dd      	b.n	800c554 <_dtoa_r+0xa4>
 800c598:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c59c:	aa12      	add	r2, sp, #72	; 0x48
 800c59e:	a913      	add	r1, sp, #76	; 0x4c
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	f001 fd07 	bl	800dfb4 <__d2b>
 800c5a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c5aa:	4683      	mov	fp, r0
 800c5ac:	2d00      	cmp	r5, #0
 800c5ae:	d07c      	beq.n	800c6aa <_dtoa_r+0x1fa>
 800c5b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c5b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c5be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c5c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c5c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c5ca:	4b7d      	ldr	r3, [pc, #500]	; (800c7c0 <_dtoa_r+0x310>)
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	4639      	mov	r1, r7
 800c5d2:	f7f3 fe69 	bl	80002a8 <__aeabi_dsub>
 800c5d6:	a36e      	add	r3, pc, #440	; (adr r3, 800c790 <_dtoa_r+0x2e0>)
 800c5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5dc:	f7f4 f81c 	bl	8000618 <__aeabi_dmul>
 800c5e0:	a36d      	add	r3, pc, #436	; (adr r3, 800c798 <_dtoa_r+0x2e8>)
 800c5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e6:	f7f3 fe61 	bl	80002ac <__adddf3>
 800c5ea:	4606      	mov	r6, r0
 800c5ec:	4628      	mov	r0, r5
 800c5ee:	460f      	mov	r7, r1
 800c5f0:	f7f3 ffa8 	bl	8000544 <__aeabi_i2d>
 800c5f4:	a36a      	add	r3, pc, #424	; (adr r3, 800c7a0 <_dtoa_r+0x2f0>)
 800c5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fa:	f7f4 f80d 	bl	8000618 <__aeabi_dmul>
 800c5fe:	4602      	mov	r2, r0
 800c600:	460b      	mov	r3, r1
 800c602:	4630      	mov	r0, r6
 800c604:	4639      	mov	r1, r7
 800c606:	f7f3 fe51 	bl	80002ac <__adddf3>
 800c60a:	4606      	mov	r6, r0
 800c60c:	460f      	mov	r7, r1
 800c60e:	f7f4 fab3 	bl	8000b78 <__aeabi_d2iz>
 800c612:	2200      	movs	r2, #0
 800c614:	4682      	mov	sl, r0
 800c616:	2300      	movs	r3, #0
 800c618:	4630      	mov	r0, r6
 800c61a:	4639      	mov	r1, r7
 800c61c:	f7f4 fa6e 	bl	8000afc <__aeabi_dcmplt>
 800c620:	b148      	cbz	r0, 800c636 <_dtoa_r+0x186>
 800c622:	4650      	mov	r0, sl
 800c624:	f7f3 ff8e 	bl	8000544 <__aeabi_i2d>
 800c628:	4632      	mov	r2, r6
 800c62a:	463b      	mov	r3, r7
 800c62c:	f7f4 fa5c 	bl	8000ae8 <__aeabi_dcmpeq>
 800c630:	b908      	cbnz	r0, 800c636 <_dtoa_r+0x186>
 800c632:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c636:	f1ba 0f16 	cmp.w	sl, #22
 800c63a:	d854      	bhi.n	800c6e6 <_dtoa_r+0x236>
 800c63c:	4b61      	ldr	r3, [pc, #388]	; (800c7c4 <_dtoa_r+0x314>)
 800c63e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c646:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c64a:	f7f4 fa57 	bl	8000afc <__aeabi_dcmplt>
 800c64e:	2800      	cmp	r0, #0
 800c650:	d04b      	beq.n	800c6ea <_dtoa_r+0x23a>
 800c652:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c656:	2300      	movs	r3, #0
 800c658:	930e      	str	r3, [sp, #56]	; 0x38
 800c65a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c65c:	1b5d      	subs	r5, r3, r5
 800c65e:	1e6b      	subs	r3, r5, #1
 800c660:	9304      	str	r3, [sp, #16]
 800c662:	bf43      	ittte	mi
 800c664:	2300      	movmi	r3, #0
 800c666:	f1c5 0801 	rsbmi	r8, r5, #1
 800c66a:	9304      	strmi	r3, [sp, #16]
 800c66c:	f04f 0800 	movpl.w	r8, #0
 800c670:	f1ba 0f00 	cmp.w	sl, #0
 800c674:	db3b      	blt.n	800c6ee <_dtoa_r+0x23e>
 800c676:	9b04      	ldr	r3, [sp, #16]
 800c678:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c67c:	4453      	add	r3, sl
 800c67e:	9304      	str	r3, [sp, #16]
 800c680:	2300      	movs	r3, #0
 800c682:	9306      	str	r3, [sp, #24]
 800c684:	9b05      	ldr	r3, [sp, #20]
 800c686:	2b09      	cmp	r3, #9
 800c688:	d869      	bhi.n	800c75e <_dtoa_r+0x2ae>
 800c68a:	2b05      	cmp	r3, #5
 800c68c:	bfc4      	itt	gt
 800c68e:	3b04      	subgt	r3, #4
 800c690:	9305      	strgt	r3, [sp, #20]
 800c692:	9b05      	ldr	r3, [sp, #20]
 800c694:	f1a3 0302 	sub.w	r3, r3, #2
 800c698:	bfcc      	ite	gt
 800c69a:	2500      	movgt	r5, #0
 800c69c:	2501      	movle	r5, #1
 800c69e:	2b03      	cmp	r3, #3
 800c6a0:	d869      	bhi.n	800c776 <_dtoa_r+0x2c6>
 800c6a2:	e8df f003 	tbb	[pc, r3]
 800c6a6:	4e2c      	.short	0x4e2c
 800c6a8:	5a4c      	.short	0x5a4c
 800c6aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c6ae:	441d      	add	r5, r3
 800c6b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c6b4:	2b20      	cmp	r3, #32
 800c6b6:	bfc1      	itttt	gt
 800c6b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c6bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c6c0:	fa09 f303 	lslgt.w	r3, r9, r3
 800c6c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c6c8:	bfda      	itte	le
 800c6ca:	f1c3 0320 	rsble	r3, r3, #32
 800c6ce:	fa06 f003 	lslle.w	r0, r6, r3
 800c6d2:	4318      	orrgt	r0, r3
 800c6d4:	f7f3 ff26 	bl	8000524 <__aeabi_ui2d>
 800c6d8:	2301      	movs	r3, #1
 800c6da:	4606      	mov	r6, r0
 800c6dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c6e0:	3d01      	subs	r5, #1
 800c6e2:	9310      	str	r3, [sp, #64]	; 0x40
 800c6e4:	e771      	b.n	800c5ca <_dtoa_r+0x11a>
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e7b6      	b.n	800c658 <_dtoa_r+0x1a8>
 800c6ea:	900e      	str	r0, [sp, #56]	; 0x38
 800c6ec:	e7b5      	b.n	800c65a <_dtoa_r+0x1aa>
 800c6ee:	f1ca 0300 	rsb	r3, sl, #0
 800c6f2:	9306      	str	r3, [sp, #24]
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	eba8 080a 	sub.w	r8, r8, sl
 800c6fa:	930d      	str	r3, [sp, #52]	; 0x34
 800c6fc:	e7c2      	b.n	800c684 <_dtoa_r+0x1d4>
 800c6fe:	2300      	movs	r3, #0
 800c700:	9308      	str	r3, [sp, #32]
 800c702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c704:	2b00      	cmp	r3, #0
 800c706:	dc39      	bgt.n	800c77c <_dtoa_r+0x2cc>
 800c708:	f04f 0901 	mov.w	r9, #1
 800c70c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c710:	464b      	mov	r3, r9
 800c712:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c716:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c718:	2200      	movs	r2, #0
 800c71a:	6042      	str	r2, [r0, #4]
 800c71c:	2204      	movs	r2, #4
 800c71e:	f102 0614 	add.w	r6, r2, #20
 800c722:	429e      	cmp	r6, r3
 800c724:	6841      	ldr	r1, [r0, #4]
 800c726:	d92f      	bls.n	800c788 <_dtoa_r+0x2d8>
 800c728:	4620      	mov	r0, r4
 800c72a:	f001 f85b 	bl	800d7e4 <_Balloc>
 800c72e:	9000      	str	r0, [sp, #0]
 800c730:	2800      	cmp	r0, #0
 800c732:	d14b      	bne.n	800c7cc <_dtoa_r+0x31c>
 800c734:	4b24      	ldr	r3, [pc, #144]	; (800c7c8 <_dtoa_r+0x318>)
 800c736:	4602      	mov	r2, r0
 800c738:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c73c:	e6d1      	b.n	800c4e2 <_dtoa_r+0x32>
 800c73e:	2301      	movs	r3, #1
 800c740:	e7de      	b.n	800c700 <_dtoa_r+0x250>
 800c742:	2300      	movs	r3, #0
 800c744:	9308      	str	r3, [sp, #32]
 800c746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c748:	eb0a 0903 	add.w	r9, sl, r3
 800c74c:	f109 0301 	add.w	r3, r9, #1
 800c750:	2b01      	cmp	r3, #1
 800c752:	9301      	str	r3, [sp, #4]
 800c754:	bfb8      	it	lt
 800c756:	2301      	movlt	r3, #1
 800c758:	e7dd      	b.n	800c716 <_dtoa_r+0x266>
 800c75a:	2301      	movs	r3, #1
 800c75c:	e7f2      	b.n	800c744 <_dtoa_r+0x294>
 800c75e:	2501      	movs	r5, #1
 800c760:	2300      	movs	r3, #0
 800c762:	9305      	str	r3, [sp, #20]
 800c764:	9508      	str	r5, [sp, #32]
 800c766:	f04f 39ff 	mov.w	r9, #4294967295
 800c76a:	2200      	movs	r2, #0
 800c76c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c770:	2312      	movs	r3, #18
 800c772:	9209      	str	r2, [sp, #36]	; 0x24
 800c774:	e7cf      	b.n	800c716 <_dtoa_r+0x266>
 800c776:	2301      	movs	r3, #1
 800c778:	9308      	str	r3, [sp, #32]
 800c77a:	e7f4      	b.n	800c766 <_dtoa_r+0x2b6>
 800c77c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c780:	f8cd 9004 	str.w	r9, [sp, #4]
 800c784:	464b      	mov	r3, r9
 800c786:	e7c6      	b.n	800c716 <_dtoa_r+0x266>
 800c788:	3101      	adds	r1, #1
 800c78a:	6041      	str	r1, [r0, #4]
 800c78c:	0052      	lsls	r2, r2, #1
 800c78e:	e7c6      	b.n	800c71e <_dtoa_r+0x26e>
 800c790:	636f4361 	.word	0x636f4361
 800c794:	3fd287a7 	.word	0x3fd287a7
 800c798:	8b60c8b3 	.word	0x8b60c8b3
 800c79c:	3fc68a28 	.word	0x3fc68a28
 800c7a0:	509f79fb 	.word	0x509f79fb
 800c7a4:	3fd34413 	.word	0x3fd34413
 800c7a8:	0801054e 	.word	0x0801054e
 800c7ac:	08010565 	.word	0x08010565
 800c7b0:	7ff00000 	.word	0x7ff00000
 800c7b4:	0801054a 	.word	0x0801054a
 800c7b8:	08010541 	.word	0x08010541
 800c7bc:	080107ca 	.word	0x080107ca
 800c7c0:	3ff80000 	.word	0x3ff80000
 800c7c4:	080106e0 	.word	0x080106e0
 800c7c8:	080105c4 	.word	0x080105c4
 800c7cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7ce:	9a00      	ldr	r2, [sp, #0]
 800c7d0:	601a      	str	r2, [r3, #0]
 800c7d2:	9b01      	ldr	r3, [sp, #4]
 800c7d4:	2b0e      	cmp	r3, #14
 800c7d6:	f200 80ad 	bhi.w	800c934 <_dtoa_r+0x484>
 800c7da:	2d00      	cmp	r5, #0
 800c7dc:	f000 80aa 	beq.w	800c934 <_dtoa_r+0x484>
 800c7e0:	f1ba 0f00 	cmp.w	sl, #0
 800c7e4:	dd36      	ble.n	800c854 <_dtoa_r+0x3a4>
 800c7e6:	4ac3      	ldr	r2, [pc, #780]	; (800caf4 <_dtoa_r+0x644>)
 800c7e8:	f00a 030f 	and.w	r3, sl, #15
 800c7ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c7f0:	ed93 7b00 	vldr	d7, [r3]
 800c7f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c7f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c7fc:	eeb0 8a47 	vmov.f32	s16, s14
 800c800:	eef0 8a67 	vmov.f32	s17, s15
 800c804:	d016      	beq.n	800c834 <_dtoa_r+0x384>
 800c806:	4bbc      	ldr	r3, [pc, #752]	; (800caf8 <_dtoa_r+0x648>)
 800c808:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c80c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c810:	f7f4 f82c 	bl	800086c <__aeabi_ddiv>
 800c814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c818:	f007 070f 	and.w	r7, r7, #15
 800c81c:	2503      	movs	r5, #3
 800c81e:	4eb6      	ldr	r6, [pc, #728]	; (800caf8 <_dtoa_r+0x648>)
 800c820:	b957      	cbnz	r7, 800c838 <_dtoa_r+0x388>
 800c822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c826:	ec53 2b18 	vmov	r2, r3, d8
 800c82a:	f7f4 f81f 	bl	800086c <__aeabi_ddiv>
 800c82e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c832:	e029      	b.n	800c888 <_dtoa_r+0x3d8>
 800c834:	2502      	movs	r5, #2
 800c836:	e7f2      	b.n	800c81e <_dtoa_r+0x36e>
 800c838:	07f9      	lsls	r1, r7, #31
 800c83a:	d508      	bpl.n	800c84e <_dtoa_r+0x39e>
 800c83c:	ec51 0b18 	vmov	r0, r1, d8
 800c840:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c844:	f7f3 fee8 	bl	8000618 <__aeabi_dmul>
 800c848:	ec41 0b18 	vmov	d8, r0, r1
 800c84c:	3501      	adds	r5, #1
 800c84e:	107f      	asrs	r7, r7, #1
 800c850:	3608      	adds	r6, #8
 800c852:	e7e5      	b.n	800c820 <_dtoa_r+0x370>
 800c854:	f000 80a6 	beq.w	800c9a4 <_dtoa_r+0x4f4>
 800c858:	f1ca 0600 	rsb	r6, sl, #0
 800c85c:	4ba5      	ldr	r3, [pc, #660]	; (800caf4 <_dtoa_r+0x644>)
 800c85e:	4fa6      	ldr	r7, [pc, #664]	; (800caf8 <_dtoa_r+0x648>)
 800c860:	f006 020f 	and.w	r2, r6, #15
 800c864:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c870:	f7f3 fed2 	bl	8000618 <__aeabi_dmul>
 800c874:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c878:	1136      	asrs	r6, r6, #4
 800c87a:	2300      	movs	r3, #0
 800c87c:	2502      	movs	r5, #2
 800c87e:	2e00      	cmp	r6, #0
 800c880:	f040 8085 	bne.w	800c98e <_dtoa_r+0x4de>
 800c884:	2b00      	cmp	r3, #0
 800c886:	d1d2      	bne.n	800c82e <_dtoa_r+0x37e>
 800c888:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	f000 808c 	beq.w	800c9a8 <_dtoa_r+0x4f8>
 800c890:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c894:	4b99      	ldr	r3, [pc, #612]	; (800cafc <_dtoa_r+0x64c>)
 800c896:	2200      	movs	r2, #0
 800c898:	4630      	mov	r0, r6
 800c89a:	4639      	mov	r1, r7
 800c89c:	f7f4 f92e 	bl	8000afc <__aeabi_dcmplt>
 800c8a0:	2800      	cmp	r0, #0
 800c8a2:	f000 8081 	beq.w	800c9a8 <_dtoa_r+0x4f8>
 800c8a6:	9b01      	ldr	r3, [sp, #4]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d07d      	beq.n	800c9a8 <_dtoa_r+0x4f8>
 800c8ac:	f1b9 0f00 	cmp.w	r9, #0
 800c8b0:	dd3c      	ble.n	800c92c <_dtoa_r+0x47c>
 800c8b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c8b6:	9307      	str	r3, [sp, #28]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	4b91      	ldr	r3, [pc, #580]	; (800cb00 <_dtoa_r+0x650>)
 800c8bc:	4630      	mov	r0, r6
 800c8be:	4639      	mov	r1, r7
 800c8c0:	f7f3 feaa 	bl	8000618 <__aeabi_dmul>
 800c8c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8c8:	3501      	adds	r5, #1
 800c8ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c8ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c8d2:	4628      	mov	r0, r5
 800c8d4:	f7f3 fe36 	bl	8000544 <__aeabi_i2d>
 800c8d8:	4632      	mov	r2, r6
 800c8da:	463b      	mov	r3, r7
 800c8dc:	f7f3 fe9c 	bl	8000618 <__aeabi_dmul>
 800c8e0:	4b88      	ldr	r3, [pc, #544]	; (800cb04 <_dtoa_r+0x654>)
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	f7f3 fce2 	bl	80002ac <__adddf3>
 800c8e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c8ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8f0:	9303      	str	r3, [sp, #12]
 800c8f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d15c      	bne.n	800c9b2 <_dtoa_r+0x502>
 800c8f8:	4b83      	ldr	r3, [pc, #524]	; (800cb08 <_dtoa_r+0x658>)
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	4630      	mov	r0, r6
 800c8fe:	4639      	mov	r1, r7
 800c900:	f7f3 fcd2 	bl	80002a8 <__aeabi_dsub>
 800c904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c908:	4606      	mov	r6, r0
 800c90a:	460f      	mov	r7, r1
 800c90c:	f7f4 f914 	bl	8000b38 <__aeabi_dcmpgt>
 800c910:	2800      	cmp	r0, #0
 800c912:	f040 8296 	bne.w	800ce42 <_dtoa_r+0x992>
 800c916:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c91a:	4630      	mov	r0, r6
 800c91c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c920:	4639      	mov	r1, r7
 800c922:	f7f4 f8eb 	bl	8000afc <__aeabi_dcmplt>
 800c926:	2800      	cmp	r0, #0
 800c928:	f040 8288 	bne.w	800ce3c <_dtoa_r+0x98c>
 800c92c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c930:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c934:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c936:	2b00      	cmp	r3, #0
 800c938:	f2c0 8158 	blt.w	800cbec <_dtoa_r+0x73c>
 800c93c:	f1ba 0f0e 	cmp.w	sl, #14
 800c940:	f300 8154 	bgt.w	800cbec <_dtoa_r+0x73c>
 800c944:	4b6b      	ldr	r3, [pc, #428]	; (800caf4 <_dtoa_r+0x644>)
 800c946:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c94a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c950:	2b00      	cmp	r3, #0
 800c952:	f280 80e3 	bge.w	800cb1c <_dtoa_r+0x66c>
 800c956:	9b01      	ldr	r3, [sp, #4]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	f300 80df 	bgt.w	800cb1c <_dtoa_r+0x66c>
 800c95e:	f040 826d 	bne.w	800ce3c <_dtoa_r+0x98c>
 800c962:	4b69      	ldr	r3, [pc, #420]	; (800cb08 <_dtoa_r+0x658>)
 800c964:	2200      	movs	r2, #0
 800c966:	4640      	mov	r0, r8
 800c968:	4649      	mov	r1, r9
 800c96a:	f7f3 fe55 	bl	8000618 <__aeabi_dmul>
 800c96e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c972:	f7f4 f8d7 	bl	8000b24 <__aeabi_dcmpge>
 800c976:	9e01      	ldr	r6, [sp, #4]
 800c978:	4637      	mov	r7, r6
 800c97a:	2800      	cmp	r0, #0
 800c97c:	f040 8243 	bne.w	800ce06 <_dtoa_r+0x956>
 800c980:	9d00      	ldr	r5, [sp, #0]
 800c982:	2331      	movs	r3, #49	; 0x31
 800c984:	f805 3b01 	strb.w	r3, [r5], #1
 800c988:	f10a 0a01 	add.w	sl, sl, #1
 800c98c:	e23f      	b.n	800ce0e <_dtoa_r+0x95e>
 800c98e:	07f2      	lsls	r2, r6, #31
 800c990:	d505      	bpl.n	800c99e <_dtoa_r+0x4ee>
 800c992:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c996:	f7f3 fe3f 	bl	8000618 <__aeabi_dmul>
 800c99a:	3501      	adds	r5, #1
 800c99c:	2301      	movs	r3, #1
 800c99e:	1076      	asrs	r6, r6, #1
 800c9a0:	3708      	adds	r7, #8
 800c9a2:	e76c      	b.n	800c87e <_dtoa_r+0x3ce>
 800c9a4:	2502      	movs	r5, #2
 800c9a6:	e76f      	b.n	800c888 <_dtoa_r+0x3d8>
 800c9a8:	9b01      	ldr	r3, [sp, #4]
 800c9aa:	f8cd a01c 	str.w	sl, [sp, #28]
 800c9ae:	930c      	str	r3, [sp, #48]	; 0x30
 800c9b0:	e78d      	b.n	800c8ce <_dtoa_r+0x41e>
 800c9b2:	9900      	ldr	r1, [sp, #0]
 800c9b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c9b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9b8:	4b4e      	ldr	r3, [pc, #312]	; (800caf4 <_dtoa_r+0x644>)
 800c9ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c9be:	4401      	add	r1, r0
 800c9c0:	9102      	str	r1, [sp, #8]
 800c9c2:	9908      	ldr	r1, [sp, #32]
 800c9c4:	eeb0 8a47 	vmov.f32	s16, s14
 800c9c8:	eef0 8a67 	vmov.f32	s17, s15
 800c9cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c9d4:	2900      	cmp	r1, #0
 800c9d6:	d045      	beq.n	800ca64 <_dtoa_r+0x5b4>
 800c9d8:	494c      	ldr	r1, [pc, #304]	; (800cb0c <_dtoa_r+0x65c>)
 800c9da:	2000      	movs	r0, #0
 800c9dc:	f7f3 ff46 	bl	800086c <__aeabi_ddiv>
 800c9e0:	ec53 2b18 	vmov	r2, r3, d8
 800c9e4:	f7f3 fc60 	bl	80002a8 <__aeabi_dsub>
 800c9e8:	9d00      	ldr	r5, [sp, #0]
 800c9ea:	ec41 0b18 	vmov	d8, r0, r1
 800c9ee:	4639      	mov	r1, r7
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	f7f4 f8c1 	bl	8000b78 <__aeabi_d2iz>
 800c9f6:	900c      	str	r0, [sp, #48]	; 0x30
 800c9f8:	f7f3 fda4 	bl	8000544 <__aeabi_i2d>
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	460b      	mov	r3, r1
 800ca00:	4630      	mov	r0, r6
 800ca02:	4639      	mov	r1, r7
 800ca04:	f7f3 fc50 	bl	80002a8 <__aeabi_dsub>
 800ca08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca0a:	3330      	adds	r3, #48	; 0x30
 800ca0c:	f805 3b01 	strb.w	r3, [r5], #1
 800ca10:	ec53 2b18 	vmov	r2, r3, d8
 800ca14:	4606      	mov	r6, r0
 800ca16:	460f      	mov	r7, r1
 800ca18:	f7f4 f870 	bl	8000afc <__aeabi_dcmplt>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	d165      	bne.n	800caec <_dtoa_r+0x63c>
 800ca20:	4632      	mov	r2, r6
 800ca22:	463b      	mov	r3, r7
 800ca24:	4935      	ldr	r1, [pc, #212]	; (800cafc <_dtoa_r+0x64c>)
 800ca26:	2000      	movs	r0, #0
 800ca28:	f7f3 fc3e 	bl	80002a8 <__aeabi_dsub>
 800ca2c:	ec53 2b18 	vmov	r2, r3, d8
 800ca30:	f7f4 f864 	bl	8000afc <__aeabi_dcmplt>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	f040 80b9 	bne.w	800cbac <_dtoa_r+0x6fc>
 800ca3a:	9b02      	ldr	r3, [sp, #8]
 800ca3c:	429d      	cmp	r5, r3
 800ca3e:	f43f af75 	beq.w	800c92c <_dtoa_r+0x47c>
 800ca42:	4b2f      	ldr	r3, [pc, #188]	; (800cb00 <_dtoa_r+0x650>)
 800ca44:	ec51 0b18 	vmov	r0, r1, d8
 800ca48:	2200      	movs	r2, #0
 800ca4a:	f7f3 fde5 	bl	8000618 <__aeabi_dmul>
 800ca4e:	4b2c      	ldr	r3, [pc, #176]	; (800cb00 <_dtoa_r+0x650>)
 800ca50:	ec41 0b18 	vmov	d8, r0, r1
 800ca54:	2200      	movs	r2, #0
 800ca56:	4630      	mov	r0, r6
 800ca58:	4639      	mov	r1, r7
 800ca5a:	f7f3 fddd 	bl	8000618 <__aeabi_dmul>
 800ca5e:	4606      	mov	r6, r0
 800ca60:	460f      	mov	r7, r1
 800ca62:	e7c4      	b.n	800c9ee <_dtoa_r+0x53e>
 800ca64:	ec51 0b17 	vmov	r0, r1, d7
 800ca68:	f7f3 fdd6 	bl	8000618 <__aeabi_dmul>
 800ca6c:	9b02      	ldr	r3, [sp, #8]
 800ca6e:	9d00      	ldr	r5, [sp, #0]
 800ca70:	930c      	str	r3, [sp, #48]	; 0x30
 800ca72:	ec41 0b18 	vmov	d8, r0, r1
 800ca76:	4639      	mov	r1, r7
 800ca78:	4630      	mov	r0, r6
 800ca7a:	f7f4 f87d 	bl	8000b78 <__aeabi_d2iz>
 800ca7e:	9011      	str	r0, [sp, #68]	; 0x44
 800ca80:	f7f3 fd60 	bl	8000544 <__aeabi_i2d>
 800ca84:	4602      	mov	r2, r0
 800ca86:	460b      	mov	r3, r1
 800ca88:	4630      	mov	r0, r6
 800ca8a:	4639      	mov	r1, r7
 800ca8c:	f7f3 fc0c 	bl	80002a8 <__aeabi_dsub>
 800ca90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca92:	3330      	adds	r3, #48	; 0x30
 800ca94:	f805 3b01 	strb.w	r3, [r5], #1
 800ca98:	9b02      	ldr	r3, [sp, #8]
 800ca9a:	429d      	cmp	r5, r3
 800ca9c:	4606      	mov	r6, r0
 800ca9e:	460f      	mov	r7, r1
 800caa0:	f04f 0200 	mov.w	r2, #0
 800caa4:	d134      	bne.n	800cb10 <_dtoa_r+0x660>
 800caa6:	4b19      	ldr	r3, [pc, #100]	; (800cb0c <_dtoa_r+0x65c>)
 800caa8:	ec51 0b18 	vmov	r0, r1, d8
 800caac:	f7f3 fbfe 	bl	80002ac <__adddf3>
 800cab0:	4602      	mov	r2, r0
 800cab2:	460b      	mov	r3, r1
 800cab4:	4630      	mov	r0, r6
 800cab6:	4639      	mov	r1, r7
 800cab8:	f7f4 f83e 	bl	8000b38 <__aeabi_dcmpgt>
 800cabc:	2800      	cmp	r0, #0
 800cabe:	d175      	bne.n	800cbac <_dtoa_r+0x6fc>
 800cac0:	ec53 2b18 	vmov	r2, r3, d8
 800cac4:	4911      	ldr	r1, [pc, #68]	; (800cb0c <_dtoa_r+0x65c>)
 800cac6:	2000      	movs	r0, #0
 800cac8:	f7f3 fbee 	bl	80002a8 <__aeabi_dsub>
 800cacc:	4602      	mov	r2, r0
 800cace:	460b      	mov	r3, r1
 800cad0:	4630      	mov	r0, r6
 800cad2:	4639      	mov	r1, r7
 800cad4:	f7f4 f812 	bl	8000afc <__aeabi_dcmplt>
 800cad8:	2800      	cmp	r0, #0
 800cada:	f43f af27 	beq.w	800c92c <_dtoa_r+0x47c>
 800cade:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cae0:	1e6b      	subs	r3, r5, #1
 800cae2:	930c      	str	r3, [sp, #48]	; 0x30
 800cae4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cae8:	2b30      	cmp	r3, #48	; 0x30
 800caea:	d0f8      	beq.n	800cade <_dtoa_r+0x62e>
 800caec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800caf0:	e04a      	b.n	800cb88 <_dtoa_r+0x6d8>
 800caf2:	bf00      	nop
 800caf4:	080106e0 	.word	0x080106e0
 800caf8:	080106b8 	.word	0x080106b8
 800cafc:	3ff00000 	.word	0x3ff00000
 800cb00:	40240000 	.word	0x40240000
 800cb04:	401c0000 	.word	0x401c0000
 800cb08:	40140000 	.word	0x40140000
 800cb0c:	3fe00000 	.word	0x3fe00000
 800cb10:	4baf      	ldr	r3, [pc, #700]	; (800cdd0 <_dtoa_r+0x920>)
 800cb12:	f7f3 fd81 	bl	8000618 <__aeabi_dmul>
 800cb16:	4606      	mov	r6, r0
 800cb18:	460f      	mov	r7, r1
 800cb1a:	e7ac      	b.n	800ca76 <_dtoa_r+0x5c6>
 800cb1c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cb20:	9d00      	ldr	r5, [sp, #0]
 800cb22:	4642      	mov	r2, r8
 800cb24:	464b      	mov	r3, r9
 800cb26:	4630      	mov	r0, r6
 800cb28:	4639      	mov	r1, r7
 800cb2a:	f7f3 fe9f 	bl	800086c <__aeabi_ddiv>
 800cb2e:	f7f4 f823 	bl	8000b78 <__aeabi_d2iz>
 800cb32:	9002      	str	r0, [sp, #8]
 800cb34:	f7f3 fd06 	bl	8000544 <__aeabi_i2d>
 800cb38:	4642      	mov	r2, r8
 800cb3a:	464b      	mov	r3, r9
 800cb3c:	f7f3 fd6c 	bl	8000618 <__aeabi_dmul>
 800cb40:	4602      	mov	r2, r0
 800cb42:	460b      	mov	r3, r1
 800cb44:	4630      	mov	r0, r6
 800cb46:	4639      	mov	r1, r7
 800cb48:	f7f3 fbae 	bl	80002a8 <__aeabi_dsub>
 800cb4c:	9e02      	ldr	r6, [sp, #8]
 800cb4e:	9f01      	ldr	r7, [sp, #4]
 800cb50:	3630      	adds	r6, #48	; 0x30
 800cb52:	f805 6b01 	strb.w	r6, [r5], #1
 800cb56:	9e00      	ldr	r6, [sp, #0]
 800cb58:	1bae      	subs	r6, r5, r6
 800cb5a:	42b7      	cmp	r7, r6
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	460b      	mov	r3, r1
 800cb60:	d137      	bne.n	800cbd2 <_dtoa_r+0x722>
 800cb62:	f7f3 fba3 	bl	80002ac <__adddf3>
 800cb66:	4642      	mov	r2, r8
 800cb68:	464b      	mov	r3, r9
 800cb6a:	4606      	mov	r6, r0
 800cb6c:	460f      	mov	r7, r1
 800cb6e:	f7f3 ffe3 	bl	8000b38 <__aeabi_dcmpgt>
 800cb72:	b9c8      	cbnz	r0, 800cba8 <_dtoa_r+0x6f8>
 800cb74:	4642      	mov	r2, r8
 800cb76:	464b      	mov	r3, r9
 800cb78:	4630      	mov	r0, r6
 800cb7a:	4639      	mov	r1, r7
 800cb7c:	f7f3 ffb4 	bl	8000ae8 <__aeabi_dcmpeq>
 800cb80:	b110      	cbz	r0, 800cb88 <_dtoa_r+0x6d8>
 800cb82:	9b02      	ldr	r3, [sp, #8]
 800cb84:	07d9      	lsls	r1, r3, #31
 800cb86:	d40f      	bmi.n	800cba8 <_dtoa_r+0x6f8>
 800cb88:	4620      	mov	r0, r4
 800cb8a:	4659      	mov	r1, fp
 800cb8c:	f000 fe6a 	bl	800d864 <_Bfree>
 800cb90:	2300      	movs	r3, #0
 800cb92:	702b      	strb	r3, [r5, #0]
 800cb94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb96:	f10a 0001 	add.w	r0, sl, #1
 800cb9a:	6018      	str	r0, [r3, #0]
 800cb9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	f43f acd8 	beq.w	800c554 <_dtoa_r+0xa4>
 800cba4:	601d      	str	r5, [r3, #0]
 800cba6:	e4d5      	b.n	800c554 <_dtoa_r+0xa4>
 800cba8:	f8cd a01c 	str.w	sl, [sp, #28]
 800cbac:	462b      	mov	r3, r5
 800cbae:	461d      	mov	r5, r3
 800cbb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cbb4:	2a39      	cmp	r2, #57	; 0x39
 800cbb6:	d108      	bne.n	800cbca <_dtoa_r+0x71a>
 800cbb8:	9a00      	ldr	r2, [sp, #0]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d1f7      	bne.n	800cbae <_dtoa_r+0x6fe>
 800cbbe:	9a07      	ldr	r2, [sp, #28]
 800cbc0:	9900      	ldr	r1, [sp, #0]
 800cbc2:	3201      	adds	r2, #1
 800cbc4:	9207      	str	r2, [sp, #28]
 800cbc6:	2230      	movs	r2, #48	; 0x30
 800cbc8:	700a      	strb	r2, [r1, #0]
 800cbca:	781a      	ldrb	r2, [r3, #0]
 800cbcc:	3201      	adds	r2, #1
 800cbce:	701a      	strb	r2, [r3, #0]
 800cbd0:	e78c      	b.n	800caec <_dtoa_r+0x63c>
 800cbd2:	4b7f      	ldr	r3, [pc, #508]	; (800cdd0 <_dtoa_r+0x920>)
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	f7f3 fd1f 	bl	8000618 <__aeabi_dmul>
 800cbda:	2200      	movs	r2, #0
 800cbdc:	2300      	movs	r3, #0
 800cbde:	4606      	mov	r6, r0
 800cbe0:	460f      	mov	r7, r1
 800cbe2:	f7f3 ff81 	bl	8000ae8 <__aeabi_dcmpeq>
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d09b      	beq.n	800cb22 <_dtoa_r+0x672>
 800cbea:	e7cd      	b.n	800cb88 <_dtoa_r+0x6d8>
 800cbec:	9a08      	ldr	r2, [sp, #32]
 800cbee:	2a00      	cmp	r2, #0
 800cbf0:	f000 80c4 	beq.w	800cd7c <_dtoa_r+0x8cc>
 800cbf4:	9a05      	ldr	r2, [sp, #20]
 800cbf6:	2a01      	cmp	r2, #1
 800cbf8:	f300 80a8 	bgt.w	800cd4c <_dtoa_r+0x89c>
 800cbfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cbfe:	2a00      	cmp	r2, #0
 800cc00:	f000 80a0 	beq.w	800cd44 <_dtoa_r+0x894>
 800cc04:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cc08:	9e06      	ldr	r6, [sp, #24]
 800cc0a:	4645      	mov	r5, r8
 800cc0c:	9a04      	ldr	r2, [sp, #16]
 800cc0e:	2101      	movs	r1, #1
 800cc10:	441a      	add	r2, r3
 800cc12:	4620      	mov	r0, r4
 800cc14:	4498      	add	r8, r3
 800cc16:	9204      	str	r2, [sp, #16]
 800cc18:	f000 ff2a 	bl	800da70 <__i2b>
 800cc1c:	4607      	mov	r7, r0
 800cc1e:	2d00      	cmp	r5, #0
 800cc20:	dd0b      	ble.n	800cc3a <_dtoa_r+0x78a>
 800cc22:	9b04      	ldr	r3, [sp, #16]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	dd08      	ble.n	800cc3a <_dtoa_r+0x78a>
 800cc28:	42ab      	cmp	r3, r5
 800cc2a:	9a04      	ldr	r2, [sp, #16]
 800cc2c:	bfa8      	it	ge
 800cc2e:	462b      	movge	r3, r5
 800cc30:	eba8 0803 	sub.w	r8, r8, r3
 800cc34:	1aed      	subs	r5, r5, r3
 800cc36:	1ad3      	subs	r3, r2, r3
 800cc38:	9304      	str	r3, [sp, #16]
 800cc3a:	9b06      	ldr	r3, [sp, #24]
 800cc3c:	b1fb      	cbz	r3, 800cc7e <_dtoa_r+0x7ce>
 800cc3e:	9b08      	ldr	r3, [sp, #32]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	f000 809f 	beq.w	800cd84 <_dtoa_r+0x8d4>
 800cc46:	2e00      	cmp	r6, #0
 800cc48:	dd11      	ble.n	800cc6e <_dtoa_r+0x7be>
 800cc4a:	4639      	mov	r1, r7
 800cc4c:	4632      	mov	r2, r6
 800cc4e:	4620      	mov	r0, r4
 800cc50:	f000 ffca 	bl	800dbe8 <__pow5mult>
 800cc54:	465a      	mov	r2, fp
 800cc56:	4601      	mov	r1, r0
 800cc58:	4607      	mov	r7, r0
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	f000 ff1e 	bl	800da9c <__multiply>
 800cc60:	4659      	mov	r1, fp
 800cc62:	9007      	str	r0, [sp, #28]
 800cc64:	4620      	mov	r0, r4
 800cc66:	f000 fdfd 	bl	800d864 <_Bfree>
 800cc6a:	9b07      	ldr	r3, [sp, #28]
 800cc6c:	469b      	mov	fp, r3
 800cc6e:	9b06      	ldr	r3, [sp, #24]
 800cc70:	1b9a      	subs	r2, r3, r6
 800cc72:	d004      	beq.n	800cc7e <_dtoa_r+0x7ce>
 800cc74:	4659      	mov	r1, fp
 800cc76:	4620      	mov	r0, r4
 800cc78:	f000 ffb6 	bl	800dbe8 <__pow5mult>
 800cc7c:	4683      	mov	fp, r0
 800cc7e:	2101      	movs	r1, #1
 800cc80:	4620      	mov	r0, r4
 800cc82:	f000 fef5 	bl	800da70 <__i2b>
 800cc86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	dd7c      	ble.n	800cd88 <_dtoa_r+0x8d8>
 800cc8e:	461a      	mov	r2, r3
 800cc90:	4601      	mov	r1, r0
 800cc92:	4620      	mov	r0, r4
 800cc94:	f000 ffa8 	bl	800dbe8 <__pow5mult>
 800cc98:	9b05      	ldr	r3, [sp, #20]
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	4606      	mov	r6, r0
 800cc9e:	dd76      	ble.n	800cd8e <_dtoa_r+0x8de>
 800cca0:	2300      	movs	r3, #0
 800cca2:	9306      	str	r3, [sp, #24]
 800cca4:	6933      	ldr	r3, [r6, #16]
 800cca6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ccaa:	6918      	ldr	r0, [r3, #16]
 800ccac:	f000 fe90 	bl	800d9d0 <__hi0bits>
 800ccb0:	f1c0 0020 	rsb	r0, r0, #32
 800ccb4:	9b04      	ldr	r3, [sp, #16]
 800ccb6:	4418      	add	r0, r3
 800ccb8:	f010 001f 	ands.w	r0, r0, #31
 800ccbc:	f000 8086 	beq.w	800cdcc <_dtoa_r+0x91c>
 800ccc0:	f1c0 0320 	rsb	r3, r0, #32
 800ccc4:	2b04      	cmp	r3, #4
 800ccc6:	dd7f      	ble.n	800cdc8 <_dtoa_r+0x918>
 800ccc8:	f1c0 001c 	rsb	r0, r0, #28
 800cccc:	9b04      	ldr	r3, [sp, #16]
 800ccce:	4403      	add	r3, r0
 800ccd0:	4480      	add	r8, r0
 800ccd2:	4405      	add	r5, r0
 800ccd4:	9304      	str	r3, [sp, #16]
 800ccd6:	f1b8 0f00 	cmp.w	r8, #0
 800ccda:	dd05      	ble.n	800cce8 <_dtoa_r+0x838>
 800ccdc:	4659      	mov	r1, fp
 800ccde:	4642      	mov	r2, r8
 800cce0:	4620      	mov	r0, r4
 800cce2:	f000 ffdb 	bl	800dc9c <__lshift>
 800cce6:	4683      	mov	fp, r0
 800cce8:	9b04      	ldr	r3, [sp, #16]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	dd05      	ble.n	800ccfa <_dtoa_r+0x84a>
 800ccee:	4631      	mov	r1, r6
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	4620      	mov	r0, r4
 800ccf4:	f000 ffd2 	bl	800dc9c <__lshift>
 800ccf8:	4606      	mov	r6, r0
 800ccfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d069      	beq.n	800cdd4 <_dtoa_r+0x924>
 800cd00:	4631      	mov	r1, r6
 800cd02:	4658      	mov	r0, fp
 800cd04:	f001 f836 	bl	800dd74 <__mcmp>
 800cd08:	2800      	cmp	r0, #0
 800cd0a:	da63      	bge.n	800cdd4 <_dtoa_r+0x924>
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	4659      	mov	r1, fp
 800cd10:	220a      	movs	r2, #10
 800cd12:	4620      	mov	r0, r4
 800cd14:	f000 fdc8 	bl	800d8a8 <__multadd>
 800cd18:	9b08      	ldr	r3, [sp, #32]
 800cd1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd1e:	4683      	mov	fp, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	f000 818f 	beq.w	800d044 <_dtoa_r+0xb94>
 800cd26:	4639      	mov	r1, r7
 800cd28:	2300      	movs	r3, #0
 800cd2a:	220a      	movs	r2, #10
 800cd2c:	4620      	mov	r0, r4
 800cd2e:	f000 fdbb 	bl	800d8a8 <__multadd>
 800cd32:	f1b9 0f00 	cmp.w	r9, #0
 800cd36:	4607      	mov	r7, r0
 800cd38:	f300 808e 	bgt.w	800ce58 <_dtoa_r+0x9a8>
 800cd3c:	9b05      	ldr	r3, [sp, #20]
 800cd3e:	2b02      	cmp	r3, #2
 800cd40:	dc50      	bgt.n	800cde4 <_dtoa_r+0x934>
 800cd42:	e089      	b.n	800ce58 <_dtoa_r+0x9a8>
 800cd44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cd46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cd4a:	e75d      	b.n	800cc08 <_dtoa_r+0x758>
 800cd4c:	9b01      	ldr	r3, [sp, #4]
 800cd4e:	1e5e      	subs	r6, r3, #1
 800cd50:	9b06      	ldr	r3, [sp, #24]
 800cd52:	42b3      	cmp	r3, r6
 800cd54:	bfbf      	itttt	lt
 800cd56:	9b06      	ldrlt	r3, [sp, #24]
 800cd58:	9606      	strlt	r6, [sp, #24]
 800cd5a:	1af2      	sublt	r2, r6, r3
 800cd5c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800cd5e:	bfb6      	itet	lt
 800cd60:	189b      	addlt	r3, r3, r2
 800cd62:	1b9e      	subge	r6, r3, r6
 800cd64:	930d      	strlt	r3, [sp, #52]	; 0x34
 800cd66:	9b01      	ldr	r3, [sp, #4]
 800cd68:	bfb8      	it	lt
 800cd6a:	2600      	movlt	r6, #0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	bfb5      	itete	lt
 800cd70:	eba8 0503 	sublt.w	r5, r8, r3
 800cd74:	9b01      	ldrge	r3, [sp, #4]
 800cd76:	2300      	movlt	r3, #0
 800cd78:	4645      	movge	r5, r8
 800cd7a:	e747      	b.n	800cc0c <_dtoa_r+0x75c>
 800cd7c:	9e06      	ldr	r6, [sp, #24]
 800cd7e:	9f08      	ldr	r7, [sp, #32]
 800cd80:	4645      	mov	r5, r8
 800cd82:	e74c      	b.n	800cc1e <_dtoa_r+0x76e>
 800cd84:	9a06      	ldr	r2, [sp, #24]
 800cd86:	e775      	b.n	800cc74 <_dtoa_r+0x7c4>
 800cd88:	9b05      	ldr	r3, [sp, #20]
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	dc18      	bgt.n	800cdc0 <_dtoa_r+0x910>
 800cd8e:	9b02      	ldr	r3, [sp, #8]
 800cd90:	b9b3      	cbnz	r3, 800cdc0 <_dtoa_r+0x910>
 800cd92:	9b03      	ldr	r3, [sp, #12]
 800cd94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd98:	b9a3      	cbnz	r3, 800cdc4 <_dtoa_r+0x914>
 800cd9a:	9b03      	ldr	r3, [sp, #12]
 800cd9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cda0:	0d1b      	lsrs	r3, r3, #20
 800cda2:	051b      	lsls	r3, r3, #20
 800cda4:	b12b      	cbz	r3, 800cdb2 <_dtoa_r+0x902>
 800cda6:	9b04      	ldr	r3, [sp, #16]
 800cda8:	3301      	adds	r3, #1
 800cdaa:	9304      	str	r3, [sp, #16]
 800cdac:	f108 0801 	add.w	r8, r8, #1
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	9306      	str	r3, [sp, #24]
 800cdb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	f47f af74 	bne.w	800cca4 <_dtoa_r+0x7f4>
 800cdbc:	2001      	movs	r0, #1
 800cdbe:	e779      	b.n	800ccb4 <_dtoa_r+0x804>
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	e7f6      	b.n	800cdb2 <_dtoa_r+0x902>
 800cdc4:	9b02      	ldr	r3, [sp, #8]
 800cdc6:	e7f4      	b.n	800cdb2 <_dtoa_r+0x902>
 800cdc8:	d085      	beq.n	800ccd6 <_dtoa_r+0x826>
 800cdca:	4618      	mov	r0, r3
 800cdcc:	301c      	adds	r0, #28
 800cdce:	e77d      	b.n	800cccc <_dtoa_r+0x81c>
 800cdd0:	40240000 	.word	0x40240000
 800cdd4:	9b01      	ldr	r3, [sp, #4]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	dc38      	bgt.n	800ce4c <_dtoa_r+0x99c>
 800cdda:	9b05      	ldr	r3, [sp, #20]
 800cddc:	2b02      	cmp	r3, #2
 800cdde:	dd35      	ble.n	800ce4c <_dtoa_r+0x99c>
 800cde0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cde4:	f1b9 0f00 	cmp.w	r9, #0
 800cde8:	d10d      	bne.n	800ce06 <_dtoa_r+0x956>
 800cdea:	4631      	mov	r1, r6
 800cdec:	464b      	mov	r3, r9
 800cdee:	2205      	movs	r2, #5
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	f000 fd59 	bl	800d8a8 <__multadd>
 800cdf6:	4601      	mov	r1, r0
 800cdf8:	4606      	mov	r6, r0
 800cdfa:	4658      	mov	r0, fp
 800cdfc:	f000 ffba 	bl	800dd74 <__mcmp>
 800ce00:	2800      	cmp	r0, #0
 800ce02:	f73f adbd 	bgt.w	800c980 <_dtoa_r+0x4d0>
 800ce06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce08:	9d00      	ldr	r5, [sp, #0]
 800ce0a:	ea6f 0a03 	mvn.w	sl, r3
 800ce0e:	f04f 0800 	mov.w	r8, #0
 800ce12:	4631      	mov	r1, r6
 800ce14:	4620      	mov	r0, r4
 800ce16:	f000 fd25 	bl	800d864 <_Bfree>
 800ce1a:	2f00      	cmp	r7, #0
 800ce1c:	f43f aeb4 	beq.w	800cb88 <_dtoa_r+0x6d8>
 800ce20:	f1b8 0f00 	cmp.w	r8, #0
 800ce24:	d005      	beq.n	800ce32 <_dtoa_r+0x982>
 800ce26:	45b8      	cmp	r8, r7
 800ce28:	d003      	beq.n	800ce32 <_dtoa_r+0x982>
 800ce2a:	4641      	mov	r1, r8
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	f000 fd19 	bl	800d864 <_Bfree>
 800ce32:	4639      	mov	r1, r7
 800ce34:	4620      	mov	r0, r4
 800ce36:	f000 fd15 	bl	800d864 <_Bfree>
 800ce3a:	e6a5      	b.n	800cb88 <_dtoa_r+0x6d8>
 800ce3c:	2600      	movs	r6, #0
 800ce3e:	4637      	mov	r7, r6
 800ce40:	e7e1      	b.n	800ce06 <_dtoa_r+0x956>
 800ce42:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ce44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ce48:	4637      	mov	r7, r6
 800ce4a:	e599      	b.n	800c980 <_dtoa_r+0x4d0>
 800ce4c:	9b08      	ldr	r3, [sp, #32]
 800ce4e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	f000 80fd 	beq.w	800d052 <_dtoa_r+0xba2>
 800ce58:	2d00      	cmp	r5, #0
 800ce5a:	dd05      	ble.n	800ce68 <_dtoa_r+0x9b8>
 800ce5c:	4639      	mov	r1, r7
 800ce5e:	462a      	mov	r2, r5
 800ce60:	4620      	mov	r0, r4
 800ce62:	f000 ff1b 	bl	800dc9c <__lshift>
 800ce66:	4607      	mov	r7, r0
 800ce68:	9b06      	ldr	r3, [sp, #24]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d05c      	beq.n	800cf28 <_dtoa_r+0xa78>
 800ce6e:	6879      	ldr	r1, [r7, #4]
 800ce70:	4620      	mov	r0, r4
 800ce72:	f000 fcb7 	bl	800d7e4 <_Balloc>
 800ce76:	4605      	mov	r5, r0
 800ce78:	b928      	cbnz	r0, 800ce86 <_dtoa_r+0x9d6>
 800ce7a:	4b80      	ldr	r3, [pc, #512]	; (800d07c <_dtoa_r+0xbcc>)
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ce82:	f7ff bb2e 	b.w	800c4e2 <_dtoa_r+0x32>
 800ce86:	693a      	ldr	r2, [r7, #16]
 800ce88:	3202      	adds	r2, #2
 800ce8a:	0092      	lsls	r2, r2, #2
 800ce8c:	f107 010c 	add.w	r1, r7, #12
 800ce90:	300c      	adds	r0, #12
 800ce92:	f000 fc99 	bl	800d7c8 <memcpy>
 800ce96:	2201      	movs	r2, #1
 800ce98:	4629      	mov	r1, r5
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f000 fefe 	bl	800dc9c <__lshift>
 800cea0:	9b00      	ldr	r3, [sp, #0]
 800cea2:	3301      	adds	r3, #1
 800cea4:	9301      	str	r3, [sp, #4]
 800cea6:	9b00      	ldr	r3, [sp, #0]
 800cea8:	444b      	add	r3, r9
 800ceaa:	9307      	str	r3, [sp, #28]
 800ceac:	9b02      	ldr	r3, [sp, #8]
 800ceae:	f003 0301 	and.w	r3, r3, #1
 800ceb2:	46b8      	mov	r8, r7
 800ceb4:	9306      	str	r3, [sp, #24]
 800ceb6:	4607      	mov	r7, r0
 800ceb8:	9b01      	ldr	r3, [sp, #4]
 800ceba:	4631      	mov	r1, r6
 800cebc:	3b01      	subs	r3, #1
 800cebe:	4658      	mov	r0, fp
 800cec0:	9302      	str	r3, [sp, #8]
 800cec2:	f7ff fa69 	bl	800c398 <quorem>
 800cec6:	4603      	mov	r3, r0
 800cec8:	3330      	adds	r3, #48	; 0x30
 800ceca:	9004      	str	r0, [sp, #16]
 800cecc:	4641      	mov	r1, r8
 800cece:	4658      	mov	r0, fp
 800ced0:	9308      	str	r3, [sp, #32]
 800ced2:	f000 ff4f 	bl	800dd74 <__mcmp>
 800ced6:	463a      	mov	r2, r7
 800ced8:	4681      	mov	r9, r0
 800ceda:	4631      	mov	r1, r6
 800cedc:	4620      	mov	r0, r4
 800cede:	f000 ff65 	bl	800ddac <__mdiff>
 800cee2:	68c2      	ldr	r2, [r0, #12]
 800cee4:	9b08      	ldr	r3, [sp, #32]
 800cee6:	4605      	mov	r5, r0
 800cee8:	bb02      	cbnz	r2, 800cf2c <_dtoa_r+0xa7c>
 800ceea:	4601      	mov	r1, r0
 800ceec:	4658      	mov	r0, fp
 800ceee:	f000 ff41 	bl	800dd74 <__mcmp>
 800cef2:	9b08      	ldr	r3, [sp, #32]
 800cef4:	4602      	mov	r2, r0
 800cef6:	4629      	mov	r1, r5
 800cef8:	4620      	mov	r0, r4
 800cefa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800cefe:	f000 fcb1 	bl	800d864 <_Bfree>
 800cf02:	9b05      	ldr	r3, [sp, #20]
 800cf04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf06:	9d01      	ldr	r5, [sp, #4]
 800cf08:	ea43 0102 	orr.w	r1, r3, r2
 800cf0c:	9b06      	ldr	r3, [sp, #24]
 800cf0e:	430b      	orrs	r3, r1
 800cf10:	9b08      	ldr	r3, [sp, #32]
 800cf12:	d10d      	bne.n	800cf30 <_dtoa_r+0xa80>
 800cf14:	2b39      	cmp	r3, #57	; 0x39
 800cf16:	d029      	beq.n	800cf6c <_dtoa_r+0xabc>
 800cf18:	f1b9 0f00 	cmp.w	r9, #0
 800cf1c:	dd01      	ble.n	800cf22 <_dtoa_r+0xa72>
 800cf1e:	9b04      	ldr	r3, [sp, #16]
 800cf20:	3331      	adds	r3, #49	; 0x31
 800cf22:	9a02      	ldr	r2, [sp, #8]
 800cf24:	7013      	strb	r3, [r2, #0]
 800cf26:	e774      	b.n	800ce12 <_dtoa_r+0x962>
 800cf28:	4638      	mov	r0, r7
 800cf2a:	e7b9      	b.n	800cea0 <_dtoa_r+0x9f0>
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	e7e2      	b.n	800cef6 <_dtoa_r+0xa46>
 800cf30:	f1b9 0f00 	cmp.w	r9, #0
 800cf34:	db06      	blt.n	800cf44 <_dtoa_r+0xa94>
 800cf36:	9905      	ldr	r1, [sp, #20]
 800cf38:	ea41 0909 	orr.w	r9, r1, r9
 800cf3c:	9906      	ldr	r1, [sp, #24]
 800cf3e:	ea59 0101 	orrs.w	r1, r9, r1
 800cf42:	d120      	bne.n	800cf86 <_dtoa_r+0xad6>
 800cf44:	2a00      	cmp	r2, #0
 800cf46:	ddec      	ble.n	800cf22 <_dtoa_r+0xa72>
 800cf48:	4659      	mov	r1, fp
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	4620      	mov	r0, r4
 800cf4e:	9301      	str	r3, [sp, #4]
 800cf50:	f000 fea4 	bl	800dc9c <__lshift>
 800cf54:	4631      	mov	r1, r6
 800cf56:	4683      	mov	fp, r0
 800cf58:	f000 ff0c 	bl	800dd74 <__mcmp>
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	9b01      	ldr	r3, [sp, #4]
 800cf60:	dc02      	bgt.n	800cf68 <_dtoa_r+0xab8>
 800cf62:	d1de      	bne.n	800cf22 <_dtoa_r+0xa72>
 800cf64:	07da      	lsls	r2, r3, #31
 800cf66:	d5dc      	bpl.n	800cf22 <_dtoa_r+0xa72>
 800cf68:	2b39      	cmp	r3, #57	; 0x39
 800cf6a:	d1d8      	bne.n	800cf1e <_dtoa_r+0xa6e>
 800cf6c:	9a02      	ldr	r2, [sp, #8]
 800cf6e:	2339      	movs	r3, #57	; 0x39
 800cf70:	7013      	strb	r3, [r2, #0]
 800cf72:	462b      	mov	r3, r5
 800cf74:	461d      	mov	r5, r3
 800cf76:	3b01      	subs	r3, #1
 800cf78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cf7c:	2a39      	cmp	r2, #57	; 0x39
 800cf7e:	d050      	beq.n	800d022 <_dtoa_r+0xb72>
 800cf80:	3201      	adds	r2, #1
 800cf82:	701a      	strb	r2, [r3, #0]
 800cf84:	e745      	b.n	800ce12 <_dtoa_r+0x962>
 800cf86:	2a00      	cmp	r2, #0
 800cf88:	dd03      	ble.n	800cf92 <_dtoa_r+0xae2>
 800cf8a:	2b39      	cmp	r3, #57	; 0x39
 800cf8c:	d0ee      	beq.n	800cf6c <_dtoa_r+0xabc>
 800cf8e:	3301      	adds	r3, #1
 800cf90:	e7c7      	b.n	800cf22 <_dtoa_r+0xa72>
 800cf92:	9a01      	ldr	r2, [sp, #4]
 800cf94:	9907      	ldr	r1, [sp, #28]
 800cf96:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cf9a:	428a      	cmp	r2, r1
 800cf9c:	d02a      	beq.n	800cff4 <_dtoa_r+0xb44>
 800cf9e:	4659      	mov	r1, fp
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	220a      	movs	r2, #10
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	f000 fc7f 	bl	800d8a8 <__multadd>
 800cfaa:	45b8      	cmp	r8, r7
 800cfac:	4683      	mov	fp, r0
 800cfae:	f04f 0300 	mov.w	r3, #0
 800cfb2:	f04f 020a 	mov.w	r2, #10
 800cfb6:	4641      	mov	r1, r8
 800cfb8:	4620      	mov	r0, r4
 800cfba:	d107      	bne.n	800cfcc <_dtoa_r+0xb1c>
 800cfbc:	f000 fc74 	bl	800d8a8 <__multadd>
 800cfc0:	4680      	mov	r8, r0
 800cfc2:	4607      	mov	r7, r0
 800cfc4:	9b01      	ldr	r3, [sp, #4]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	9301      	str	r3, [sp, #4]
 800cfca:	e775      	b.n	800ceb8 <_dtoa_r+0xa08>
 800cfcc:	f000 fc6c 	bl	800d8a8 <__multadd>
 800cfd0:	4639      	mov	r1, r7
 800cfd2:	4680      	mov	r8, r0
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	220a      	movs	r2, #10
 800cfd8:	4620      	mov	r0, r4
 800cfda:	f000 fc65 	bl	800d8a8 <__multadd>
 800cfde:	4607      	mov	r7, r0
 800cfe0:	e7f0      	b.n	800cfc4 <_dtoa_r+0xb14>
 800cfe2:	f1b9 0f00 	cmp.w	r9, #0
 800cfe6:	9a00      	ldr	r2, [sp, #0]
 800cfe8:	bfcc      	ite	gt
 800cfea:	464d      	movgt	r5, r9
 800cfec:	2501      	movle	r5, #1
 800cfee:	4415      	add	r5, r2
 800cff0:	f04f 0800 	mov.w	r8, #0
 800cff4:	4659      	mov	r1, fp
 800cff6:	2201      	movs	r2, #1
 800cff8:	4620      	mov	r0, r4
 800cffa:	9301      	str	r3, [sp, #4]
 800cffc:	f000 fe4e 	bl	800dc9c <__lshift>
 800d000:	4631      	mov	r1, r6
 800d002:	4683      	mov	fp, r0
 800d004:	f000 feb6 	bl	800dd74 <__mcmp>
 800d008:	2800      	cmp	r0, #0
 800d00a:	dcb2      	bgt.n	800cf72 <_dtoa_r+0xac2>
 800d00c:	d102      	bne.n	800d014 <_dtoa_r+0xb64>
 800d00e:	9b01      	ldr	r3, [sp, #4]
 800d010:	07db      	lsls	r3, r3, #31
 800d012:	d4ae      	bmi.n	800cf72 <_dtoa_r+0xac2>
 800d014:	462b      	mov	r3, r5
 800d016:	461d      	mov	r5, r3
 800d018:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d01c:	2a30      	cmp	r2, #48	; 0x30
 800d01e:	d0fa      	beq.n	800d016 <_dtoa_r+0xb66>
 800d020:	e6f7      	b.n	800ce12 <_dtoa_r+0x962>
 800d022:	9a00      	ldr	r2, [sp, #0]
 800d024:	429a      	cmp	r2, r3
 800d026:	d1a5      	bne.n	800cf74 <_dtoa_r+0xac4>
 800d028:	f10a 0a01 	add.w	sl, sl, #1
 800d02c:	2331      	movs	r3, #49	; 0x31
 800d02e:	e779      	b.n	800cf24 <_dtoa_r+0xa74>
 800d030:	4b13      	ldr	r3, [pc, #76]	; (800d080 <_dtoa_r+0xbd0>)
 800d032:	f7ff baaf 	b.w	800c594 <_dtoa_r+0xe4>
 800d036:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d038:	2b00      	cmp	r3, #0
 800d03a:	f47f aa86 	bne.w	800c54a <_dtoa_r+0x9a>
 800d03e:	4b11      	ldr	r3, [pc, #68]	; (800d084 <_dtoa_r+0xbd4>)
 800d040:	f7ff baa8 	b.w	800c594 <_dtoa_r+0xe4>
 800d044:	f1b9 0f00 	cmp.w	r9, #0
 800d048:	dc03      	bgt.n	800d052 <_dtoa_r+0xba2>
 800d04a:	9b05      	ldr	r3, [sp, #20]
 800d04c:	2b02      	cmp	r3, #2
 800d04e:	f73f aec9 	bgt.w	800cde4 <_dtoa_r+0x934>
 800d052:	9d00      	ldr	r5, [sp, #0]
 800d054:	4631      	mov	r1, r6
 800d056:	4658      	mov	r0, fp
 800d058:	f7ff f99e 	bl	800c398 <quorem>
 800d05c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d060:	f805 3b01 	strb.w	r3, [r5], #1
 800d064:	9a00      	ldr	r2, [sp, #0]
 800d066:	1aaa      	subs	r2, r5, r2
 800d068:	4591      	cmp	r9, r2
 800d06a:	ddba      	ble.n	800cfe2 <_dtoa_r+0xb32>
 800d06c:	4659      	mov	r1, fp
 800d06e:	2300      	movs	r3, #0
 800d070:	220a      	movs	r2, #10
 800d072:	4620      	mov	r0, r4
 800d074:	f000 fc18 	bl	800d8a8 <__multadd>
 800d078:	4683      	mov	fp, r0
 800d07a:	e7eb      	b.n	800d054 <_dtoa_r+0xba4>
 800d07c:	080105c4 	.word	0x080105c4
 800d080:	080107c9 	.word	0x080107c9
 800d084:	08010541 	.word	0x08010541

0800d088 <rshift>:
 800d088:	6903      	ldr	r3, [r0, #16]
 800d08a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d08e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d092:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d096:	f100 0414 	add.w	r4, r0, #20
 800d09a:	dd45      	ble.n	800d128 <rshift+0xa0>
 800d09c:	f011 011f 	ands.w	r1, r1, #31
 800d0a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d0a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d0a8:	d10c      	bne.n	800d0c4 <rshift+0x3c>
 800d0aa:	f100 0710 	add.w	r7, r0, #16
 800d0ae:	4629      	mov	r1, r5
 800d0b0:	42b1      	cmp	r1, r6
 800d0b2:	d334      	bcc.n	800d11e <rshift+0x96>
 800d0b4:	1a9b      	subs	r3, r3, r2
 800d0b6:	009b      	lsls	r3, r3, #2
 800d0b8:	1eea      	subs	r2, r5, #3
 800d0ba:	4296      	cmp	r6, r2
 800d0bc:	bf38      	it	cc
 800d0be:	2300      	movcc	r3, #0
 800d0c0:	4423      	add	r3, r4
 800d0c2:	e015      	b.n	800d0f0 <rshift+0x68>
 800d0c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d0c8:	f1c1 0820 	rsb	r8, r1, #32
 800d0cc:	40cf      	lsrs	r7, r1
 800d0ce:	f105 0e04 	add.w	lr, r5, #4
 800d0d2:	46a1      	mov	r9, r4
 800d0d4:	4576      	cmp	r6, lr
 800d0d6:	46f4      	mov	ip, lr
 800d0d8:	d815      	bhi.n	800d106 <rshift+0x7e>
 800d0da:	1a9b      	subs	r3, r3, r2
 800d0dc:	009a      	lsls	r2, r3, #2
 800d0de:	3a04      	subs	r2, #4
 800d0e0:	3501      	adds	r5, #1
 800d0e2:	42ae      	cmp	r6, r5
 800d0e4:	bf38      	it	cc
 800d0e6:	2200      	movcc	r2, #0
 800d0e8:	18a3      	adds	r3, r4, r2
 800d0ea:	50a7      	str	r7, [r4, r2]
 800d0ec:	b107      	cbz	r7, 800d0f0 <rshift+0x68>
 800d0ee:	3304      	adds	r3, #4
 800d0f0:	1b1a      	subs	r2, r3, r4
 800d0f2:	42a3      	cmp	r3, r4
 800d0f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d0f8:	bf08      	it	eq
 800d0fa:	2300      	moveq	r3, #0
 800d0fc:	6102      	str	r2, [r0, #16]
 800d0fe:	bf08      	it	eq
 800d100:	6143      	streq	r3, [r0, #20]
 800d102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d106:	f8dc c000 	ldr.w	ip, [ip]
 800d10a:	fa0c fc08 	lsl.w	ip, ip, r8
 800d10e:	ea4c 0707 	orr.w	r7, ip, r7
 800d112:	f849 7b04 	str.w	r7, [r9], #4
 800d116:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d11a:	40cf      	lsrs	r7, r1
 800d11c:	e7da      	b.n	800d0d4 <rshift+0x4c>
 800d11e:	f851 cb04 	ldr.w	ip, [r1], #4
 800d122:	f847 cf04 	str.w	ip, [r7, #4]!
 800d126:	e7c3      	b.n	800d0b0 <rshift+0x28>
 800d128:	4623      	mov	r3, r4
 800d12a:	e7e1      	b.n	800d0f0 <rshift+0x68>

0800d12c <__hexdig_fun>:
 800d12c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d130:	2b09      	cmp	r3, #9
 800d132:	d802      	bhi.n	800d13a <__hexdig_fun+0xe>
 800d134:	3820      	subs	r0, #32
 800d136:	b2c0      	uxtb	r0, r0
 800d138:	4770      	bx	lr
 800d13a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d13e:	2b05      	cmp	r3, #5
 800d140:	d801      	bhi.n	800d146 <__hexdig_fun+0x1a>
 800d142:	3847      	subs	r0, #71	; 0x47
 800d144:	e7f7      	b.n	800d136 <__hexdig_fun+0xa>
 800d146:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d14a:	2b05      	cmp	r3, #5
 800d14c:	d801      	bhi.n	800d152 <__hexdig_fun+0x26>
 800d14e:	3827      	subs	r0, #39	; 0x27
 800d150:	e7f1      	b.n	800d136 <__hexdig_fun+0xa>
 800d152:	2000      	movs	r0, #0
 800d154:	4770      	bx	lr
	...

0800d158 <__gethex>:
 800d158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d15c:	ed2d 8b02 	vpush	{d8}
 800d160:	b089      	sub	sp, #36	; 0x24
 800d162:	ee08 0a10 	vmov	s16, r0
 800d166:	9304      	str	r3, [sp, #16]
 800d168:	4bbc      	ldr	r3, [pc, #752]	; (800d45c <__gethex+0x304>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	9301      	str	r3, [sp, #4]
 800d16e:	4618      	mov	r0, r3
 800d170:	468b      	mov	fp, r1
 800d172:	4690      	mov	r8, r2
 800d174:	f7f3 f836 	bl	80001e4 <strlen>
 800d178:	9b01      	ldr	r3, [sp, #4]
 800d17a:	f8db 2000 	ldr.w	r2, [fp]
 800d17e:	4403      	add	r3, r0
 800d180:	4682      	mov	sl, r0
 800d182:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d186:	9305      	str	r3, [sp, #20]
 800d188:	1c93      	adds	r3, r2, #2
 800d18a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d18e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d192:	32fe      	adds	r2, #254	; 0xfe
 800d194:	18d1      	adds	r1, r2, r3
 800d196:	461f      	mov	r7, r3
 800d198:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d19c:	9100      	str	r1, [sp, #0]
 800d19e:	2830      	cmp	r0, #48	; 0x30
 800d1a0:	d0f8      	beq.n	800d194 <__gethex+0x3c>
 800d1a2:	f7ff ffc3 	bl	800d12c <__hexdig_fun>
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	d13a      	bne.n	800d222 <__gethex+0xca>
 800d1ac:	9901      	ldr	r1, [sp, #4]
 800d1ae:	4652      	mov	r2, sl
 800d1b0:	4638      	mov	r0, r7
 800d1b2:	f001 fd6b 	bl	800ec8c <strncmp>
 800d1b6:	4605      	mov	r5, r0
 800d1b8:	2800      	cmp	r0, #0
 800d1ba:	d168      	bne.n	800d28e <__gethex+0x136>
 800d1bc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d1c0:	eb07 060a 	add.w	r6, r7, sl
 800d1c4:	f7ff ffb2 	bl	800d12c <__hexdig_fun>
 800d1c8:	2800      	cmp	r0, #0
 800d1ca:	d062      	beq.n	800d292 <__gethex+0x13a>
 800d1cc:	4633      	mov	r3, r6
 800d1ce:	7818      	ldrb	r0, [r3, #0]
 800d1d0:	2830      	cmp	r0, #48	; 0x30
 800d1d2:	461f      	mov	r7, r3
 800d1d4:	f103 0301 	add.w	r3, r3, #1
 800d1d8:	d0f9      	beq.n	800d1ce <__gethex+0x76>
 800d1da:	f7ff ffa7 	bl	800d12c <__hexdig_fun>
 800d1de:	2301      	movs	r3, #1
 800d1e0:	fab0 f480 	clz	r4, r0
 800d1e4:	0964      	lsrs	r4, r4, #5
 800d1e6:	4635      	mov	r5, r6
 800d1e8:	9300      	str	r3, [sp, #0]
 800d1ea:	463a      	mov	r2, r7
 800d1ec:	4616      	mov	r6, r2
 800d1ee:	3201      	adds	r2, #1
 800d1f0:	7830      	ldrb	r0, [r6, #0]
 800d1f2:	f7ff ff9b 	bl	800d12c <__hexdig_fun>
 800d1f6:	2800      	cmp	r0, #0
 800d1f8:	d1f8      	bne.n	800d1ec <__gethex+0x94>
 800d1fa:	9901      	ldr	r1, [sp, #4]
 800d1fc:	4652      	mov	r2, sl
 800d1fe:	4630      	mov	r0, r6
 800d200:	f001 fd44 	bl	800ec8c <strncmp>
 800d204:	b980      	cbnz	r0, 800d228 <__gethex+0xd0>
 800d206:	b94d      	cbnz	r5, 800d21c <__gethex+0xc4>
 800d208:	eb06 050a 	add.w	r5, r6, sl
 800d20c:	462a      	mov	r2, r5
 800d20e:	4616      	mov	r6, r2
 800d210:	3201      	adds	r2, #1
 800d212:	7830      	ldrb	r0, [r6, #0]
 800d214:	f7ff ff8a 	bl	800d12c <__hexdig_fun>
 800d218:	2800      	cmp	r0, #0
 800d21a:	d1f8      	bne.n	800d20e <__gethex+0xb6>
 800d21c:	1bad      	subs	r5, r5, r6
 800d21e:	00ad      	lsls	r5, r5, #2
 800d220:	e004      	b.n	800d22c <__gethex+0xd4>
 800d222:	2400      	movs	r4, #0
 800d224:	4625      	mov	r5, r4
 800d226:	e7e0      	b.n	800d1ea <__gethex+0x92>
 800d228:	2d00      	cmp	r5, #0
 800d22a:	d1f7      	bne.n	800d21c <__gethex+0xc4>
 800d22c:	7833      	ldrb	r3, [r6, #0]
 800d22e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d232:	2b50      	cmp	r3, #80	; 0x50
 800d234:	d13b      	bne.n	800d2ae <__gethex+0x156>
 800d236:	7873      	ldrb	r3, [r6, #1]
 800d238:	2b2b      	cmp	r3, #43	; 0x2b
 800d23a:	d02c      	beq.n	800d296 <__gethex+0x13e>
 800d23c:	2b2d      	cmp	r3, #45	; 0x2d
 800d23e:	d02e      	beq.n	800d29e <__gethex+0x146>
 800d240:	1c71      	adds	r1, r6, #1
 800d242:	f04f 0900 	mov.w	r9, #0
 800d246:	7808      	ldrb	r0, [r1, #0]
 800d248:	f7ff ff70 	bl	800d12c <__hexdig_fun>
 800d24c:	1e43      	subs	r3, r0, #1
 800d24e:	b2db      	uxtb	r3, r3
 800d250:	2b18      	cmp	r3, #24
 800d252:	d82c      	bhi.n	800d2ae <__gethex+0x156>
 800d254:	f1a0 0210 	sub.w	r2, r0, #16
 800d258:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d25c:	f7ff ff66 	bl	800d12c <__hexdig_fun>
 800d260:	1e43      	subs	r3, r0, #1
 800d262:	b2db      	uxtb	r3, r3
 800d264:	2b18      	cmp	r3, #24
 800d266:	d91d      	bls.n	800d2a4 <__gethex+0x14c>
 800d268:	f1b9 0f00 	cmp.w	r9, #0
 800d26c:	d000      	beq.n	800d270 <__gethex+0x118>
 800d26e:	4252      	negs	r2, r2
 800d270:	4415      	add	r5, r2
 800d272:	f8cb 1000 	str.w	r1, [fp]
 800d276:	b1e4      	cbz	r4, 800d2b2 <__gethex+0x15a>
 800d278:	9b00      	ldr	r3, [sp, #0]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	bf14      	ite	ne
 800d27e:	2700      	movne	r7, #0
 800d280:	2706      	moveq	r7, #6
 800d282:	4638      	mov	r0, r7
 800d284:	b009      	add	sp, #36	; 0x24
 800d286:	ecbd 8b02 	vpop	{d8}
 800d28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d28e:	463e      	mov	r6, r7
 800d290:	4625      	mov	r5, r4
 800d292:	2401      	movs	r4, #1
 800d294:	e7ca      	b.n	800d22c <__gethex+0xd4>
 800d296:	f04f 0900 	mov.w	r9, #0
 800d29a:	1cb1      	adds	r1, r6, #2
 800d29c:	e7d3      	b.n	800d246 <__gethex+0xee>
 800d29e:	f04f 0901 	mov.w	r9, #1
 800d2a2:	e7fa      	b.n	800d29a <__gethex+0x142>
 800d2a4:	230a      	movs	r3, #10
 800d2a6:	fb03 0202 	mla	r2, r3, r2, r0
 800d2aa:	3a10      	subs	r2, #16
 800d2ac:	e7d4      	b.n	800d258 <__gethex+0x100>
 800d2ae:	4631      	mov	r1, r6
 800d2b0:	e7df      	b.n	800d272 <__gethex+0x11a>
 800d2b2:	1bf3      	subs	r3, r6, r7
 800d2b4:	3b01      	subs	r3, #1
 800d2b6:	4621      	mov	r1, r4
 800d2b8:	2b07      	cmp	r3, #7
 800d2ba:	dc0b      	bgt.n	800d2d4 <__gethex+0x17c>
 800d2bc:	ee18 0a10 	vmov	r0, s16
 800d2c0:	f000 fa90 	bl	800d7e4 <_Balloc>
 800d2c4:	4604      	mov	r4, r0
 800d2c6:	b940      	cbnz	r0, 800d2da <__gethex+0x182>
 800d2c8:	4b65      	ldr	r3, [pc, #404]	; (800d460 <__gethex+0x308>)
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	21de      	movs	r1, #222	; 0xde
 800d2ce:	4865      	ldr	r0, [pc, #404]	; (800d464 <__gethex+0x30c>)
 800d2d0:	f001 fdb4 	bl	800ee3c <__assert_func>
 800d2d4:	3101      	adds	r1, #1
 800d2d6:	105b      	asrs	r3, r3, #1
 800d2d8:	e7ee      	b.n	800d2b8 <__gethex+0x160>
 800d2da:	f100 0914 	add.w	r9, r0, #20
 800d2de:	f04f 0b00 	mov.w	fp, #0
 800d2e2:	f1ca 0301 	rsb	r3, sl, #1
 800d2e6:	f8cd 9008 	str.w	r9, [sp, #8]
 800d2ea:	f8cd b000 	str.w	fp, [sp]
 800d2ee:	9306      	str	r3, [sp, #24]
 800d2f0:	42b7      	cmp	r7, r6
 800d2f2:	d340      	bcc.n	800d376 <__gethex+0x21e>
 800d2f4:	9802      	ldr	r0, [sp, #8]
 800d2f6:	9b00      	ldr	r3, [sp, #0]
 800d2f8:	f840 3b04 	str.w	r3, [r0], #4
 800d2fc:	eba0 0009 	sub.w	r0, r0, r9
 800d300:	1080      	asrs	r0, r0, #2
 800d302:	0146      	lsls	r6, r0, #5
 800d304:	6120      	str	r0, [r4, #16]
 800d306:	4618      	mov	r0, r3
 800d308:	f000 fb62 	bl	800d9d0 <__hi0bits>
 800d30c:	1a30      	subs	r0, r6, r0
 800d30e:	f8d8 6000 	ldr.w	r6, [r8]
 800d312:	42b0      	cmp	r0, r6
 800d314:	dd63      	ble.n	800d3de <__gethex+0x286>
 800d316:	1b87      	subs	r7, r0, r6
 800d318:	4639      	mov	r1, r7
 800d31a:	4620      	mov	r0, r4
 800d31c:	f000 fefc 	bl	800e118 <__any_on>
 800d320:	4682      	mov	sl, r0
 800d322:	b1a8      	cbz	r0, 800d350 <__gethex+0x1f8>
 800d324:	1e7b      	subs	r3, r7, #1
 800d326:	1159      	asrs	r1, r3, #5
 800d328:	f003 021f 	and.w	r2, r3, #31
 800d32c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d330:	f04f 0a01 	mov.w	sl, #1
 800d334:	fa0a f202 	lsl.w	r2, sl, r2
 800d338:	420a      	tst	r2, r1
 800d33a:	d009      	beq.n	800d350 <__gethex+0x1f8>
 800d33c:	4553      	cmp	r3, sl
 800d33e:	dd05      	ble.n	800d34c <__gethex+0x1f4>
 800d340:	1eb9      	subs	r1, r7, #2
 800d342:	4620      	mov	r0, r4
 800d344:	f000 fee8 	bl	800e118 <__any_on>
 800d348:	2800      	cmp	r0, #0
 800d34a:	d145      	bne.n	800d3d8 <__gethex+0x280>
 800d34c:	f04f 0a02 	mov.w	sl, #2
 800d350:	4639      	mov	r1, r7
 800d352:	4620      	mov	r0, r4
 800d354:	f7ff fe98 	bl	800d088 <rshift>
 800d358:	443d      	add	r5, r7
 800d35a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d35e:	42ab      	cmp	r3, r5
 800d360:	da4c      	bge.n	800d3fc <__gethex+0x2a4>
 800d362:	ee18 0a10 	vmov	r0, s16
 800d366:	4621      	mov	r1, r4
 800d368:	f000 fa7c 	bl	800d864 <_Bfree>
 800d36c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d36e:	2300      	movs	r3, #0
 800d370:	6013      	str	r3, [r2, #0]
 800d372:	27a3      	movs	r7, #163	; 0xa3
 800d374:	e785      	b.n	800d282 <__gethex+0x12a>
 800d376:	1e73      	subs	r3, r6, #1
 800d378:	9a05      	ldr	r2, [sp, #20]
 800d37a:	9303      	str	r3, [sp, #12]
 800d37c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d380:	4293      	cmp	r3, r2
 800d382:	d019      	beq.n	800d3b8 <__gethex+0x260>
 800d384:	f1bb 0f20 	cmp.w	fp, #32
 800d388:	d107      	bne.n	800d39a <__gethex+0x242>
 800d38a:	9b02      	ldr	r3, [sp, #8]
 800d38c:	9a00      	ldr	r2, [sp, #0]
 800d38e:	f843 2b04 	str.w	r2, [r3], #4
 800d392:	9302      	str	r3, [sp, #8]
 800d394:	2300      	movs	r3, #0
 800d396:	9300      	str	r3, [sp, #0]
 800d398:	469b      	mov	fp, r3
 800d39a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d39e:	f7ff fec5 	bl	800d12c <__hexdig_fun>
 800d3a2:	9b00      	ldr	r3, [sp, #0]
 800d3a4:	f000 000f 	and.w	r0, r0, #15
 800d3a8:	fa00 f00b 	lsl.w	r0, r0, fp
 800d3ac:	4303      	orrs	r3, r0
 800d3ae:	9300      	str	r3, [sp, #0]
 800d3b0:	f10b 0b04 	add.w	fp, fp, #4
 800d3b4:	9b03      	ldr	r3, [sp, #12]
 800d3b6:	e00d      	b.n	800d3d4 <__gethex+0x27c>
 800d3b8:	9b03      	ldr	r3, [sp, #12]
 800d3ba:	9a06      	ldr	r2, [sp, #24]
 800d3bc:	4413      	add	r3, r2
 800d3be:	42bb      	cmp	r3, r7
 800d3c0:	d3e0      	bcc.n	800d384 <__gethex+0x22c>
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	9901      	ldr	r1, [sp, #4]
 800d3c6:	9307      	str	r3, [sp, #28]
 800d3c8:	4652      	mov	r2, sl
 800d3ca:	f001 fc5f 	bl	800ec8c <strncmp>
 800d3ce:	9b07      	ldr	r3, [sp, #28]
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	d1d7      	bne.n	800d384 <__gethex+0x22c>
 800d3d4:	461e      	mov	r6, r3
 800d3d6:	e78b      	b.n	800d2f0 <__gethex+0x198>
 800d3d8:	f04f 0a03 	mov.w	sl, #3
 800d3dc:	e7b8      	b.n	800d350 <__gethex+0x1f8>
 800d3de:	da0a      	bge.n	800d3f6 <__gethex+0x29e>
 800d3e0:	1a37      	subs	r7, r6, r0
 800d3e2:	4621      	mov	r1, r4
 800d3e4:	ee18 0a10 	vmov	r0, s16
 800d3e8:	463a      	mov	r2, r7
 800d3ea:	f000 fc57 	bl	800dc9c <__lshift>
 800d3ee:	1bed      	subs	r5, r5, r7
 800d3f0:	4604      	mov	r4, r0
 800d3f2:	f100 0914 	add.w	r9, r0, #20
 800d3f6:	f04f 0a00 	mov.w	sl, #0
 800d3fa:	e7ae      	b.n	800d35a <__gethex+0x202>
 800d3fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d400:	42a8      	cmp	r0, r5
 800d402:	dd72      	ble.n	800d4ea <__gethex+0x392>
 800d404:	1b45      	subs	r5, r0, r5
 800d406:	42ae      	cmp	r6, r5
 800d408:	dc36      	bgt.n	800d478 <__gethex+0x320>
 800d40a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d40e:	2b02      	cmp	r3, #2
 800d410:	d02a      	beq.n	800d468 <__gethex+0x310>
 800d412:	2b03      	cmp	r3, #3
 800d414:	d02c      	beq.n	800d470 <__gethex+0x318>
 800d416:	2b01      	cmp	r3, #1
 800d418:	d115      	bne.n	800d446 <__gethex+0x2ee>
 800d41a:	42ae      	cmp	r6, r5
 800d41c:	d113      	bne.n	800d446 <__gethex+0x2ee>
 800d41e:	2e01      	cmp	r6, #1
 800d420:	d10b      	bne.n	800d43a <__gethex+0x2e2>
 800d422:	9a04      	ldr	r2, [sp, #16]
 800d424:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d428:	6013      	str	r3, [r2, #0]
 800d42a:	2301      	movs	r3, #1
 800d42c:	6123      	str	r3, [r4, #16]
 800d42e:	f8c9 3000 	str.w	r3, [r9]
 800d432:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d434:	2762      	movs	r7, #98	; 0x62
 800d436:	601c      	str	r4, [r3, #0]
 800d438:	e723      	b.n	800d282 <__gethex+0x12a>
 800d43a:	1e71      	subs	r1, r6, #1
 800d43c:	4620      	mov	r0, r4
 800d43e:	f000 fe6b 	bl	800e118 <__any_on>
 800d442:	2800      	cmp	r0, #0
 800d444:	d1ed      	bne.n	800d422 <__gethex+0x2ca>
 800d446:	ee18 0a10 	vmov	r0, s16
 800d44a:	4621      	mov	r1, r4
 800d44c:	f000 fa0a 	bl	800d864 <_Bfree>
 800d450:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d452:	2300      	movs	r3, #0
 800d454:	6013      	str	r3, [r2, #0]
 800d456:	2750      	movs	r7, #80	; 0x50
 800d458:	e713      	b.n	800d282 <__gethex+0x12a>
 800d45a:	bf00      	nop
 800d45c:	08010640 	.word	0x08010640
 800d460:	080105c4 	.word	0x080105c4
 800d464:	080105d5 	.word	0x080105d5
 800d468:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d1eb      	bne.n	800d446 <__gethex+0x2ee>
 800d46e:	e7d8      	b.n	800d422 <__gethex+0x2ca>
 800d470:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d472:	2b00      	cmp	r3, #0
 800d474:	d1d5      	bne.n	800d422 <__gethex+0x2ca>
 800d476:	e7e6      	b.n	800d446 <__gethex+0x2ee>
 800d478:	1e6f      	subs	r7, r5, #1
 800d47a:	f1ba 0f00 	cmp.w	sl, #0
 800d47e:	d131      	bne.n	800d4e4 <__gethex+0x38c>
 800d480:	b127      	cbz	r7, 800d48c <__gethex+0x334>
 800d482:	4639      	mov	r1, r7
 800d484:	4620      	mov	r0, r4
 800d486:	f000 fe47 	bl	800e118 <__any_on>
 800d48a:	4682      	mov	sl, r0
 800d48c:	117b      	asrs	r3, r7, #5
 800d48e:	2101      	movs	r1, #1
 800d490:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d494:	f007 071f 	and.w	r7, r7, #31
 800d498:	fa01 f707 	lsl.w	r7, r1, r7
 800d49c:	421f      	tst	r7, r3
 800d49e:	4629      	mov	r1, r5
 800d4a0:	4620      	mov	r0, r4
 800d4a2:	bf18      	it	ne
 800d4a4:	f04a 0a02 	orrne.w	sl, sl, #2
 800d4a8:	1b76      	subs	r6, r6, r5
 800d4aa:	f7ff fded 	bl	800d088 <rshift>
 800d4ae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d4b2:	2702      	movs	r7, #2
 800d4b4:	f1ba 0f00 	cmp.w	sl, #0
 800d4b8:	d048      	beq.n	800d54c <__gethex+0x3f4>
 800d4ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d4be:	2b02      	cmp	r3, #2
 800d4c0:	d015      	beq.n	800d4ee <__gethex+0x396>
 800d4c2:	2b03      	cmp	r3, #3
 800d4c4:	d017      	beq.n	800d4f6 <__gethex+0x39e>
 800d4c6:	2b01      	cmp	r3, #1
 800d4c8:	d109      	bne.n	800d4de <__gethex+0x386>
 800d4ca:	f01a 0f02 	tst.w	sl, #2
 800d4ce:	d006      	beq.n	800d4de <__gethex+0x386>
 800d4d0:	f8d9 0000 	ldr.w	r0, [r9]
 800d4d4:	ea4a 0a00 	orr.w	sl, sl, r0
 800d4d8:	f01a 0f01 	tst.w	sl, #1
 800d4dc:	d10e      	bne.n	800d4fc <__gethex+0x3a4>
 800d4de:	f047 0710 	orr.w	r7, r7, #16
 800d4e2:	e033      	b.n	800d54c <__gethex+0x3f4>
 800d4e4:	f04f 0a01 	mov.w	sl, #1
 800d4e8:	e7d0      	b.n	800d48c <__gethex+0x334>
 800d4ea:	2701      	movs	r7, #1
 800d4ec:	e7e2      	b.n	800d4b4 <__gethex+0x35c>
 800d4ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d4f0:	f1c3 0301 	rsb	r3, r3, #1
 800d4f4:	9315      	str	r3, [sp, #84]	; 0x54
 800d4f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d0f0      	beq.n	800d4de <__gethex+0x386>
 800d4fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d500:	f104 0314 	add.w	r3, r4, #20
 800d504:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d508:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d50c:	f04f 0c00 	mov.w	ip, #0
 800d510:	4618      	mov	r0, r3
 800d512:	f853 2b04 	ldr.w	r2, [r3], #4
 800d516:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d51a:	d01c      	beq.n	800d556 <__gethex+0x3fe>
 800d51c:	3201      	adds	r2, #1
 800d51e:	6002      	str	r2, [r0, #0]
 800d520:	2f02      	cmp	r7, #2
 800d522:	f104 0314 	add.w	r3, r4, #20
 800d526:	d13f      	bne.n	800d5a8 <__gethex+0x450>
 800d528:	f8d8 2000 	ldr.w	r2, [r8]
 800d52c:	3a01      	subs	r2, #1
 800d52e:	42b2      	cmp	r2, r6
 800d530:	d10a      	bne.n	800d548 <__gethex+0x3f0>
 800d532:	1171      	asrs	r1, r6, #5
 800d534:	2201      	movs	r2, #1
 800d536:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d53a:	f006 061f 	and.w	r6, r6, #31
 800d53e:	fa02 f606 	lsl.w	r6, r2, r6
 800d542:	421e      	tst	r6, r3
 800d544:	bf18      	it	ne
 800d546:	4617      	movne	r7, r2
 800d548:	f047 0720 	orr.w	r7, r7, #32
 800d54c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d54e:	601c      	str	r4, [r3, #0]
 800d550:	9b04      	ldr	r3, [sp, #16]
 800d552:	601d      	str	r5, [r3, #0]
 800d554:	e695      	b.n	800d282 <__gethex+0x12a>
 800d556:	4299      	cmp	r1, r3
 800d558:	f843 cc04 	str.w	ip, [r3, #-4]
 800d55c:	d8d8      	bhi.n	800d510 <__gethex+0x3b8>
 800d55e:	68a3      	ldr	r3, [r4, #8]
 800d560:	459b      	cmp	fp, r3
 800d562:	db19      	blt.n	800d598 <__gethex+0x440>
 800d564:	6861      	ldr	r1, [r4, #4]
 800d566:	ee18 0a10 	vmov	r0, s16
 800d56a:	3101      	adds	r1, #1
 800d56c:	f000 f93a 	bl	800d7e4 <_Balloc>
 800d570:	4681      	mov	r9, r0
 800d572:	b918      	cbnz	r0, 800d57c <__gethex+0x424>
 800d574:	4b1a      	ldr	r3, [pc, #104]	; (800d5e0 <__gethex+0x488>)
 800d576:	4602      	mov	r2, r0
 800d578:	2184      	movs	r1, #132	; 0x84
 800d57a:	e6a8      	b.n	800d2ce <__gethex+0x176>
 800d57c:	6922      	ldr	r2, [r4, #16]
 800d57e:	3202      	adds	r2, #2
 800d580:	f104 010c 	add.w	r1, r4, #12
 800d584:	0092      	lsls	r2, r2, #2
 800d586:	300c      	adds	r0, #12
 800d588:	f000 f91e 	bl	800d7c8 <memcpy>
 800d58c:	4621      	mov	r1, r4
 800d58e:	ee18 0a10 	vmov	r0, s16
 800d592:	f000 f967 	bl	800d864 <_Bfree>
 800d596:	464c      	mov	r4, r9
 800d598:	6923      	ldr	r3, [r4, #16]
 800d59a:	1c5a      	adds	r2, r3, #1
 800d59c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d5a0:	6122      	str	r2, [r4, #16]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	615a      	str	r2, [r3, #20]
 800d5a6:	e7bb      	b.n	800d520 <__gethex+0x3c8>
 800d5a8:	6922      	ldr	r2, [r4, #16]
 800d5aa:	455a      	cmp	r2, fp
 800d5ac:	dd0b      	ble.n	800d5c6 <__gethex+0x46e>
 800d5ae:	2101      	movs	r1, #1
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	f7ff fd69 	bl	800d088 <rshift>
 800d5b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d5ba:	3501      	adds	r5, #1
 800d5bc:	42ab      	cmp	r3, r5
 800d5be:	f6ff aed0 	blt.w	800d362 <__gethex+0x20a>
 800d5c2:	2701      	movs	r7, #1
 800d5c4:	e7c0      	b.n	800d548 <__gethex+0x3f0>
 800d5c6:	f016 061f 	ands.w	r6, r6, #31
 800d5ca:	d0fa      	beq.n	800d5c2 <__gethex+0x46a>
 800d5cc:	449a      	add	sl, r3
 800d5ce:	f1c6 0620 	rsb	r6, r6, #32
 800d5d2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d5d6:	f000 f9fb 	bl	800d9d0 <__hi0bits>
 800d5da:	42b0      	cmp	r0, r6
 800d5dc:	dbe7      	blt.n	800d5ae <__gethex+0x456>
 800d5de:	e7f0      	b.n	800d5c2 <__gethex+0x46a>
 800d5e0:	080105c4 	.word	0x080105c4

0800d5e4 <L_shift>:
 800d5e4:	f1c2 0208 	rsb	r2, r2, #8
 800d5e8:	0092      	lsls	r2, r2, #2
 800d5ea:	b570      	push	{r4, r5, r6, lr}
 800d5ec:	f1c2 0620 	rsb	r6, r2, #32
 800d5f0:	6843      	ldr	r3, [r0, #4]
 800d5f2:	6804      	ldr	r4, [r0, #0]
 800d5f4:	fa03 f506 	lsl.w	r5, r3, r6
 800d5f8:	432c      	orrs	r4, r5
 800d5fa:	40d3      	lsrs	r3, r2
 800d5fc:	6004      	str	r4, [r0, #0]
 800d5fe:	f840 3f04 	str.w	r3, [r0, #4]!
 800d602:	4288      	cmp	r0, r1
 800d604:	d3f4      	bcc.n	800d5f0 <L_shift+0xc>
 800d606:	bd70      	pop	{r4, r5, r6, pc}

0800d608 <__match>:
 800d608:	b530      	push	{r4, r5, lr}
 800d60a:	6803      	ldr	r3, [r0, #0]
 800d60c:	3301      	adds	r3, #1
 800d60e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d612:	b914      	cbnz	r4, 800d61a <__match+0x12>
 800d614:	6003      	str	r3, [r0, #0]
 800d616:	2001      	movs	r0, #1
 800d618:	bd30      	pop	{r4, r5, pc}
 800d61a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d61e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d622:	2d19      	cmp	r5, #25
 800d624:	bf98      	it	ls
 800d626:	3220      	addls	r2, #32
 800d628:	42a2      	cmp	r2, r4
 800d62a:	d0f0      	beq.n	800d60e <__match+0x6>
 800d62c:	2000      	movs	r0, #0
 800d62e:	e7f3      	b.n	800d618 <__match+0x10>

0800d630 <__hexnan>:
 800d630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d634:	680b      	ldr	r3, [r1, #0]
 800d636:	6801      	ldr	r1, [r0, #0]
 800d638:	115e      	asrs	r6, r3, #5
 800d63a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d63e:	f013 031f 	ands.w	r3, r3, #31
 800d642:	b087      	sub	sp, #28
 800d644:	bf18      	it	ne
 800d646:	3604      	addne	r6, #4
 800d648:	2500      	movs	r5, #0
 800d64a:	1f37      	subs	r7, r6, #4
 800d64c:	4682      	mov	sl, r0
 800d64e:	4690      	mov	r8, r2
 800d650:	9301      	str	r3, [sp, #4]
 800d652:	f846 5c04 	str.w	r5, [r6, #-4]
 800d656:	46b9      	mov	r9, r7
 800d658:	463c      	mov	r4, r7
 800d65a:	9502      	str	r5, [sp, #8]
 800d65c:	46ab      	mov	fp, r5
 800d65e:	784a      	ldrb	r2, [r1, #1]
 800d660:	1c4b      	adds	r3, r1, #1
 800d662:	9303      	str	r3, [sp, #12]
 800d664:	b342      	cbz	r2, 800d6b8 <__hexnan+0x88>
 800d666:	4610      	mov	r0, r2
 800d668:	9105      	str	r1, [sp, #20]
 800d66a:	9204      	str	r2, [sp, #16]
 800d66c:	f7ff fd5e 	bl	800d12c <__hexdig_fun>
 800d670:	2800      	cmp	r0, #0
 800d672:	d14f      	bne.n	800d714 <__hexnan+0xe4>
 800d674:	9a04      	ldr	r2, [sp, #16]
 800d676:	9905      	ldr	r1, [sp, #20]
 800d678:	2a20      	cmp	r2, #32
 800d67a:	d818      	bhi.n	800d6ae <__hexnan+0x7e>
 800d67c:	9b02      	ldr	r3, [sp, #8]
 800d67e:	459b      	cmp	fp, r3
 800d680:	dd13      	ble.n	800d6aa <__hexnan+0x7a>
 800d682:	454c      	cmp	r4, r9
 800d684:	d206      	bcs.n	800d694 <__hexnan+0x64>
 800d686:	2d07      	cmp	r5, #7
 800d688:	dc04      	bgt.n	800d694 <__hexnan+0x64>
 800d68a:	462a      	mov	r2, r5
 800d68c:	4649      	mov	r1, r9
 800d68e:	4620      	mov	r0, r4
 800d690:	f7ff ffa8 	bl	800d5e4 <L_shift>
 800d694:	4544      	cmp	r4, r8
 800d696:	d950      	bls.n	800d73a <__hexnan+0x10a>
 800d698:	2300      	movs	r3, #0
 800d69a:	f1a4 0904 	sub.w	r9, r4, #4
 800d69e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d6a2:	f8cd b008 	str.w	fp, [sp, #8]
 800d6a6:	464c      	mov	r4, r9
 800d6a8:	461d      	mov	r5, r3
 800d6aa:	9903      	ldr	r1, [sp, #12]
 800d6ac:	e7d7      	b.n	800d65e <__hexnan+0x2e>
 800d6ae:	2a29      	cmp	r2, #41	; 0x29
 800d6b0:	d156      	bne.n	800d760 <__hexnan+0x130>
 800d6b2:	3102      	adds	r1, #2
 800d6b4:	f8ca 1000 	str.w	r1, [sl]
 800d6b8:	f1bb 0f00 	cmp.w	fp, #0
 800d6bc:	d050      	beq.n	800d760 <__hexnan+0x130>
 800d6be:	454c      	cmp	r4, r9
 800d6c0:	d206      	bcs.n	800d6d0 <__hexnan+0xa0>
 800d6c2:	2d07      	cmp	r5, #7
 800d6c4:	dc04      	bgt.n	800d6d0 <__hexnan+0xa0>
 800d6c6:	462a      	mov	r2, r5
 800d6c8:	4649      	mov	r1, r9
 800d6ca:	4620      	mov	r0, r4
 800d6cc:	f7ff ff8a 	bl	800d5e4 <L_shift>
 800d6d0:	4544      	cmp	r4, r8
 800d6d2:	d934      	bls.n	800d73e <__hexnan+0x10e>
 800d6d4:	f1a8 0204 	sub.w	r2, r8, #4
 800d6d8:	4623      	mov	r3, r4
 800d6da:	f853 1b04 	ldr.w	r1, [r3], #4
 800d6de:	f842 1f04 	str.w	r1, [r2, #4]!
 800d6e2:	429f      	cmp	r7, r3
 800d6e4:	d2f9      	bcs.n	800d6da <__hexnan+0xaa>
 800d6e6:	1b3b      	subs	r3, r7, r4
 800d6e8:	f023 0303 	bic.w	r3, r3, #3
 800d6ec:	3304      	adds	r3, #4
 800d6ee:	3401      	adds	r4, #1
 800d6f0:	3e03      	subs	r6, #3
 800d6f2:	42b4      	cmp	r4, r6
 800d6f4:	bf88      	it	hi
 800d6f6:	2304      	movhi	r3, #4
 800d6f8:	4443      	add	r3, r8
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	f843 2b04 	str.w	r2, [r3], #4
 800d700:	429f      	cmp	r7, r3
 800d702:	d2fb      	bcs.n	800d6fc <__hexnan+0xcc>
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	b91b      	cbnz	r3, 800d710 <__hexnan+0xe0>
 800d708:	4547      	cmp	r7, r8
 800d70a:	d127      	bne.n	800d75c <__hexnan+0x12c>
 800d70c:	2301      	movs	r3, #1
 800d70e:	603b      	str	r3, [r7, #0]
 800d710:	2005      	movs	r0, #5
 800d712:	e026      	b.n	800d762 <__hexnan+0x132>
 800d714:	3501      	adds	r5, #1
 800d716:	2d08      	cmp	r5, #8
 800d718:	f10b 0b01 	add.w	fp, fp, #1
 800d71c:	dd06      	ble.n	800d72c <__hexnan+0xfc>
 800d71e:	4544      	cmp	r4, r8
 800d720:	d9c3      	bls.n	800d6aa <__hexnan+0x7a>
 800d722:	2300      	movs	r3, #0
 800d724:	f844 3c04 	str.w	r3, [r4, #-4]
 800d728:	2501      	movs	r5, #1
 800d72a:	3c04      	subs	r4, #4
 800d72c:	6822      	ldr	r2, [r4, #0]
 800d72e:	f000 000f 	and.w	r0, r0, #15
 800d732:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d736:	6022      	str	r2, [r4, #0]
 800d738:	e7b7      	b.n	800d6aa <__hexnan+0x7a>
 800d73a:	2508      	movs	r5, #8
 800d73c:	e7b5      	b.n	800d6aa <__hexnan+0x7a>
 800d73e:	9b01      	ldr	r3, [sp, #4]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d0df      	beq.n	800d704 <__hexnan+0xd4>
 800d744:	f04f 32ff 	mov.w	r2, #4294967295
 800d748:	f1c3 0320 	rsb	r3, r3, #32
 800d74c:	fa22 f303 	lsr.w	r3, r2, r3
 800d750:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d754:	401a      	ands	r2, r3
 800d756:	f846 2c04 	str.w	r2, [r6, #-4]
 800d75a:	e7d3      	b.n	800d704 <__hexnan+0xd4>
 800d75c:	3f04      	subs	r7, #4
 800d75e:	e7d1      	b.n	800d704 <__hexnan+0xd4>
 800d760:	2004      	movs	r0, #4
 800d762:	b007      	add	sp, #28
 800d764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d768 <_localeconv_r>:
 800d768:	4800      	ldr	r0, [pc, #0]	; (800d76c <_localeconv_r+0x4>)
 800d76a:	4770      	bx	lr
 800d76c:	2000017c 	.word	0x2000017c

0800d770 <_lseek_r>:
 800d770:	b538      	push	{r3, r4, r5, lr}
 800d772:	4d07      	ldr	r5, [pc, #28]	; (800d790 <_lseek_r+0x20>)
 800d774:	4604      	mov	r4, r0
 800d776:	4608      	mov	r0, r1
 800d778:	4611      	mov	r1, r2
 800d77a:	2200      	movs	r2, #0
 800d77c:	602a      	str	r2, [r5, #0]
 800d77e:	461a      	mov	r2, r3
 800d780:	f7f5 ff28 	bl	80035d4 <_lseek>
 800d784:	1c43      	adds	r3, r0, #1
 800d786:	d102      	bne.n	800d78e <_lseek_r+0x1e>
 800d788:	682b      	ldr	r3, [r5, #0]
 800d78a:	b103      	cbz	r3, 800d78e <_lseek_r+0x1e>
 800d78c:	6023      	str	r3, [r4, #0]
 800d78e:	bd38      	pop	{r3, r4, r5, pc}
 800d790:	20001140 	.word	0x20001140

0800d794 <malloc>:
 800d794:	4b02      	ldr	r3, [pc, #8]	; (800d7a0 <malloc+0xc>)
 800d796:	4601      	mov	r1, r0
 800d798:	6818      	ldr	r0, [r3, #0]
 800d79a:	f000 bd3d 	b.w	800e218 <_malloc_r>
 800d79e:	bf00      	nop
 800d7a0:	20000024 	.word	0x20000024

0800d7a4 <__ascii_mbtowc>:
 800d7a4:	b082      	sub	sp, #8
 800d7a6:	b901      	cbnz	r1, 800d7aa <__ascii_mbtowc+0x6>
 800d7a8:	a901      	add	r1, sp, #4
 800d7aa:	b142      	cbz	r2, 800d7be <__ascii_mbtowc+0x1a>
 800d7ac:	b14b      	cbz	r3, 800d7c2 <__ascii_mbtowc+0x1e>
 800d7ae:	7813      	ldrb	r3, [r2, #0]
 800d7b0:	600b      	str	r3, [r1, #0]
 800d7b2:	7812      	ldrb	r2, [r2, #0]
 800d7b4:	1e10      	subs	r0, r2, #0
 800d7b6:	bf18      	it	ne
 800d7b8:	2001      	movne	r0, #1
 800d7ba:	b002      	add	sp, #8
 800d7bc:	4770      	bx	lr
 800d7be:	4610      	mov	r0, r2
 800d7c0:	e7fb      	b.n	800d7ba <__ascii_mbtowc+0x16>
 800d7c2:	f06f 0001 	mvn.w	r0, #1
 800d7c6:	e7f8      	b.n	800d7ba <__ascii_mbtowc+0x16>

0800d7c8 <memcpy>:
 800d7c8:	440a      	add	r2, r1
 800d7ca:	4291      	cmp	r1, r2
 800d7cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d7d0:	d100      	bne.n	800d7d4 <memcpy+0xc>
 800d7d2:	4770      	bx	lr
 800d7d4:	b510      	push	{r4, lr}
 800d7d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7de:	4291      	cmp	r1, r2
 800d7e0:	d1f9      	bne.n	800d7d6 <memcpy+0xe>
 800d7e2:	bd10      	pop	{r4, pc}

0800d7e4 <_Balloc>:
 800d7e4:	b570      	push	{r4, r5, r6, lr}
 800d7e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d7e8:	4604      	mov	r4, r0
 800d7ea:	460d      	mov	r5, r1
 800d7ec:	b976      	cbnz	r6, 800d80c <_Balloc+0x28>
 800d7ee:	2010      	movs	r0, #16
 800d7f0:	f7ff ffd0 	bl	800d794 <malloc>
 800d7f4:	4602      	mov	r2, r0
 800d7f6:	6260      	str	r0, [r4, #36]	; 0x24
 800d7f8:	b920      	cbnz	r0, 800d804 <_Balloc+0x20>
 800d7fa:	4b18      	ldr	r3, [pc, #96]	; (800d85c <_Balloc+0x78>)
 800d7fc:	4818      	ldr	r0, [pc, #96]	; (800d860 <_Balloc+0x7c>)
 800d7fe:	2166      	movs	r1, #102	; 0x66
 800d800:	f001 fb1c 	bl	800ee3c <__assert_func>
 800d804:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d808:	6006      	str	r6, [r0, #0]
 800d80a:	60c6      	str	r6, [r0, #12]
 800d80c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d80e:	68f3      	ldr	r3, [r6, #12]
 800d810:	b183      	cbz	r3, 800d834 <_Balloc+0x50>
 800d812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d814:	68db      	ldr	r3, [r3, #12]
 800d816:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d81a:	b9b8      	cbnz	r0, 800d84c <_Balloc+0x68>
 800d81c:	2101      	movs	r1, #1
 800d81e:	fa01 f605 	lsl.w	r6, r1, r5
 800d822:	1d72      	adds	r2, r6, #5
 800d824:	0092      	lsls	r2, r2, #2
 800d826:	4620      	mov	r0, r4
 800d828:	f000 fc97 	bl	800e15a <_calloc_r>
 800d82c:	b160      	cbz	r0, 800d848 <_Balloc+0x64>
 800d82e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d832:	e00e      	b.n	800d852 <_Balloc+0x6e>
 800d834:	2221      	movs	r2, #33	; 0x21
 800d836:	2104      	movs	r1, #4
 800d838:	4620      	mov	r0, r4
 800d83a:	f000 fc8e 	bl	800e15a <_calloc_r>
 800d83e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d840:	60f0      	str	r0, [r6, #12]
 800d842:	68db      	ldr	r3, [r3, #12]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d1e4      	bne.n	800d812 <_Balloc+0x2e>
 800d848:	2000      	movs	r0, #0
 800d84a:	bd70      	pop	{r4, r5, r6, pc}
 800d84c:	6802      	ldr	r2, [r0, #0]
 800d84e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d852:	2300      	movs	r3, #0
 800d854:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d858:	e7f7      	b.n	800d84a <_Balloc+0x66>
 800d85a:	bf00      	nop
 800d85c:	0801054e 	.word	0x0801054e
 800d860:	08010654 	.word	0x08010654

0800d864 <_Bfree>:
 800d864:	b570      	push	{r4, r5, r6, lr}
 800d866:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d868:	4605      	mov	r5, r0
 800d86a:	460c      	mov	r4, r1
 800d86c:	b976      	cbnz	r6, 800d88c <_Bfree+0x28>
 800d86e:	2010      	movs	r0, #16
 800d870:	f7ff ff90 	bl	800d794 <malloc>
 800d874:	4602      	mov	r2, r0
 800d876:	6268      	str	r0, [r5, #36]	; 0x24
 800d878:	b920      	cbnz	r0, 800d884 <_Bfree+0x20>
 800d87a:	4b09      	ldr	r3, [pc, #36]	; (800d8a0 <_Bfree+0x3c>)
 800d87c:	4809      	ldr	r0, [pc, #36]	; (800d8a4 <_Bfree+0x40>)
 800d87e:	218a      	movs	r1, #138	; 0x8a
 800d880:	f001 fadc 	bl	800ee3c <__assert_func>
 800d884:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d888:	6006      	str	r6, [r0, #0]
 800d88a:	60c6      	str	r6, [r0, #12]
 800d88c:	b13c      	cbz	r4, 800d89e <_Bfree+0x3a>
 800d88e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d890:	6862      	ldr	r2, [r4, #4]
 800d892:	68db      	ldr	r3, [r3, #12]
 800d894:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d898:	6021      	str	r1, [r4, #0]
 800d89a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d89e:	bd70      	pop	{r4, r5, r6, pc}
 800d8a0:	0801054e 	.word	0x0801054e
 800d8a4:	08010654 	.word	0x08010654

0800d8a8 <__multadd>:
 800d8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ac:	690e      	ldr	r6, [r1, #16]
 800d8ae:	4607      	mov	r7, r0
 800d8b0:	4698      	mov	r8, r3
 800d8b2:	460c      	mov	r4, r1
 800d8b4:	f101 0014 	add.w	r0, r1, #20
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	6805      	ldr	r5, [r0, #0]
 800d8bc:	b2a9      	uxth	r1, r5
 800d8be:	fb02 8101 	mla	r1, r2, r1, r8
 800d8c2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d8c6:	0c2d      	lsrs	r5, r5, #16
 800d8c8:	fb02 c505 	mla	r5, r2, r5, ip
 800d8cc:	b289      	uxth	r1, r1
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d8d4:	429e      	cmp	r6, r3
 800d8d6:	f840 1b04 	str.w	r1, [r0], #4
 800d8da:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d8de:	dcec      	bgt.n	800d8ba <__multadd+0x12>
 800d8e0:	f1b8 0f00 	cmp.w	r8, #0
 800d8e4:	d022      	beq.n	800d92c <__multadd+0x84>
 800d8e6:	68a3      	ldr	r3, [r4, #8]
 800d8e8:	42b3      	cmp	r3, r6
 800d8ea:	dc19      	bgt.n	800d920 <__multadd+0x78>
 800d8ec:	6861      	ldr	r1, [r4, #4]
 800d8ee:	4638      	mov	r0, r7
 800d8f0:	3101      	adds	r1, #1
 800d8f2:	f7ff ff77 	bl	800d7e4 <_Balloc>
 800d8f6:	4605      	mov	r5, r0
 800d8f8:	b928      	cbnz	r0, 800d906 <__multadd+0x5e>
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	4b0d      	ldr	r3, [pc, #52]	; (800d934 <__multadd+0x8c>)
 800d8fe:	480e      	ldr	r0, [pc, #56]	; (800d938 <__multadd+0x90>)
 800d900:	21b5      	movs	r1, #181	; 0xb5
 800d902:	f001 fa9b 	bl	800ee3c <__assert_func>
 800d906:	6922      	ldr	r2, [r4, #16]
 800d908:	3202      	adds	r2, #2
 800d90a:	f104 010c 	add.w	r1, r4, #12
 800d90e:	0092      	lsls	r2, r2, #2
 800d910:	300c      	adds	r0, #12
 800d912:	f7ff ff59 	bl	800d7c8 <memcpy>
 800d916:	4621      	mov	r1, r4
 800d918:	4638      	mov	r0, r7
 800d91a:	f7ff ffa3 	bl	800d864 <_Bfree>
 800d91e:	462c      	mov	r4, r5
 800d920:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d924:	3601      	adds	r6, #1
 800d926:	f8c3 8014 	str.w	r8, [r3, #20]
 800d92a:	6126      	str	r6, [r4, #16]
 800d92c:	4620      	mov	r0, r4
 800d92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d932:	bf00      	nop
 800d934:	080105c4 	.word	0x080105c4
 800d938:	08010654 	.word	0x08010654

0800d93c <__s2b>:
 800d93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d940:	460c      	mov	r4, r1
 800d942:	4615      	mov	r5, r2
 800d944:	461f      	mov	r7, r3
 800d946:	2209      	movs	r2, #9
 800d948:	3308      	adds	r3, #8
 800d94a:	4606      	mov	r6, r0
 800d94c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d950:	2100      	movs	r1, #0
 800d952:	2201      	movs	r2, #1
 800d954:	429a      	cmp	r2, r3
 800d956:	db09      	blt.n	800d96c <__s2b+0x30>
 800d958:	4630      	mov	r0, r6
 800d95a:	f7ff ff43 	bl	800d7e4 <_Balloc>
 800d95e:	b940      	cbnz	r0, 800d972 <__s2b+0x36>
 800d960:	4602      	mov	r2, r0
 800d962:	4b19      	ldr	r3, [pc, #100]	; (800d9c8 <__s2b+0x8c>)
 800d964:	4819      	ldr	r0, [pc, #100]	; (800d9cc <__s2b+0x90>)
 800d966:	21ce      	movs	r1, #206	; 0xce
 800d968:	f001 fa68 	bl	800ee3c <__assert_func>
 800d96c:	0052      	lsls	r2, r2, #1
 800d96e:	3101      	adds	r1, #1
 800d970:	e7f0      	b.n	800d954 <__s2b+0x18>
 800d972:	9b08      	ldr	r3, [sp, #32]
 800d974:	6143      	str	r3, [r0, #20]
 800d976:	2d09      	cmp	r5, #9
 800d978:	f04f 0301 	mov.w	r3, #1
 800d97c:	6103      	str	r3, [r0, #16]
 800d97e:	dd16      	ble.n	800d9ae <__s2b+0x72>
 800d980:	f104 0909 	add.w	r9, r4, #9
 800d984:	46c8      	mov	r8, r9
 800d986:	442c      	add	r4, r5
 800d988:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d98c:	4601      	mov	r1, r0
 800d98e:	3b30      	subs	r3, #48	; 0x30
 800d990:	220a      	movs	r2, #10
 800d992:	4630      	mov	r0, r6
 800d994:	f7ff ff88 	bl	800d8a8 <__multadd>
 800d998:	45a0      	cmp	r8, r4
 800d99a:	d1f5      	bne.n	800d988 <__s2b+0x4c>
 800d99c:	f1a5 0408 	sub.w	r4, r5, #8
 800d9a0:	444c      	add	r4, r9
 800d9a2:	1b2d      	subs	r5, r5, r4
 800d9a4:	1963      	adds	r3, r4, r5
 800d9a6:	42bb      	cmp	r3, r7
 800d9a8:	db04      	blt.n	800d9b4 <__s2b+0x78>
 800d9aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9ae:	340a      	adds	r4, #10
 800d9b0:	2509      	movs	r5, #9
 800d9b2:	e7f6      	b.n	800d9a2 <__s2b+0x66>
 800d9b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d9b8:	4601      	mov	r1, r0
 800d9ba:	3b30      	subs	r3, #48	; 0x30
 800d9bc:	220a      	movs	r2, #10
 800d9be:	4630      	mov	r0, r6
 800d9c0:	f7ff ff72 	bl	800d8a8 <__multadd>
 800d9c4:	e7ee      	b.n	800d9a4 <__s2b+0x68>
 800d9c6:	bf00      	nop
 800d9c8:	080105c4 	.word	0x080105c4
 800d9cc:	08010654 	.word	0x08010654

0800d9d0 <__hi0bits>:
 800d9d0:	0c03      	lsrs	r3, r0, #16
 800d9d2:	041b      	lsls	r3, r3, #16
 800d9d4:	b9d3      	cbnz	r3, 800da0c <__hi0bits+0x3c>
 800d9d6:	0400      	lsls	r0, r0, #16
 800d9d8:	2310      	movs	r3, #16
 800d9da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d9de:	bf04      	itt	eq
 800d9e0:	0200      	lsleq	r0, r0, #8
 800d9e2:	3308      	addeq	r3, #8
 800d9e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d9e8:	bf04      	itt	eq
 800d9ea:	0100      	lsleq	r0, r0, #4
 800d9ec:	3304      	addeq	r3, #4
 800d9ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d9f2:	bf04      	itt	eq
 800d9f4:	0080      	lsleq	r0, r0, #2
 800d9f6:	3302      	addeq	r3, #2
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	db05      	blt.n	800da08 <__hi0bits+0x38>
 800d9fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800da00:	f103 0301 	add.w	r3, r3, #1
 800da04:	bf08      	it	eq
 800da06:	2320      	moveq	r3, #32
 800da08:	4618      	mov	r0, r3
 800da0a:	4770      	bx	lr
 800da0c:	2300      	movs	r3, #0
 800da0e:	e7e4      	b.n	800d9da <__hi0bits+0xa>

0800da10 <__lo0bits>:
 800da10:	6803      	ldr	r3, [r0, #0]
 800da12:	f013 0207 	ands.w	r2, r3, #7
 800da16:	4601      	mov	r1, r0
 800da18:	d00b      	beq.n	800da32 <__lo0bits+0x22>
 800da1a:	07da      	lsls	r2, r3, #31
 800da1c:	d424      	bmi.n	800da68 <__lo0bits+0x58>
 800da1e:	0798      	lsls	r0, r3, #30
 800da20:	bf49      	itett	mi
 800da22:	085b      	lsrmi	r3, r3, #1
 800da24:	089b      	lsrpl	r3, r3, #2
 800da26:	2001      	movmi	r0, #1
 800da28:	600b      	strmi	r3, [r1, #0]
 800da2a:	bf5c      	itt	pl
 800da2c:	600b      	strpl	r3, [r1, #0]
 800da2e:	2002      	movpl	r0, #2
 800da30:	4770      	bx	lr
 800da32:	b298      	uxth	r0, r3
 800da34:	b9b0      	cbnz	r0, 800da64 <__lo0bits+0x54>
 800da36:	0c1b      	lsrs	r3, r3, #16
 800da38:	2010      	movs	r0, #16
 800da3a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800da3e:	bf04      	itt	eq
 800da40:	0a1b      	lsreq	r3, r3, #8
 800da42:	3008      	addeq	r0, #8
 800da44:	071a      	lsls	r2, r3, #28
 800da46:	bf04      	itt	eq
 800da48:	091b      	lsreq	r3, r3, #4
 800da4a:	3004      	addeq	r0, #4
 800da4c:	079a      	lsls	r2, r3, #30
 800da4e:	bf04      	itt	eq
 800da50:	089b      	lsreq	r3, r3, #2
 800da52:	3002      	addeq	r0, #2
 800da54:	07da      	lsls	r2, r3, #31
 800da56:	d403      	bmi.n	800da60 <__lo0bits+0x50>
 800da58:	085b      	lsrs	r3, r3, #1
 800da5a:	f100 0001 	add.w	r0, r0, #1
 800da5e:	d005      	beq.n	800da6c <__lo0bits+0x5c>
 800da60:	600b      	str	r3, [r1, #0]
 800da62:	4770      	bx	lr
 800da64:	4610      	mov	r0, r2
 800da66:	e7e8      	b.n	800da3a <__lo0bits+0x2a>
 800da68:	2000      	movs	r0, #0
 800da6a:	4770      	bx	lr
 800da6c:	2020      	movs	r0, #32
 800da6e:	4770      	bx	lr

0800da70 <__i2b>:
 800da70:	b510      	push	{r4, lr}
 800da72:	460c      	mov	r4, r1
 800da74:	2101      	movs	r1, #1
 800da76:	f7ff feb5 	bl	800d7e4 <_Balloc>
 800da7a:	4602      	mov	r2, r0
 800da7c:	b928      	cbnz	r0, 800da8a <__i2b+0x1a>
 800da7e:	4b05      	ldr	r3, [pc, #20]	; (800da94 <__i2b+0x24>)
 800da80:	4805      	ldr	r0, [pc, #20]	; (800da98 <__i2b+0x28>)
 800da82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800da86:	f001 f9d9 	bl	800ee3c <__assert_func>
 800da8a:	2301      	movs	r3, #1
 800da8c:	6144      	str	r4, [r0, #20]
 800da8e:	6103      	str	r3, [r0, #16]
 800da90:	bd10      	pop	{r4, pc}
 800da92:	bf00      	nop
 800da94:	080105c4 	.word	0x080105c4
 800da98:	08010654 	.word	0x08010654

0800da9c <__multiply>:
 800da9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa0:	4614      	mov	r4, r2
 800daa2:	690a      	ldr	r2, [r1, #16]
 800daa4:	6923      	ldr	r3, [r4, #16]
 800daa6:	429a      	cmp	r2, r3
 800daa8:	bfb8      	it	lt
 800daaa:	460b      	movlt	r3, r1
 800daac:	460d      	mov	r5, r1
 800daae:	bfbc      	itt	lt
 800dab0:	4625      	movlt	r5, r4
 800dab2:	461c      	movlt	r4, r3
 800dab4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800dab8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dabc:	68ab      	ldr	r3, [r5, #8]
 800dabe:	6869      	ldr	r1, [r5, #4]
 800dac0:	eb0a 0709 	add.w	r7, sl, r9
 800dac4:	42bb      	cmp	r3, r7
 800dac6:	b085      	sub	sp, #20
 800dac8:	bfb8      	it	lt
 800daca:	3101      	addlt	r1, #1
 800dacc:	f7ff fe8a 	bl	800d7e4 <_Balloc>
 800dad0:	b930      	cbnz	r0, 800dae0 <__multiply+0x44>
 800dad2:	4602      	mov	r2, r0
 800dad4:	4b42      	ldr	r3, [pc, #264]	; (800dbe0 <__multiply+0x144>)
 800dad6:	4843      	ldr	r0, [pc, #268]	; (800dbe4 <__multiply+0x148>)
 800dad8:	f240 115d 	movw	r1, #349	; 0x15d
 800dadc:	f001 f9ae 	bl	800ee3c <__assert_func>
 800dae0:	f100 0614 	add.w	r6, r0, #20
 800dae4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800dae8:	4633      	mov	r3, r6
 800daea:	2200      	movs	r2, #0
 800daec:	4543      	cmp	r3, r8
 800daee:	d31e      	bcc.n	800db2e <__multiply+0x92>
 800daf0:	f105 0c14 	add.w	ip, r5, #20
 800daf4:	f104 0314 	add.w	r3, r4, #20
 800daf8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800dafc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800db00:	9202      	str	r2, [sp, #8]
 800db02:	ebac 0205 	sub.w	r2, ip, r5
 800db06:	3a15      	subs	r2, #21
 800db08:	f022 0203 	bic.w	r2, r2, #3
 800db0c:	3204      	adds	r2, #4
 800db0e:	f105 0115 	add.w	r1, r5, #21
 800db12:	458c      	cmp	ip, r1
 800db14:	bf38      	it	cc
 800db16:	2204      	movcc	r2, #4
 800db18:	9201      	str	r2, [sp, #4]
 800db1a:	9a02      	ldr	r2, [sp, #8]
 800db1c:	9303      	str	r3, [sp, #12]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d808      	bhi.n	800db34 <__multiply+0x98>
 800db22:	2f00      	cmp	r7, #0
 800db24:	dc55      	bgt.n	800dbd2 <__multiply+0x136>
 800db26:	6107      	str	r7, [r0, #16]
 800db28:	b005      	add	sp, #20
 800db2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db2e:	f843 2b04 	str.w	r2, [r3], #4
 800db32:	e7db      	b.n	800daec <__multiply+0x50>
 800db34:	f8b3 a000 	ldrh.w	sl, [r3]
 800db38:	f1ba 0f00 	cmp.w	sl, #0
 800db3c:	d020      	beq.n	800db80 <__multiply+0xe4>
 800db3e:	f105 0e14 	add.w	lr, r5, #20
 800db42:	46b1      	mov	r9, r6
 800db44:	2200      	movs	r2, #0
 800db46:	f85e 4b04 	ldr.w	r4, [lr], #4
 800db4a:	f8d9 b000 	ldr.w	fp, [r9]
 800db4e:	b2a1      	uxth	r1, r4
 800db50:	fa1f fb8b 	uxth.w	fp, fp
 800db54:	fb0a b101 	mla	r1, sl, r1, fp
 800db58:	4411      	add	r1, r2
 800db5a:	f8d9 2000 	ldr.w	r2, [r9]
 800db5e:	0c24      	lsrs	r4, r4, #16
 800db60:	0c12      	lsrs	r2, r2, #16
 800db62:	fb0a 2404 	mla	r4, sl, r4, r2
 800db66:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800db6a:	b289      	uxth	r1, r1
 800db6c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800db70:	45f4      	cmp	ip, lr
 800db72:	f849 1b04 	str.w	r1, [r9], #4
 800db76:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800db7a:	d8e4      	bhi.n	800db46 <__multiply+0xaa>
 800db7c:	9901      	ldr	r1, [sp, #4]
 800db7e:	5072      	str	r2, [r6, r1]
 800db80:	9a03      	ldr	r2, [sp, #12]
 800db82:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800db86:	3304      	adds	r3, #4
 800db88:	f1b9 0f00 	cmp.w	r9, #0
 800db8c:	d01f      	beq.n	800dbce <__multiply+0x132>
 800db8e:	6834      	ldr	r4, [r6, #0]
 800db90:	f105 0114 	add.w	r1, r5, #20
 800db94:	46b6      	mov	lr, r6
 800db96:	f04f 0a00 	mov.w	sl, #0
 800db9a:	880a      	ldrh	r2, [r1, #0]
 800db9c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800dba0:	fb09 b202 	mla	r2, r9, r2, fp
 800dba4:	4492      	add	sl, r2
 800dba6:	b2a4      	uxth	r4, r4
 800dba8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800dbac:	f84e 4b04 	str.w	r4, [lr], #4
 800dbb0:	f851 4b04 	ldr.w	r4, [r1], #4
 800dbb4:	f8be 2000 	ldrh.w	r2, [lr]
 800dbb8:	0c24      	lsrs	r4, r4, #16
 800dbba:	fb09 2404 	mla	r4, r9, r4, r2
 800dbbe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800dbc2:	458c      	cmp	ip, r1
 800dbc4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800dbc8:	d8e7      	bhi.n	800db9a <__multiply+0xfe>
 800dbca:	9a01      	ldr	r2, [sp, #4]
 800dbcc:	50b4      	str	r4, [r6, r2]
 800dbce:	3604      	adds	r6, #4
 800dbd0:	e7a3      	b.n	800db1a <__multiply+0x7e>
 800dbd2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d1a5      	bne.n	800db26 <__multiply+0x8a>
 800dbda:	3f01      	subs	r7, #1
 800dbdc:	e7a1      	b.n	800db22 <__multiply+0x86>
 800dbde:	bf00      	nop
 800dbe0:	080105c4 	.word	0x080105c4
 800dbe4:	08010654 	.word	0x08010654

0800dbe8 <__pow5mult>:
 800dbe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbec:	4615      	mov	r5, r2
 800dbee:	f012 0203 	ands.w	r2, r2, #3
 800dbf2:	4606      	mov	r6, r0
 800dbf4:	460f      	mov	r7, r1
 800dbf6:	d007      	beq.n	800dc08 <__pow5mult+0x20>
 800dbf8:	4c25      	ldr	r4, [pc, #148]	; (800dc90 <__pow5mult+0xa8>)
 800dbfa:	3a01      	subs	r2, #1
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dc02:	f7ff fe51 	bl	800d8a8 <__multadd>
 800dc06:	4607      	mov	r7, r0
 800dc08:	10ad      	asrs	r5, r5, #2
 800dc0a:	d03d      	beq.n	800dc88 <__pow5mult+0xa0>
 800dc0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dc0e:	b97c      	cbnz	r4, 800dc30 <__pow5mult+0x48>
 800dc10:	2010      	movs	r0, #16
 800dc12:	f7ff fdbf 	bl	800d794 <malloc>
 800dc16:	4602      	mov	r2, r0
 800dc18:	6270      	str	r0, [r6, #36]	; 0x24
 800dc1a:	b928      	cbnz	r0, 800dc28 <__pow5mult+0x40>
 800dc1c:	4b1d      	ldr	r3, [pc, #116]	; (800dc94 <__pow5mult+0xac>)
 800dc1e:	481e      	ldr	r0, [pc, #120]	; (800dc98 <__pow5mult+0xb0>)
 800dc20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dc24:	f001 f90a 	bl	800ee3c <__assert_func>
 800dc28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dc2c:	6004      	str	r4, [r0, #0]
 800dc2e:	60c4      	str	r4, [r0, #12]
 800dc30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dc34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dc38:	b94c      	cbnz	r4, 800dc4e <__pow5mult+0x66>
 800dc3a:	f240 2171 	movw	r1, #625	; 0x271
 800dc3e:	4630      	mov	r0, r6
 800dc40:	f7ff ff16 	bl	800da70 <__i2b>
 800dc44:	2300      	movs	r3, #0
 800dc46:	f8c8 0008 	str.w	r0, [r8, #8]
 800dc4a:	4604      	mov	r4, r0
 800dc4c:	6003      	str	r3, [r0, #0]
 800dc4e:	f04f 0900 	mov.w	r9, #0
 800dc52:	07eb      	lsls	r3, r5, #31
 800dc54:	d50a      	bpl.n	800dc6c <__pow5mult+0x84>
 800dc56:	4639      	mov	r1, r7
 800dc58:	4622      	mov	r2, r4
 800dc5a:	4630      	mov	r0, r6
 800dc5c:	f7ff ff1e 	bl	800da9c <__multiply>
 800dc60:	4639      	mov	r1, r7
 800dc62:	4680      	mov	r8, r0
 800dc64:	4630      	mov	r0, r6
 800dc66:	f7ff fdfd 	bl	800d864 <_Bfree>
 800dc6a:	4647      	mov	r7, r8
 800dc6c:	106d      	asrs	r5, r5, #1
 800dc6e:	d00b      	beq.n	800dc88 <__pow5mult+0xa0>
 800dc70:	6820      	ldr	r0, [r4, #0]
 800dc72:	b938      	cbnz	r0, 800dc84 <__pow5mult+0x9c>
 800dc74:	4622      	mov	r2, r4
 800dc76:	4621      	mov	r1, r4
 800dc78:	4630      	mov	r0, r6
 800dc7a:	f7ff ff0f 	bl	800da9c <__multiply>
 800dc7e:	6020      	str	r0, [r4, #0]
 800dc80:	f8c0 9000 	str.w	r9, [r0]
 800dc84:	4604      	mov	r4, r0
 800dc86:	e7e4      	b.n	800dc52 <__pow5mult+0x6a>
 800dc88:	4638      	mov	r0, r7
 800dc8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc8e:	bf00      	nop
 800dc90:	080107a8 	.word	0x080107a8
 800dc94:	0801054e 	.word	0x0801054e
 800dc98:	08010654 	.word	0x08010654

0800dc9c <__lshift>:
 800dc9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dca0:	460c      	mov	r4, r1
 800dca2:	6849      	ldr	r1, [r1, #4]
 800dca4:	6923      	ldr	r3, [r4, #16]
 800dca6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dcaa:	68a3      	ldr	r3, [r4, #8]
 800dcac:	4607      	mov	r7, r0
 800dcae:	4691      	mov	r9, r2
 800dcb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dcb4:	f108 0601 	add.w	r6, r8, #1
 800dcb8:	42b3      	cmp	r3, r6
 800dcba:	db0b      	blt.n	800dcd4 <__lshift+0x38>
 800dcbc:	4638      	mov	r0, r7
 800dcbe:	f7ff fd91 	bl	800d7e4 <_Balloc>
 800dcc2:	4605      	mov	r5, r0
 800dcc4:	b948      	cbnz	r0, 800dcda <__lshift+0x3e>
 800dcc6:	4602      	mov	r2, r0
 800dcc8:	4b28      	ldr	r3, [pc, #160]	; (800dd6c <__lshift+0xd0>)
 800dcca:	4829      	ldr	r0, [pc, #164]	; (800dd70 <__lshift+0xd4>)
 800dccc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dcd0:	f001 f8b4 	bl	800ee3c <__assert_func>
 800dcd4:	3101      	adds	r1, #1
 800dcd6:	005b      	lsls	r3, r3, #1
 800dcd8:	e7ee      	b.n	800dcb8 <__lshift+0x1c>
 800dcda:	2300      	movs	r3, #0
 800dcdc:	f100 0114 	add.w	r1, r0, #20
 800dce0:	f100 0210 	add.w	r2, r0, #16
 800dce4:	4618      	mov	r0, r3
 800dce6:	4553      	cmp	r3, sl
 800dce8:	db33      	blt.n	800dd52 <__lshift+0xb6>
 800dcea:	6920      	ldr	r0, [r4, #16]
 800dcec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dcf0:	f104 0314 	add.w	r3, r4, #20
 800dcf4:	f019 091f 	ands.w	r9, r9, #31
 800dcf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dcfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dd00:	d02b      	beq.n	800dd5a <__lshift+0xbe>
 800dd02:	f1c9 0e20 	rsb	lr, r9, #32
 800dd06:	468a      	mov	sl, r1
 800dd08:	2200      	movs	r2, #0
 800dd0a:	6818      	ldr	r0, [r3, #0]
 800dd0c:	fa00 f009 	lsl.w	r0, r0, r9
 800dd10:	4302      	orrs	r2, r0
 800dd12:	f84a 2b04 	str.w	r2, [sl], #4
 800dd16:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd1a:	459c      	cmp	ip, r3
 800dd1c:	fa22 f20e 	lsr.w	r2, r2, lr
 800dd20:	d8f3      	bhi.n	800dd0a <__lshift+0x6e>
 800dd22:	ebac 0304 	sub.w	r3, ip, r4
 800dd26:	3b15      	subs	r3, #21
 800dd28:	f023 0303 	bic.w	r3, r3, #3
 800dd2c:	3304      	adds	r3, #4
 800dd2e:	f104 0015 	add.w	r0, r4, #21
 800dd32:	4584      	cmp	ip, r0
 800dd34:	bf38      	it	cc
 800dd36:	2304      	movcc	r3, #4
 800dd38:	50ca      	str	r2, [r1, r3]
 800dd3a:	b10a      	cbz	r2, 800dd40 <__lshift+0xa4>
 800dd3c:	f108 0602 	add.w	r6, r8, #2
 800dd40:	3e01      	subs	r6, #1
 800dd42:	4638      	mov	r0, r7
 800dd44:	612e      	str	r6, [r5, #16]
 800dd46:	4621      	mov	r1, r4
 800dd48:	f7ff fd8c 	bl	800d864 <_Bfree>
 800dd4c:	4628      	mov	r0, r5
 800dd4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd52:	f842 0f04 	str.w	r0, [r2, #4]!
 800dd56:	3301      	adds	r3, #1
 800dd58:	e7c5      	b.n	800dce6 <__lshift+0x4a>
 800dd5a:	3904      	subs	r1, #4
 800dd5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd60:	f841 2f04 	str.w	r2, [r1, #4]!
 800dd64:	459c      	cmp	ip, r3
 800dd66:	d8f9      	bhi.n	800dd5c <__lshift+0xc0>
 800dd68:	e7ea      	b.n	800dd40 <__lshift+0xa4>
 800dd6a:	bf00      	nop
 800dd6c:	080105c4 	.word	0x080105c4
 800dd70:	08010654 	.word	0x08010654

0800dd74 <__mcmp>:
 800dd74:	b530      	push	{r4, r5, lr}
 800dd76:	6902      	ldr	r2, [r0, #16]
 800dd78:	690c      	ldr	r4, [r1, #16]
 800dd7a:	1b12      	subs	r2, r2, r4
 800dd7c:	d10e      	bne.n	800dd9c <__mcmp+0x28>
 800dd7e:	f100 0314 	add.w	r3, r0, #20
 800dd82:	3114      	adds	r1, #20
 800dd84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dd88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dd8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dd90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dd94:	42a5      	cmp	r5, r4
 800dd96:	d003      	beq.n	800dda0 <__mcmp+0x2c>
 800dd98:	d305      	bcc.n	800dda6 <__mcmp+0x32>
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	4610      	mov	r0, r2
 800dd9e:	bd30      	pop	{r4, r5, pc}
 800dda0:	4283      	cmp	r3, r0
 800dda2:	d3f3      	bcc.n	800dd8c <__mcmp+0x18>
 800dda4:	e7fa      	b.n	800dd9c <__mcmp+0x28>
 800dda6:	f04f 32ff 	mov.w	r2, #4294967295
 800ddaa:	e7f7      	b.n	800dd9c <__mcmp+0x28>

0800ddac <__mdiff>:
 800ddac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddb0:	460c      	mov	r4, r1
 800ddb2:	4606      	mov	r6, r0
 800ddb4:	4611      	mov	r1, r2
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	4617      	mov	r7, r2
 800ddba:	f7ff ffdb 	bl	800dd74 <__mcmp>
 800ddbe:	1e05      	subs	r5, r0, #0
 800ddc0:	d110      	bne.n	800dde4 <__mdiff+0x38>
 800ddc2:	4629      	mov	r1, r5
 800ddc4:	4630      	mov	r0, r6
 800ddc6:	f7ff fd0d 	bl	800d7e4 <_Balloc>
 800ddca:	b930      	cbnz	r0, 800ddda <__mdiff+0x2e>
 800ddcc:	4b39      	ldr	r3, [pc, #228]	; (800deb4 <__mdiff+0x108>)
 800ddce:	4602      	mov	r2, r0
 800ddd0:	f240 2132 	movw	r1, #562	; 0x232
 800ddd4:	4838      	ldr	r0, [pc, #224]	; (800deb8 <__mdiff+0x10c>)
 800ddd6:	f001 f831 	bl	800ee3c <__assert_func>
 800ddda:	2301      	movs	r3, #1
 800dddc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dde0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dde4:	bfa4      	itt	ge
 800dde6:	463b      	movge	r3, r7
 800dde8:	4627      	movge	r7, r4
 800ddea:	4630      	mov	r0, r6
 800ddec:	6879      	ldr	r1, [r7, #4]
 800ddee:	bfa6      	itte	ge
 800ddf0:	461c      	movge	r4, r3
 800ddf2:	2500      	movge	r5, #0
 800ddf4:	2501      	movlt	r5, #1
 800ddf6:	f7ff fcf5 	bl	800d7e4 <_Balloc>
 800ddfa:	b920      	cbnz	r0, 800de06 <__mdiff+0x5a>
 800ddfc:	4b2d      	ldr	r3, [pc, #180]	; (800deb4 <__mdiff+0x108>)
 800ddfe:	4602      	mov	r2, r0
 800de00:	f44f 7110 	mov.w	r1, #576	; 0x240
 800de04:	e7e6      	b.n	800ddd4 <__mdiff+0x28>
 800de06:	693e      	ldr	r6, [r7, #16]
 800de08:	60c5      	str	r5, [r0, #12]
 800de0a:	6925      	ldr	r5, [r4, #16]
 800de0c:	f107 0114 	add.w	r1, r7, #20
 800de10:	f104 0914 	add.w	r9, r4, #20
 800de14:	f100 0e14 	add.w	lr, r0, #20
 800de18:	f107 0210 	add.w	r2, r7, #16
 800de1c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800de20:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800de24:	46f2      	mov	sl, lr
 800de26:	2700      	movs	r7, #0
 800de28:	f859 3b04 	ldr.w	r3, [r9], #4
 800de2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800de30:	fa1f f883 	uxth.w	r8, r3
 800de34:	fa17 f78b 	uxtah	r7, r7, fp
 800de38:	0c1b      	lsrs	r3, r3, #16
 800de3a:	eba7 0808 	sub.w	r8, r7, r8
 800de3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800de42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800de46:	fa1f f888 	uxth.w	r8, r8
 800de4a:	141f      	asrs	r7, r3, #16
 800de4c:	454d      	cmp	r5, r9
 800de4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800de52:	f84a 3b04 	str.w	r3, [sl], #4
 800de56:	d8e7      	bhi.n	800de28 <__mdiff+0x7c>
 800de58:	1b2b      	subs	r3, r5, r4
 800de5a:	3b15      	subs	r3, #21
 800de5c:	f023 0303 	bic.w	r3, r3, #3
 800de60:	3304      	adds	r3, #4
 800de62:	3415      	adds	r4, #21
 800de64:	42a5      	cmp	r5, r4
 800de66:	bf38      	it	cc
 800de68:	2304      	movcc	r3, #4
 800de6a:	4419      	add	r1, r3
 800de6c:	4473      	add	r3, lr
 800de6e:	469e      	mov	lr, r3
 800de70:	460d      	mov	r5, r1
 800de72:	4565      	cmp	r5, ip
 800de74:	d30e      	bcc.n	800de94 <__mdiff+0xe8>
 800de76:	f10c 0203 	add.w	r2, ip, #3
 800de7a:	1a52      	subs	r2, r2, r1
 800de7c:	f022 0203 	bic.w	r2, r2, #3
 800de80:	3903      	subs	r1, #3
 800de82:	458c      	cmp	ip, r1
 800de84:	bf38      	it	cc
 800de86:	2200      	movcc	r2, #0
 800de88:	441a      	add	r2, r3
 800de8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800de8e:	b17b      	cbz	r3, 800deb0 <__mdiff+0x104>
 800de90:	6106      	str	r6, [r0, #16]
 800de92:	e7a5      	b.n	800dde0 <__mdiff+0x34>
 800de94:	f855 8b04 	ldr.w	r8, [r5], #4
 800de98:	fa17 f488 	uxtah	r4, r7, r8
 800de9c:	1422      	asrs	r2, r4, #16
 800de9e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800dea2:	b2a4      	uxth	r4, r4
 800dea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800dea8:	f84e 4b04 	str.w	r4, [lr], #4
 800deac:	1417      	asrs	r7, r2, #16
 800deae:	e7e0      	b.n	800de72 <__mdiff+0xc6>
 800deb0:	3e01      	subs	r6, #1
 800deb2:	e7ea      	b.n	800de8a <__mdiff+0xde>
 800deb4:	080105c4 	.word	0x080105c4
 800deb8:	08010654 	.word	0x08010654

0800debc <__ulp>:
 800debc:	b082      	sub	sp, #8
 800debe:	ed8d 0b00 	vstr	d0, [sp]
 800dec2:	9b01      	ldr	r3, [sp, #4]
 800dec4:	4912      	ldr	r1, [pc, #72]	; (800df10 <__ulp+0x54>)
 800dec6:	4019      	ands	r1, r3
 800dec8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800decc:	2900      	cmp	r1, #0
 800dece:	dd05      	ble.n	800dedc <__ulp+0x20>
 800ded0:	2200      	movs	r2, #0
 800ded2:	460b      	mov	r3, r1
 800ded4:	ec43 2b10 	vmov	d0, r2, r3
 800ded8:	b002      	add	sp, #8
 800deda:	4770      	bx	lr
 800dedc:	4249      	negs	r1, r1
 800dede:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800dee2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800dee6:	f04f 0200 	mov.w	r2, #0
 800deea:	f04f 0300 	mov.w	r3, #0
 800deee:	da04      	bge.n	800defa <__ulp+0x3e>
 800def0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800def4:	fa41 f300 	asr.w	r3, r1, r0
 800def8:	e7ec      	b.n	800ded4 <__ulp+0x18>
 800defa:	f1a0 0114 	sub.w	r1, r0, #20
 800defe:	291e      	cmp	r1, #30
 800df00:	bfda      	itte	le
 800df02:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800df06:	fa20 f101 	lsrle.w	r1, r0, r1
 800df0a:	2101      	movgt	r1, #1
 800df0c:	460a      	mov	r2, r1
 800df0e:	e7e1      	b.n	800ded4 <__ulp+0x18>
 800df10:	7ff00000 	.word	0x7ff00000

0800df14 <__b2d>:
 800df14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df16:	6905      	ldr	r5, [r0, #16]
 800df18:	f100 0714 	add.w	r7, r0, #20
 800df1c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800df20:	1f2e      	subs	r6, r5, #4
 800df22:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800df26:	4620      	mov	r0, r4
 800df28:	f7ff fd52 	bl	800d9d0 <__hi0bits>
 800df2c:	f1c0 0320 	rsb	r3, r0, #32
 800df30:	280a      	cmp	r0, #10
 800df32:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800dfb0 <__b2d+0x9c>
 800df36:	600b      	str	r3, [r1, #0]
 800df38:	dc14      	bgt.n	800df64 <__b2d+0x50>
 800df3a:	f1c0 0e0b 	rsb	lr, r0, #11
 800df3e:	fa24 f10e 	lsr.w	r1, r4, lr
 800df42:	42b7      	cmp	r7, r6
 800df44:	ea41 030c 	orr.w	r3, r1, ip
 800df48:	bf34      	ite	cc
 800df4a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800df4e:	2100      	movcs	r1, #0
 800df50:	3015      	adds	r0, #21
 800df52:	fa04 f000 	lsl.w	r0, r4, r0
 800df56:	fa21 f10e 	lsr.w	r1, r1, lr
 800df5a:	ea40 0201 	orr.w	r2, r0, r1
 800df5e:	ec43 2b10 	vmov	d0, r2, r3
 800df62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df64:	42b7      	cmp	r7, r6
 800df66:	bf3a      	itte	cc
 800df68:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800df6c:	f1a5 0608 	subcc.w	r6, r5, #8
 800df70:	2100      	movcs	r1, #0
 800df72:	380b      	subs	r0, #11
 800df74:	d017      	beq.n	800dfa6 <__b2d+0x92>
 800df76:	f1c0 0c20 	rsb	ip, r0, #32
 800df7a:	fa04 f500 	lsl.w	r5, r4, r0
 800df7e:	42be      	cmp	r6, r7
 800df80:	fa21 f40c 	lsr.w	r4, r1, ip
 800df84:	ea45 0504 	orr.w	r5, r5, r4
 800df88:	bf8c      	ite	hi
 800df8a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800df8e:	2400      	movls	r4, #0
 800df90:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800df94:	fa01 f000 	lsl.w	r0, r1, r0
 800df98:	fa24 f40c 	lsr.w	r4, r4, ip
 800df9c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dfa0:	ea40 0204 	orr.w	r2, r0, r4
 800dfa4:	e7db      	b.n	800df5e <__b2d+0x4a>
 800dfa6:	ea44 030c 	orr.w	r3, r4, ip
 800dfaa:	460a      	mov	r2, r1
 800dfac:	e7d7      	b.n	800df5e <__b2d+0x4a>
 800dfae:	bf00      	nop
 800dfb0:	3ff00000 	.word	0x3ff00000

0800dfb4 <__d2b>:
 800dfb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dfb8:	4689      	mov	r9, r1
 800dfba:	2101      	movs	r1, #1
 800dfbc:	ec57 6b10 	vmov	r6, r7, d0
 800dfc0:	4690      	mov	r8, r2
 800dfc2:	f7ff fc0f 	bl	800d7e4 <_Balloc>
 800dfc6:	4604      	mov	r4, r0
 800dfc8:	b930      	cbnz	r0, 800dfd8 <__d2b+0x24>
 800dfca:	4602      	mov	r2, r0
 800dfcc:	4b25      	ldr	r3, [pc, #148]	; (800e064 <__d2b+0xb0>)
 800dfce:	4826      	ldr	r0, [pc, #152]	; (800e068 <__d2b+0xb4>)
 800dfd0:	f240 310a 	movw	r1, #778	; 0x30a
 800dfd4:	f000 ff32 	bl	800ee3c <__assert_func>
 800dfd8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dfdc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dfe0:	bb35      	cbnz	r5, 800e030 <__d2b+0x7c>
 800dfe2:	2e00      	cmp	r6, #0
 800dfe4:	9301      	str	r3, [sp, #4]
 800dfe6:	d028      	beq.n	800e03a <__d2b+0x86>
 800dfe8:	4668      	mov	r0, sp
 800dfea:	9600      	str	r6, [sp, #0]
 800dfec:	f7ff fd10 	bl	800da10 <__lo0bits>
 800dff0:	9900      	ldr	r1, [sp, #0]
 800dff2:	b300      	cbz	r0, 800e036 <__d2b+0x82>
 800dff4:	9a01      	ldr	r2, [sp, #4]
 800dff6:	f1c0 0320 	rsb	r3, r0, #32
 800dffa:	fa02 f303 	lsl.w	r3, r2, r3
 800dffe:	430b      	orrs	r3, r1
 800e000:	40c2      	lsrs	r2, r0
 800e002:	6163      	str	r3, [r4, #20]
 800e004:	9201      	str	r2, [sp, #4]
 800e006:	9b01      	ldr	r3, [sp, #4]
 800e008:	61a3      	str	r3, [r4, #24]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	bf14      	ite	ne
 800e00e:	2202      	movne	r2, #2
 800e010:	2201      	moveq	r2, #1
 800e012:	6122      	str	r2, [r4, #16]
 800e014:	b1d5      	cbz	r5, 800e04c <__d2b+0x98>
 800e016:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e01a:	4405      	add	r5, r0
 800e01c:	f8c9 5000 	str.w	r5, [r9]
 800e020:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e024:	f8c8 0000 	str.w	r0, [r8]
 800e028:	4620      	mov	r0, r4
 800e02a:	b003      	add	sp, #12
 800e02c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e030:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e034:	e7d5      	b.n	800dfe2 <__d2b+0x2e>
 800e036:	6161      	str	r1, [r4, #20]
 800e038:	e7e5      	b.n	800e006 <__d2b+0x52>
 800e03a:	a801      	add	r0, sp, #4
 800e03c:	f7ff fce8 	bl	800da10 <__lo0bits>
 800e040:	9b01      	ldr	r3, [sp, #4]
 800e042:	6163      	str	r3, [r4, #20]
 800e044:	2201      	movs	r2, #1
 800e046:	6122      	str	r2, [r4, #16]
 800e048:	3020      	adds	r0, #32
 800e04a:	e7e3      	b.n	800e014 <__d2b+0x60>
 800e04c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e050:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e054:	f8c9 0000 	str.w	r0, [r9]
 800e058:	6918      	ldr	r0, [r3, #16]
 800e05a:	f7ff fcb9 	bl	800d9d0 <__hi0bits>
 800e05e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e062:	e7df      	b.n	800e024 <__d2b+0x70>
 800e064:	080105c4 	.word	0x080105c4
 800e068:	08010654 	.word	0x08010654

0800e06c <__ratio>:
 800e06c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e070:	4688      	mov	r8, r1
 800e072:	4669      	mov	r1, sp
 800e074:	4681      	mov	r9, r0
 800e076:	f7ff ff4d 	bl	800df14 <__b2d>
 800e07a:	a901      	add	r1, sp, #4
 800e07c:	4640      	mov	r0, r8
 800e07e:	ec55 4b10 	vmov	r4, r5, d0
 800e082:	f7ff ff47 	bl	800df14 <__b2d>
 800e086:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e08a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e08e:	eba3 0c02 	sub.w	ip, r3, r2
 800e092:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e096:	1a9b      	subs	r3, r3, r2
 800e098:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e09c:	ec51 0b10 	vmov	r0, r1, d0
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	bfd6      	itet	le
 800e0a4:	460a      	movle	r2, r1
 800e0a6:	462a      	movgt	r2, r5
 800e0a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e0ac:	468b      	mov	fp, r1
 800e0ae:	462f      	mov	r7, r5
 800e0b0:	bfd4      	ite	le
 800e0b2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e0b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	ee10 2a10 	vmov	r2, s0
 800e0c0:	465b      	mov	r3, fp
 800e0c2:	4639      	mov	r1, r7
 800e0c4:	f7f2 fbd2 	bl	800086c <__aeabi_ddiv>
 800e0c8:	ec41 0b10 	vmov	d0, r0, r1
 800e0cc:	b003      	add	sp, #12
 800e0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e0d2 <__copybits>:
 800e0d2:	3901      	subs	r1, #1
 800e0d4:	b570      	push	{r4, r5, r6, lr}
 800e0d6:	1149      	asrs	r1, r1, #5
 800e0d8:	6914      	ldr	r4, [r2, #16]
 800e0da:	3101      	adds	r1, #1
 800e0dc:	f102 0314 	add.w	r3, r2, #20
 800e0e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e0e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e0e8:	1f05      	subs	r5, r0, #4
 800e0ea:	42a3      	cmp	r3, r4
 800e0ec:	d30c      	bcc.n	800e108 <__copybits+0x36>
 800e0ee:	1aa3      	subs	r3, r4, r2
 800e0f0:	3b11      	subs	r3, #17
 800e0f2:	f023 0303 	bic.w	r3, r3, #3
 800e0f6:	3211      	adds	r2, #17
 800e0f8:	42a2      	cmp	r2, r4
 800e0fa:	bf88      	it	hi
 800e0fc:	2300      	movhi	r3, #0
 800e0fe:	4418      	add	r0, r3
 800e100:	2300      	movs	r3, #0
 800e102:	4288      	cmp	r0, r1
 800e104:	d305      	bcc.n	800e112 <__copybits+0x40>
 800e106:	bd70      	pop	{r4, r5, r6, pc}
 800e108:	f853 6b04 	ldr.w	r6, [r3], #4
 800e10c:	f845 6f04 	str.w	r6, [r5, #4]!
 800e110:	e7eb      	b.n	800e0ea <__copybits+0x18>
 800e112:	f840 3b04 	str.w	r3, [r0], #4
 800e116:	e7f4      	b.n	800e102 <__copybits+0x30>

0800e118 <__any_on>:
 800e118:	f100 0214 	add.w	r2, r0, #20
 800e11c:	6900      	ldr	r0, [r0, #16]
 800e11e:	114b      	asrs	r3, r1, #5
 800e120:	4298      	cmp	r0, r3
 800e122:	b510      	push	{r4, lr}
 800e124:	db11      	blt.n	800e14a <__any_on+0x32>
 800e126:	dd0a      	ble.n	800e13e <__any_on+0x26>
 800e128:	f011 011f 	ands.w	r1, r1, #31
 800e12c:	d007      	beq.n	800e13e <__any_on+0x26>
 800e12e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e132:	fa24 f001 	lsr.w	r0, r4, r1
 800e136:	fa00 f101 	lsl.w	r1, r0, r1
 800e13a:	428c      	cmp	r4, r1
 800e13c:	d10b      	bne.n	800e156 <__any_on+0x3e>
 800e13e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e142:	4293      	cmp	r3, r2
 800e144:	d803      	bhi.n	800e14e <__any_on+0x36>
 800e146:	2000      	movs	r0, #0
 800e148:	bd10      	pop	{r4, pc}
 800e14a:	4603      	mov	r3, r0
 800e14c:	e7f7      	b.n	800e13e <__any_on+0x26>
 800e14e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e152:	2900      	cmp	r1, #0
 800e154:	d0f5      	beq.n	800e142 <__any_on+0x2a>
 800e156:	2001      	movs	r0, #1
 800e158:	e7f6      	b.n	800e148 <__any_on+0x30>

0800e15a <_calloc_r>:
 800e15a:	b513      	push	{r0, r1, r4, lr}
 800e15c:	434a      	muls	r2, r1
 800e15e:	4611      	mov	r1, r2
 800e160:	9201      	str	r2, [sp, #4]
 800e162:	f000 f859 	bl	800e218 <_malloc_r>
 800e166:	4604      	mov	r4, r0
 800e168:	b118      	cbz	r0, 800e172 <_calloc_r+0x18>
 800e16a:	9a01      	ldr	r2, [sp, #4]
 800e16c:	2100      	movs	r1, #0
 800e16e:	f7fc fb25 	bl	800a7bc <memset>
 800e172:	4620      	mov	r0, r4
 800e174:	b002      	add	sp, #8
 800e176:	bd10      	pop	{r4, pc}

0800e178 <_free_r>:
 800e178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e17a:	2900      	cmp	r1, #0
 800e17c:	d048      	beq.n	800e210 <_free_r+0x98>
 800e17e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e182:	9001      	str	r0, [sp, #4]
 800e184:	2b00      	cmp	r3, #0
 800e186:	f1a1 0404 	sub.w	r4, r1, #4
 800e18a:	bfb8      	it	lt
 800e18c:	18e4      	addlt	r4, r4, r3
 800e18e:	f001 f859 	bl	800f244 <__malloc_lock>
 800e192:	4a20      	ldr	r2, [pc, #128]	; (800e214 <_free_r+0x9c>)
 800e194:	9801      	ldr	r0, [sp, #4]
 800e196:	6813      	ldr	r3, [r2, #0]
 800e198:	4615      	mov	r5, r2
 800e19a:	b933      	cbnz	r3, 800e1aa <_free_r+0x32>
 800e19c:	6063      	str	r3, [r4, #4]
 800e19e:	6014      	str	r4, [r2, #0]
 800e1a0:	b003      	add	sp, #12
 800e1a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e1a6:	f001 b853 	b.w	800f250 <__malloc_unlock>
 800e1aa:	42a3      	cmp	r3, r4
 800e1ac:	d90b      	bls.n	800e1c6 <_free_r+0x4e>
 800e1ae:	6821      	ldr	r1, [r4, #0]
 800e1b0:	1862      	adds	r2, r4, r1
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	bf04      	itt	eq
 800e1b6:	681a      	ldreq	r2, [r3, #0]
 800e1b8:	685b      	ldreq	r3, [r3, #4]
 800e1ba:	6063      	str	r3, [r4, #4]
 800e1bc:	bf04      	itt	eq
 800e1be:	1852      	addeq	r2, r2, r1
 800e1c0:	6022      	streq	r2, [r4, #0]
 800e1c2:	602c      	str	r4, [r5, #0]
 800e1c4:	e7ec      	b.n	800e1a0 <_free_r+0x28>
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	b10b      	cbz	r3, 800e1d0 <_free_r+0x58>
 800e1cc:	42a3      	cmp	r3, r4
 800e1ce:	d9fa      	bls.n	800e1c6 <_free_r+0x4e>
 800e1d0:	6811      	ldr	r1, [r2, #0]
 800e1d2:	1855      	adds	r5, r2, r1
 800e1d4:	42a5      	cmp	r5, r4
 800e1d6:	d10b      	bne.n	800e1f0 <_free_r+0x78>
 800e1d8:	6824      	ldr	r4, [r4, #0]
 800e1da:	4421      	add	r1, r4
 800e1dc:	1854      	adds	r4, r2, r1
 800e1de:	42a3      	cmp	r3, r4
 800e1e0:	6011      	str	r1, [r2, #0]
 800e1e2:	d1dd      	bne.n	800e1a0 <_free_r+0x28>
 800e1e4:	681c      	ldr	r4, [r3, #0]
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	6053      	str	r3, [r2, #4]
 800e1ea:	4421      	add	r1, r4
 800e1ec:	6011      	str	r1, [r2, #0]
 800e1ee:	e7d7      	b.n	800e1a0 <_free_r+0x28>
 800e1f0:	d902      	bls.n	800e1f8 <_free_r+0x80>
 800e1f2:	230c      	movs	r3, #12
 800e1f4:	6003      	str	r3, [r0, #0]
 800e1f6:	e7d3      	b.n	800e1a0 <_free_r+0x28>
 800e1f8:	6825      	ldr	r5, [r4, #0]
 800e1fa:	1961      	adds	r1, r4, r5
 800e1fc:	428b      	cmp	r3, r1
 800e1fe:	bf04      	itt	eq
 800e200:	6819      	ldreq	r1, [r3, #0]
 800e202:	685b      	ldreq	r3, [r3, #4]
 800e204:	6063      	str	r3, [r4, #4]
 800e206:	bf04      	itt	eq
 800e208:	1949      	addeq	r1, r1, r5
 800e20a:	6021      	streq	r1, [r4, #0]
 800e20c:	6054      	str	r4, [r2, #4]
 800e20e:	e7c7      	b.n	800e1a0 <_free_r+0x28>
 800e210:	b003      	add	sp, #12
 800e212:	bd30      	pop	{r4, r5, pc}
 800e214:	20000960 	.word	0x20000960

0800e218 <_malloc_r>:
 800e218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e21a:	1ccd      	adds	r5, r1, #3
 800e21c:	f025 0503 	bic.w	r5, r5, #3
 800e220:	3508      	adds	r5, #8
 800e222:	2d0c      	cmp	r5, #12
 800e224:	bf38      	it	cc
 800e226:	250c      	movcc	r5, #12
 800e228:	2d00      	cmp	r5, #0
 800e22a:	4606      	mov	r6, r0
 800e22c:	db01      	blt.n	800e232 <_malloc_r+0x1a>
 800e22e:	42a9      	cmp	r1, r5
 800e230:	d903      	bls.n	800e23a <_malloc_r+0x22>
 800e232:	230c      	movs	r3, #12
 800e234:	6033      	str	r3, [r6, #0]
 800e236:	2000      	movs	r0, #0
 800e238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e23a:	f001 f803 	bl	800f244 <__malloc_lock>
 800e23e:	4921      	ldr	r1, [pc, #132]	; (800e2c4 <_malloc_r+0xac>)
 800e240:	680a      	ldr	r2, [r1, #0]
 800e242:	4614      	mov	r4, r2
 800e244:	b99c      	cbnz	r4, 800e26e <_malloc_r+0x56>
 800e246:	4f20      	ldr	r7, [pc, #128]	; (800e2c8 <_malloc_r+0xb0>)
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	b923      	cbnz	r3, 800e256 <_malloc_r+0x3e>
 800e24c:	4621      	mov	r1, r4
 800e24e:	4630      	mov	r0, r6
 800e250:	f000 fcd2 	bl	800ebf8 <_sbrk_r>
 800e254:	6038      	str	r0, [r7, #0]
 800e256:	4629      	mov	r1, r5
 800e258:	4630      	mov	r0, r6
 800e25a:	f000 fccd 	bl	800ebf8 <_sbrk_r>
 800e25e:	1c43      	adds	r3, r0, #1
 800e260:	d123      	bne.n	800e2aa <_malloc_r+0x92>
 800e262:	230c      	movs	r3, #12
 800e264:	6033      	str	r3, [r6, #0]
 800e266:	4630      	mov	r0, r6
 800e268:	f000 fff2 	bl	800f250 <__malloc_unlock>
 800e26c:	e7e3      	b.n	800e236 <_malloc_r+0x1e>
 800e26e:	6823      	ldr	r3, [r4, #0]
 800e270:	1b5b      	subs	r3, r3, r5
 800e272:	d417      	bmi.n	800e2a4 <_malloc_r+0x8c>
 800e274:	2b0b      	cmp	r3, #11
 800e276:	d903      	bls.n	800e280 <_malloc_r+0x68>
 800e278:	6023      	str	r3, [r4, #0]
 800e27a:	441c      	add	r4, r3
 800e27c:	6025      	str	r5, [r4, #0]
 800e27e:	e004      	b.n	800e28a <_malloc_r+0x72>
 800e280:	6863      	ldr	r3, [r4, #4]
 800e282:	42a2      	cmp	r2, r4
 800e284:	bf0c      	ite	eq
 800e286:	600b      	streq	r3, [r1, #0]
 800e288:	6053      	strne	r3, [r2, #4]
 800e28a:	4630      	mov	r0, r6
 800e28c:	f000 ffe0 	bl	800f250 <__malloc_unlock>
 800e290:	f104 000b 	add.w	r0, r4, #11
 800e294:	1d23      	adds	r3, r4, #4
 800e296:	f020 0007 	bic.w	r0, r0, #7
 800e29a:	1ac2      	subs	r2, r0, r3
 800e29c:	d0cc      	beq.n	800e238 <_malloc_r+0x20>
 800e29e:	1a1b      	subs	r3, r3, r0
 800e2a0:	50a3      	str	r3, [r4, r2]
 800e2a2:	e7c9      	b.n	800e238 <_malloc_r+0x20>
 800e2a4:	4622      	mov	r2, r4
 800e2a6:	6864      	ldr	r4, [r4, #4]
 800e2a8:	e7cc      	b.n	800e244 <_malloc_r+0x2c>
 800e2aa:	1cc4      	adds	r4, r0, #3
 800e2ac:	f024 0403 	bic.w	r4, r4, #3
 800e2b0:	42a0      	cmp	r0, r4
 800e2b2:	d0e3      	beq.n	800e27c <_malloc_r+0x64>
 800e2b4:	1a21      	subs	r1, r4, r0
 800e2b6:	4630      	mov	r0, r6
 800e2b8:	f000 fc9e 	bl	800ebf8 <_sbrk_r>
 800e2bc:	3001      	adds	r0, #1
 800e2be:	d1dd      	bne.n	800e27c <_malloc_r+0x64>
 800e2c0:	e7cf      	b.n	800e262 <_malloc_r+0x4a>
 800e2c2:	bf00      	nop
 800e2c4:	20000960 	.word	0x20000960
 800e2c8:	20000964 	.word	0x20000964

0800e2cc <__ssputs_r>:
 800e2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2d0:	688e      	ldr	r6, [r1, #8]
 800e2d2:	429e      	cmp	r6, r3
 800e2d4:	4682      	mov	sl, r0
 800e2d6:	460c      	mov	r4, r1
 800e2d8:	4690      	mov	r8, r2
 800e2da:	461f      	mov	r7, r3
 800e2dc:	d838      	bhi.n	800e350 <__ssputs_r+0x84>
 800e2de:	898a      	ldrh	r2, [r1, #12]
 800e2e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e2e4:	d032      	beq.n	800e34c <__ssputs_r+0x80>
 800e2e6:	6825      	ldr	r5, [r4, #0]
 800e2e8:	6909      	ldr	r1, [r1, #16]
 800e2ea:	eba5 0901 	sub.w	r9, r5, r1
 800e2ee:	6965      	ldr	r5, [r4, #20]
 800e2f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e2f8:	3301      	adds	r3, #1
 800e2fa:	444b      	add	r3, r9
 800e2fc:	106d      	asrs	r5, r5, #1
 800e2fe:	429d      	cmp	r5, r3
 800e300:	bf38      	it	cc
 800e302:	461d      	movcc	r5, r3
 800e304:	0553      	lsls	r3, r2, #21
 800e306:	d531      	bpl.n	800e36c <__ssputs_r+0xa0>
 800e308:	4629      	mov	r1, r5
 800e30a:	f7ff ff85 	bl	800e218 <_malloc_r>
 800e30e:	4606      	mov	r6, r0
 800e310:	b950      	cbnz	r0, 800e328 <__ssputs_r+0x5c>
 800e312:	230c      	movs	r3, #12
 800e314:	f8ca 3000 	str.w	r3, [sl]
 800e318:	89a3      	ldrh	r3, [r4, #12]
 800e31a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e31e:	81a3      	strh	r3, [r4, #12]
 800e320:	f04f 30ff 	mov.w	r0, #4294967295
 800e324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e328:	6921      	ldr	r1, [r4, #16]
 800e32a:	464a      	mov	r2, r9
 800e32c:	f7ff fa4c 	bl	800d7c8 <memcpy>
 800e330:	89a3      	ldrh	r3, [r4, #12]
 800e332:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e33a:	81a3      	strh	r3, [r4, #12]
 800e33c:	6126      	str	r6, [r4, #16]
 800e33e:	6165      	str	r5, [r4, #20]
 800e340:	444e      	add	r6, r9
 800e342:	eba5 0509 	sub.w	r5, r5, r9
 800e346:	6026      	str	r6, [r4, #0]
 800e348:	60a5      	str	r5, [r4, #8]
 800e34a:	463e      	mov	r6, r7
 800e34c:	42be      	cmp	r6, r7
 800e34e:	d900      	bls.n	800e352 <__ssputs_r+0x86>
 800e350:	463e      	mov	r6, r7
 800e352:	4632      	mov	r2, r6
 800e354:	6820      	ldr	r0, [r4, #0]
 800e356:	4641      	mov	r1, r8
 800e358:	f000 ff5a 	bl	800f210 <memmove>
 800e35c:	68a3      	ldr	r3, [r4, #8]
 800e35e:	6822      	ldr	r2, [r4, #0]
 800e360:	1b9b      	subs	r3, r3, r6
 800e362:	4432      	add	r2, r6
 800e364:	60a3      	str	r3, [r4, #8]
 800e366:	6022      	str	r2, [r4, #0]
 800e368:	2000      	movs	r0, #0
 800e36a:	e7db      	b.n	800e324 <__ssputs_r+0x58>
 800e36c:	462a      	mov	r2, r5
 800e36e:	f000 ff75 	bl	800f25c <_realloc_r>
 800e372:	4606      	mov	r6, r0
 800e374:	2800      	cmp	r0, #0
 800e376:	d1e1      	bne.n	800e33c <__ssputs_r+0x70>
 800e378:	6921      	ldr	r1, [r4, #16]
 800e37a:	4650      	mov	r0, sl
 800e37c:	f7ff fefc 	bl	800e178 <_free_r>
 800e380:	e7c7      	b.n	800e312 <__ssputs_r+0x46>
	...

0800e384 <_svfiprintf_r>:
 800e384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e388:	4698      	mov	r8, r3
 800e38a:	898b      	ldrh	r3, [r1, #12]
 800e38c:	061b      	lsls	r3, r3, #24
 800e38e:	b09d      	sub	sp, #116	; 0x74
 800e390:	4607      	mov	r7, r0
 800e392:	460d      	mov	r5, r1
 800e394:	4614      	mov	r4, r2
 800e396:	d50e      	bpl.n	800e3b6 <_svfiprintf_r+0x32>
 800e398:	690b      	ldr	r3, [r1, #16]
 800e39a:	b963      	cbnz	r3, 800e3b6 <_svfiprintf_r+0x32>
 800e39c:	2140      	movs	r1, #64	; 0x40
 800e39e:	f7ff ff3b 	bl	800e218 <_malloc_r>
 800e3a2:	6028      	str	r0, [r5, #0]
 800e3a4:	6128      	str	r0, [r5, #16]
 800e3a6:	b920      	cbnz	r0, 800e3b2 <_svfiprintf_r+0x2e>
 800e3a8:	230c      	movs	r3, #12
 800e3aa:	603b      	str	r3, [r7, #0]
 800e3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e3b0:	e0d1      	b.n	800e556 <_svfiprintf_r+0x1d2>
 800e3b2:	2340      	movs	r3, #64	; 0x40
 800e3b4:	616b      	str	r3, [r5, #20]
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	9309      	str	r3, [sp, #36]	; 0x24
 800e3ba:	2320      	movs	r3, #32
 800e3bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3c4:	2330      	movs	r3, #48	; 0x30
 800e3c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e570 <_svfiprintf_r+0x1ec>
 800e3ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3ce:	f04f 0901 	mov.w	r9, #1
 800e3d2:	4623      	mov	r3, r4
 800e3d4:	469a      	mov	sl, r3
 800e3d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3da:	b10a      	cbz	r2, 800e3e0 <_svfiprintf_r+0x5c>
 800e3dc:	2a25      	cmp	r2, #37	; 0x25
 800e3de:	d1f9      	bne.n	800e3d4 <_svfiprintf_r+0x50>
 800e3e0:	ebba 0b04 	subs.w	fp, sl, r4
 800e3e4:	d00b      	beq.n	800e3fe <_svfiprintf_r+0x7a>
 800e3e6:	465b      	mov	r3, fp
 800e3e8:	4622      	mov	r2, r4
 800e3ea:	4629      	mov	r1, r5
 800e3ec:	4638      	mov	r0, r7
 800e3ee:	f7ff ff6d 	bl	800e2cc <__ssputs_r>
 800e3f2:	3001      	adds	r0, #1
 800e3f4:	f000 80aa 	beq.w	800e54c <_svfiprintf_r+0x1c8>
 800e3f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3fa:	445a      	add	r2, fp
 800e3fc:	9209      	str	r2, [sp, #36]	; 0x24
 800e3fe:	f89a 3000 	ldrb.w	r3, [sl]
 800e402:	2b00      	cmp	r3, #0
 800e404:	f000 80a2 	beq.w	800e54c <_svfiprintf_r+0x1c8>
 800e408:	2300      	movs	r3, #0
 800e40a:	f04f 32ff 	mov.w	r2, #4294967295
 800e40e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e412:	f10a 0a01 	add.w	sl, sl, #1
 800e416:	9304      	str	r3, [sp, #16]
 800e418:	9307      	str	r3, [sp, #28]
 800e41a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e41e:	931a      	str	r3, [sp, #104]	; 0x68
 800e420:	4654      	mov	r4, sl
 800e422:	2205      	movs	r2, #5
 800e424:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e428:	4851      	ldr	r0, [pc, #324]	; (800e570 <_svfiprintf_r+0x1ec>)
 800e42a:	f7f1 fee9 	bl	8000200 <memchr>
 800e42e:	9a04      	ldr	r2, [sp, #16]
 800e430:	b9d8      	cbnz	r0, 800e46a <_svfiprintf_r+0xe6>
 800e432:	06d0      	lsls	r0, r2, #27
 800e434:	bf44      	itt	mi
 800e436:	2320      	movmi	r3, #32
 800e438:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e43c:	0711      	lsls	r1, r2, #28
 800e43e:	bf44      	itt	mi
 800e440:	232b      	movmi	r3, #43	; 0x2b
 800e442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e446:	f89a 3000 	ldrb.w	r3, [sl]
 800e44a:	2b2a      	cmp	r3, #42	; 0x2a
 800e44c:	d015      	beq.n	800e47a <_svfiprintf_r+0xf6>
 800e44e:	9a07      	ldr	r2, [sp, #28]
 800e450:	4654      	mov	r4, sl
 800e452:	2000      	movs	r0, #0
 800e454:	f04f 0c0a 	mov.w	ip, #10
 800e458:	4621      	mov	r1, r4
 800e45a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e45e:	3b30      	subs	r3, #48	; 0x30
 800e460:	2b09      	cmp	r3, #9
 800e462:	d94e      	bls.n	800e502 <_svfiprintf_r+0x17e>
 800e464:	b1b0      	cbz	r0, 800e494 <_svfiprintf_r+0x110>
 800e466:	9207      	str	r2, [sp, #28]
 800e468:	e014      	b.n	800e494 <_svfiprintf_r+0x110>
 800e46a:	eba0 0308 	sub.w	r3, r0, r8
 800e46e:	fa09 f303 	lsl.w	r3, r9, r3
 800e472:	4313      	orrs	r3, r2
 800e474:	9304      	str	r3, [sp, #16]
 800e476:	46a2      	mov	sl, r4
 800e478:	e7d2      	b.n	800e420 <_svfiprintf_r+0x9c>
 800e47a:	9b03      	ldr	r3, [sp, #12]
 800e47c:	1d19      	adds	r1, r3, #4
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	9103      	str	r1, [sp, #12]
 800e482:	2b00      	cmp	r3, #0
 800e484:	bfbb      	ittet	lt
 800e486:	425b      	neglt	r3, r3
 800e488:	f042 0202 	orrlt.w	r2, r2, #2
 800e48c:	9307      	strge	r3, [sp, #28]
 800e48e:	9307      	strlt	r3, [sp, #28]
 800e490:	bfb8      	it	lt
 800e492:	9204      	strlt	r2, [sp, #16]
 800e494:	7823      	ldrb	r3, [r4, #0]
 800e496:	2b2e      	cmp	r3, #46	; 0x2e
 800e498:	d10c      	bne.n	800e4b4 <_svfiprintf_r+0x130>
 800e49a:	7863      	ldrb	r3, [r4, #1]
 800e49c:	2b2a      	cmp	r3, #42	; 0x2a
 800e49e:	d135      	bne.n	800e50c <_svfiprintf_r+0x188>
 800e4a0:	9b03      	ldr	r3, [sp, #12]
 800e4a2:	1d1a      	adds	r2, r3, #4
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	9203      	str	r2, [sp, #12]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	bfb8      	it	lt
 800e4ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800e4b0:	3402      	adds	r4, #2
 800e4b2:	9305      	str	r3, [sp, #20]
 800e4b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e580 <_svfiprintf_r+0x1fc>
 800e4b8:	7821      	ldrb	r1, [r4, #0]
 800e4ba:	2203      	movs	r2, #3
 800e4bc:	4650      	mov	r0, sl
 800e4be:	f7f1 fe9f 	bl	8000200 <memchr>
 800e4c2:	b140      	cbz	r0, 800e4d6 <_svfiprintf_r+0x152>
 800e4c4:	2340      	movs	r3, #64	; 0x40
 800e4c6:	eba0 000a 	sub.w	r0, r0, sl
 800e4ca:	fa03 f000 	lsl.w	r0, r3, r0
 800e4ce:	9b04      	ldr	r3, [sp, #16]
 800e4d0:	4303      	orrs	r3, r0
 800e4d2:	3401      	adds	r4, #1
 800e4d4:	9304      	str	r3, [sp, #16]
 800e4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4da:	4826      	ldr	r0, [pc, #152]	; (800e574 <_svfiprintf_r+0x1f0>)
 800e4dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4e0:	2206      	movs	r2, #6
 800e4e2:	f7f1 fe8d 	bl	8000200 <memchr>
 800e4e6:	2800      	cmp	r0, #0
 800e4e8:	d038      	beq.n	800e55c <_svfiprintf_r+0x1d8>
 800e4ea:	4b23      	ldr	r3, [pc, #140]	; (800e578 <_svfiprintf_r+0x1f4>)
 800e4ec:	bb1b      	cbnz	r3, 800e536 <_svfiprintf_r+0x1b2>
 800e4ee:	9b03      	ldr	r3, [sp, #12]
 800e4f0:	3307      	adds	r3, #7
 800e4f2:	f023 0307 	bic.w	r3, r3, #7
 800e4f6:	3308      	adds	r3, #8
 800e4f8:	9303      	str	r3, [sp, #12]
 800e4fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4fc:	4433      	add	r3, r6
 800e4fe:	9309      	str	r3, [sp, #36]	; 0x24
 800e500:	e767      	b.n	800e3d2 <_svfiprintf_r+0x4e>
 800e502:	fb0c 3202 	mla	r2, ip, r2, r3
 800e506:	460c      	mov	r4, r1
 800e508:	2001      	movs	r0, #1
 800e50a:	e7a5      	b.n	800e458 <_svfiprintf_r+0xd4>
 800e50c:	2300      	movs	r3, #0
 800e50e:	3401      	adds	r4, #1
 800e510:	9305      	str	r3, [sp, #20]
 800e512:	4619      	mov	r1, r3
 800e514:	f04f 0c0a 	mov.w	ip, #10
 800e518:	4620      	mov	r0, r4
 800e51a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e51e:	3a30      	subs	r2, #48	; 0x30
 800e520:	2a09      	cmp	r2, #9
 800e522:	d903      	bls.n	800e52c <_svfiprintf_r+0x1a8>
 800e524:	2b00      	cmp	r3, #0
 800e526:	d0c5      	beq.n	800e4b4 <_svfiprintf_r+0x130>
 800e528:	9105      	str	r1, [sp, #20]
 800e52a:	e7c3      	b.n	800e4b4 <_svfiprintf_r+0x130>
 800e52c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e530:	4604      	mov	r4, r0
 800e532:	2301      	movs	r3, #1
 800e534:	e7f0      	b.n	800e518 <_svfiprintf_r+0x194>
 800e536:	ab03      	add	r3, sp, #12
 800e538:	9300      	str	r3, [sp, #0]
 800e53a:	462a      	mov	r2, r5
 800e53c:	4b0f      	ldr	r3, [pc, #60]	; (800e57c <_svfiprintf_r+0x1f8>)
 800e53e:	a904      	add	r1, sp, #16
 800e540:	4638      	mov	r0, r7
 800e542:	f7fc f9e3 	bl	800a90c <_printf_float>
 800e546:	1c42      	adds	r2, r0, #1
 800e548:	4606      	mov	r6, r0
 800e54a:	d1d6      	bne.n	800e4fa <_svfiprintf_r+0x176>
 800e54c:	89ab      	ldrh	r3, [r5, #12]
 800e54e:	065b      	lsls	r3, r3, #25
 800e550:	f53f af2c 	bmi.w	800e3ac <_svfiprintf_r+0x28>
 800e554:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e556:	b01d      	add	sp, #116	; 0x74
 800e558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e55c:	ab03      	add	r3, sp, #12
 800e55e:	9300      	str	r3, [sp, #0]
 800e560:	462a      	mov	r2, r5
 800e562:	4b06      	ldr	r3, [pc, #24]	; (800e57c <_svfiprintf_r+0x1f8>)
 800e564:	a904      	add	r1, sp, #16
 800e566:	4638      	mov	r0, r7
 800e568:	f7fc fc74 	bl	800ae54 <_printf_i>
 800e56c:	e7eb      	b.n	800e546 <_svfiprintf_r+0x1c2>
 800e56e:	bf00      	nop
 800e570:	080107b4 	.word	0x080107b4
 800e574:	080107be 	.word	0x080107be
 800e578:	0800a90d 	.word	0x0800a90d
 800e57c:	0800e2cd 	.word	0x0800e2cd
 800e580:	080107ba 	.word	0x080107ba

0800e584 <_sungetc_r>:
 800e584:	b538      	push	{r3, r4, r5, lr}
 800e586:	1c4b      	adds	r3, r1, #1
 800e588:	4614      	mov	r4, r2
 800e58a:	d103      	bne.n	800e594 <_sungetc_r+0x10>
 800e58c:	f04f 35ff 	mov.w	r5, #4294967295
 800e590:	4628      	mov	r0, r5
 800e592:	bd38      	pop	{r3, r4, r5, pc}
 800e594:	8993      	ldrh	r3, [r2, #12]
 800e596:	f023 0320 	bic.w	r3, r3, #32
 800e59a:	8193      	strh	r3, [r2, #12]
 800e59c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e59e:	6852      	ldr	r2, [r2, #4]
 800e5a0:	b2cd      	uxtb	r5, r1
 800e5a2:	b18b      	cbz	r3, 800e5c8 <_sungetc_r+0x44>
 800e5a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e5a6:	4293      	cmp	r3, r2
 800e5a8:	dd08      	ble.n	800e5bc <_sungetc_r+0x38>
 800e5aa:	6823      	ldr	r3, [r4, #0]
 800e5ac:	1e5a      	subs	r2, r3, #1
 800e5ae:	6022      	str	r2, [r4, #0]
 800e5b0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e5b4:	6863      	ldr	r3, [r4, #4]
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	6063      	str	r3, [r4, #4]
 800e5ba:	e7e9      	b.n	800e590 <_sungetc_r+0xc>
 800e5bc:	4621      	mov	r1, r4
 800e5be:	f000 fbf5 	bl	800edac <__submore>
 800e5c2:	2800      	cmp	r0, #0
 800e5c4:	d0f1      	beq.n	800e5aa <_sungetc_r+0x26>
 800e5c6:	e7e1      	b.n	800e58c <_sungetc_r+0x8>
 800e5c8:	6921      	ldr	r1, [r4, #16]
 800e5ca:	6823      	ldr	r3, [r4, #0]
 800e5cc:	b151      	cbz	r1, 800e5e4 <_sungetc_r+0x60>
 800e5ce:	4299      	cmp	r1, r3
 800e5d0:	d208      	bcs.n	800e5e4 <_sungetc_r+0x60>
 800e5d2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e5d6:	42a9      	cmp	r1, r5
 800e5d8:	d104      	bne.n	800e5e4 <_sungetc_r+0x60>
 800e5da:	3b01      	subs	r3, #1
 800e5dc:	3201      	adds	r2, #1
 800e5de:	6023      	str	r3, [r4, #0]
 800e5e0:	6062      	str	r2, [r4, #4]
 800e5e2:	e7d5      	b.n	800e590 <_sungetc_r+0xc>
 800e5e4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e5e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e5ec:	6363      	str	r3, [r4, #52]	; 0x34
 800e5ee:	2303      	movs	r3, #3
 800e5f0:	63a3      	str	r3, [r4, #56]	; 0x38
 800e5f2:	4623      	mov	r3, r4
 800e5f4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e5f8:	6023      	str	r3, [r4, #0]
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	e7dc      	b.n	800e5b8 <_sungetc_r+0x34>

0800e5fe <__ssrefill_r>:
 800e5fe:	b510      	push	{r4, lr}
 800e600:	460c      	mov	r4, r1
 800e602:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e604:	b169      	cbz	r1, 800e622 <__ssrefill_r+0x24>
 800e606:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e60a:	4299      	cmp	r1, r3
 800e60c:	d001      	beq.n	800e612 <__ssrefill_r+0x14>
 800e60e:	f7ff fdb3 	bl	800e178 <_free_r>
 800e612:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e614:	6063      	str	r3, [r4, #4]
 800e616:	2000      	movs	r0, #0
 800e618:	6360      	str	r0, [r4, #52]	; 0x34
 800e61a:	b113      	cbz	r3, 800e622 <__ssrefill_r+0x24>
 800e61c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e61e:	6023      	str	r3, [r4, #0]
 800e620:	bd10      	pop	{r4, pc}
 800e622:	6923      	ldr	r3, [r4, #16]
 800e624:	6023      	str	r3, [r4, #0]
 800e626:	2300      	movs	r3, #0
 800e628:	6063      	str	r3, [r4, #4]
 800e62a:	89a3      	ldrh	r3, [r4, #12]
 800e62c:	f043 0320 	orr.w	r3, r3, #32
 800e630:	81a3      	strh	r3, [r4, #12]
 800e632:	f04f 30ff 	mov.w	r0, #4294967295
 800e636:	e7f3      	b.n	800e620 <__ssrefill_r+0x22>

0800e638 <__ssvfiscanf_r>:
 800e638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e63c:	460c      	mov	r4, r1
 800e63e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800e642:	2100      	movs	r1, #0
 800e644:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e648:	49b2      	ldr	r1, [pc, #712]	; (800e914 <__ssvfiscanf_r+0x2dc>)
 800e64a:	91a0      	str	r1, [sp, #640]	; 0x280
 800e64c:	f10d 0804 	add.w	r8, sp, #4
 800e650:	49b1      	ldr	r1, [pc, #708]	; (800e918 <__ssvfiscanf_r+0x2e0>)
 800e652:	4fb2      	ldr	r7, [pc, #712]	; (800e91c <__ssvfiscanf_r+0x2e4>)
 800e654:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800e920 <__ssvfiscanf_r+0x2e8>
 800e658:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e65c:	4606      	mov	r6, r0
 800e65e:	91a1      	str	r1, [sp, #644]	; 0x284
 800e660:	9300      	str	r3, [sp, #0]
 800e662:	f892 a000 	ldrb.w	sl, [r2]
 800e666:	f1ba 0f00 	cmp.w	sl, #0
 800e66a:	f000 8151 	beq.w	800e910 <__ssvfiscanf_r+0x2d8>
 800e66e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800e672:	f013 0308 	ands.w	r3, r3, #8
 800e676:	f102 0501 	add.w	r5, r2, #1
 800e67a:	d019      	beq.n	800e6b0 <__ssvfiscanf_r+0x78>
 800e67c:	6863      	ldr	r3, [r4, #4]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	dd0f      	ble.n	800e6a2 <__ssvfiscanf_r+0x6a>
 800e682:	6823      	ldr	r3, [r4, #0]
 800e684:	781a      	ldrb	r2, [r3, #0]
 800e686:	5cba      	ldrb	r2, [r7, r2]
 800e688:	0712      	lsls	r2, r2, #28
 800e68a:	d401      	bmi.n	800e690 <__ssvfiscanf_r+0x58>
 800e68c:	462a      	mov	r2, r5
 800e68e:	e7e8      	b.n	800e662 <__ssvfiscanf_r+0x2a>
 800e690:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e692:	3201      	adds	r2, #1
 800e694:	9245      	str	r2, [sp, #276]	; 0x114
 800e696:	6862      	ldr	r2, [r4, #4]
 800e698:	3301      	adds	r3, #1
 800e69a:	3a01      	subs	r2, #1
 800e69c:	6062      	str	r2, [r4, #4]
 800e69e:	6023      	str	r3, [r4, #0]
 800e6a0:	e7ec      	b.n	800e67c <__ssvfiscanf_r+0x44>
 800e6a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e6a4:	4621      	mov	r1, r4
 800e6a6:	4630      	mov	r0, r6
 800e6a8:	4798      	blx	r3
 800e6aa:	2800      	cmp	r0, #0
 800e6ac:	d0e9      	beq.n	800e682 <__ssvfiscanf_r+0x4a>
 800e6ae:	e7ed      	b.n	800e68c <__ssvfiscanf_r+0x54>
 800e6b0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800e6b4:	f040 8083 	bne.w	800e7be <__ssvfiscanf_r+0x186>
 800e6b8:	9341      	str	r3, [sp, #260]	; 0x104
 800e6ba:	9343      	str	r3, [sp, #268]	; 0x10c
 800e6bc:	7853      	ldrb	r3, [r2, #1]
 800e6be:	2b2a      	cmp	r3, #42	; 0x2a
 800e6c0:	bf02      	ittt	eq
 800e6c2:	2310      	moveq	r3, #16
 800e6c4:	1c95      	addeq	r5, r2, #2
 800e6c6:	9341      	streq	r3, [sp, #260]	; 0x104
 800e6c8:	220a      	movs	r2, #10
 800e6ca:	46ab      	mov	fp, r5
 800e6cc:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800e6d0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e6d4:	2b09      	cmp	r3, #9
 800e6d6:	d91d      	bls.n	800e714 <__ssvfiscanf_r+0xdc>
 800e6d8:	4891      	ldr	r0, [pc, #580]	; (800e920 <__ssvfiscanf_r+0x2e8>)
 800e6da:	2203      	movs	r2, #3
 800e6dc:	f7f1 fd90 	bl	8000200 <memchr>
 800e6e0:	b140      	cbz	r0, 800e6f4 <__ssvfiscanf_r+0xbc>
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	eba0 0009 	sub.w	r0, r0, r9
 800e6e8:	fa03 f000 	lsl.w	r0, r3, r0
 800e6ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e6ee:	4318      	orrs	r0, r3
 800e6f0:	9041      	str	r0, [sp, #260]	; 0x104
 800e6f2:	465d      	mov	r5, fp
 800e6f4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e6f8:	2b78      	cmp	r3, #120	; 0x78
 800e6fa:	d806      	bhi.n	800e70a <__ssvfiscanf_r+0xd2>
 800e6fc:	2b57      	cmp	r3, #87	; 0x57
 800e6fe:	d810      	bhi.n	800e722 <__ssvfiscanf_r+0xea>
 800e700:	2b25      	cmp	r3, #37	; 0x25
 800e702:	d05c      	beq.n	800e7be <__ssvfiscanf_r+0x186>
 800e704:	d856      	bhi.n	800e7b4 <__ssvfiscanf_r+0x17c>
 800e706:	2b00      	cmp	r3, #0
 800e708:	d074      	beq.n	800e7f4 <__ssvfiscanf_r+0x1bc>
 800e70a:	2303      	movs	r3, #3
 800e70c:	9347      	str	r3, [sp, #284]	; 0x11c
 800e70e:	230a      	movs	r3, #10
 800e710:	9342      	str	r3, [sp, #264]	; 0x108
 800e712:	e081      	b.n	800e818 <__ssvfiscanf_r+0x1e0>
 800e714:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e716:	fb02 1303 	mla	r3, r2, r3, r1
 800e71a:	3b30      	subs	r3, #48	; 0x30
 800e71c:	9343      	str	r3, [sp, #268]	; 0x10c
 800e71e:	465d      	mov	r5, fp
 800e720:	e7d3      	b.n	800e6ca <__ssvfiscanf_r+0x92>
 800e722:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e726:	2a20      	cmp	r2, #32
 800e728:	d8ef      	bhi.n	800e70a <__ssvfiscanf_r+0xd2>
 800e72a:	a101      	add	r1, pc, #4	; (adr r1, 800e730 <__ssvfiscanf_r+0xf8>)
 800e72c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e730:	0800e803 	.word	0x0800e803
 800e734:	0800e70b 	.word	0x0800e70b
 800e738:	0800e70b 	.word	0x0800e70b
 800e73c:	0800e861 	.word	0x0800e861
 800e740:	0800e70b 	.word	0x0800e70b
 800e744:	0800e70b 	.word	0x0800e70b
 800e748:	0800e70b 	.word	0x0800e70b
 800e74c:	0800e70b 	.word	0x0800e70b
 800e750:	0800e70b 	.word	0x0800e70b
 800e754:	0800e70b 	.word	0x0800e70b
 800e758:	0800e70b 	.word	0x0800e70b
 800e75c:	0800e877 	.word	0x0800e877
 800e760:	0800e84d 	.word	0x0800e84d
 800e764:	0800e7bb 	.word	0x0800e7bb
 800e768:	0800e7bb 	.word	0x0800e7bb
 800e76c:	0800e7bb 	.word	0x0800e7bb
 800e770:	0800e70b 	.word	0x0800e70b
 800e774:	0800e851 	.word	0x0800e851
 800e778:	0800e70b 	.word	0x0800e70b
 800e77c:	0800e70b 	.word	0x0800e70b
 800e780:	0800e70b 	.word	0x0800e70b
 800e784:	0800e70b 	.word	0x0800e70b
 800e788:	0800e887 	.word	0x0800e887
 800e78c:	0800e859 	.word	0x0800e859
 800e790:	0800e7fb 	.word	0x0800e7fb
 800e794:	0800e70b 	.word	0x0800e70b
 800e798:	0800e70b 	.word	0x0800e70b
 800e79c:	0800e883 	.word	0x0800e883
 800e7a0:	0800e70b 	.word	0x0800e70b
 800e7a4:	0800e84d 	.word	0x0800e84d
 800e7a8:	0800e70b 	.word	0x0800e70b
 800e7ac:	0800e70b 	.word	0x0800e70b
 800e7b0:	0800e803 	.word	0x0800e803
 800e7b4:	3b45      	subs	r3, #69	; 0x45
 800e7b6:	2b02      	cmp	r3, #2
 800e7b8:	d8a7      	bhi.n	800e70a <__ssvfiscanf_r+0xd2>
 800e7ba:	2305      	movs	r3, #5
 800e7bc:	e02b      	b.n	800e816 <__ssvfiscanf_r+0x1de>
 800e7be:	6863      	ldr	r3, [r4, #4]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	dd0d      	ble.n	800e7e0 <__ssvfiscanf_r+0x1a8>
 800e7c4:	6823      	ldr	r3, [r4, #0]
 800e7c6:	781a      	ldrb	r2, [r3, #0]
 800e7c8:	4552      	cmp	r2, sl
 800e7ca:	f040 80a1 	bne.w	800e910 <__ssvfiscanf_r+0x2d8>
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	6862      	ldr	r2, [r4, #4]
 800e7d2:	6023      	str	r3, [r4, #0]
 800e7d4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e7d6:	3a01      	subs	r2, #1
 800e7d8:	3301      	adds	r3, #1
 800e7da:	6062      	str	r2, [r4, #4]
 800e7dc:	9345      	str	r3, [sp, #276]	; 0x114
 800e7de:	e755      	b.n	800e68c <__ssvfiscanf_r+0x54>
 800e7e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e7e2:	4621      	mov	r1, r4
 800e7e4:	4630      	mov	r0, r6
 800e7e6:	4798      	blx	r3
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	d0eb      	beq.n	800e7c4 <__ssvfiscanf_r+0x18c>
 800e7ec:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	f040 8084 	bne.w	800e8fc <__ssvfiscanf_r+0x2c4>
 800e7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7f8:	e086      	b.n	800e908 <__ssvfiscanf_r+0x2d0>
 800e7fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e7fc:	f042 0220 	orr.w	r2, r2, #32
 800e800:	9241      	str	r2, [sp, #260]	; 0x104
 800e802:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e808:	9241      	str	r2, [sp, #260]	; 0x104
 800e80a:	2210      	movs	r2, #16
 800e80c:	2b6f      	cmp	r3, #111	; 0x6f
 800e80e:	9242      	str	r2, [sp, #264]	; 0x108
 800e810:	bf34      	ite	cc
 800e812:	2303      	movcc	r3, #3
 800e814:	2304      	movcs	r3, #4
 800e816:	9347      	str	r3, [sp, #284]	; 0x11c
 800e818:	6863      	ldr	r3, [r4, #4]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	dd41      	ble.n	800e8a2 <__ssvfiscanf_r+0x26a>
 800e81e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e820:	0659      	lsls	r1, r3, #25
 800e822:	d404      	bmi.n	800e82e <__ssvfiscanf_r+0x1f6>
 800e824:	6823      	ldr	r3, [r4, #0]
 800e826:	781a      	ldrb	r2, [r3, #0]
 800e828:	5cba      	ldrb	r2, [r7, r2]
 800e82a:	0712      	lsls	r2, r2, #28
 800e82c:	d440      	bmi.n	800e8b0 <__ssvfiscanf_r+0x278>
 800e82e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e830:	2b02      	cmp	r3, #2
 800e832:	dc4f      	bgt.n	800e8d4 <__ssvfiscanf_r+0x29c>
 800e834:	466b      	mov	r3, sp
 800e836:	4622      	mov	r2, r4
 800e838:	a941      	add	r1, sp, #260	; 0x104
 800e83a:	4630      	mov	r0, r6
 800e83c:	f000 f874 	bl	800e928 <_scanf_chars>
 800e840:	2801      	cmp	r0, #1
 800e842:	d065      	beq.n	800e910 <__ssvfiscanf_r+0x2d8>
 800e844:	2802      	cmp	r0, #2
 800e846:	f47f af21 	bne.w	800e68c <__ssvfiscanf_r+0x54>
 800e84a:	e7cf      	b.n	800e7ec <__ssvfiscanf_r+0x1b4>
 800e84c:	220a      	movs	r2, #10
 800e84e:	e7dd      	b.n	800e80c <__ssvfiscanf_r+0x1d4>
 800e850:	2300      	movs	r3, #0
 800e852:	9342      	str	r3, [sp, #264]	; 0x108
 800e854:	2303      	movs	r3, #3
 800e856:	e7de      	b.n	800e816 <__ssvfiscanf_r+0x1de>
 800e858:	2308      	movs	r3, #8
 800e85a:	9342      	str	r3, [sp, #264]	; 0x108
 800e85c:	2304      	movs	r3, #4
 800e85e:	e7da      	b.n	800e816 <__ssvfiscanf_r+0x1de>
 800e860:	4629      	mov	r1, r5
 800e862:	4640      	mov	r0, r8
 800e864:	f000 f9d8 	bl	800ec18 <__sccl>
 800e868:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e86a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e86e:	9341      	str	r3, [sp, #260]	; 0x104
 800e870:	4605      	mov	r5, r0
 800e872:	2301      	movs	r3, #1
 800e874:	e7cf      	b.n	800e816 <__ssvfiscanf_r+0x1de>
 800e876:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e87c:	9341      	str	r3, [sp, #260]	; 0x104
 800e87e:	2300      	movs	r3, #0
 800e880:	e7c9      	b.n	800e816 <__ssvfiscanf_r+0x1de>
 800e882:	2302      	movs	r3, #2
 800e884:	e7c7      	b.n	800e816 <__ssvfiscanf_r+0x1de>
 800e886:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e888:	06c3      	lsls	r3, r0, #27
 800e88a:	f53f aeff 	bmi.w	800e68c <__ssvfiscanf_r+0x54>
 800e88e:	9b00      	ldr	r3, [sp, #0]
 800e890:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e892:	1d19      	adds	r1, r3, #4
 800e894:	9100      	str	r1, [sp, #0]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	07c0      	lsls	r0, r0, #31
 800e89a:	bf4c      	ite	mi
 800e89c:	801a      	strhmi	r2, [r3, #0]
 800e89e:	601a      	strpl	r2, [r3, #0]
 800e8a0:	e6f4      	b.n	800e68c <__ssvfiscanf_r+0x54>
 800e8a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e8a4:	4621      	mov	r1, r4
 800e8a6:	4630      	mov	r0, r6
 800e8a8:	4798      	blx	r3
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	d0b7      	beq.n	800e81e <__ssvfiscanf_r+0x1e6>
 800e8ae:	e79d      	b.n	800e7ec <__ssvfiscanf_r+0x1b4>
 800e8b0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e8b2:	3201      	adds	r2, #1
 800e8b4:	9245      	str	r2, [sp, #276]	; 0x114
 800e8b6:	6862      	ldr	r2, [r4, #4]
 800e8b8:	3a01      	subs	r2, #1
 800e8ba:	2a00      	cmp	r2, #0
 800e8bc:	6062      	str	r2, [r4, #4]
 800e8be:	dd02      	ble.n	800e8c6 <__ssvfiscanf_r+0x28e>
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	6023      	str	r3, [r4, #0]
 800e8c4:	e7ae      	b.n	800e824 <__ssvfiscanf_r+0x1ec>
 800e8c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e8c8:	4621      	mov	r1, r4
 800e8ca:	4630      	mov	r0, r6
 800e8cc:	4798      	blx	r3
 800e8ce:	2800      	cmp	r0, #0
 800e8d0:	d0a8      	beq.n	800e824 <__ssvfiscanf_r+0x1ec>
 800e8d2:	e78b      	b.n	800e7ec <__ssvfiscanf_r+0x1b4>
 800e8d4:	2b04      	cmp	r3, #4
 800e8d6:	dc06      	bgt.n	800e8e6 <__ssvfiscanf_r+0x2ae>
 800e8d8:	466b      	mov	r3, sp
 800e8da:	4622      	mov	r2, r4
 800e8dc:	a941      	add	r1, sp, #260	; 0x104
 800e8de:	4630      	mov	r0, r6
 800e8e0:	f000 f87a 	bl	800e9d8 <_scanf_i>
 800e8e4:	e7ac      	b.n	800e840 <__ssvfiscanf_r+0x208>
 800e8e6:	4b0f      	ldr	r3, [pc, #60]	; (800e924 <__ssvfiscanf_r+0x2ec>)
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	f43f aecf 	beq.w	800e68c <__ssvfiscanf_r+0x54>
 800e8ee:	466b      	mov	r3, sp
 800e8f0:	4622      	mov	r2, r4
 800e8f2:	a941      	add	r1, sp, #260	; 0x104
 800e8f4:	4630      	mov	r0, r6
 800e8f6:	f7fc fbd3 	bl	800b0a0 <_scanf_float>
 800e8fa:	e7a1      	b.n	800e840 <__ssvfiscanf_r+0x208>
 800e8fc:	89a3      	ldrh	r3, [r4, #12]
 800e8fe:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e902:	bf18      	it	ne
 800e904:	f04f 30ff 	movne.w	r0, #4294967295
 800e908:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800e90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e910:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e912:	e7f9      	b.n	800e908 <__ssvfiscanf_r+0x2d0>
 800e914:	0800e585 	.word	0x0800e585
 800e918:	0800e5ff 	.word	0x0800e5ff
 800e91c:	08010441 	.word	0x08010441
 800e920:	080107ba 	.word	0x080107ba
 800e924:	0800b0a1 	.word	0x0800b0a1

0800e928 <_scanf_chars>:
 800e928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e92c:	4615      	mov	r5, r2
 800e92e:	688a      	ldr	r2, [r1, #8]
 800e930:	4680      	mov	r8, r0
 800e932:	460c      	mov	r4, r1
 800e934:	b932      	cbnz	r2, 800e944 <_scanf_chars+0x1c>
 800e936:	698a      	ldr	r2, [r1, #24]
 800e938:	2a00      	cmp	r2, #0
 800e93a:	bf0c      	ite	eq
 800e93c:	2201      	moveq	r2, #1
 800e93e:	f04f 32ff 	movne.w	r2, #4294967295
 800e942:	608a      	str	r2, [r1, #8]
 800e944:	6822      	ldr	r2, [r4, #0]
 800e946:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800e9d4 <_scanf_chars+0xac>
 800e94a:	06d1      	lsls	r1, r2, #27
 800e94c:	bf5f      	itttt	pl
 800e94e:	681a      	ldrpl	r2, [r3, #0]
 800e950:	1d11      	addpl	r1, r2, #4
 800e952:	6019      	strpl	r1, [r3, #0]
 800e954:	6816      	ldrpl	r6, [r2, #0]
 800e956:	2700      	movs	r7, #0
 800e958:	69a0      	ldr	r0, [r4, #24]
 800e95a:	b188      	cbz	r0, 800e980 <_scanf_chars+0x58>
 800e95c:	2801      	cmp	r0, #1
 800e95e:	d107      	bne.n	800e970 <_scanf_chars+0x48>
 800e960:	682b      	ldr	r3, [r5, #0]
 800e962:	781a      	ldrb	r2, [r3, #0]
 800e964:	6963      	ldr	r3, [r4, #20]
 800e966:	5c9b      	ldrb	r3, [r3, r2]
 800e968:	b953      	cbnz	r3, 800e980 <_scanf_chars+0x58>
 800e96a:	bb27      	cbnz	r7, 800e9b6 <_scanf_chars+0x8e>
 800e96c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e970:	2802      	cmp	r0, #2
 800e972:	d120      	bne.n	800e9b6 <_scanf_chars+0x8e>
 800e974:	682b      	ldr	r3, [r5, #0]
 800e976:	781b      	ldrb	r3, [r3, #0]
 800e978:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e97c:	071b      	lsls	r3, r3, #28
 800e97e:	d41a      	bmi.n	800e9b6 <_scanf_chars+0x8e>
 800e980:	6823      	ldr	r3, [r4, #0]
 800e982:	06da      	lsls	r2, r3, #27
 800e984:	bf5e      	ittt	pl
 800e986:	682b      	ldrpl	r3, [r5, #0]
 800e988:	781b      	ldrbpl	r3, [r3, #0]
 800e98a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e98e:	682a      	ldr	r2, [r5, #0]
 800e990:	686b      	ldr	r3, [r5, #4]
 800e992:	3201      	adds	r2, #1
 800e994:	602a      	str	r2, [r5, #0]
 800e996:	68a2      	ldr	r2, [r4, #8]
 800e998:	3b01      	subs	r3, #1
 800e99a:	3a01      	subs	r2, #1
 800e99c:	606b      	str	r3, [r5, #4]
 800e99e:	3701      	adds	r7, #1
 800e9a0:	60a2      	str	r2, [r4, #8]
 800e9a2:	b142      	cbz	r2, 800e9b6 <_scanf_chars+0x8e>
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	dcd7      	bgt.n	800e958 <_scanf_chars+0x30>
 800e9a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e9ac:	4629      	mov	r1, r5
 800e9ae:	4640      	mov	r0, r8
 800e9b0:	4798      	blx	r3
 800e9b2:	2800      	cmp	r0, #0
 800e9b4:	d0d0      	beq.n	800e958 <_scanf_chars+0x30>
 800e9b6:	6823      	ldr	r3, [r4, #0]
 800e9b8:	f013 0310 	ands.w	r3, r3, #16
 800e9bc:	d105      	bne.n	800e9ca <_scanf_chars+0xa2>
 800e9be:	68e2      	ldr	r2, [r4, #12]
 800e9c0:	3201      	adds	r2, #1
 800e9c2:	60e2      	str	r2, [r4, #12]
 800e9c4:	69a2      	ldr	r2, [r4, #24]
 800e9c6:	b102      	cbz	r2, 800e9ca <_scanf_chars+0xa2>
 800e9c8:	7033      	strb	r3, [r6, #0]
 800e9ca:	6923      	ldr	r3, [r4, #16]
 800e9cc:	441f      	add	r7, r3
 800e9ce:	6127      	str	r7, [r4, #16]
 800e9d0:	2000      	movs	r0, #0
 800e9d2:	e7cb      	b.n	800e96c <_scanf_chars+0x44>
 800e9d4:	08010441 	.word	0x08010441

0800e9d8 <_scanf_i>:
 800e9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9dc:	4698      	mov	r8, r3
 800e9de:	4b74      	ldr	r3, [pc, #464]	; (800ebb0 <_scanf_i+0x1d8>)
 800e9e0:	460c      	mov	r4, r1
 800e9e2:	4682      	mov	sl, r0
 800e9e4:	4616      	mov	r6, r2
 800e9e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e9ea:	b087      	sub	sp, #28
 800e9ec:	ab03      	add	r3, sp, #12
 800e9ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e9f2:	4b70      	ldr	r3, [pc, #448]	; (800ebb4 <_scanf_i+0x1dc>)
 800e9f4:	69a1      	ldr	r1, [r4, #24]
 800e9f6:	4a70      	ldr	r2, [pc, #448]	; (800ebb8 <_scanf_i+0x1e0>)
 800e9f8:	2903      	cmp	r1, #3
 800e9fa:	bf18      	it	ne
 800e9fc:	461a      	movne	r2, r3
 800e9fe:	68a3      	ldr	r3, [r4, #8]
 800ea00:	9201      	str	r2, [sp, #4]
 800ea02:	1e5a      	subs	r2, r3, #1
 800ea04:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ea08:	bf88      	it	hi
 800ea0a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ea0e:	4627      	mov	r7, r4
 800ea10:	bf82      	ittt	hi
 800ea12:	eb03 0905 	addhi.w	r9, r3, r5
 800ea16:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ea1a:	60a3      	strhi	r3, [r4, #8]
 800ea1c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ea20:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ea24:	bf98      	it	ls
 800ea26:	f04f 0900 	movls.w	r9, #0
 800ea2a:	6023      	str	r3, [r4, #0]
 800ea2c:	463d      	mov	r5, r7
 800ea2e:	f04f 0b00 	mov.w	fp, #0
 800ea32:	6831      	ldr	r1, [r6, #0]
 800ea34:	ab03      	add	r3, sp, #12
 800ea36:	7809      	ldrb	r1, [r1, #0]
 800ea38:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ea3c:	2202      	movs	r2, #2
 800ea3e:	f7f1 fbdf 	bl	8000200 <memchr>
 800ea42:	b328      	cbz	r0, 800ea90 <_scanf_i+0xb8>
 800ea44:	f1bb 0f01 	cmp.w	fp, #1
 800ea48:	d159      	bne.n	800eafe <_scanf_i+0x126>
 800ea4a:	6862      	ldr	r2, [r4, #4]
 800ea4c:	b92a      	cbnz	r2, 800ea5a <_scanf_i+0x82>
 800ea4e:	6822      	ldr	r2, [r4, #0]
 800ea50:	2308      	movs	r3, #8
 800ea52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ea56:	6063      	str	r3, [r4, #4]
 800ea58:	6022      	str	r2, [r4, #0]
 800ea5a:	6822      	ldr	r2, [r4, #0]
 800ea5c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ea60:	6022      	str	r2, [r4, #0]
 800ea62:	68a2      	ldr	r2, [r4, #8]
 800ea64:	1e51      	subs	r1, r2, #1
 800ea66:	60a1      	str	r1, [r4, #8]
 800ea68:	b192      	cbz	r2, 800ea90 <_scanf_i+0xb8>
 800ea6a:	6832      	ldr	r2, [r6, #0]
 800ea6c:	1c51      	adds	r1, r2, #1
 800ea6e:	6031      	str	r1, [r6, #0]
 800ea70:	7812      	ldrb	r2, [r2, #0]
 800ea72:	f805 2b01 	strb.w	r2, [r5], #1
 800ea76:	6872      	ldr	r2, [r6, #4]
 800ea78:	3a01      	subs	r2, #1
 800ea7a:	2a00      	cmp	r2, #0
 800ea7c:	6072      	str	r2, [r6, #4]
 800ea7e:	dc07      	bgt.n	800ea90 <_scanf_i+0xb8>
 800ea80:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ea84:	4631      	mov	r1, r6
 800ea86:	4650      	mov	r0, sl
 800ea88:	4790      	blx	r2
 800ea8a:	2800      	cmp	r0, #0
 800ea8c:	f040 8085 	bne.w	800eb9a <_scanf_i+0x1c2>
 800ea90:	f10b 0b01 	add.w	fp, fp, #1
 800ea94:	f1bb 0f03 	cmp.w	fp, #3
 800ea98:	d1cb      	bne.n	800ea32 <_scanf_i+0x5a>
 800ea9a:	6863      	ldr	r3, [r4, #4]
 800ea9c:	b90b      	cbnz	r3, 800eaa2 <_scanf_i+0xca>
 800ea9e:	230a      	movs	r3, #10
 800eaa0:	6063      	str	r3, [r4, #4]
 800eaa2:	6863      	ldr	r3, [r4, #4]
 800eaa4:	4945      	ldr	r1, [pc, #276]	; (800ebbc <_scanf_i+0x1e4>)
 800eaa6:	6960      	ldr	r0, [r4, #20]
 800eaa8:	1ac9      	subs	r1, r1, r3
 800eaaa:	f000 f8b5 	bl	800ec18 <__sccl>
 800eaae:	f04f 0b00 	mov.w	fp, #0
 800eab2:	68a3      	ldr	r3, [r4, #8]
 800eab4:	6822      	ldr	r2, [r4, #0]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d03d      	beq.n	800eb36 <_scanf_i+0x15e>
 800eaba:	6831      	ldr	r1, [r6, #0]
 800eabc:	6960      	ldr	r0, [r4, #20]
 800eabe:	f891 c000 	ldrb.w	ip, [r1]
 800eac2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800eac6:	2800      	cmp	r0, #0
 800eac8:	d035      	beq.n	800eb36 <_scanf_i+0x15e>
 800eaca:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800eace:	d124      	bne.n	800eb1a <_scanf_i+0x142>
 800ead0:	0510      	lsls	r0, r2, #20
 800ead2:	d522      	bpl.n	800eb1a <_scanf_i+0x142>
 800ead4:	f10b 0b01 	add.w	fp, fp, #1
 800ead8:	f1b9 0f00 	cmp.w	r9, #0
 800eadc:	d003      	beq.n	800eae6 <_scanf_i+0x10e>
 800eade:	3301      	adds	r3, #1
 800eae0:	f109 39ff 	add.w	r9, r9, #4294967295
 800eae4:	60a3      	str	r3, [r4, #8]
 800eae6:	6873      	ldr	r3, [r6, #4]
 800eae8:	3b01      	subs	r3, #1
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	6073      	str	r3, [r6, #4]
 800eaee:	dd1b      	ble.n	800eb28 <_scanf_i+0x150>
 800eaf0:	6833      	ldr	r3, [r6, #0]
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	6033      	str	r3, [r6, #0]
 800eaf6:	68a3      	ldr	r3, [r4, #8]
 800eaf8:	3b01      	subs	r3, #1
 800eafa:	60a3      	str	r3, [r4, #8]
 800eafc:	e7d9      	b.n	800eab2 <_scanf_i+0xda>
 800eafe:	f1bb 0f02 	cmp.w	fp, #2
 800eb02:	d1ae      	bne.n	800ea62 <_scanf_i+0x8a>
 800eb04:	6822      	ldr	r2, [r4, #0]
 800eb06:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800eb0a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800eb0e:	d1bf      	bne.n	800ea90 <_scanf_i+0xb8>
 800eb10:	2310      	movs	r3, #16
 800eb12:	6063      	str	r3, [r4, #4]
 800eb14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eb18:	e7a2      	b.n	800ea60 <_scanf_i+0x88>
 800eb1a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800eb1e:	6022      	str	r2, [r4, #0]
 800eb20:	780b      	ldrb	r3, [r1, #0]
 800eb22:	f805 3b01 	strb.w	r3, [r5], #1
 800eb26:	e7de      	b.n	800eae6 <_scanf_i+0x10e>
 800eb28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800eb2c:	4631      	mov	r1, r6
 800eb2e:	4650      	mov	r0, sl
 800eb30:	4798      	blx	r3
 800eb32:	2800      	cmp	r0, #0
 800eb34:	d0df      	beq.n	800eaf6 <_scanf_i+0x11e>
 800eb36:	6823      	ldr	r3, [r4, #0]
 800eb38:	05d9      	lsls	r1, r3, #23
 800eb3a:	d50d      	bpl.n	800eb58 <_scanf_i+0x180>
 800eb3c:	42bd      	cmp	r5, r7
 800eb3e:	d909      	bls.n	800eb54 <_scanf_i+0x17c>
 800eb40:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800eb44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eb48:	4632      	mov	r2, r6
 800eb4a:	4650      	mov	r0, sl
 800eb4c:	4798      	blx	r3
 800eb4e:	f105 39ff 	add.w	r9, r5, #4294967295
 800eb52:	464d      	mov	r5, r9
 800eb54:	42bd      	cmp	r5, r7
 800eb56:	d028      	beq.n	800ebaa <_scanf_i+0x1d2>
 800eb58:	6822      	ldr	r2, [r4, #0]
 800eb5a:	f012 0210 	ands.w	r2, r2, #16
 800eb5e:	d113      	bne.n	800eb88 <_scanf_i+0x1b0>
 800eb60:	702a      	strb	r2, [r5, #0]
 800eb62:	6863      	ldr	r3, [r4, #4]
 800eb64:	9e01      	ldr	r6, [sp, #4]
 800eb66:	4639      	mov	r1, r7
 800eb68:	4650      	mov	r0, sl
 800eb6a:	47b0      	blx	r6
 800eb6c:	f8d8 3000 	ldr.w	r3, [r8]
 800eb70:	6821      	ldr	r1, [r4, #0]
 800eb72:	1d1a      	adds	r2, r3, #4
 800eb74:	f8c8 2000 	str.w	r2, [r8]
 800eb78:	f011 0f20 	tst.w	r1, #32
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	d00f      	beq.n	800eba0 <_scanf_i+0x1c8>
 800eb80:	6018      	str	r0, [r3, #0]
 800eb82:	68e3      	ldr	r3, [r4, #12]
 800eb84:	3301      	adds	r3, #1
 800eb86:	60e3      	str	r3, [r4, #12]
 800eb88:	1bed      	subs	r5, r5, r7
 800eb8a:	44ab      	add	fp, r5
 800eb8c:	6925      	ldr	r5, [r4, #16]
 800eb8e:	445d      	add	r5, fp
 800eb90:	6125      	str	r5, [r4, #16]
 800eb92:	2000      	movs	r0, #0
 800eb94:	b007      	add	sp, #28
 800eb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb9a:	f04f 0b00 	mov.w	fp, #0
 800eb9e:	e7ca      	b.n	800eb36 <_scanf_i+0x15e>
 800eba0:	07ca      	lsls	r2, r1, #31
 800eba2:	bf4c      	ite	mi
 800eba4:	8018      	strhmi	r0, [r3, #0]
 800eba6:	6018      	strpl	r0, [r3, #0]
 800eba8:	e7eb      	b.n	800eb82 <_scanf_i+0x1aa>
 800ebaa:	2001      	movs	r0, #1
 800ebac:	e7f2      	b.n	800eb94 <_scanf_i+0x1bc>
 800ebae:	bf00      	nop
 800ebb0:	08010128 	.word	0x08010128
 800ebb4:	0800eda9 	.word	0x0800eda9
 800ebb8:	0800c351 	.word	0x0800c351
 800ebbc:	080107de 	.word	0x080107de

0800ebc0 <_read_r>:
 800ebc0:	b538      	push	{r3, r4, r5, lr}
 800ebc2:	4d07      	ldr	r5, [pc, #28]	; (800ebe0 <_read_r+0x20>)
 800ebc4:	4604      	mov	r4, r0
 800ebc6:	4608      	mov	r0, r1
 800ebc8:	4611      	mov	r1, r2
 800ebca:	2200      	movs	r2, #0
 800ebcc:	602a      	str	r2, [r5, #0]
 800ebce:	461a      	mov	r2, r3
 800ebd0:	f7f4 fcdc 	bl	800358c <_read>
 800ebd4:	1c43      	adds	r3, r0, #1
 800ebd6:	d102      	bne.n	800ebde <_read_r+0x1e>
 800ebd8:	682b      	ldr	r3, [r5, #0]
 800ebda:	b103      	cbz	r3, 800ebde <_read_r+0x1e>
 800ebdc:	6023      	str	r3, [r4, #0]
 800ebde:	bd38      	pop	{r3, r4, r5, pc}
 800ebe0:	20001140 	.word	0x20001140
 800ebe4:	00000000 	.word	0x00000000

0800ebe8 <nan>:
 800ebe8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ebf0 <nan+0x8>
 800ebec:	4770      	bx	lr
 800ebee:	bf00      	nop
 800ebf0:	00000000 	.word	0x00000000
 800ebf4:	7ff80000 	.word	0x7ff80000

0800ebf8 <_sbrk_r>:
 800ebf8:	b538      	push	{r3, r4, r5, lr}
 800ebfa:	4d06      	ldr	r5, [pc, #24]	; (800ec14 <_sbrk_r+0x1c>)
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	4604      	mov	r4, r0
 800ec00:	4608      	mov	r0, r1
 800ec02:	602b      	str	r3, [r5, #0]
 800ec04:	f7f4 fce8 	bl	80035d8 <_sbrk>
 800ec08:	1c43      	adds	r3, r0, #1
 800ec0a:	d102      	bne.n	800ec12 <_sbrk_r+0x1a>
 800ec0c:	682b      	ldr	r3, [r5, #0]
 800ec0e:	b103      	cbz	r3, 800ec12 <_sbrk_r+0x1a>
 800ec10:	6023      	str	r3, [r4, #0]
 800ec12:	bd38      	pop	{r3, r4, r5, pc}
 800ec14:	20001140 	.word	0x20001140

0800ec18 <__sccl>:
 800ec18:	b570      	push	{r4, r5, r6, lr}
 800ec1a:	780b      	ldrb	r3, [r1, #0]
 800ec1c:	4604      	mov	r4, r0
 800ec1e:	2b5e      	cmp	r3, #94	; 0x5e
 800ec20:	bf0b      	itete	eq
 800ec22:	784b      	ldrbeq	r3, [r1, #1]
 800ec24:	1c48      	addne	r0, r1, #1
 800ec26:	1c88      	addeq	r0, r1, #2
 800ec28:	2200      	movne	r2, #0
 800ec2a:	bf08      	it	eq
 800ec2c:	2201      	moveq	r2, #1
 800ec2e:	1e61      	subs	r1, r4, #1
 800ec30:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ec34:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ec38:	42a9      	cmp	r1, r5
 800ec3a:	d1fb      	bne.n	800ec34 <__sccl+0x1c>
 800ec3c:	b90b      	cbnz	r3, 800ec42 <__sccl+0x2a>
 800ec3e:	3801      	subs	r0, #1
 800ec40:	bd70      	pop	{r4, r5, r6, pc}
 800ec42:	f082 0101 	eor.w	r1, r2, #1
 800ec46:	54e1      	strb	r1, [r4, r3]
 800ec48:	1c42      	adds	r2, r0, #1
 800ec4a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800ec4e:	2d2d      	cmp	r5, #45	; 0x2d
 800ec50:	f102 36ff 	add.w	r6, r2, #4294967295
 800ec54:	4610      	mov	r0, r2
 800ec56:	d006      	beq.n	800ec66 <__sccl+0x4e>
 800ec58:	2d5d      	cmp	r5, #93	; 0x5d
 800ec5a:	d0f1      	beq.n	800ec40 <__sccl+0x28>
 800ec5c:	b90d      	cbnz	r5, 800ec62 <__sccl+0x4a>
 800ec5e:	4630      	mov	r0, r6
 800ec60:	e7ee      	b.n	800ec40 <__sccl+0x28>
 800ec62:	462b      	mov	r3, r5
 800ec64:	e7ef      	b.n	800ec46 <__sccl+0x2e>
 800ec66:	7816      	ldrb	r6, [r2, #0]
 800ec68:	2e5d      	cmp	r6, #93	; 0x5d
 800ec6a:	d0fa      	beq.n	800ec62 <__sccl+0x4a>
 800ec6c:	42b3      	cmp	r3, r6
 800ec6e:	dcf8      	bgt.n	800ec62 <__sccl+0x4a>
 800ec70:	4618      	mov	r0, r3
 800ec72:	3001      	adds	r0, #1
 800ec74:	4286      	cmp	r6, r0
 800ec76:	5421      	strb	r1, [r4, r0]
 800ec78:	dcfb      	bgt.n	800ec72 <__sccl+0x5a>
 800ec7a:	43d8      	mvns	r0, r3
 800ec7c:	4430      	add	r0, r6
 800ec7e:	1c5d      	adds	r5, r3, #1
 800ec80:	42b3      	cmp	r3, r6
 800ec82:	bfa8      	it	ge
 800ec84:	2000      	movge	r0, #0
 800ec86:	182b      	adds	r3, r5, r0
 800ec88:	3202      	adds	r2, #2
 800ec8a:	e7de      	b.n	800ec4a <__sccl+0x32>

0800ec8c <strncmp>:
 800ec8c:	b510      	push	{r4, lr}
 800ec8e:	b16a      	cbz	r2, 800ecac <strncmp+0x20>
 800ec90:	3901      	subs	r1, #1
 800ec92:	1884      	adds	r4, r0, r2
 800ec94:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ec98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ec9c:	4293      	cmp	r3, r2
 800ec9e:	d103      	bne.n	800eca8 <strncmp+0x1c>
 800eca0:	42a0      	cmp	r0, r4
 800eca2:	d001      	beq.n	800eca8 <strncmp+0x1c>
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d1f5      	bne.n	800ec94 <strncmp+0x8>
 800eca8:	1a98      	subs	r0, r3, r2
 800ecaa:	bd10      	pop	{r4, pc}
 800ecac:	4610      	mov	r0, r2
 800ecae:	e7fc      	b.n	800ecaa <strncmp+0x1e>

0800ecb0 <_strtoul_l.isra.0>:
 800ecb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ecb4:	4e3b      	ldr	r6, [pc, #236]	; (800eda4 <_strtoul_l.isra.0+0xf4>)
 800ecb6:	4686      	mov	lr, r0
 800ecb8:	468c      	mov	ip, r1
 800ecba:	4660      	mov	r0, ip
 800ecbc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ecc0:	5da5      	ldrb	r5, [r4, r6]
 800ecc2:	f015 0508 	ands.w	r5, r5, #8
 800ecc6:	d1f8      	bne.n	800ecba <_strtoul_l.isra.0+0xa>
 800ecc8:	2c2d      	cmp	r4, #45	; 0x2d
 800ecca:	d134      	bne.n	800ed36 <_strtoul_l.isra.0+0x86>
 800eccc:	f89c 4000 	ldrb.w	r4, [ip]
 800ecd0:	f04f 0801 	mov.w	r8, #1
 800ecd4:	f100 0c02 	add.w	ip, r0, #2
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d05e      	beq.n	800ed9a <_strtoul_l.isra.0+0xea>
 800ecdc:	2b10      	cmp	r3, #16
 800ecde:	d10c      	bne.n	800ecfa <_strtoul_l.isra.0+0x4a>
 800ece0:	2c30      	cmp	r4, #48	; 0x30
 800ece2:	d10a      	bne.n	800ecfa <_strtoul_l.isra.0+0x4a>
 800ece4:	f89c 0000 	ldrb.w	r0, [ip]
 800ece8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ecec:	2858      	cmp	r0, #88	; 0x58
 800ecee:	d14f      	bne.n	800ed90 <_strtoul_l.isra.0+0xe0>
 800ecf0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ecf4:	2310      	movs	r3, #16
 800ecf6:	f10c 0c02 	add.w	ip, ip, #2
 800ecfa:	f04f 37ff 	mov.w	r7, #4294967295
 800ecfe:	2500      	movs	r5, #0
 800ed00:	fbb7 f7f3 	udiv	r7, r7, r3
 800ed04:	fb03 f907 	mul.w	r9, r3, r7
 800ed08:	ea6f 0909 	mvn.w	r9, r9
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800ed12:	2e09      	cmp	r6, #9
 800ed14:	d818      	bhi.n	800ed48 <_strtoul_l.isra.0+0x98>
 800ed16:	4634      	mov	r4, r6
 800ed18:	42a3      	cmp	r3, r4
 800ed1a:	dd24      	ble.n	800ed66 <_strtoul_l.isra.0+0xb6>
 800ed1c:	2d00      	cmp	r5, #0
 800ed1e:	db1f      	blt.n	800ed60 <_strtoul_l.isra.0+0xb0>
 800ed20:	4287      	cmp	r7, r0
 800ed22:	d31d      	bcc.n	800ed60 <_strtoul_l.isra.0+0xb0>
 800ed24:	d101      	bne.n	800ed2a <_strtoul_l.isra.0+0x7a>
 800ed26:	45a1      	cmp	r9, r4
 800ed28:	db1a      	blt.n	800ed60 <_strtoul_l.isra.0+0xb0>
 800ed2a:	fb00 4003 	mla	r0, r0, r3, r4
 800ed2e:	2501      	movs	r5, #1
 800ed30:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ed34:	e7eb      	b.n	800ed0e <_strtoul_l.isra.0+0x5e>
 800ed36:	2c2b      	cmp	r4, #43	; 0x2b
 800ed38:	bf08      	it	eq
 800ed3a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800ed3e:	46a8      	mov	r8, r5
 800ed40:	bf08      	it	eq
 800ed42:	f100 0c02 	addeq.w	ip, r0, #2
 800ed46:	e7c7      	b.n	800ecd8 <_strtoul_l.isra.0+0x28>
 800ed48:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800ed4c:	2e19      	cmp	r6, #25
 800ed4e:	d801      	bhi.n	800ed54 <_strtoul_l.isra.0+0xa4>
 800ed50:	3c37      	subs	r4, #55	; 0x37
 800ed52:	e7e1      	b.n	800ed18 <_strtoul_l.isra.0+0x68>
 800ed54:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800ed58:	2e19      	cmp	r6, #25
 800ed5a:	d804      	bhi.n	800ed66 <_strtoul_l.isra.0+0xb6>
 800ed5c:	3c57      	subs	r4, #87	; 0x57
 800ed5e:	e7db      	b.n	800ed18 <_strtoul_l.isra.0+0x68>
 800ed60:	f04f 35ff 	mov.w	r5, #4294967295
 800ed64:	e7e4      	b.n	800ed30 <_strtoul_l.isra.0+0x80>
 800ed66:	2d00      	cmp	r5, #0
 800ed68:	da07      	bge.n	800ed7a <_strtoul_l.isra.0+0xca>
 800ed6a:	2322      	movs	r3, #34	; 0x22
 800ed6c:	f8ce 3000 	str.w	r3, [lr]
 800ed70:	f04f 30ff 	mov.w	r0, #4294967295
 800ed74:	b942      	cbnz	r2, 800ed88 <_strtoul_l.isra.0+0xd8>
 800ed76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed7a:	f1b8 0f00 	cmp.w	r8, #0
 800ed7e:	d000      	beq.n	800ed82 <_strtoul_l.isra.0+0xd2>
 800ed80:	4240      	negs	r0, r0
 800ed82:	2a00      	cmp	r2, #0
 800ed84:	d0f7      	beq.n	800ed76 <_strtoul_l.isra.0+0xc6>
 800ed86:	b10d      	cbz	r5, 800ed8c <_strtoul_l.isra.0+0xdc>
 800ed88:	f10c 31ff 	add.w	r1, ip, #4294967295
 800ed8c:	6011      	str	r1, [r2, #0]
 800ed8e:	e7f2      	b.n	800ed76 <_strtoul_l.isra.0+0xc6>
 800ed90:	2430      	movs	r4, #48	; 0x30
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d1b1      	bne.n	800ecfa <_strtoul_l.isra.0+0x4a>
 800ed96:	2308      	movs	r3, #8
 800ed98:	e7af      	b.n	800ecfa <_strtoul_l.isra.0+0x4a>
 800ed9a:	2c30      	cmp	r4, #48	; 0x30
 800ed9c:	d0a2      	beq.n	800ece4 <_strtoul_l.isra.0+0x34>
 800ed9e:	230a      	movs	r3, #10
 800eda0:	e7ab      	b.n	800ecfa <_strtoul_l.isra.0+0x4a>
 800eda2:	bf00      	nop
 800eda4:	08010441 	.word	0x08010441

0800eda8 <_strtoul_r>:
 800eda8:	f7ff bf82 	b.w	800ecb0 <_strtoul_l.isra.0>

0800edac <__submore>:
 800edac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edb0:	460c      	mov	r4, r1
 800edb2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800edb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800edb8:	4299      	cmp	r1, r3
 800edba:	d11d      	bne.n	800edf8 <__submore+0x4c>
 800edbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800edc0:	f7ff fa2a 	bl	800e218 <_malloc_r>
 800edc4:	b918      	cbnz	r0, 800edce <__submore+0x22>
 800edc6:	f04f 30ff 	mov.w	r0, #4294967295
 800edca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800edd2:	63a3      	str	r3, [r4, #56]	; 0x38
 800edd4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800edd8:	6360      	str	r0, [r4, #52]	; 0x34
 800edda:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800edde:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ede2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ede6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800edea:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800edee:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800edf2:	6020      	str	r0, [r4, #0]
 800edf4:	2000      	movs	r0, #0
 800edf6:	e7e8      	b.n	800edca <__submore+0x1e>
 800edf8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800edfa:	0077      	lsls	r7, r6, #1
 800edfc:	463a      	mov	r2, r7
 800edfe:	f000 fa2d 	bl	800f25c <_realloc_r>
 800ee02:	4605      	mov	r5, r0
 800ee04:	2800      	cmp	r0, #0
 800ee06:	d0de      	beq.n	800edc6 <__submore+0x1a>
 800ee08:	eb00 0806 	add.w	r8, r0, r6
 800ee0c:	4601      	mov	r1, r0
 800ee0e:	4632      	mov	r2, r6
 800ee10:	4640      	mov	r0, r8
 800ee12:	f7fe fcd9 	bl	800d7c8 <memcpy>
 800ee16:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ee1a:	f8c4 8000 	str.w	r8, [r4]
 800ee1e:	e7e9      	b.n	800edf4 <__submore+0x48>

0800ee20 <__ascii_wctomb>:
 800ee20:	b149      	cbz	r1, 800ee36 <__ascii_wctomb+0x16>
 800ee22:	2aff      	cmp	r2, #255	; 0xff
 800ee24:	bf85      	ittet	hi
 800ee26:	238a      	movhi	r3, #138	; 0x8a
 800ee28:	6003      	strhi	r3, [r0, #0]
 800ee2a:	700a      	strbls	r2, [r1, #0]
 800ee2c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ee30:	bf98      	it	ls
 800ee32:	2001      	movls	r0, #1
 800ee34:	4770      	bx	lr
 800ee36:	4608      	mov	r0, r1
 800ee38:	4770      	bx	lr
	...

0800ee3c <__assert_func>:
 800ee3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee3e:	4614      	mov	r4, r2
 800ee40:	461a      	mov	r2, r3
 800ee42:	4b09      	ldr	r3, [pc, #36]	; (800ee68 <__assert_func+0x2c>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	4605      	mov	r5, r0
 800ee48:	68d8      	ldr	r0, [r3, #12]
 800ee4a:	b14c      	cbz	r4, 800ee60 <__assert_func+0x24>
 800ee4c:	4b07      	ldr	r3, [pc, #28]	; (800ee6c <__assert_func+0x30>)
 800ee4e:	9100      	str	r1, [sp, #0]
 800ee50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ee54:	4906      	ldr	r1, [pc, #24]	; (800ee70 <__assert_func+0x34>)
 800ee56:	462b      	mov	r3, r5
 800ee58:	f000 f9a6 	bl	800f1a8 <fiprintf>
 800ee5c:	f000 fc3e 	bl	800f6dc <abort>
 800ee60:	4b04      	ldr	r3, [pc, #16]	; (800ee74 <__assert_func+0x38>)
 800ee62:	461c      	mov	r4, r3
 800ee64:	e7f3      	b.n	800ee4e <__assert_func+0x12>
 800ee66:	bf00      	nop
 800ee68:	20000024 	.word	0x20000024
 800ee6c:	080107e0 	.word	0x080107e0
 800ee70:	080107ed 	.word	0x080107ed
 800ee74:	0801081b 	.word	0x0801081b

0800ee78 <__sflush_r>:
 800ee78:	898a      	ldrh	r2, [r1, #12]
 800ee7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee7e:	4605      	mov	r5, r0
 800ee80:	0710      	lsls	r0, r2, #28
 800ee82:	460c      	mov	r4, r1
 800ee84:	d458      	bmi.n	800ef38 <__sflush_r+0xc0>
 800ee86:	684b      	ldr	r3, [r1, #4]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	dc05      	bgt.n	800ee98 <__sflush_r+0x20>
 800ee8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	dc02      	bgt.n	800ee98 <__sflush_r+0x20>
 800ee92:	2000      	movs	r0, #0
 800ee94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee9a:	2e00      	cmp	r6, #0
 800ee9c:	d0f9      	beq.n	800ee92 <__sflush_r+0x1a>
 800ee9e:	2300      	movs	r3, #0
 800eea0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eea4:	682f      	ldr	r7, [r5, #0]
 800eea6:	602b      	str	r3, [r5, #0]
 800eea8:	d032      	beq.n	800ef10 <__sflush_r+0x98>
 800eeaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eeac:	89a3      	ldrh	r3, [r4, #12]
 800eeae:	075a      	lsls	r2, r3, #29
 800eeb0:	d505      	bpl.n	800eebe <__sflush_r+0x46>
 800eeb2:	6863      	ldr	r3, [r4, #4]
 800eeb4:	1ac0      	subs	r0, r0, r3
 800eeb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eeb8:	b10b      	cbz	r3, 800eebe <__sflush_r+0x46>
 800eeba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eebc:	1ac0      	subs	r0, r0, r3
 800eebe:	2300      	movs	r3, #0
 800eec0:	4602      	mov	r2, r0
 800eec2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eec4:	6a21      	ldr	r1, [r4, #32]
 800eec6:	4628      	mov	r0, r5
 800eec8:	47b0      	blx	r6
 800eeca:	1c43      	adds	r3, r0, #1
 800eecc:	89a3      	ldrh	r3, [r4, #12]
 800eece:	d106      	bne.n	800eede <__sflush_r+0x66>
 800eed0:	6829      	ldr	r1, [r5, #0]
 800eed2:	291d      	cmp	r1, #29
 800eed4:	d82c      	bhi.n	800ef30 <__sflush_r+0xb8>
 800eed6:	4a2a      	ldr	r2, [pc, #168]	; (800ef80 <__sflush_r+0x108>)
 800eed8:	40ca      	lsrs	r2, r1
 800eeda:	07d6      	lsls	r6, r2, #31
 800eedc:	d528      	bpl.n	800ef30 <__sflush_r+0xb8>
 800eede:	2200      	movs	r2, #0
 800eee0:	6062      	str	r2, [r4, #4]
 800eee2:	04d9      	lsls	r1, r3, #19
 800eee4:	6922      	ldr	r2, [r4, #16]
 800eee6:	6022      	str	r2, [r4, #0]
 800eee8:	d504      	bpl.n	800eef4 <__sflush_r+0x7c>
 800eeea:	1c42      	adds	r2, r0, #1
 800eeec:	d101      	bne.n	800eef2 <__sflush_r+0x7a>
 800eeee:	682b      	ldr	r3, [r5, #0]
 800eef0:	b903      	cbnz	r3, 800eef4 <__sflush_r+0x7c>
 800eef2:	6560      	str	r0, [r4, #84]	; 0x54
 800eef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eef6:	602f      	str	r7, [r5, #0]
 800eef8:	2900      	cmp	r1, #0
 800eefa:	d0ca      	beq.n	800ee92 <__sflush_r+0x1a>
 800eefc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef00:	4299      	cmp	r1, r3
 800ef02:	d002      	beq.n	800ef0a <__sflush_r+0x92>
 800ef04:	4628      	mov	r0, r5
 800ef06:	f7ff f937 	bl	800e178 <_free_r>
 800ef0a:	2000      	movs	r0, #0
 800ef0c:	6360      	str	r0, [r4, #52]	; 0x34
 800ef0e:	e7c1      	b.n	800ee94 <__sflush_r+0x1c>
 800ef10:	6a21      	ldr	r1, [r4, #32]
 800ef12:	2301      	movs	r3, #1
 800ef14:	4628      	mov	r0, r5
 800ef16:	47b0      	blx	r6
 800ef18:	1c41      	adds	r1, r0, #1
 800ef1a:	d1c7      	bne.n	800eeac <__sflush_r+0x34>
 800ef1c:	682b      	ldr	r3, [r5, #0]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d0c4      	beq.n	800eeac <__sflush_r+0x34>
 800ef22:	2b1d      	cmp	r3, #29
 800ef24:	d001      	beq.n	800ef2a <__sflush_r+0xb2>
 800ef26:	2b16      	cmp	r3, #22
 800ef28:	d101      	bne.n	800ef2e <__sflush_r+0xb6>
 800ef2a:	602f      	str	r7, [r5, #0]
 800ef2c:	e7b1      	b.n	800ee92 <__sflush_r+0x1a>
 800ef2e:	89a3      	ldrh	r3, [r4, #12]
 800ef30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef34:	81a3      	strh	r3, [r4, #12]
 800ef36:	e7ad      	b.n	800ee94 <__sflush_r+0x1c>
 800ef38:	690f      	ldr	r7, [r1, #16]
 800ef3a:	2f00      	cmp	r7, #0
 800ef3c:	d0a9      	beq.n	800ee92 <__sflush_r+0x1a>
 800ef3e:	0793      	lsls	r3, r2, #30
 800ef40:	680e      	ldr	r6, [r1, #0]
 800ef42:	bf08      	it	eq
 800ef44:	694b      	ldreq	r3, [r1, #20]
 800ef46:	600f      	str	r7, [r1, #0]
 800ef48:	bf18      	it	ne
 800ef4a:	2300      	movne	r3, #0
 800ef4c:	eba6 0807 	sub.w	r8, r6, r7
 800ef50:	608b      	str	r3, [r1, #8]
 800ef52:	f1b8 0f00 	cmp.w	r8, #0
 800ef56:	dd9c      	ble.n	800ee92 <__sflush_r+0x1a>
 800ef58:	6a21      	ldr	r1, [r4, #32]
 800ef5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ef5c:	4643      	mov	r3, r8
 800ef5e:	463a      	mov	r2, r7
 800ef60:	4628      	mov	r0, r5
 800ef62:	47b0      	blx	r6
 800ef64:	2800      	cmp	r0, #0
 800ef66:	dc06      	bgt.n	800ef76 <__sflush_r+0xfe>
 800ef68:	89a3      	ldrh	r3, [r4, #12]
 800ef6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef6e:	81a3      	strh	r3, [r4, #12]
 800ef70:	f04f 30ff 	mov.w	r0, #4294967295
 800ef74:	e78e      	b.n	800ee94 <__sflush_r+0x1c>
 800ef76:	4407      	add	r7, r0
 800ef78:	eba8 0800 	sub.w	r8, r8, r0
 800ef7c:	e7e9      	b.n	800ef52 <__sflush_r+0xda>
 800ef7e:	bf00      	nop
 800ef80:	20400001 	.word	0x20400001

0800ef84 <_fflush_r>:
 800ef84:	b538      	push	{r3, r4, r5, lr}
 800ef86:	690b      	ldr	r3, [r1, #16]
 800ef88:	4605      	mov	r5, r0
 800ef8a:	460c      	mov	r4, r1
 800ef8c:	b913      	cbnz	r3, 800ef94 <_fflush_r+0x10>
 800ef8e:	2500      	movs	r5, #0
 800ef90:	4628      	mov	r0, r5
 800ef92:	bd38      	pop	{r3, r4, r5, pc}
 800ef94:	b118      	cbz	r0, 800ef9e <_fflush_r+0x1a>
 800ef96:	6983      	ldr	r3, [r0, #24]
 800ef98:	b90b      	cbnz	r3, 800ef9e <_fflush_r+0x1a>
 800ef9a:	f000 f887 	bl	800f0ac <__sinit>
 800ef9e:	4b14      	ldr	r3, [pc, #80]	; (800eff0 <_fflush_r+0x6c>)
 800efa0:	429c      	cmp	r4, r3
 800efa2:	d11b      	bne.n	800efdc <_fflush_r+0x58>
 800efa4:	686c      	ldr	r4, [r5, #4]
 800efa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d0ef      	beq.n	800ef8e <_fflush_r+0xa>
 800efae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800efb0:	07d0      	lsls	r0, r2, #31
 800efb2:	d404      	bmi.n	800efbe <_fflush_r+0x3a>
 800efb4:	0599      	lsls	r1, r3, #22
 800efb6:	d402      	bmi.n	800efbe <_fflush_r+0x3a>
 800efb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800efba:	f000 f927 	bl	800f20c <__retarget_lock_acquire_recursive>
 800efbe:	4628      	mov	r0, r5
 800efc0:	4621      	mov	r1, r4
 800efc2:	f7ff ff59 	bl	800ee78 <__sflush_r>
 800efc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800efc8:	07da      	lsls	r2, r3, #31
 800efca:	4605      	mov	r5, r0
 800efcc:	d4e0      	bmi.n	800ef90 <_fflush_r+0xc>
 800efce:	89a3      	ldrh	r3, [r4, #12]
 800efd0:	059b      	lsls	r3, r3, #22
 800efd2:	d4dd      	bmi.n	800ef90 <_fflush_r+0xc>
 800efd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800efd6:	f000 f91a 	bl	800f20e <__retarget_lock_release_recursive>
 800efda:	e7d9      	b.n	800ef90 <_fflush_r+0xc>
 800efdc:	4b05      	ldr	r3, [pc, #20]	; (800eff4 <_fflush_r+0x70>)
 800efde:	429c      	cmp	r4, r3
 800efe0:	d101      	bne.n	800efe6 <_fflush_r+0x62>
 800efe2:	68ac      	ldr	r4, [r5, #8]
 800efe4:	e7df      	b.n	800efa6 <_fflush_r+0x22>
 800efe6:	4b04      	ldr	r3, [pc, #16]	; (800eff8 <_fflush_r+0x74>)
 800efe8:	429c      	cmp	r4, r3
 800efea:	bf08      	it	eq
 800efec:	68ec      	ldreq	r4, [r5, #12]
 800efee:	e7da      	b.n	800efa6 <_fflush_r+0x22>
 800eff0:	0801083c 	.word	0x0801083c
 800eff4:	0801085c 	.word	0x0801085c
 800eff8:	0801081c 	.word	0x0801081c

0800effc <std>:
 800effc:	2300      	movs	r3, #0
 800effe:	b510      	push	{r4, lr}
 800f000:	4604      	mov	r4, r0
 800f002:	e9c0 3300 	strd	r3, r3, [r0]
 800f006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f00a:	6083      	str	r3, [r0, #8]
 800f00c:	8181      	strh	r1, [r0, #12]
 800f00e:	6643      	str	r3, [r0, #100]	; 0x64
 800f010:	81c2      	strh	r2, [r0, #14]
 800f012:	6183      	str	r3, [r0, #24]
 800f014:	4619      	mov	r1, r3
 800f016:	2208      	movs	r2, #8
 800f018:	305c      	adds	r0, #92	; 0x5c
 800f01a:	f7fb fbcf 	bl	800a7bc <memset>
 800f01e:	4b05      	ldr	r3, [pc, #20]	; (800f034 <std+0x38>)
 800f020:	6263      	str	r3, [r4, #36]	; 0x24
 800f022:	4b05      	ldr	r3, [pc, #20]	; (800f038 <std+0x3c>)
 800f024:	62a3      	str	r3, [r4, #40]	; 0x28
 800f026:	4b05      	ldr	r3, [pc, #20]	; (800f03c <std+0x40>)
 800f028:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f02a:	4b05      	ldr	r3, [pc, #20]	; (800f040 <std+0x44>)
 800f02c:	6224      	str	r4, [r4, #32]
 800f02e:	6323      	str	r3, [r4, #48]	; 0x30
 800f030:	bd10      	pop	{r4, pc}
 800f032:	bf00      	nop
 800f034:	0800b565 	.word	0x0800b565
 800f038:	0800b58b 	.word	0x0800b58b
 800f03c:	0800b5c3 	.word	0x0800b5c3
 800f040:	0800b5e7 	.word	0x0800b5e7

0800f044 <_cleanup_r>:
 800f044:	4901      	ldr	r1, [pc, #4]	; (800f04c <_cleanup_r+0x8>)
 800f046:	f000 b8c1 	b.w	800f1cc <_fwalk_reent>
 800f04a:	bf00      	nop
 800f04c:	0800ef85 	.word	0x0800ef85

0800f050 <__sfmoreglue>:
 800f050:	b570      	push	{r4, r5, r6, lr}
 800f052:	1e4a      	subs	r2, r1, #1
 800f054:	2568      	movs	r5, #104	; 0x68
 800f056:	4355      	muls	r5, r2
 800f058:	460e      	mov	r6, r1
 800f05a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f05e:	f7ff f8db 	bl	800e218 <_malloc_r>
 800f062:	4604      	mov	r4, r0
 800f064:	b140      	cbz	r0, 800f078 <__sfmoreglue+0x28>
 800f066:	2100      	movs	r1, #0
 800f068:	e9c0 1600 	strd	r1, r6, [r0]
 800f06c:	300c      	adds	r0, #12
 800f06e:	60a0      	str	r0, [r4, #8]
 800f070:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f074:	f7fb fba2 	bl	800a7bc <memset>
 800f078:	4620      	mov	r0, r4
 800f07a:	bd70      	pop	{r4, r5, r6, pc}

0800f07c <__sfp_lock_acquire>:
 800f07c:	4801      	ldr	r0, [pc, #4]	; (800f084 <__sfp_lock_acquire+0x8>)
 800f07e:	f000 b8c5 	b.w	800f20c <__retarget_lock_acquire_recursive>
 800f082:	bf00      	nop
 800f084:	2000114c 	.word	0x2000114c

0800f088 <__sfp_lock_release>:
 800f088:	4801      	ldr	r0, [pc, #4]	; (800f090 <__sfp_lock_release+0x8>)
 800f08a:	f000 b8c0 	b.w	800f20e <__retarget_lock_release_recursive>
 800f08e:	bf00      	nop
 800f090:	2000114c 	.word	0x2000114c

0800f094 <__sinit_lock_acquire>:
 800f094:	4801      	ldr	r0, [pc, #4]	; (800f09c <__sinit_lock_acquire+0x8>)
 800f096:	f000 b8b9 	b.w	800f20c <__retarget_lock_acquire_recursive>
 800f09a:	bf00      	nop
 800f09c:	20001147 	.word	0x20001147

0800f0a0 <__sinit_lock_release>:
 800f0a0:	4801      	ldr	r0, [pc, #4]	; (800f0a8 <__sinit_lock_release+0x8>)
 800f0a2:	f000 b8b4 	b.w	800f20e <__retarget_lock_release_recursive>
 800f0a6:	bf00      	nop
 800f0a8:	20001147 	.word	0x20001147

0800f0ac <__sinit>:
 800f0ac:	b510      	push	{r4, lr}
 800f0ae:	4604      	mov	r4, r0
 800f0b0:	f7ff fff0 	bl	800f094 <__sinit_lock_acquire>
 800f0b4:	69a3      	ldr	r3, [r4, #24]
 800f0b6:	b11b      	cbz	r3, 800f0c0 <__sinit+0x14>
 800f0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0bc:	f7ff bff0 	b.w	800f0a0 <__sinit_lock_release>
 800f0c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f0c4:	6523      	str	r3, [r4, #80]	; 0x50
 800f0c6:	4b13      	ldr	r3, [pc, #76]	; (800f114 <__sinit+0x68>)
 800f0c8:	4a13      	ldr	r2, [pc, #76]	; (800f118 <__sinit+0x6c>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800f0ce:	42a3      	cmp	r3, r4
 800f0d0:	bf04      	itt	eq
 800f0d2:	2301      	moveq	r3, #1
 800f0d4:	61a3      	streq	r3, [r4, #24]
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	f000 f820 	bl	800f11c <__sfp>
 800f0dc:	6060      	str	r0, [r4, #4]
 800f0de:	4620      	mov	r0, r4
 800f0e0:	f000 f81c 	bl	800f11c <__sfp>
 800f0e4:	60a0      	str	r0, [r4, #8]
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	f000 f818 	bl	800f11c <__sfp>
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	60e0      	str	r0, [r4, #12]
 800f0f0:	2104      	movs	r1, #4
 800f0f2:	6860      	ldr	r0, [r4, #4]
 800f0f4:	f7ff ff82 	bl	800effc <std>
 800f0f8:	68a0      	ldr	r0, [r4, #8]
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	2109      	movs	r1, #9
 800f0fe:	f7ff ff7d 	bl	800effc <std>
 800f102:	68e0      	ldr	r0, [r4, #12]
 800f104:	2202      	movs	r2, #2
 800f106:	2112      	movs	r1, #18
 800f108:	f7ff ff78 	bl	800effc <std>
 800f10c:	2301      	movs	r3, #1
 800f10e:	61a3      	str	r3, [r4, #24]
 800f110:	e7d2      	b.n	800f0b8 <__sinit+0xc>
 800f112:	bf00      	nop
 800f114:	080103b0 	.word	0x080103b0
 800f118:	0800f045 	.word	0x0800f045

0800f11c <__sfp>:
 800f11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f11e:	4607      	mov	r7, r0
 800f120:	f7ff ffac 	bl	800f07c <__sfp_lock_acquire>
 800f124:	4b1e      	ldr	r3, [pc, #120]	; (800f1a0 <__sfp+0x84>)
 800f126:	681e      	ldr	r6, [r3, #0]
 800f128:	69b3      	ldr	r3, [r6, #24]
 800f12a:	b913      	cbnz	r3, 800f132 <__sfp+0x16>
 800f12c:	4630      	mov	r0, r6
 800f12e:	f7ff ffbd 	bl	800f0ac <__sinit>
 800f132:	3648      	adds	r6, #72	; 0x48
 800f134:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f138:	3b01      	subs	r3, #1
 800f13a:	d503      	bpl.n	800f144 <__sfp+0x28>
 800f13c:	6833      	ldr	r3, [r6, #0]
 800f13e:	b30b      	cbz	r3, 800f184 <__sfp+0x68>
 800f140:	6836      	ldr	r6, [r6, #0]
 800f142:	e7f7      	b.n	800f134 <__sfp+0x18>
 800f144:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f148:	b9d5      	cbnz	r5, 800f180 <__sfp+0x64>
 800f14a:	4b16      	ldr	r3, [pc, #88]	; (800f1a4 <__sfp+0x88>)
 800f14c:	60e3      	str	r3, [r4, #12]
 800f14e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f152:	6665      	str	r5, [r4, #100]	; 0x64
 800f154:	f000 f859 	bl	800f20a <__retarget_lock_init_recursive>
 800f158:	f7ff ff96 	bl	800f088 <__sfp_lock_release>
 800f15c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f160:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f164:	6025      	str	r5, [r4, #0]
 800f166:	61a5      	str	r5, [r4, #24]
 800f168:	2208      	movs	r2, #8
 800f16a:	4629      	mov	r1, r5
 800f16c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f170:	f7fb fb24 	bl	800a7bc <memset>
 800f174:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f178:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f17c:	4620      	mov	r0, r4
 800f17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f180:	3468      	adds	r4, #104	; 0x68
 800f182:	e7d9      	b.n	800f138 <__sfp+0x1c>
 800f184:	2104      	movs	r1, #4
 800f186:	4638      	mov	r0, r7
 800f188:	f7ff ff62 	bl	800f050 <__sfmoreglue>
 800f18c:	4604      	mov	r4, r0
 800f18e:	6030      	str	r0, [r6, #0]
 800f190:	2800      	cmp	r0, #0
 800f192:	d1d5      	bne.n	800f140 <__sfp+0x24>
 800f194:	f7ff ff78 	bl	800f088 <__sfp_lock_release>
 800f198:	230c      	movs	r3, #12
 800f19a:	603b      	str	r3, [r7, #0]
 800f19c:	e7ee      	b.n	800f17c <__sfp+0x60>
 800f19e:	bf00      	nop
 800f1a0:	080103b0 	.word	0x080103b0
 800f1a4:	ffff0001 	.word	0xffff0001

0800f1a8 <fiprintf>:
 800f1a8:	b40e      	push	{r1, r2, r3}
 800f1aa:	b503      	push	{r0, r1, lr}
 800f1ac:	4601      	mov	r1, r0
 800f1ae:	ab03      	add	r3, sp, #12
 800f1b0:	4805      	ldr	r0, [pc, #20]	; (800f1c8 <fiprintf+0x20>)
 800f1b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1b6:	6800      	ldr	r0, [r0, #0]
 800f1b8:	9301      	str	r3, [sp, #4]
 800f1ba:	f000 f89f 	bl	800f2fc <_vfiprintf_r>
 800f1be:	b002      	add	sp, #8
 800f1c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1c4:	b003      	add	sp, #12
 800f1c6:	4770      	bx	lr
 800f1c8:	20000024 	.word	0x20000024

0800f1cc <_fwalk_reent>:
 800f1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1d0:	4606      	mov	r6, r0
 800f1d2:	4688      	mov	r8, r1
 800f1d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f1d8:	2700      	movs	r7, #0
 800f1da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f1de:	f1b9 0901 	subs.w	r9, r9, #1
 800f1e2:	d505      	bpl.n	800f1f0 <_fwalk_reent+0x24>
 800f1e4:	6824      	ldr	r4, [r4, #0]
 800f1e6:	2c00      	cmp	r4, #0
 800f1e8:	d1f7      	bne.n	800f1da <_fwalk_reent+0xe>
 800f1ea:	4638      	mov	r0, r7
 800f1ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1f0:	89ab      	ldrh	r3, [r5, #12]
 800f1f2:	2b01      	cmp	r3, #1
 800f1f4:	d907      	bls.n	800f206 <_fwalk_reent+0x3a>
 800f1f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	d003      	beq.n	800f206 <_fwalk_reent+0x3a>
 800f1fe:	4629      	mov	r1, r5
 800f200:	4630      	mov	r0, r6
 800f202:	47c0      	blx	r8
 800f204:	4307      	orrs	r7, r0
 800f206:	3568      	adds	r5, #104	; 0x68
 800f208:	e7e9      	b.n	800f1de <_fwalk_reent+0x12>

0800f20a <__retarget_lock_init_recursive>:
 800f20a:	4770      	bx	lr

0800f20c <__retarget_lock_acquire_recursive>:
 800f20c:	4770      	bx	lr

0800f20e <__retarget_lock_release_recursive>:
 800f20e:	4770      	bx	lr

0800f210 <memmove>:
 800f210:	4288      	cmp	r0, r1
 800f212:	b510      	push	{r4, lr}
 800f214:	eb01 0402 	add.w	r4, r1, r2
 800f218:	d902      	bls.n	800f220 <memmove+0x10>
 800f21a:	4284      	cmp	r4, r0
 800f21c:	4623      	mov	r3, r4
 800f21e:	d807      	bhi.n	800f230 <memmove+0x20>
 800f220:	1e43      	subs	r3, r0, #1
 800f222:	42a1      	cmp	r1, r4
 800f224:	d008      	beq.n	800f238 <memmove+0x28>
 800f226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f22a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f22e:	e7f8      	b.n	800f222 <memmove+0x12>
 800f230:	4402      	add	r2, r0
 800f232:	4601      	mov	r1, r0
 800f234:	428a      	cmp	r2, r1
 800f236:	d100      	bne.n	800f23a <memmove+0x2a>
 800f238:	bd10      	pop	{r4, pc}
 800f23a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f23e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f242:	e7f7      	b.n	800f234 <memmove+0x24>

0800f244 <__malloc_lock>:
 800f244:	4801      	ldr	r0, [pc, #4]	; (800f24c <__malloc_lock+0x8>)
 800f246:	f7ff bfe1 	b.w	800f20c <__retarget_lock_acquire_recursive>
 800f24a:	bf00      	nop
 800f24c:	20001148 	.word	0x20001148

0800f250 <__malloc_unlock>:
 800f250:	4801      	ldr	r0, [pc, #4]	; (800f258 <__malloc_unlock+0x8>)
 800f252:	f7ff bfdc 	b.w	800f20e <__retarget_lock_release_recursive>
 800f256:	bf00      	nop
 800f258:	20001148 	.word	0x20001148

0800f25c <_realloc_r>:
 800f25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f25e:	4607      	mov	r7, r0
 800f260:	4614      	mov	r4, r2
 800f262:	460e      	mov	r6, r1
 800f264:	b921      	cbnz	r1, 800f270 <_realloc_r+0x14>
 800f266:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f26a:	4611      	mov	r1, r2
 800f26c:	f7fe bfd4 	b.w	800e218 <_malloc_r>
 800f270:	b922      	cbnz	r2, 800f27c <_realloc_r+0x20>
 800f272:	f7fe ff81 	bl	800e178 <_free_r>
 800f276:	4625      	mov	r5, r4
 800f278:	4628      	mov	r0, r5
 800f27a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f27c:	f000 fa9a 	bl	800f7b4 <_malloc_usable_size_r>
 800f280:	42a0      	cmp	r0, r4
 800f282:	d20f      	bcs.n	800f2a4 <_realloc_r+0x48>
 800f284:	4621      	mov	r1, r4
 800f286:	4638      	mov	r0, r7
 800f288:	f7fe ffc6 	bl	800e218 <_malloc_r>
 800f28c:	4605      	mov	r5, r0
 800f28e:	2800      	cmp	r0, #0
 800f290:	d0f2      	beq.n	800f278 <_realloc_r+0x1c>
 800f292:	4631      	mov	r1, r6
 800f294:	4622      	mov	r2, r4
 800f296:	f7fe fa97 	bl	800d7c8 <memcpy>
 800f29a:	4631      	mov	r1, r6
 800f29c:	4638      	mov	r0, r7
 800f29e:	f7fe ff6b 	bl	800e178 <_free_r>
 800f2a2:	e7e9      	b.n	800f278 <_realloc_r+0x1c>
 800f2a4:	4635      	mov	r5, r6
 800f2a6:	e7e7      	b.n	800f278 <_realloc_r+0x1c>

0800f2a8 <__sfputc_r>:
 800f2a8:	6893      	ldr	r3, [r2, #8]
 800f2aa:	3b01      	subs	r3, #1
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	b410      	push	{r4}
 800f2b0:	6093      	str	r3, [r2, #8]
 800f2b2:	da08      	bge.n	800f2c6 <__sfputc_r+0x1e>
 800f2b4:	6994      	ldr	r4, [r2, #24]
 800f2b6:	42a3      	cmp	r3, r4
 800f2b8:	db01      	blt.n	800f2be <__sfputc_r+0x16>
 800f2ba:	290a      	cmp	r1, #10
 800f2bc:	d103      	bne.n	800f2c6 <__sfputc_r+0x1e>
 800f2be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2c2:	f000 b94b 	b.w	800f55c <__swbuf_r>
 800f2c6:	6813      	ldr	r3, [r2, #0]
 800f2c8:	1c58      	adds	r0, r3, #1
 800f2ca:	6010      	str	r0, [r2, #0]
 800f2cc:	7019      	strb	r1, [r3, #0]
 800f2ce:	4608      	mov	r0, r1
 800f2d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2d4:	4770      	bx	lr

0800f2d6 <__sfputs_r>:
 800f2d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2d8:	4606      	mov	r6, r0
 800f2da:	460f      	mov	r7, r1
 800f2dc:	4614      	mov	r4, r2
 800f2de:	18d5      	adds	r5, r2, r3
 800f2e0:	42ac      	cmp	r4, r5
 800f2e2:	d101      	bne.n	800f2e8 <__sfputs_r+0x12>
 800f2e4:	2000      	movs	r0, #0
 800f2e6:	e007      	b.n	800f2f8 <__sfputs_r+0x22>
 800f2e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2ec:	463a      	mov	r2, r7
 800f2ee:	4630      	mov	r0, r6
 800f2f0:	f7ff ffda 	bl	800f2a8 <__sfputc_r>
 800f2f4:	1c43      	adds	r3, r0, #1
 800f2f6:	d1f3      	bne.n	800f2e0 <__sfputs_r+0xa>
 800f2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f2fc <_vfiprintf_r>:
 800f2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f300:	460d      	mov	r5, r1
 800f302:	b09d      	sub	sp, #116	; 0x74
 800f304:	4614      	mov	r4, r2
 800f306:	4698      	mov	r8, r3
 800f308:	4606      	mov	r6, r0
 800f30a:	b118      	cbz	r0, 800f314 <_vfiprintf_r+0x18>
 800f30c:	6983      	ldr	r3, [r0, #24]
 800f30e:	b90b      	cbnz	r3, 800f314 <_vfiprintf_r+0x18>
 800f310:	f7ff fecc 	bl	800f0ac <__sinit>
 800f314:	4b89      	ldr	r3, [pc, #548]	; (800f53c <_vfiprintf_r+0x240>)
 800f316:	429d      	cmp	r5, r3
 800f318:	d11b      	bne.n	800f352 <_vfiprintf_r+0x56>
 800f31a:	6875      	ldr	r5, [r6, #4]
 800f31c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f31e:	07d9      	lsls	r1, r3, #31
 800f320:	d405      	bmi.n	800f32e <_vfiprintf_r+0x32>
 800f322:	89ab      	ldrh	r3, [r5, #12]
 800f324:	059a      	lsls	r2, r3, #22
 800f326:	d402      	bmi.n	800f32e <_vfiprintf_r+0x32>
 800f328:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f32a:	f7ff ff6f 	bl	800f20c <__retarget_lock_acquire_recursive>
 800f32e:	89ab      	ldrh	r3, [r5, #12]
 800f330:	071b      	lsls	r3, r3, #28
 800f332:	d501      	bpl.n	800f338 <_vfiprintf_r+0x3c>
 800f334:	692b      	ldr	r3, [r5, #16]
 800f336:	b9eb      	cbnz	r3, 800f374 <_vfiprintf_r+0x78>
 800f338:	4629      	mov	r1, r5
 800f33a:	4630      	mov	r0, r6
 800f33c:	f000 f960 	bl	800f600 <__swsetup_r>
 800f340:	b1c0      	cbz	r0, 800f374 <_vfiprintf_r+0x78>
 800f342:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f344:	07dc      	lsls	r4, r3, #31
 800f346:	d50e      	bpl.n	800f366 <_vfiprintf_r+0x6a>
 800f348:	f04f 30ff 	mov.w	r0, #4294967295
 800f34c:	b01d      	add	sp, #116	; 0x74
 800f34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f352:	4b7b      	ldr	r3, [pc, #492]	; (800f540 <_vfiprintf_r+0x244>)
 800f354:	429d      	cmp	r5, r3
 800f356:	d101      	bne.n	800f35c <_vfiprintf_r+0x60>
 800f358:	68b5      	ldr	r5, [r6, #8]
 800f35a:	e7df      	b.n	800f31c <_vfiprintf_r+0x20>
 800f35c:	4b79      	ldr	r3, [pc, #484]	; (800f544 <_vfiprintf_r+0x248>)
 800f35e:	429d      	cmp	r5, r3
 800f360:	bf08      	it	eq
 800f362:	68f5      	ldreq	r5, [r6, #12]
 800f364:	e7da      	b.n	800f31c <_vfiprintf_r+0x20>
 800f366:	89ab      	ldrh	r3, [r5, #12]
 800f368:	0598      	lsls	r0, r3, #22
 800f36a:	d4ed      	bmi.n	800f348 <_vfiprintf_r+0x4c>
 800f36c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f36e:	f7ff ff4e 	bl	800f20e <__retarget_lock_release_recursive>
 800f372:	e7e9      	b.n	800f348 <_vfiprintf_r+0x4c>
 800f374:	2300      	movs	r3, #0
 800f376:	9309      	str	r3, [sp, #36]	; 0x24
 800f378:	2320      	movs	r3, #32
 800f37a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f37e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f382:	2330      	movs	r3, #48	; 0x30
 800f384:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f548 <_vfiprintf_r+0x24c>
 800f388:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f38c:	f04f 0901 	mov.w	r9, #1
 800f390:	4623      	mov	r3, r4
 800f392:	469a      	mov	sl, r3
 800f394:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f398:	b10a      	cbz	r2, 800f39e <_vfiprintf_r+0xa2>
 800f39a:	2a25      	cmp	r2, #37	; 0x25
 800f39c:	d1f9      	bne.n	800f392 <_vfiprintf_r+0x96>
 800f39e:	ebba 0b04 	subs.w	fp, sl, r4
 800f3a2:	d00b      	beq.n	800f3bc <_vfiprintf_r+0xc0>
 800f3a4:	465b      	mov	r3, fp
 800f3a6:	4622      	mov	r2, r4
 800f3a8:	4629      	mov	r1, r5
 800f3aa:	4630      	mov	r0, r6
 800f3ac:	f7ff ff93 	bl	800f2d6 <__sfputs_r>
 800f3b0:	3001      	adds	r0, #1
 800f3b2:	f000 80aa 	beq.w	800f50a <_vfiprintf_r+0x20e>
 800f3b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3b8:	445a      	add	r2, fp
 800f3ba:	9209      	str	r2, [sp, #36]	; 0x24
 800f3bc:	f89a 3000 	ldrb.w	r3, [sl]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	f000 80a2 	beq.w	800f50a <_vfiprintf_r+0x20e>
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	f04f 32ff 	mov.w	r2, #4294967295
 800f3cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3d0:	f10a 0a01 	add.w	sl, sl, #1
 800f3d4:	9304      	str	r3, [sp, #16]
 800f3d6:	9307      	str	r3, [sp, #28]
 800f3d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f3dc:	931a      	str	r3, [sp, #104]	; 0x68
 800f3de:	4654      	mov	r4, sl
 800f3e0:	2205      	movs	r2, #5
 800f3e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3e6:	4858      	ldr	r0, [pc, #352]	; (800f548 <_vfiprintf_r+0x24c>)
 800f3e8:	f7f0 ff0a 	bl	8000200 <memchr>
 800f3ec:	9a04      	ldr	r2, [sp, #16]
 800f3ee:	b9d8      	cbnz	r0, 800f428 <_vfiprintf_r+0x12c>
 800f3f0:	06d1      	lsls	r1, r2, #27
 800f3f2:	bf44      	itt	mi
 800f3f4:	2320      	movmi	r3, #32
 800f3f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f3fa:	0713      	lsls	r3, r2, #28
 800f3fc:	bf44      	itt	mi
 800f3fe:	232b      	movmi	r3, #43	; 0x2b
 800f400:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f404:	f89a 3000 	ldrb.w	r3, [sl]
 800f408:	2b2a      	cmp	r3, #42	; 0x2a
 800f40a:	d015      	beq.n	800f438 <_vfiprintf_r+0x13c>
 800f40c:	9a07      	ldr	r2, [sp, #28]
 800f40e:	4654      	mov	r4, sl
 800f410:	2000      	movs	r0, #0
 800f412:	f04f 0c0a 	mov.w	ip, #10
 800f416:	4621      	mov	r1, r4
 800f418:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f41c:	3b30      	subs	r3, #48	; 0x30
 800f41e:	2b09      	cmp	r3, #9
 800f420:	d94e      	bls.n	800f4c0 <_vfiprintf_r+0x1c4>
 800f422:	b1b0      	cbz	r0, 800f452 <_vfiprintf_r+0x156>
 800f424:	9207      	str	r2, [sp, #28]
 800f426:	e014      	b.n	800f452 <_vfiprintf_r+0x156>
 800f428:	eba0 0308 	sub.w	r3, r0, r8
 800f42c:	fa09 f303 	lsl.w	r3, r9, r3
 800f430:	4313      	orrs	r3, r2
 800f432:	9304      	str	r3, [sp, #16]
 800f434:	46a2      	mov	sl, r4
 800f436:	e7d2      	b.n	800f3de <_vfiprintf_r+0xe2>
 800f438:	9b03      	ldr	r3, [sp, #12]
 800f43a:	1d19      	adds	r1, r3, #4
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	9103      	str	r1, [sp, #12]
 800f440:	2b00      	cmp	r3, #0
 800f442:	bfbb      	ittet	lt
 800f444:	425b      	neglt	r3, r3
 800f446:	f042 0202 	orrlt.w	r2, r2, #2
 800f44a:	9307      	strge	r3, [sp, #28]
 800f44c:	9307      	strlt	r3, [sp, #28]
 800f44e:	bfb8      	it	lt
 800f450:	9204      	strlt	r2, [sp, #16]
 800f452:	7823      	ldrb	r3, [r4, #0]
 800f454:	2b2e      	cmp	r3, #46	; 0x2e
 800f456:	d10c      	bne.n	800f472 <_vfiprintf_r+0x176>
 800f458:	7863      	ldrb	r3, [r4, #1]
 800f45a:	2b2a      	cmp	r3, #42	; 0x2a
 800f45c:	d135      	bne.n	800f4ca <_vfiprintf_r+0x1ce>
 800f45e:	9b03      	ldr	r3, [sp, #12]
 800f460:	1d1a      	adds	r2, r3, #4
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	9203      	str	r2, [sp, #12]
 800f466:	2b00      	cmp	r3, #0
 800f468:	bfb8      	it	lt
 800f46a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f46e:	3402      	adds	r4, #2
 800f470:	9305      	str	r3, [sp, #20]
 800f472:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f558 <_vfiprintf_r+0x25c>
 800f476:	7821      	ldrb	r1, [r4, #0]
 800f478:	2203      	movs	r2, #3
 800f47a:	4650      	mov	r0, sl
 800f47c:	f7f0 fec0 	bl	8000200 <memchr>
 800f480:	b140      	cbz	r0, 800f494 <_vfiprintf_r+0x198>
 800f482:	2340      	movs	r3, #64	; 0x40
 800f484:	eba0 000a 	sub.w	r0, r0, sl
 800f488:	fa03 f000 	lsl.w	r0, r3, r0
 800f48c:	9b04      	ldr	r3, [sp, #16]
 800f48e:	4303      	orrs	r3, r0
 800f490:	3401      	adds	r4, #1
 800f492:	9304      	str	r3, [sp, #16]
 800f494:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f498:	482c      	ldr	r0, [pc, #176]	; (800f54c <_vfiprintf_r+0x250>)
 800f49a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f49e:	2206      	movs	r2, #6
 800f4a0:	f7f0 feae 	bl	8000200 <memchr>
 800f4a4:	2800      	cmp	r0, #0
 800f4a6:	d03f      	beq.n	800f528 <_vfiprintf_r+0x22c>
 800f4a8:	4b29      	ldr	r3, [pc, #164]	; (800f550 <_vfiprintf_r+0x254>)
 800f4aa:	bb1b      	cbnz	r3, 800f4f4 <_vfiprintf_r+0x1f8>
 800f4ac:	9b03      	ldr	r3, [sp, #12]
 800f4ae:	3307      	adds	r3, #7
 800f4b0:	f023 0307 	bic.w	r3, r3, #7
 800f4b4:	3308      	adds	r3, #8
 800f4b6:	9303      	str	r3, [sp, #12]
 800f4b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4ba:	443b      	add	r3, r7
 800f4bc:	9309      	str	r3, [sp, #36]	; 0x24
 800f4be:	e767      	b.n	800f390 <_vfiprintf_r+0x94>
 800f4c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f4c4:	460c      	mov	r4, r1
 800f4c6:	2001      	movs	r0, #1
 800f4c8:	e7a5      	b.n	800f416 <_vfiprintf_r+0x11a>
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	3401      	adds	r4, #1
 800f4ce:	9305      	str	r3, [sp, #20]
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	f04f 0c0a 	mov.w	ip, #10
 800f4d6:	4620      	mov	r0, r4
 800f4d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4dc:	3a30      	subs	r2, #48	; 0x30
 800f4de:	2a09      	cmp	r2, #9
 800f4e0:	d903      	bls.n	800f4ea <_vfiprintf_r+0x1ee>
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d0c5      	beq.n	800f472 <_vfiprintf_r+0x176>
 800f4e6:	9105      	str	r1, [sp, #20]
 800f4e8:	e7c3      	b.n	800f472 <_vfiprintf_r+0x176>
 800f4ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800f4ee:	4604      	mov	r4, r0
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	e7f0      	b.n	800f4d6 <_vfiprintf_r+0x1da>
 800f4f4:	ab03      	add	r3, sp, #12
 800f4f6:	9300      	str	r3, [sp, #0]
 800f4f8:	462a      	mov	r2, r5
 800f4fa:	4b16      	ldr	r3, [pc, #88]	; (800f554 <_vfiprintf_r+0x258>)
 800f4fc:	a904      	add	r1, sp, #16
 800f4fe:	4630      	mov	r0, r6
 800f500:	f7fb fa04 	bl	800a90c <_printf_float>
 800f504:	4607      	mov	r7, r0
 800f506:	1c78      	adds	r0, r7, #1
 800f508:	d1d6      	bne.n	800f4b8 <_vfiprintf_r+0x1bc>
 800f50a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f50c:	07d9      	lsls	r1, r3, #31
 800f50e:	d405      	bmi.n	800f51c <_vfiprintf_r+0x220>
 800f510:	89ab      	ldrh	r3, [r5, #12]
 800f512:	059a      	lsls	r2, r3, #22
 800f514:	d402      	bmi.n	800f51c <_vfiprintf_r+0x220>
 800f516:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f518:	f7ff fe79 	bl	800f20e <__retarget_lock_release_recursive>
 800f51c:	89ab      	ldrh	r3, [r5, #12]
 800f51e:	065b      	lsls	r3, r3, #25
 800f520:	f53f af12 	bmi.w	800f348 <_vfiprintf_r+0x4c>
 800f524:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f526:	e711      	b.n	800f34c <_vfiprintf_r+0x50>
 800f528:	ab03      	add	r3, sp, #12
 800f52a:	9300      	str	r3, [sp, #0]
 800f52c:	462a      	mov	r2, r5
 800f52e:	4b09      	ldr	r3, [pc, #36]	; (800f554 <_vfiprintf_r+0x258>)
 800f530:	a904      	add	r1, sp, #16
 800f532:	4630      	mov	r0, r6
 800f534:	f7fb fc8e 	bl	800ae54 <_printf_i>
 800f538:	e7e4      	b.n	800f504 <_vfiprintf_r+0x208>
 800f53a:	bf00      	nop
 800f53c:	0801083c 	.word	0x0801083c
 800f540:	0801085c 	.word	0x0801085c
 800f544:	0801081c 	.word	0x0801081c
 800f548:	080107b4 	.word	0x080107b4
 800f54c:	080107be 	.word	0x080107be
 800f550:	0800a90d 	.word	0x0800a90d
 800f554:	0800f2d7 	.word	0x0800f2d7
 800f558:	080107ba 	.word	0x080107ba

0800f55c <__swbuf_r>:
 800f55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f55e:	460e      	mov	r6, r1
 800f560:	4614      	mov	r4, r2
 800f562:	4605      	mov	r5, r0
 800f564:	b118      	cbz	r0, 800f56e <__swbuf_r+0x12>
 800f566:	6983      	ldr	r3, [r0, #24]
 800f568:	b90b      	cbnz	r3, 800f56e <__swbuf_r+0x12>
 800f56a:	f7ff fd9f 	bl	800f0ac <__sinit>
 800f56e:	4b21      	ldr	r3, [pc, #132]	; (800f5f4 <__swbuf_r+0x98>)
 800f570:	429c      	cmp	r4, r3
 800f572:	d12b      	bne.n	800f5cc <__swbuf_r+0x70>
 800f574:	686c      	ldr	r4, [r5, #4]
 800f576:	69a3      	ldr	r3, [r4, #24]
 800f578:	60a3      	str	r3, [r4, #8]
 800f57a:	89a3      	ldrh	r3, [r4, #12]
 800f57c:	071a      	lsls	r2, r3, #28
 800f57e:	d52f      	bpl.n	800f5e0 <__swbuf_r+0x84>
 800f580:	6923      	ldr	r3, [r4, #16]
 800f582:	b36b      	cbz	r3, 800f5e0 <__swbuf_r+0x84>
 800f584:	6923      	ldr	r3, [r4, #16]
 800f586:	6820      	ldr	r0, [r4, #0]
 800f588:	1ac0      	subs	r0, r0, r3
 800f58a:	6963      	ldr	r3, [r4, #20]
 800f58c:	b2f6      	uxtb	r6, r6
 800f58e:	4283      	cmp	r3, r0
 800f590:	4637      	mov	r7, r6
 800f592:	dc04      	bgt.n	800f59e <__swbuf_r+0x42>
 800f594:	4621      	mov	r1, r4
 800f596:	4628      	mov	r0, r5
 800f598:	f7ff fcf4 	bl	800ef84 <_fflush_r>
 800f59c:	bb30      	cbnz	r0, 800f5ec <__swbuf_r+0x90>
 800f59e:	68a3      	ldr	r3, [r4, #8]
 800f5a0:	3b01      	subs	r3, #1
 800f5a2:	60a3      	str	r3, [r4, #8]
 800f5a4:	6823      	ldr	r3, [r4, #0]
 800f5a6:	1c5a      	adds	r2, r3, #1
 800f5a8:	6022      	str	r2, [r4, #0]
 800f5aa:	701e      	strb	r6, [r3, #0]
 800f5ac:	6963      	ldr	r3, [r4, #20]
 800f5ae:	3001      	adds	r0, #1
 800f5b0:	4283      	cmp	r3, r0
 800f5b2:	d004      	beq.n	800f5be <__swbuf_r+0x62>
 800f5b4:	89a3      	ldrh	r3, [r4, #12]
 800f5b6:	07db      	lsls	r3, r3, #31
 800f5b8:	d506      	bpl.n	800f5c8 <__swbuf_r+0x6c>
 800f5ba:	2e0a      	cmp	r6, #10
 800f5bc:	d104      	bne.n	800f5c8 <__swbuf_r+0x6c>
 800f5be:	4621      	mov	r1, r4
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	f7ff fcdf 	bl	800ef84 <_fflush_r>
 800f5c6:	b988      	cbnz	r0, 800f5ec <__swbuf_r+0x90>
 800f5c8:	4638      	mov	r0, r7
 800f5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5cc:	4b0a      	ldr	r3, [pc, #40]	; (800f5f8 <__swbuf_r+0x9c>)
 800f5ce:	429c      	cmp	r4, r3
 800f5d0:	d101      	bne.n	800f5d6 <__swbuf_r+0x7a>
 800f5d2:	68ac      	ldr	r4, [r5, #8]
 800f5d4:	e7cf      	b.n	800f576 <__swbuf_r+0x1a>
 800f5d6:	4b09      	ldr	r3, [pc, #36]	; (800f5fc <__swbuf_r+0xa0>)
 800f5d8:	429c      	cmp	r4, r3
 800f5da:	bf08      	it	eq
 800f5dc:	68ec      	ldreq	r4, [r5, #12]
 800f5de:	e7ca      	b.n	800f576 <__swbuf_r+0x1a>
 800f5e0:	4621      	mov	r1, r4
 800f5e2:	4628      	mov	r0, r5
 800f5e4:	f000 f80c 	bl	800f600 <__swsetup_r>
 800f5e8:	2800      	cmp	r0, #0
 800f5ea:	d0cb      	beq.n	800f584 <__swbuf_r+0x28>
 800f5ec:	f04f 37ff 	mov.w	r7, #4294967295
 800f5f0:	e7ea      	b.n	800f5c8 <__swbuf_r+0x6c>
 800f5f2:	bf00      	nop
 800f5f4:	0801083c 	.word	0x0801083c
 800f5f8:	0801085c 	.word	0x0801085c
 800f5fc:	0801081c 	.word	0x0801081c

0800f600 <__swsetup_r>:
 800f600:	4b32      	ldr	r3, [pc, #200]	; (800f6cc <__swsetup_r+0xcc>)
 800f602:	b570      	push	{r4, r5, r6, lr}
 800f604:	681d      	ldr	r5, [r3, #0]
 800f606:	4606      	mov	r6, r0
 800f608:	460c      	mov	r4, r1
 800f60a:	b125      	cbz	r5, 800f616 <__swsetup_r+0x16>
 800f60c:	69ab      	ldr	r3, [r5, #24]
 800f60e:	b913      	cbnz	r3, 800f616 <__swsetup_r+0x16>
 800f610:	4628      	mov	r0, r5
 800f612:	f7ff fd4b 	bl	800f0ac <__sinit>
 800f616:	4b2e      	ldr	r3, [pc, #184]	; (800f6d0 <__swsetup_r+0xd0>)
 800f618:	429c      	cmp	r4, r3
 800f61a:	d10f      	bne.n	800f63c <__swsetup_r+0x3c>
 800f61c:	686c      	ldr	r4, [r5, #4]
 800f61e:	89a3      	ldrh	r3, [r4, #12]
 800f620:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f624:	0719      	lsls	r1, r3, #28
 800f626:	d42c      	bmi.n	800f682 <__swsetup_r+0x82>
 800f628:	06dd      	lsls	r5, r3, #27
 800f62a:	d411      	bmi.n	800f650 <__swsetup_r+0x50>
 800f62c:	2309      	movs	r3, #9
 800f62e:	6033      	str	r3, [r6, #0]
 800f630:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f634:	81a3      	strh	r3, [r4, #12]
 800f636:	f04f 30ff 	mov.w	r0, #4294967295
 800f63a:	e03e      	b.n	800f6ba <__swsetup_r+0xba>
 800f63c:	4b25      	ldr	r3, [pc, #148]	; (800f6d4 <__swsetup_r+0xd4>)
 800f63e:	429c      	cmp	r4, r3
 800f640:	d101      	bne.n	800f646 <__swsetup_r+0x46>
 800f642:	68ac      	ldr	r4, [r5, #8]
 800f644:	e7eb      	b.n	800f61e <__swsetup_r+0x1e>
 800f646:	4b24      	ldr	r3, [pc, #144]	; (800f6d8 <__swsetup_r+0xd8>)
 800f648:	429c      	cmp	r4, r3
 800f64a:	bf08      	it	eq
 800f64c:	68ec      	ldreq	r4, [r5, #12]
 800f64e:	e7e6      	b.n	800f61e <__swsetup_r+0x1e>
 800f650:	0758      	lsls	r0, r3, #29
 800f652:	d512      	bpl.n	800f67a <__swsetup_r+0x7a>
 800f654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f656:	b141      	cbz	r1, 800f66a <__swsetup_r+0x6a>
 800f658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f65c:	4299      	cmp	r1, r3
 800f65e:	d002      	beq.n	800f666 <__swsetup_r+0x66>
 800f660:	4630      	mov	r0, r6
 800f662:	f7fe fd89 	bl	800e178 <_free_r>
 800f666:	2300      	movs	r3, #0
 800f668:	6363      	str	r3, [r4, #52]	; 0x34
 800f66a:	89a3      	ldrh	r3, [r4, #12]
 800f66c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f670:	81a3      	strh	r3, [r4, #12]
 800f672:	2300      	movs	r3, #0
 800f674:	6063      	str	r3, [r4, #4]
 800f676:	6923      	ldr	r3, [r4, #16]
 800f678:	6023      	str	r3, [r4, #0]
 800f67a:	89a3      	ldrh	r3, [r4, #12]
 800f67c:	f043 0308 	orr.w	r3, r3, #8
 800f680:	81a3      	strh	r3, [r4, #12]
 800f682:	6923      	ldr	r3, [r4, #16]
 800f684:	b94b      	cbnz	r3, 800f69a <__swsetup_r+0x9a>
 800f686:	89a3      	ldrh	r3, [r4, #12]
 800f688:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f68c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f690:	d003      	beq.n	800f69a <__swsetup_r+0x9a>
 800f692:	4621      	mov	r1, r4
 800f694:	4630      	mov	r0, r6
 800f696:	f000 f84d 	bl	800f734 <__smakebuf_r>
 800f69a:	89a0      	ldrh	r0, [r4, #12]
 800f69c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f6a0:	f010 0301 	ands.w	r3, r0, #1
 800f6a4:	d00a      	beq.n	800f6bc <__swsetup_r+0xbc>
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	60a3      	str	r3, [r4, #8]
 800f6aa:	6963      	ldr	r3, [r4, #20]
 800f6ac:	425b      	negs	r3, r3
 800f6ae:	61a3      	str	r3, [r4, #24]
 800f6b0:	6923      	ldr	r3, [r4, #16]
 800f6b2:	b943      	cbnz	r3, 800f6c6 <__swsetup_r+0xc6>
 800f6b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f6b8:	d1ba      	bne.n	800f630 <__swsetup_r+0x30>
 800f6ba:	bd70      	pop	{r4, r5, r6, pc}
 800f6bc:	0781      	lsls	r1, r0, #30
 800f6be:	bf58      	it	pl
 800f6c0:	6963      	ldrpl	r3, [r4, #20]
 800f6c2:	60a3      	str	r3, [r4, #8]
 800f6c4:	e7f4      	b.n	800f6b0 <__swsetup_r+0xb0>
 800f6c6:	2000      	movs	r0, #0
 800f6c8:	e7f7      	b.n	800f6ba <__swsetup_r+0xba>
 800f6ca:	bf00      	nop
 800f6cc:	20000024 	.word	0x20000024
 800f6d0:	0801083c 	.word	0x0801083c
 800f6d4:	0801085c 	.word	0x0801085c
 800f6d8:	0801081c 	.word	0x0801081c

0800f6dc <abort>:
 800f6dc:	b508      	push	{r3, lr}
 800f6de:	2006      	movs	r0, #6
 800f6e0:	f000 f898 	bl	800f814 <raise>
 800f6e4:	2001      	movs	r0, #1
 800f6e6:	f7f3 ff4b 	bl	8003580 <_exit>

0800f6ea <__swhatbuf_r>:
 800f6ea:	b570      	push	{r4, r5, r6, lr}
 800f6ec:	460e      	mov	r6, r1
 800f6ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6f2:	2900      	cmp	r1, #0
 800f6f4:	b096      	sub	sp, #88	; 0x58
 800f6f6:	4614      	mov	r4, r2
 800f6f8:	461d      	mov	r5, r3
 800f6fa:	da07      	bge.n	800f70c <__swhatbuf_r+0x22>
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	602b      	str	r3, [r5, #0]
 800f700:	89b3      	ldrh	r3, [r6, #12]
 800f702:	061a      	lsls	r2, r3, #24
 800f704:	d410      	bmi.n	800f728 <__swhatbuf_r+0x3e>
 800f706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f70a:	e00e      	b.n	800f72a <__swhatbuf_r+0x40>
 800f70c:	466a      	mov	r2, sp
 800f70e:	f000 f89d 	bl	800f84c <_fstat_r>
 800f712:	2800      	cmp	r0, #0
 800f714:	dbf2      	blt.n	800f6fc <__swhatbuf_r+0x12>
 800f716:	9a01      	ldr	r2, [sp, #4]
 800f718:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f71c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f720:	425a      	negs	r2, r3
 800f722:	415a      	adcs	r2, r3
 800f724:	602a      	str	r2, [r5, #0]
 800f726:	e7ee      	b.n	800f706 <__swhatbuf_r+0x1c>
 800f728:	2340      	movs	r3, #64	; 0x40
 800f72a:	2000      	movs	r0, #0
 800f72c:	6023      	str	r3, [r4, #0]
 800f72e:	b016      	add	sp, #88	; 0x58
 800f730:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f734 <__smakebuf_r>:
 800f734:	898b      	ldrh	r3, [r1, #12]
 800f736:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f738:	079d      	lsls	r5, r3, #30
 800f73a:	4606      	mov	r6, r0
 800f73c:	460c      	mov	r4, r1
 800f73e:	d507      	bpl.n	800f750 <__smakebuf_r+0x1c>
 800f740:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f744:	6023      	str	r3, [r4, #0]
 800f746:	6123      	str	r3, [r4, #16]
 800f748:	2301      	movs	r3, #1
 800f74a:	6163      	str	r3, [r4, #20]
 800f74c:	b002      	add	sp, #8
 800f74e:	bd70      	pop	{r4, r5, r6, pc}
 800f750:	ab01      	add	r3, sp, #4
 800f752:	466a      	mov	r2, sp
 800f754:	f7ff ffc9 	bl	800f6ea <__swhatbuf_r>
 800f758:	9900      	ldr	r1, [sp, #0]
 800f75a:	4605      	mov	r5, r0
 800f75c:	4630      	mov	r0, r6
 800f75e:	f7fe fd5b 	bl	800e218 <_malloc_r>
 800f762:	b948      	cbnz	r0, 800f778 <__smakebuf_r+0x44>
 800f764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f768:	059a      	lsls	r2, r3, #22
 800f76a:	d4ef      	bmi.n	800f74c <__smakebuf_r+0x18>
 800f76c:	f023 0303 	bic.w	r3, r3, #3
 800f770:	f043 0302 	orr.w	r3, r3, #2
 800f774:	81a3      	strh	r3, [r4, #12]
 800f776:	e7e3      	b.n	800f740 <__smakebuf_r+0xc>
 800f778:	4b0d      	ldr	r3, [pc, #52]	; (800f7b0 <__smakebuf_r+0x7c>)
 800f77a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f77c:	89a3      	ldrh	r3, [r4, #12]
 800f77e:	6020      	str	r0, [r4, #0]
 800f780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f784:	81a3      	strh	r3, [r4, #12]
 800f786:	9b00      	ldr	r3, [sp, #0]
 800f788:	6163      	str	r3, [r4, #20]
 800f78a:	9b01      	ldr	r3, [sp, #4]
 800f78c:	6120      	str	r0, [r4, #16]
 800f78e:	b15b      	cbz	r3, 800f7a8 <__smakebuf_r+0x74>
 800f790:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f794:	4630      	mov	r0, r6
 800f796:	f000 f86b 	bl	800f870 <_isatty_r>
 800f79a:	b128      	cbz	r0, 800f7a8 <__smakebuf_r+0x74>
 800f79c:	89a3      	ldrh	r3, [r4, #12]
 800f79e:	f023 0303 	bic.w	r3, r3, #3
 800f7a2:	f043 0301 	orr.w	r3, r3, #1
 800f7a6:	81a3      	strh	r3, [r4, #12]
 800f7a8:	89a0      	ldrh	r0, [r4, #12]
 800f7aa:	4305      	orrs	r5, r0
 800f7ac:	81a5      	strh	r5, [r4, #12]
 800f7ae:	e7cd      	b.n	800f74c <__smakebuf_r+0x18>
 800f7b0:	0800f045 	.word	0x0800f045

0800f7b4 <_malloc_usable_size_r>:
 800f7b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7b8:	1f18      	subs	r0, r3, #4
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	bfbc      	itt	lt
 800f7be:	580b      	ldrlt	r3, [r1, r0]
 800f7c0:	18c0      	addlt	r0, r0, r3
 800f7c2:	4770      	bx	lr

0800f7c4 <_raise_r>:
 800f7c4:	291f      	cmp	r1, #31
 800f7c6:	b538      	push	{r3, r4, r5, lr}
 800f7c8:	4604      	mov	r4, r0
 800f7ca:	460d      	mov	r5, r1
 800f7cc:	d904      	bls.n	800f7d8 <_raise_r+0x14>
 800f7ce:	2316      	movs	r3, #22
 800f7d0:	6003      	str	r3, [r0, #0]
 800f7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800f7d6:	bd38      	pop	{r3, r4, r5, pc}
 800f7d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f7da:	b112      	cbz	r2, 800f7e2 <_raise_r+0x1e>
 800f7dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f7e0:	b94b      	cbnz	r3, 800f7f6 <_raise_r+0x32>
 800f7e2:	4620      	mov	r0, r4
 800f7e4:	f000 f830 	bl	800f848 <_getpid_r>
 800f7e8:	462a      	mov	r2, r5
 800f7ea:	4601      	mov	r1, r0
 800f7ec:	4620      	mov	r0, r4
 800f7ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7f2:	f000 b817 	b.w	800f824 <_kill_r>
 800f7f6:	2b01      	cmp	r3, #1
 800f7f8:	d00a      	beq.n	800f810 <_raise_r+0x4c>
 800f7fa:	1c59      	adds	r1, r3, #1
 800f7fc:	d103      	bne.n	800f806 <_raise_r+0x42>
 800f7fe:	2316      	movs	r3, #22
 800f800:	6003      	str	r3, [r0, #0]
 800f802:	2001      	movs	r0, #1
 800f804:	e7e7      	b.n	800f7d6 <_raise_r+0x12>
 800f806:	2400      	movs	r4, #0
 800f808:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f80c:	4628      	mov	r0, r5
 800f80e:	4798      	blx	r3
 800f810:	2000      	movs	r0, #0
 800f812:	e7e0      	b.n	800f7d6 <_raise_r+0x12>

0800f814 <raise>:
 800f814:	4b02      	ldr	r3, [pc, #8]	; (800f820 <raise+0xc>)
 800f816:	4601      	mov	r1, r0
 800f818:	6818      	ldr	r0, [r3, #0]
 800f81a:	f7ff bfd3 	b.w	800f7c4 <_raise_r>
 800f81e:	bf00      	nop
 800f820:	20000024 	.word	0x20000024

0800f824 <_kill_r>:
 800f824:	b538      	push	{r3, r4, r5, lr}
 800f826:	4d07      	ldr	r5, [pc, #28]	; (800f844 <_kill_r+0x20>)
 800f828:	2300      	movs	r3, #0
 800f82a:	4604      	mov	r4, r0
 800f82c:	4608      	mov	r0, r1
 800f82e:	4611      	mov	r1, r2
 800f830:	602b      	str	r3, [r5, #0]
 800f832:	f7f3 fe9d 	bl	8003570 <_kill>
 800f836:	1c43      	adds	r3, r0, #1
 800f838:	d102      	bne.n	800f840 <_kill_r+0x1c>
 800f83a:	682b      	ldr	r3, [r5, #0]
 800f83c:	b103      	cbz	r3, 800f840 <_kill_r+0x1c>
 800f83e:	6023      	str	r3, [r4, #0]
 800f840:	bd38      	pop	{r3, r4, r5, pc}
 800f842:	bf00      	nop
 800f844:	20001140 	.word	0x20001140

0800f848 <_getpid_r>:
 800f848:	f7f3 be90 	b.w	800356c <_getpid>

0800f84c <_fstat_r>:
 800f84c:	b538      	push	{r3, r4, r5, lr}
 800f84e:	4d07      	ldr	r5, [pc, #28]	; (800f86c <_fstat_r+0x20>)
 800f850:	2300      	movs	r3, #0
 800f852:	4604      	mov	r4, r0
 800f854:	4608      	mov	r0, r1
 800f856:	4611      	mov	r1, r2
 800f858:	602b      	str	r3, [r5, #0]
 800f85a:	f7f3 feb4 	bl	80035c6 <_fstat>
 800f85e:	1c43      	adds	r3, r0, #1
 800f860:	d102      	bne.n	800f868 <_fstat_r+0x1c>
 800f862:	682b      	ldr	r3, [r5, #0]
 800f864:	b103      	cbz	r3, 800f868 <_fstat_r+0x1c>
 800f866:	6023      	str	r3, [r4, #0]
 800f868:	bd38      	pop	{r3, r4, r5, pc}
 800f86a:	bf00      	nop
 800f86c:	20001140 	.word	0x20001140

0800f870 <_isatty_r>:
 800f870:	b538      	push	{r3, r4, r5, lr}
 800f872:	4d06      	ldr	r5, [pc, #24]	; (800f88c <_isatty_r+0x1c>)
 800f874:	2300      	movs	r3, #0
 800f876:	4604      	mov	r4, r0
 800f878:	4608      	mov	r0, r1
 800f87a:	602b      	str	r3, [r5, #0]
 800f87c:	f7f3 fea8 	bl	80035d0 <_isatty>
 800f880:	1c43      	adds	r3, r0, #1
 800f882:	d102      	bne.n	800f88a <_isatty_r+0x1a>
 800f884:	682b      	ldr	r3, [r5, #0]
 800f886:	b103      	cbz	r3, 800f88a <_isatty_r+0x1a>
 800f888:	6023      	str	r3, [r4, #0]
 800f88a:	bd38      	pop	{r3, r4, r5, pc}
 800f88c:	20001140 	.word	0x20001140

0800f890 <powf>:
 800f890:	b508      	push	{r3, lr}
 800f892:	ed2d 8b04 	vpush	{d8-d9}
 800f896:	eeb0 9a40 	vmov.f32	s18, s0
 800f89a:	eef0 8a60 	vmov.f32	s17, s1
 800f89e:	f000 f88f 	bl	800f9c0 <__ieee754_powf>
 800f8a2:	4b43      	ldr	r3, [pc, #268]	; (800f9b0 <powf+0x120>)
 800f8a4:	f993 3000 	ldrsb.w	r3, [r3]
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	eeb0 8a40 	vmov.f32	s16, s0
 800f8ae:	d012      	beq.n	800f8d6 <powf+0x46>
 800f8b0:	eef4 8a68 	vcmp.f32	s17, s17
 800f8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8b8:	d60d      	bvs.n	800f8d6 <powf+0x46>
 800f8ba:	eeb4 9a49 	vcmp.f32	s18, s18
 800f8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8c2:	d70d      	bvc.n	800f8e0 <powf+0x50>
 800f8c4:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f8c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f8d0:	bf08      	it	eq
 800f8d2:	eeb0 8a67 	vmoveq.f32	s16, s15
 800f8d6:	eeb0 0a48 	vmov.f32	s0, s16
 800f8da:	ecbd 8b04 	vpop	{d8-d9}
 800f8de:	bd08      	pop	{r3, pc}
 800f8e0:	eddf 9a34 	vldr	s19, [pc, #208]	; 800f9b4 <powf+0x124>
 800f8e4:	eeb4 9a69 	vcmp.f32	s18, s19
 800f8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ec:	d116      	bne.n	800f91c <powf+0x8c>
 800f8ee:	eef4 8a69 	vcmp.f32	s17, s19
 800f8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8f6:	d057      	beq.n	800f9a8 <powf+0x118>
 800f8f8:	eeb0 0a68 	vmov.f32	s0, s17
 800f8fc:	f000 fb2a 	bl	800ff54 <finitef>
 800f900:	2800      	cmp	r0, #0
 800f902:	d0e8      	beq.n	800f8d6 <powf+0x46>
 800f904:	eef4 8ae9 	vcmpe.f32	s17, s19
 800f908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f90c:	d5e3      	bpl.n	800f8d6 <powf+0x46>
 800f90e:	f7fa ff2b 	bl	800a768 <__errno>
 800f912:	2321      	movs	r3, #33	; 0x21
 800f914:	6003      	str	r3, [r0, #0]
 800f916:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800f9b8 <powf+0x128>
 800f91a:	e7dc      	b.n	800f8d6 <powf+0x46>
 800f91c:	f000 fb1a 	bl	800ff54 <finitef>
 800f920:	bb50      	cbnz	r0, 800f978 <powf+0xe8>
 800f922:	eeb0 0a49 	vmov.f32	s0, s18
 800f926:	f000 fb15 	bl	800ff54 <finitef>
 800f92a:	b328      	cbz	r0, 800f978 <powf+0xe8>
 800f92c:	eeb0 0a68 	vmov.f32	s0, s17
 800f930:	f000 fb10 	bl	800ff54 <finitef>
 800f934:	b300      	cbz	r0, 800f978 <powf+0xe8>
 800f936:	eeb4 8a48 	vcmp.f32	s16, s16
 800f93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f93e:	d706      	bvc.n	800f94e <powf+0xbe>
 800f940:	f7fa ff12 	bl	800a768 <__errno>
 800f944:	2321      	movs	r3, #33	; 0x21
 800f946:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800f94a:	6003      	str	r3, [r0, #0]
 800f94c:	e7c3      	b.n	800f8d6 <powf+0x46>
 800f94e:	f7fa ff0b 	bl	800a768 <__errno>
 800f952:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800f956:	2322      	movs	r3, #34	; 0x22
 800f958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f95c:	6003      	str	r3, [r0, #0]
 800f95e:	d508      	bpl.n	800f972 <powf+0xe2>
 800f960:	eeb0 0a68 	vmov.f32	s0, s17
 800f964:	f000 fb04 	bl	800ff70 <rintf>
 800f968:	eeb4 0a68 	vcmp.f32	s0, s17
 800f96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f970:	d1d1      	bne.n	800f916 <powf+0x86>
 800f972:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800f9bc <powf+0x12c>
 800f976:	e7ae      	b.n	800f8d6 <powf+0x46>
 800f978:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f980:	d1a9      	bne.n	800f8d6 <powf+0x46>
 800f982:	eeb0 0a49 	vmov.f32	s0, s18
 800f986:	f000 fae5 	bl	800ff54 <finitef>
 800f98a:	2800      	cmp	r0, #0
 800f98c:	d0a3      	beq.n	800f8d6 <powf+0x46>
 800f98e:	eeb0 0a68 	vmov.f32	s0, s17
 800f992:	f000 fadf 	bl	800ff54 <finitef>
 800f996:	2800      	cmp	r0, #0
 800f998:	d09d      	beq.n	800f8d6 <powf+0x46>
 800f99a:	f7fa fee5 	bl	800a768 <__errno>
 800f99e:	2322      	movs	r3, #34	; 0x22
 800f9a0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800f9b4 <powf+0x124>
 800f9a4:	6003      	str	r3, [r0, #0]
 800f9a6:	e796      	b.n	800f8d6 <powf+0x46>
 800f9a8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f9ac:	e793      	b.n	800f8d6 <powf+0x46>
 800f9ae:	bf00      	nop
 800f9b0:	200001f8 	.word	0x200001f8
 800f9b4:	00000000 	.word	0x00000000
 800f9b8:	ff800000 	.word	0xff800000
 800f9bc:	7f800000 	.word	0x7f800000

0800f9c0 <__ieee754_powf>:
 800f9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9c4:	ee10 5a90 	vmov	r5, s1
 800f9c8:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800f9cc:	ed2d 8b02 	vpush	{d8}
 800f9d0:	eeb0 8a40 	vmov.f32	s16, s0
 800f9d4:	eef0 8a60 	vmov.f32	s17, s1
 800f9d8:	f000 8291 	beq.w	800fefe <__ieee754_powf+0x53e>
 800f9dc:	ee10 8a10 	vmov	r8, s0
 800f9e0:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800f9e4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f9e8:	dc06      	bgt.n	800f9f8 <__ieee754_powf+0x38>
 800f9ea:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800f9ee:	dd0a      	ble.n	800fa06 <__ieee754_powf+0x46>
 800f9f0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f9f4:	f000 8283 	beq.w	800fefe <__ieee754_powf+0x53e>
 800f9f8:	ecbd 8b02 	vpop	{d8}
 800f9fc:	48d8      	ldr	r0, [pc, #864]	; (800fd60 <__ieee754_powf+0x3a0>)
 800f9fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa02:	f7fb bd5d 	b.w	800b4c0 <nanf>
 800fa06:	f1b8 0f00 	cmp.w	r8, #0
 800fa0a:	da1f      	bge.n	800fa4c <__ieee754_powf+0x8c>
 800fa0c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800fa10:	da2e      	bge.n	800fa70 <__ieee754_powf+0xb0>
 800fa12:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800fa16:	f2c0 827b 	blt.w	800ff10 <__ieee754_powf+0x550>
 800fa1a:	15fb      	asrs	r3, r7, #23
 800fa1c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800fa20:	fa47 f603 	asr.w	r6, r7, r3
 800fa24:	fa06 f303 	lsl.w	r3, r6, r3
 800fa28:	42bb      	cmp	r3, r7
 800fa2a:	f040 8271 	bne.w	800ff10 <__ieee754_powf+0x550>
 800fa2e:	f006 0601 	and.w	r6, r6, #1
 800fa32:	f1c6 0602 	rsb	r6, r6, #2
 800fa36:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800fa3a:	d120      	bne.n	800fa7e <__ieee754_powf+0xbe>
 800fa3c:	2d00      	cmp	r5, #0
 800fa3e:	f280 8264 	bge.w	800ff0a <__ieee754_powf+0x54a>
 800fa42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fa46:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800fa4a:	e00d      	b.n	800fa68 <__ieee754_powf+0xa8>
 800fa4c:	2600      	movs	r6, #0
 800fa4e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800fa52:	d1f0      	bne.n	800fa36 <__ieee754_powf+0x76>
 800fa54:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800fa58:	f000 8251 	beq.w	800fefe <__ieee754_powf+0x53e>
 800fa5c:	dd0a      	ble.n	800fa74 <__ieee754_powf+0xb4>
 800fa5e:	2d00      	cmp	r5, #0
 800fa60:	f280 8250 	bge.w	800ff04 <__ieee754_powf+0x544>
 800fa64:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800fd64 <__ieee754_powf+0x3a4>
 800fa68:	ecbd 8b02 	vpop	{d8}
 800fa6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa70:	2602      	movs	r6, #2
 800fa72:	e7ec      	b.n	800fa4e <__ieee754_powf+0x8e>
 800fa74:	2d00      	cmp	r5, #0
 800fa76:	daf5      	bge.n	800fa64 <__ieee754_powf+0xa4>
 800fa78:	eeb1 0a68 	vneg.f32	s0, s17
 800fa7c:	e7f4      	b.n	800fa68 <__ieee754_powf+0xa8>
 800fa7e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800fa82:	d102      	bne.n	800fa8a <__ieee754_powf+0xca>
 800fa84:	ee28 0a08 	vmul.f32	s0, s16, s16
 800fa88:	e7ee      	b.n	800fa68 <__ieee754_powf+0xa8>
 800fa8a:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800fa8e:	eeb0 0a48 	vmov.f32	s0, s16
 800fa92:	d108      	bne.n	800faa6 <__ieee754_powf+0xe6>
 800fa94:	f1b8 0f00 	cmp.w	r8, #0
 800fa98:	db05      	blt.n	800faa6 <__ieee754_powf+0xe6>
 800fa9a:	ecbd 8b02 	vpop	{d8}
 800fa9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800faa2:	f000 ba4d 	b.w	800ff40 <__ieee754_sqrtf>
 800faa6:	f000 fa4e 	bl	800ff46 <fabsf>
 800faaa:	b124      	cbz	r4, 800fab6 <__ieee754_powf+0xf6>
 800faac:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800fab0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800fab4:	d117      	bne.n	800fae6 <__ieee754_powf+0x126>
 800fab6:	2d00      	cmp	r5, #0
 800fab8:	bfbc      	itt	lt
 800faba:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800fabe:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800fac2:	f1b8 0f00 	cmp.w	r8, #0
 800fac6:	dacf      	bge.n	800fa68 <__ieee754_powf+0xa8>
 800fac8:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800facc:	ea54 0306 	orrs.w	r3, r4, r6
 800fad0:	d104      	bne.n	800fadc <__ieee754_powf+0x11c>
 800fad2:	ee70 7a40 	vsub.f32	s15, s0, s0
 800fad6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800fada:	e7c5      	b.n	800fa68 <__ieee754_powf+0xa8>
 800fadc:	2e01      	cmp	r6, #1
 800fade:	d1c3      	bne.n	800fa68 <__ieee754_powf+0xa8>
 800fae0:	eeb1 0a40 	vneg.f32	s0, s0
 800fae4:	e7c0      	b.n	800fa68 <__ieee754_powf+0xa8>
 800fae6:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800faea:	3801      	subs	r0, #1
 800faec:	ea56 0300 	orrs.w	r3, r6, r0
 800faf0:	d104      	bne.n	800fafc <__ieee754_powf+0x13c>
 800faf2:	ee38 8a48 	vsub.f32	s16, s16, s16
 800faf6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800fafa:	e7b5      	b.n	800fa68 <__ieee754_powf+0xa8>
 800fafc:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800fb00:	dd6b      	ble.n	800fbda <__ieee754_powf+0x21a>
 800fb02:	4b99      	ldr	r3, [pc, #612]	; (800fd68 <__ieee754_powf+0x3a8>)
 800fb04:	429c      	cmp	r4, r3
 800fb06:	dc06      	bgt.n	800fb16 <__ieee754_powf+0x156>
 800fb08:	2d00      	cmp	r5, #0
 800fb0a:	daab      	bge.n	800fa64 <__ieee754_powf+0xa4>
 800fb0c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800fd6c <__ieee754_powf+0x3ac>
 800fb10:	ee20 0a00 	vmul.f32	s0, s0, s0
 800fb14:	e7a8      	b.n	800fa68 <__ieee754_powf+0xa8>
 800fb16:	4b96      	ldr	r3, [pc, #600]	; (800fd70 <__ieee754_powf+0x3b0>)
 800fb18:	429c      	cmp	r4, r3
 800fb1a:	dd02      	ble.n	800fb22 <__ieee754_powf+0x162>
 800fb1c:	2d00      	cmp	r5, #0
 800fb1e:	dcf5      	bgt.n	800fb0c <__ieee754_powf+0x14c>
 800fb20:	e7a0      	b.n	800fa64 <__ieee754_powf+0xa4>
 800fb22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fb26:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fb2a:	eddf 6a92 	vldr	s13, [pc, #584]	; 800fd74 <__ieee754_powf+0x3b4>
 800fb2e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800fb32:	eee0 6a67 	vfms.f32	s13, s0, s15
 800fb36:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800fb3a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800fb3e:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fb42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb46:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800fd78 <__ieee754_powf+0x3b8>
 800fb4a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800fb4e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800fd7c <__ieee754_powf+0x3bc>
 800fb52:	eee0 7a07 	vfma.f32	s15, s0, s14
 800fb56:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800fd80 <__ieee754_powf+0x3c0>
 800fb5a:	eef0 6a67 	vmov.f32	s13, s15
 800fb5e:	eee0 6a07 	vfma.f32	s13, s0, s14
 800fb62:	ee16 3a90 	vmov	r3, s13
 800fb66:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800fb6a:	f023 030f 	bic.w	r3, r3, #15
 800fb6e:	ee00 3a90 	vmov	s1, r3
 800fb72:	eee0 0a47 	vfms.f32	s1, s0, s14
 800fb76:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800fb7a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800fb7e:	f025 050f 	bic.w	r5, r5, #15
 800fb82:	ee07 5a10 	vmov	s14, r5
 800fb86:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800fb8a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800fb8e:	ee07 3a90 	vmov	s15, r3
 800fb92:	eee7 0a27 	vfma.f32	s1, s14, s15
 800fb96:	3e01      	subs	r6, #1
 800fb98:	ea56 0200 	orrs.w	r2, r6, r0
 800fb9c:	ee07 5a10 	vmov	s14, r5
 800fba0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fba4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800fba8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800fbac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800fbb0:	ee17 4a10 	vmov	r4, s14
 800fbb4:	bf08      	it	eq
 800fbb6:	eeb0 8a40 	vmoveq.f32	s16, s0
 800fbba:	2c00      	cmp	r4, #0
 800fbbc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800fbc0:	f340 8184 	ble.w	800fecc <__ieee754_powf+0x50c>
 800fbc4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800fbc8:	f340 80fc 	ble.w	800fdc4 <__ieee754_powf+0x404>
 800fbcc:	eddf 7a67 	vldr	s15, [pc, #412]	; 800fd6c <__ieee754_powf+0x3ac>
 800fbd0:	ee28 0a27 	vmul.f32	s0, s16, s15
 800fbd4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fbd8:	e746      	b.n	800fa68 <__ieee754_powf+0xa8>
 800fbda:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800fbde:	bf01      	itttt	eq
 800fbe0:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800fd84 <__ieee754_powf+0x3c4>
 800fbe4:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800fbe8:	f06f 0217 	mvneq.w	r2, #23
 800fbec:	ee17 4a90 	vmoveq	r4, s15
 800fbf0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800fbf4:	bf18      	it	ne
 800fbf6:	2200      	movne	r2, #0
 800fbf8:	3b7f      	subs	r3, #127	; 0x7f
 800fbfa:	4413      	add	r3, r2
 800fbfc:	4a62      	ldr	r2, [pc, #392]	; (800fd88 <__ieee754_powf+0x3c8>)
 800fbfe:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800fc02:	4294      	cmp	r4, r2
 800fc04:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800fc08:	dd06      	ble.n	800fc18 <__ieee754_powf+0x258>
 800fc0a:	4a60      	ldr	r2, [pc, #384]	; (800fd8c <__ieee754_powf+0x3cc>)
 800fc0c:	4294      	cmp	r4, r2
 800fc0e:	f340 80a4 	ble.w	800fd5a <__ieee754_powf+0x39a>
 800fc12:	3301      	adds	r3, #1
 800fc14:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800fc18:	2400      	movs	r4, #0
 800fc1a:	4a5d      	ldr	r2, [pc, #372]	; (800fd90 <__ieee754_powf+0x3d0>)
 800fc1c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800fc20:	ee07 1a90 	vmov	s15, r1
 800fc24:	ed92 7a00 	vldr	s14, [r2]
 800fc28:	4a5a      	ldr	r2, [pc, #360]	; (800fd94 <__ieee754_powf+0x3d4>)
 800fc2a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800fc2e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800fc32:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800fc36:	1049      	asrs	r1, r1, #1
 800fc38:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800fc3c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800fc40:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800fc44:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800fc48:	ee06 1a10 	vmov	s12, r1
 800fc4c:	ee65 4a26 	vmul.f32	s9, s10, s13
 800fc50:	ee36 7a47 	vsub.f32	s14, s12, s14
 800fc54:	ee14 7a90 	vmov	r7, s9
 800fc58:	4017      	ands	r7, r2
 800fc5a:	ee05 7a90 	vmov	s11, r7
 800fc5e:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800fc62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc66:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800fd98 <__ieee754_powf+0x3d8>
 800fc6a:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800fc6e:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800fc72:	ee25 6a26 	vmul.f32	s12, s10, s13
 800fc76:	eddf 6a49 	vldr	s13, [pc, #292]	; 800fd9c <__ieee754_powf+0x3dc>
 800fc7a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800fc7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800fda0 <__ieee754_powf+0x3e0>
 800fc82:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fc86:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800fd74 <__ieee754_powf+0x3b4>
 800fc8a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fc8e:	eddf 6a45 	vldr	s13, [pc, #276]	; 800fda4 <__ieee754_powf+0x3e4>
 800fc92:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fc96:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800fda8 <__ieee754_powf+0x3e8>
 800fc9a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fc9e:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800fca2:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800fca6:	ee66 6a86 	vmul.f32	s13, s13, s12
 800fcaa:	eee5 6a07 	vfma.f32	s13, s10, s14
 800fcae:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800fcb2:	eef0 7a45 	vmov.f32	s15, s10
 800fcb6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800fcba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fcbe:	ee17 1a90 	vmov	r1, s15
 800fcc2:	4011      	ands	r1, r2
 800fcc4:	ee07 1a90 	vmov	s15, r1
 800fcc8:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800fccc:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800fcd0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800fcd4:	ee27 7a24 	vmul.f32	s14, s14, s9
 800fcd8:	eea6 7a27 	vfma.f32	s14, s12, s15
 800fcdc:	eeb0 6a47 	vmov.f32	s12, s14
 800fce0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800fce4:	ee16 1a10 	vmov	r1, s12
 800fce8:	4011      	ands	r1, r2
 800fcea:	ee06 1a90 	vmov	s13, r1
 800fcee:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800fcf2:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800fdac <__ieee754_powf+0x3ec>
 800fcf6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800fdb0 <__ieee754_powf+0x3f0>
 800fcfa:	ee37 7a66 	vsub.f32	s14, s14, s13
 800fcfe:	ee06 1a10 	vmov	s12, r1
 800fd02:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fd06:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800fdb4 <__ieee754_powf+0x3f4>
 800fd0a:	492b      	ldr	r1, [pc, #172]	; (800fdb8 <__ieee754_powf+0x3f8>)
 800fd0c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800fd10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fd14:	edd1 7a00 	vldr	s15, [r1]
 800fd18:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fd1c:	ee07 3a90 	vmov	s15, r3
 800fd20:	4b26      	ldr	r3, [pc, #152]	; (800fdbc <__ieee754_powf+0x3fc>)
 800fd22:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800fd26:	eef0 7a47 	vmov.f32	s15, s14
 800fd2a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fd2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fd32:	edd4 0a00 	vldr	s1, [r4]
 800fd36:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800fd3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd3e:	ee17 3a90 	vmov	r3, s15
 800fd42:	4013      	ands	r3, r2
 800fd44:	ee07 3a90 	vmov	s15, r3
 800fd48:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800fd4c:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800fd50:	eee6 6a65 	vfms.f32	s13, s12, s11
 800fd54:	ee77 7a66 	vsub.f32	s15, s14, s13
 800fd58:	e70f      	b.n	800fb7a <__ieee754_powf+0x1ba>
 800fd5a:	2401      	movs	r4, #1
 800fd5c:	e75d      	b.n	800fc1a <__ieee754_powf+0x25a>
 800fd5e:	bf00      	nop
 800fd60:	0801081b 	.word	0x0801081b
 800fd64:	00000000 	.word	0x00000000
 800fd68:	3f7ffff7 	.word	0x3f7ffff7
 800fd6c:	7149f2ca 	.word	0x7149f2ca
 800fd70:	3f800007 	.word	0x3f800007
 800fd74:	3eaaaaab 	.word	0x3eaaaaab
 800fd78:	3fb8aa3b 	.word	0x3fb8aa3b
 800fd7c:	36eca570 	.word	0x36eca570
 800fd80:	3fb8aa00 	.word	0x3fb8aa00
 800fd84:	4b800000 	.word	0x4b800000
 800fd88:	001cc471 	.word	0x001cc471
 800fd8c:	005db3d6 	.word	0x005db3d6
 800fd90:	0801087c 	.word	0x0801087c
 800fd94:	fffff000 	.word	0xfffff000
 800fd98:	3e6c3255 	.word	0x3e6c3255
 800fd9c:	3e53f142 	.word	0x3e53f142
 800fda0:	3e8ba305 	.word	0x3e8ba305
 800fda4:	3edb6db7 	.word	0x3edb6db7
 800fda8:	3f19999a 	.word	0x3f19999a
 800fdac:	3f76384f 	.word	0x3f76384f
 800fdb0:	3f763800 	.word	0x3f763800
 800fdb4:	369dc3a0 	.word	0x369dc3a0
 800fdb8:	0801088c 	.word	0x0801088c
 800fdbc:	08010884 	.word	0x08010884
 800fdc0:	3338aa3c 	.word	0x3338aa3c
 800fdc4:	f040 8092 	bne.w	800feec <__ieee754_powf+0x52c>
 800fdc8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800fdc0 <__ieee754_powf+0x400>
 800fdcc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fdd0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800fdd4:	eef4 6ac7 	vcmpe.f32	s13, s14
 800fdd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fddc:	f73f aef6 	bgt.w	800fbcc <__ieee754_powf+0x20c>
 800fde0:	15db      	asrs	r3, r3, #23
 800fde2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800fde6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fdea:	4103      	asrs	r3, r0
 800fdec:	4423      	add	r3, r4
 800fdee:	4949      	ldr	r1, [pc, #292]	; (800ff14 <__ieee754_powf+0x554>)
 800fdf0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fdf4:	3a7f      	subs	r2, #127	; 0x7f
 800fdf6:	4111      	asrs	r1, r2
 800fdf8:	ea23 0101 	bic.w	r1, r3, r1
 800fdfc:	ee07 1a10 	vmov	s14, r1
 800fe00:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800fe04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800fe08:	f1c2 0217 	rsb	r2, r2, #23
 800fe0c:	4110      	asrs	r0, r2
 800fe0e:	2c00      	cmp	r4, #0
 800fe10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fe14:	bfb8      	it	lt
 800fe16:	4240      	neglt	r0, r0
 800fe18:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800fe1c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800ff18 <__ieee754_powf+0x558>
 800fe20:	ee17 3a10 	vmov	r3, s14
 800fe24:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800fe28:	f023 030f 	bic.w	r3, r3, #15
 800fe2c:	ee07 3a10 	vmov	s14, r3
 800fe30:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe34:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800fe38:	eddf 7a38 	vldr	s15, [pc, #224]	; 800ff1c <__ieee754_powf+0x55c>
 800fe3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe40:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800fe44:	eddf 6a36 	vldr	s13, [pc, #216]	; 800ff20 <__ieee754_powf+0x560>
 800fe48:	eeb0 0a67 	vmov.f32	s0, s15
 800fe4c:	eea7 0a26 	vfma.f32	s0, s14, s13
 800fe50:	eeb0 6a40 	vmov.f32	s12, s0
 800fe54:	eea7 6a66 	vfms.f32	s12, s14, s13
 800fe58:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fe5c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800fe60:	eddf 6a30 	vldr	s13, [pc, #192]	; 800ff24 <__ieee754_powf+0x564>
 800fe64:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800ff28 <__ieee754_powf+0x568>
 800fe68:	eea7 6a26 	vfma.f32	s12, s14, s13
 800fe6c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800ff2c <__ieee754_powf+0x56c>
 800fe70:	eee6 6a07 	vfma.f32	s13, s12, s14
 800fe74:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800ff30 <__ieee754_powf+0x570>
 800fe78:	eea6 6a87 	vfma.f32	s12, s13, s14
 800fe7c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800ff34 <__ieee754_powf+0x574>
 800fe80:	eee6 6a07 	vfma.f32	s13, s12, s14
 800fe84:	eeb0 6a40 	vmov.f32	s12, s0
 800fe88:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800fe8c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800fe90:	eeb0 7a46 	vmov.f32	s14, s12
 800fe94:	ee77 6a66 	vsub.f32	s13, s14, s13
 800fe98:	ee20 6a06 	vmul.f32	s12, s0, s12
 800fe9c:	eee0 7a27 	vfma.f32	s15, s0, s15
 800fea0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800fea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fea8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800feac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800feb0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800feb4:	ee10 3a10 	vmov	r3, s0
 800feb8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800febc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fec0:	da1a      	bge.n	800fef8 <__ieee754_powf+0x538>
 800fec2:	f000 f8b1 	bl	8010028 <scalbnf>
 800fec6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800feca:	e5cd      	b.n	800fa68 <__ieee754_powf+0xa8>
 800fecc:	4a1a      	ldr	r2, [pc, #104]	; (800ff38 <__ieee754_powf+0x578>)
 800fece:	4293      	cmp	r3, r2
 800fed0:	dd02      	ble.n	800fed8 <__ieee754_powf+0x518>
 800fed2:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800ff3c <__ieee754_powf+0x57c>
 800fed6:	e67b      	b.n	800fbd0 <__ieee754_powf+0x210>
 800fed8:	d108      	bne.n	800feec <__ieee754_powf+0x52c>
 800feda:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fede:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800fee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fee6:	f6ff af7b 	blt.w	800fde0 <__ieee754_powf+0x420>
 800feea:	e7f2      	b.n	800fed2 <__ieee754_powf+0x512>
 800feec:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800fef0:	f73f af76 	bgt.w	800fde0 <__ieee754_powf+0x420>
 800fef4:	2000      	movs	r0, #0
 800fef6:	e78f      	b.n	800fe18 <__ieee754_powf+0x458>
 800fef8:	ee00 3a10 	vmov	s0, r3
 800fefc:	e7e3      	b.n	800fec6 <__ieee754_powf+0x506>
 800fefe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ff02:	e5b1      	b.n	800fa68 <__ieee754_powf+0xa8>
 800ff04:	eeb0 0a68 	vmov.f32	s0, s17
 800ff08:	e5ae      	b.n	800fa68 <__ieee754_powf+0xa8>
 800ff0a:	eeb0 0a48 	vmov.f32	s0, s16
 800ff0e:	e5ab      	b.n	800fa68 <__ieee754_powf+0xa8>
 800ff10:	2600      	movs	r6, #0
 800ff12:	e590      	b.n	800fa36 <__ieee754_powf+0x76>
 800ff14:	007fffff 	.word	0x007fffff
 800ff18:	3f317218 	.word	0x3f317218
 800ff1c:	35bfbe8c 	.word	0x35bfbe8c
 800ff20:	3f317200 	.word	0x3f317200
 800ff24:	3331bb4c 	.word	0x3331bb4c
 800ff28:	b5ddea0e 	.word	0xb5ddea0e
 800ff2c:	388ab355 	.word	0x388ab355
 800ff30:	bb360b61 	.word	0xbb360b61
 800ff34:	3e2aaaab 	.word	0x3e2aaaab
 800ff38:	43160000 	.word	0x43160000
 800ff3c:	0da24260 	.word	0x0da24260

0800ff40 <__ieee754_sqrtf>:
 800ff40:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ff44:	4770      	bx	lr

0800ff46 <fabsf>:
 800ff46:	ee10 3a10 	vmov	r3, s0
 800ff4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ff4e:	ee00 3a10 	vmov	s0, r3
 800ff52:	4770      	bx	lr

0800ff54 <finitef>:
 800ff54:	b082      	sub	sp, #8
 800ff56:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ff5a:	9801      	ldr	r0, [sp, #4]
 800ff5c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ff60:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ff64:	bfac      	ite	ge
 800ff66:	2000      	movge	r0, #0
 800ff68:	2001      	movlt	r0, #1
 800ff6a:	b002      	add	sp, #8
 800ff6c:	4770      	bx	lr
	...

0800ff70 <rintf>:
 800ff70:	ee10 2a10 	vmov	r2, s0
 800ff74:	b513      	push	{r0, r1, r4, lr}
 800ff76:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ff7a:	397f      	subs	r1, #127	; 0x7f
 800ff7c:	2916      	cmp	r1, #22
 800ff7e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800ff82:	dc47      	bgt.n	8010014 <rintf+0xa4>
 800ff84:	b32b      	cbz	r3, 800ffd2 <rintf+0x62>
 800ff86:	2900      	cmp	r1, #0
 800ff88:	ee10 3a10 	vmov	r3, s0
 800ff8c:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 800ff90:	da21      	bge.n	800ffd6 <rintf+0x66>
 800ff92:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800ff96:	425b      	negs	r3, r3
 800ff98:	4921      	ldr	r1, [pc, #132]	; (8010020 <rintf+0xb0>)
 800ff9a:	0a5b      	lsrs	r3, r3, #9
 800ff9c:	0d12      	lsrs	r2, r2, #20
 800ff9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ffa2:	0512      	lsls	r2, r2, #20
 800ffa4:	4313      	orrs	r3, r2
 800ffa6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800ffaa:	ee07 3a90 	vmov	s15, r3
 800ffae:	edd1 6a00 	vldr	s13, [r1]
 800ffb2:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800ffb6:	ed8d 7a01 	vstr	s14, [sp, #4]
 800ffba:	eddd 7a01 	vldr	s15, [sp, #4]
 800ffbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ffc2:	ee17 3a90 	vmov	r3, s15
 800ffc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ffca:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800ffce:	ee00 3a10 	vmov	s0, r3
 800ffd2:	b002      	add	sp, #8
 800ffd4:	bd10      	pop	{r4, pc}
 800ffd6:	4a13      	ldr	r2, [pc, #76]	; (8010024 <rintf+0xb4>)
 800ffd8:	410a      	asrs	r2, r1
 800ffda:	4213      	tst	r3, r2
 800ffdc:	d0f9      	beq.n	800ffd2 <rintf+0x62>
 800ffde:	0854      	lsrs	r4, r2, #1
 800ffe0:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 800ffe4:	d006      	beq.n	800fff4 <rintf+0x84>
 800ffe6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ffea:	ea23 0304 	bic.w	r3, r3, r4
 800ffee:	fa42 f101 	asr.w	r1, r2, r1
 800fff2:	430b      	orrs	r3, r1
 800fff4:	4a0a      	ldr	r2, [pc, #40]	; (8010020 <rintf+0xb0>)
 800fff6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800fffa:	ed90 7a00 	vldr	s14, [r0]
 800fffe:	ee07 3a90 	vmov	s15, r3
 8010002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010006:	edcd 7a01 	vstr	s15, [sp, #4]
 801000a:	ed9d 0a01 	vldr	s0, [sp, #4]
 801000e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010012:	e7de      	b.n	800ffd2 <rintf+0x62>
 8010014:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010018:	d3db      	bcc.n	800ffd2 <rintf+0x62>
 801001a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801001e:	e7d8      	b.n	800ffd2 <rintf+0x62>
 8010020:	08010894 	.word	0x08010894
 8010024:	007fffff 	.word	0x007fffff

08010028 <scalbnf>:
 8010028:	ee10 3a10 	vmov	r3, s0
 801002c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8010030:	d025      	beq.n	801007e <scalbnf+0x56>
 8010032:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8010036:	d302      	bcc.n	801003e <scalbnf+0x16>
 8010038:	ee30 0a00 	vadd.f32	s0, s0, s0
 801003c:	4770      	bx	lr
 801003e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8010042:	d122      	bne.n	801008a <scalbnf+0x62>
 8010044:	4b2a      	ldr	r3, [pc, #168]	; (80100f0 <scalbnf+0xc8>)
 8010046:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80100f4 <scalbnf+0xcc>
 801004a:	4298      	cmp	r0, r3
 801004c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010050:	db16      	blt.n	8010080 <scalbnf+0x58>
 8010052:	ee10 3a10 	vmov	r3, s0
 8010056:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801005a:	3a19      	subs	r2, #25
 801005c:	4402      	add	r2, r0
 801005e:	2afe      	cmp	r2, #254	; 0xfe
 8010060:	dd15      	ble.n	801008e <scalbnf+0x66>
 8010062:	ee10 3a10 	vmov	r3, s0
 8010066:	eddf 7a24 	vldr	s15, [pc, #144]	; 80100f8 <scalbnf+0xd0>
 801006a:	eddf 6a24 	vldr	s13, [pc, #144]	; 80100fc <scalbnf+0xd4>
 801006e:	2b00      	cmp	r3, #0
 8010070:	eeb0 7a67 	vmov.f32	s14, s15
 8010074:	bfb8      	it	lt
 8010076:	eef0 7a66 	vmovlt.f32	s15, s13
 801007a:	ee27 0a27 	vmul.f32	s0, s14, s15
 801007e:	4770      	bx	lr
 8010080:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8010100 <scalbnf+0xd8>
 8010084:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010088:	4770      	bx	lr
 801008a:	0dd2      	lsrs	r2, r2, #23
 801008c:	e7e6      	b.n	801005c <scalbnf+0x34>
 801008e:	2a00      	cmp	r2, #0
 8010090:	dd06      	ble.n	80100a0 <scalbnf+0x78>
 8010092:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010096:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801009a:	ee00 3a10 	vmov	s0, r3
 801009e:	4770      	bx	lr
 80100a0:	f112 0f16 	cmn.w	r2, #22
 80100a4:	da1a      	bge.n	80100dc <scalbnf+0xb4>
 80100a6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80100aa:	4298      	cmp	r0, r3
 80100ac:	ee10 3a10 	vmov	r3, s0
 80100b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80100b4:	dd0a      	ble.n	80100cc <scalbnf+0xa4>
 80100b6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80100f8 <scalbnf+0xd0>
 80100ba:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80100fc <scalbnf+0xd4>
 80100be:	eef0 7a40 	vmov.f32	s15, s0
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	bf18      	it	ne
 80100c6:	eeb0 0a47 	vmovne.f32	s0, s14
 80100ca:	e7db      	b.n	8010084 <scalbnf+0x5c>
 80100cc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8010100 <scalbnf+0xd8>
 80100d0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8010104 <scalbnf+0xdc>
 80100d4:	eef0 7a40 	vmov.f32	s15, s0
 80100d8:	2b00      	cmp	r3, #0
 80100da:	e7f3      	b.n	80100c4 <scalbnf+0x9c>
 80100dc:	3219      	adds	r2, #25
 80100de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80100e2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80100e6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010108 <scalbnf+0xe0>
 80100ea:	ee07 3a10 	vmov	s14, r3
 80100ee:	e7c4      	b.n	801007a <scalbnf+0x52>
 80100f0:	ffff3cb0 	.word	0xffff3cb0
 80100f4:	4c000000 	.word	0x4c000000
 80100f8:	7149f2ca 	.word	0x7149f2ca
 80100fc:	f149f2ca 	.word	0xf149f2ca
 8010100:	0da24260 	.word	0x0da24260
 8010104:	8da24260 	.word	0x8da24260
 8010108:	33000000 	.word	0x33000000

0801010c <_init>:
 801010c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801010e:	bf00      	nop
 8010110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010112:	bc08      	pop	{r3}
 8010114:	469e      	mov	lr, r3
 8010116:	4770      	bx	lr

08010118 <_fini>:
 8010118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801011a:	bf00      	nop
 801011c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801011e:	bc08      	pop	{r3}
 8010120:	469e      	mov	lr, r3
 8010122:	4770      	bx	lr
